[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000511, 8), (unique, 0x10000511, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x12433a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eca1c, 4) , (const, 0x0, 4)]
[(ram, 0x4eca1c, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eca1c, 4) , (const, 0x0, 4)]
[(ram, 0x4eca1c, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x12435d, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a9, 4)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x3a9, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x3a9, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x3a9, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x3a9, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x3a9, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x3a9, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x3a9, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x3a9, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x3a9, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x3a9, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x3a9, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x3a9, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3a9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a9, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x10000309, 8), (unique, 0x10000309, 8) PTRSUB (const, 0x0, 8) , (const, 0x4eca1c, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000459, 8) COPY (ram, 0x4f04f8, 8), (ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x1243c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f0500, 8) , (const, 0x0, 8), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[ ---  CBRANCH (ram, 0x124618, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f04f8, 8) , (const, 0x0, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (const, 0x0, 8)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x20, 8)]
[(stack, 0xffffffffffffff60, 4) COPY (ram, 0x2bbd70, 4)]
[(stack, 0xffffffffffffff64, 4) COPY (ram, 0x2bbd74, 4)]
[(stack, 0xffffffffffffff68, 4) COPY (ram, 0x2bbd78, 4)]
[(stack, 0xffffffffffffff6c, 4) COPY (ram, 0x2bbd7c, 4)]
[(stack, 0xffffffffffffff98, 8) COPY (unique, 0x10000519, 8), (unique, 0x10000519, 8) CAST (register, 0x18, 8), (register, 0x18, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (unique, 0x10000521, 8), (unique, 0x10000521, 8) CAST (register, 0x18, 8), (register, 0x18, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff70, 4) COPY (ram, 0x2bbd80, 4)]
[(stack, 0xffffffffffffff74, 4) COPY (ram, 0x2bbd84, 4)]
[(stack, 0xffffffffffffff78, 4) COPY (ram, 0x2bbd88, 4)]
[(stack, 0xffffffffffffff7c, 4) COPY (ram, 0x2bbd8c, 4)]
[ ---  BRANCH (ram, 0x124452, 1)]
[(register, 0x20, 8) PTRADD (unique, 0x10000331, 8) , (unique, 0x1000012a, 8) , (const, 0x1, 8), (unique, 0x10000331, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000349, 8) , (unique, 0x1000012a, 8) , (const, 0x1, 8), (unique, 0x10000349, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000541, 8) , (const, 0x124403, 8), (unique, 0x10000541, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100003e9, 8) , (unique, 0x100003e1, 8) , (const, 0x1, 8), (unique, 0x100003e9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x100003e1, 8) INT_ADD (unique, 0x1000012a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x3a, 1), (register, 0x0, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x10000459, 8) , (register, 0x0, 8), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000551, 8) , (unique, 0x10000435, 4), (unique, 0x10000551, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x10000435, 4) COPY (ram, 0x2bbd70, 4), (register, 0x0, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x10000459, 8) , (register, 0x0, 8), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0xe9, 4), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0xbd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000559, 8) , (unique, 0x10000439, 4), (unique, 0x10000559, 8) CAST (unique, 0x10000230, 8), (unique, 0x10000230, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8), (unique, 0x10000439, 4) COPY (ram, 0x2bbd74, 4), (register, 0x0, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x10000459, 8) , (register, 0x0, 8), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0xe9, 4), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0xbd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000561, 8) , (unique, 0x1000043d, 4), (unique, 0x10000561, 8) CAST (unique, 0x10000238, 8), (unique, 0x10000238, 8) PTRADD (register, 0x0, 8) , (const, 0x9, 8) , (const, 0x1, 8), (unique, 0x1000043d, 4) COPY (ram, 0x2bbd78, 4), (register, 0x0, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x10000459, 8) , (register, 0x0, 8), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0xe9, 4), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0xbd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000569, 8) , (unique, 0x10000441, 4), (unique, 0x10000569, 8) CAST (unique, 0x10000240, 8), (unique, 0x10000240, 8) PTRADD (register, 0x0, 8) , (const, 0xd, 8) , (const, 0x1, 8), (unique, 0x10000441, 4) COPY (ram, 0x2bbd7c, 4), (register, 0x0, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x10000459, 8) , (register, 0x0, 8), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0xe9, 4), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0xbd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000571, 8) , (ram, 0x2bbd80, 4), (unique, 0x10000571, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x11, 8) , (const, 0x1, 8), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7b7, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7b5, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7b3, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7b2, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x100, 4), (register, 0x0, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x10000459, 8) , (register, 0x0, 8), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0xe9, 4), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0xbd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000579, 8) , (unique, 0x10000445, 4), (unique, 0x10000579, 8) CAST (unique, 0x10000248, 8), (unique, 0x10000248, 8) PTRADD (register, 0x0, 8) , (const, 0x15, 8) , (const, 0x1, 8), (unique, 0x10000445, 4) COPY (ram, 0x2bbd84, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7b7, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7b5, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7b3, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7b2, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x100, 4), (register, 0x0, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x10000459, 8) , (register, 0x0, 8), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0xe9, 4), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0xbd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000581, 8) , (unique, 0x10000449, 4), (unique, 0x10000581, 8) CAST (unique, 0x10000250, 8), (unique, 0x10000250, 8) PTRADD (register, 0x0, 8) , (const, 0x19, 8) , (const, 0x1, 8), (unique, 0x10000449, 4) COPY (ram, 0x2bbd88, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7b7, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7b5, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7b3, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7b2, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x100, 4), (register, 0x0, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x10000459, 8) , (register, 0x0, 8), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0xe9, 4), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0xbd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000589, 8) , (unique, 0x1000044d, 4), (unique, 0x10000589, 8) CAST (unique, 0x10000258, 8), (unique, 0x10000258, 8) PTRADD (register, 0x0, 8) , (const, 0x1d, 8) , (const, 0x1, 8), (unique, 0x1000044d, 4) COPY (ram, 0x2bbd8c, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7b7, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7b5, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7b3, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7b2, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x100, 4), (register, 0x0, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x10000459, 8) , (register, 0x0, 8), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0xe9, 4), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0xbd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000591, 8) , (const, 0x124427, 8), (unique, 0x10000591, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000401, 8) , (unique, 0x100003f9, 8) , (const, 0x1, 8), (unique, 0x10000401, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x100003f9, 8) INT_ADD (unique, 0x1000012a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe9, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbd, 4)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x10a, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x7c2, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x7c0, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x7be, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x7bd, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x7b7, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x7b5, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x7b3, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x7b2, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x100, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0xe9, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0xbd, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x10a, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x7c2, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x7c0, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x7be, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x7bd, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x7b7, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x7b5, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x7b3, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x7b2, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x100, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0xe9, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0xbd, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x10a, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x7c2, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x7c0, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x7be, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x7bd, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x7b7, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x7b5, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x7b3, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x7b2, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x100, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0xe9, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0xbd, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x10a, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x7c2, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x7c0, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x7be, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x7bd, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x7b7, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x7b5, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x7b3, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x7b2, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x100, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0xe9, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0xbd, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x10a, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7c2, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7c0, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7be, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7bd, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7b7, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7b5, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7b3, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x7b2, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x100, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0xe9, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0xbd, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x10a, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7c2, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7c0, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7be, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7bd, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7b7, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7b5, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7b3, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x7b2, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x100, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0xe9, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0xbd, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x10a, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7c2, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7c0, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7be, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7bd, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7b7, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7b5, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7b3, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x7b2, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x100, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0xe9, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0xbd, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x10a, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7c2, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7c0, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7be, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7bd, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7b7, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7b5, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7b3, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x7b2, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x100, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0xe9, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0xbd, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x10a, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x7c2, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x7c0, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x7be, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x7bd, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x7b7, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x7b5, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x7b3, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x7b2, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x100, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0xe9, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0xbd, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x10a, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x7c2, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x7c0, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x7be, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x7bd, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x7b7, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x7b5, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x7b3, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x7b2, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x100, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0xe9, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0xbd, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x10a, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x7c2, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x7c0, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x7be, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x7bd, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x7b7, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x7b5, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x7b3, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x7b2, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x100, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0xe9, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0xbd, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x10a, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x7c2, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x7c0, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x7be, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x7bd, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x7b7, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x7b5, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x7b3, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x7b2, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x100, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0xe9, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0xbd, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x10a, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7c2, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7c0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7be, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7bd, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7b7, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7b5, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7b3, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7b2, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x100, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xe9, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x10a, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xe9, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x10a, 4), (stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0xe9, 4), (stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x10a, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xe9, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x10a, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xe9, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x10a, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xe9, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x10a, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xe9, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x10a, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xe9, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x10a, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xe9, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x10a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x109, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe9, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe8, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xbd, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x1243d8, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x10a, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x109, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xe9, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xe8, 4), (stack, 0xffffffffffffffa0, 8) COPY (unique, 0x10000529, 8), (unique, 0x10000529, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x21, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x10a, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x109, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe9, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe8, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10a, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x109, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xe9, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xe8, 4), (stack, 0xffffffffffffffb8, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (unique, 0x1000012a, 8), (unique, 0x10000531, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000012a, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (ram, 0x4f04f8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x109, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbd, 4)]
[ ---  CBRANCH (ram, 0x124688, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x210b50, 8) , (const, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (stack, 0xffffffffffffffb8, 8)]
[ ---  BRANCH (ram, 0x124452, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000599, 8) , (const, 0x12443b, 8), (unique, 0x10000599, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000419, 8) , (unique, 0x10000411, 8) , (const, 0x1, 8), (unique, 0x10000419, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x10000411, 8) INT_ADD (unique, 0x1000012a, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x119, 4)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x119, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x119, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x119, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x119, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x119, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x119, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x119, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x119, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x119, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x119, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x119, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x119, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x118, 4)]
[(unique, 0x10000491, 8) COPY (register, 0x20, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0xa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005a1, 8) , (const, 0x12445c, 8), (unique, 0x100005a1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000491, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x133, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x133, 4), (ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x133, 4), (ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x133, 4), (ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x133, 4), (ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x133, 4), (ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x133, 4), (ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x133, 4), (ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x133, 4), (ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x133, 4), (ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x133, 4), (ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x133, 4), (ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x133, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x133, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x133, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x133, 4), (stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x133, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x133, 4), (stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x133, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x133, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x133, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x133, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x133, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x133, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x133, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000501, 8) , (const, 0x132, 4), (unique, 0x10000501, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x133, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x132, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x133, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x132, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x133, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x132, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x133, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x132, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x133, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x132, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x124670, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0x100005a9, 8) , (const, 0x3a, 4), (unique, 0x100005a9, 8) CAST (unique, 0x10000481, 8), (unique, 0x10000481, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x10000499, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x0, 8)]
[(unique, 0x100004b1, 8) COPY (register, 0x0, 8)]
[(unique, 0x100004c9, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x1, 4)]
[(unique, 0x100004d5, 4) COPY (register, 0x18, 4), (register, 0x18, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x1244a7, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x100004c9, 4) , (unique, 0x100004cd, 4) , (unique, 0x100004d1, 4)]
[(register, 0x18, 4) MULTIEQUAL (unique, 0x100004d5, 4) , (unique, 0x100004d9, 4) , (unique, 0x100004dd, 4)]
[ ---  CBRANCH (ram, 0x124480, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000499, 8) , (unique, 0x100004a1, 8) , (unique, 0x100004a9, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100004b1, 8) , (unique, 0x100004b9, 8) , (unique, 0x100004c1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005c1, 8) , (const, 0x124496, 8), (unique, 0x100005c1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x335, 4)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x335, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x335, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x335, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x335, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x335, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x335, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x335, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x335, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x335, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x335, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x335, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x335, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x335, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x335, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x335, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x335, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x335, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x335, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x335, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x335, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x335, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x335, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x334, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x335, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x334, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x335, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x334, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x335, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x334, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x335, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x334, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x335, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x334, 4), (stack, 0xffffffffffffffb0, 8) CAST (unique, 0x100005b9, 8), (unique, 0x100005b9, 8) INT_OR (unique, 0x10000293, 8) , (unique, 0x1000029b, 8), (unique, 0x1000029b, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x10000293, 8) INT_AND (unique, 0x100005b1, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100005b1, 8) CAST (stack, 0xffffffffffffffb0, 8), (register, 0x0, 4) INT_ADD (register, 0xb8, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x335, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x334, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x335, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x334, 4)]
[ ---  CBRANCH (ram, 0x1244cc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0x3800, 8) , (const, 0x3a, 4), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x100004a9, 8) COPY (register, 0xa0, 8)]
[(unique, 0x100004c1, 8) COPY (register, 0x0, 8)]
[(unique, 0x100004d1, 4) COPY (register, 0x18, 4)]
[(unique, 0x100004dd, 4) COPY (register, 0x18, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005c9, 8) , (const, 0x1244c1, 8), (unique, 0x100005c9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x167, 4)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x167, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x167, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x167, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x167, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x167, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x167, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x167, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x167, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x167, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x167, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x167, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x167, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x167, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x167, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x167, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x167, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x167, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x167, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x167, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x167, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x167, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x167, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x167, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x167, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x167, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x167, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x167, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x167, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x167, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x166, 4)]
[(unique, 0x100004a1, 8) COPY (register, 0xa0, 8)]
[(unique, 0x100004b9, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (register, 0x38, 8) , (const, 0x3a, 4), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(unique, 0x100004cd, 4) COPY (register, 0xb8, 4)]
[(unique, 0x100004d9, 4) COPY (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x1244a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (register, 0x38, 8) , (const, 0x3a, 4), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffb0, 8) CAST (unique, 0x100005d9, 8), (unique, 0x100005d9, 8) INT_OR (unique, 0x100002a4, 8) , (unique, 0x100002ac, 8), (unique, 0x100002ac, 8) INT_ZEXT (register, 0x18, 4), (unique, 0x100002a4, 8) INT_AND (unique, 0x100005d1, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100005d1, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x100004e1, 4) COPY (register, 0xb8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) INT_SEXT (unique, 0x100005e1, 4), (unique, 0x100005e1, 4) CAST (register, 0xb0, 4), (register, 0xb0, 4) MULTIEQUAL (unique, 0x100004e1, 4) , (register, 0x18, 4)]
[(register, 0xb0, 8) INT_MULT (register, 0xb0, 8) , (stack, 0xffffffffffffff90, 8), (register, 0xb0, 8) INT_SEXT (unique, 0x100005e5, 4), (unique, 0x100005e5, 4) CAST (register, 0xb0, 4), (register, 0xb0, 4) INT_SUB (register, 0xb0, 4) , (const, 0x1, 4), (register, 0xb0, 4) MULTIEQUAL (unique, 0x100004e1, 4) , (register, 0x18, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x38, 8) INT_LEFT (register, 0x38, 8) , (const, 0x4, 4), (register, 0x38, 8) INT_SEXT (stack, 0xffffffffffffffb0, 4), (stack, 0xffffffffffffffb0, 4) SUBPIECE (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 8) COPY (const, 0x1, 8)]
[(register, 0x38, 8) COPY (const, 0x20, 8)]
[ ---  BRANCH (ram, 0x1244e3, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005f1, 8) , (const, 0x1244f2, 8), (unique, 0x100005f1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d8, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x1d8, 4), (ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x1d8, 4), (ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x1d8, 4), (ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x1d8, 4), (ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x1d8, 4), (ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x1d8, 4), (ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x1d8, 4), (ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x1d8, 4), (ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x1d8, 4), (ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x1d8, 4), (ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x1d8, 4), (ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x1d8, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1d8, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1d8, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x1d8, 4), (stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x1d8, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x1d8, 4), (stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1d8, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1d8, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x1d8, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1d8, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000461, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100005f9, 8), (unique, 0x100005f9, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (register, 0xb0, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (unique, 0x100005e9, 8), (unique, 0x100005e9, 8) CAST (stack, 0xffffffffffffffa0, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (register, 0xa0, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  CBRANCH (ram, 0x124608, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000601, 8) , (const, 0x0, 8), (unique, 0x10000601, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100005f9, 8), (unique, 0x100005f9, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (register, 0xb0, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (unique, 0x100005e9, 8), (unique, 0x100005e9, 8) CAST (stack, 0xffffffffffffffa0, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (register, 0xa0, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa0, 8) PTRSUB (const, 0x0, 8) , (const, 0x2bbd60, 8)]
[ ---  BRANCH (ram, 0x1245ef, 1)]
[(unique, 0x3400, 8) CAST (unique, 0x10000619, 8), (unique, 0x10000619, 8) INT_ADD (unique, 0x10000611, 8) , (unique, 0x10000609, 8), (unique, 0x10000611, 8) CAST (register, 0x0, 8), (unique, 0x10000609, 8) INT_MULT (unique, 0x10000379, 8) , (const, 0x8, 8), (unique, 0x10000379, 8) INT_MULT (register, 0xa0, 8) , (const, 0x2, 8), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000621, 8) , (const, 0x124531, 8), (unique, 0x10000621, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x224, 4)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x224, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x224, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x224, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x224, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x224, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x224, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x224, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x224, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x224, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x224, 4), (ram, 0x4f04f0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x224, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x224, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x224, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x224, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x224, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x224, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x224, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x224, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x224, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x224, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x224, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x224, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x223, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x224, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x223, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x224, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x223, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x224, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x223, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x224, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x223, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x224, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x223, 4), (stack, 0xffffffffffffffb0, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x224, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x223, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x224, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x223, 4)]
[ ---  CBRANCH (ram, 0x1246cc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x19eb60, 8) , (unique, 0x10000629, 8) , (unique, 0x100002e1, 8) , (unique, 0x10000631, 8), (unique, 0x10000631, 8) CAST (unique, 0x3100, 8), (unique, 0x10000629, 8) CAST (unique, 0x10000461, 8), (unique, 0x100002e1, 8) COPY (const, 0x2b52f6, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000639, 8) , (unique, 0x100002b9, 8), (unique, 0x10000639, 8) CAST (register, 0x20, 8), (unique, 0x100002b9, 8) PTRSUB (const, 0x0, 8) , (const, 0x1246eb, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x320, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x320, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x320, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x320, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x320, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x320, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x320, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x320, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x31f, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100002d1, 8) , (unique, 0x100002c9, 8) , (const, 0x1ef, 4) , (unique, 0x100002f9, 8), (unique, 0x100002f9, 8) COPY (const, 0x2bafd0, 8), (unique, 0x100002d1, 8) COPY (const, 0x2b387a, 8), (unique, 0x100002c9, 8) COPY (const, 0x2b386d, 8)]
[(ram, 0x2bbd70, 4) COPY (ram, 0x2bbd70, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x320, 4)]
[(ram, 0x2bbd74, 4) COPY (ram, 0x2bbd74, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x320, 4)]
[(ram, 0x2bbd78, 4) COPY (ram, 0x2bbd78, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x320, 4)]
[(ram, 0x2bbd7c, 4) COPY (ram, 0x2bbd7c, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x320, 4)]
[(ram, 0x2bbd80, 4) COPY (ram, 0x2bbd80, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x320, 4)]
[(ram, 0x2bbd84, 4) COPY (ram, 0x2bbd84, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x320, 4)]
[(ram, 0x2bbd88, 4) COPY (ram, 0x2bbd88, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x320, 4)]
[(ram, 0x2bbd8c, 4) COPY (ram, 0x2bbd8c, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x320, 4)]
[(ram, 0x4eca1c, 4) COPY (ram, 0x4eca1c, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x320, 4)]
[(ram, 0x4f04f0, 8) COPY (ram, 0x4f04f0, 8), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x320, 4)]
[(ram, 0x4f04f8, 8) COPY (ram, 0x4f04f8, 8), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x320, 4)]
[(ram, 0x4f0500, 8) COPY (ram, 0x4f0500, 8), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x320, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x320, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0xa0, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000489, 8) COPY (unique, 0x10000641, 8), (unique, 0x10000641, 8) CAST (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(unique, 0x10000471, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x23e, 4), (ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x23e, 4), (ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x23e, 4), (ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x23e, 4), (ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x23e, 4), (ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x23e, 4), (ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x23e, 4), (ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x23e, 4), (ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x23e, 4), (ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x23e, 4), (ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x23e, 4), (ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x23e, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x23e, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (unique, 0x10000649, 8), (unique, 0x10000649, 8) CAST (register, 0xb8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000489, 8) , (register, 0x18, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x124570, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1246a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000651, 8) , (const, 0x1246c7, 8), (unique, 0x10000651, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x317, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x317, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x317, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x317, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x317, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x317, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x317, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x317, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x317, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x316, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x317, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x316, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x317, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x316, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x317, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x316, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x317, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x316, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x317, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x316, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x317, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x316, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x317, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x316, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100002d9, 8) , (unique, 0x100002c1, 8) , (const, 0x1f5, 4) , (unique, 0x100002f1, 8), (unique, 0x100002f1, 8) COPY (const, 0x2bafd0, 8), (unique, 0x100002d9, 8) COPY (const, 0x2b3887, 8), (unique, 0x100002c1, 8) COPY (const, 0x2b386d, 8)]
[(ram, 0x2bbd70, 4) COPY (ram, 0x2bbd70, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x317, 4)]
[(ram, 0x2bbd74, 4) COPY (ram, 0x2bbd74, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x317, 4)]
[(ram, 0x2bbd78, 4) COPY (ram, 0x2bbd78, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x317, 4)]
[(ram, 0x2bbd7c, 4) COPY (ram, 0x2bbd7c, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x317, 4)]
[(ram, 0x2bbd80, 4) COPY (ram, 0x2bbd80, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x317, 4)]
[(ram, 0x2bbd84, 4) COPY (ram, 0x2bbd84, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x317, 4)]
[(ram, 0x2bbd88, 4) COPY (ram, 0x2bbd88, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x317, 4)]
[(ram, 0x2bbd8c, 4) COPY (ram, 0x2bbd8c, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x317, 4)]
[(ram, 0x4eca1c, 4) COPY (ram, 0x4eca1c, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x317, 4)]
[(ram, 0x4f04f0, 8) COPY (ram, 0x4f04f0, 8), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x317, 4)]
[(ram, 0x4f04f8, 8) COPY (ram, 0x4f04f8, 8), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x317, 4)]
[(ram, 0x4f0500, 8) COPY (ram, 0x4f0500, 8), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x317, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x317, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000659, 8) , (const, 0x124569, 8), (unique, 0x10000659, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x25d, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x25d, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x25d, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x25d, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x25d, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x25d, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x25d, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x25d, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x25d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x25c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x25c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x25c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x25c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x25c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x25c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x25c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25c, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x10000669, 8), (unique, 0x10000669, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x10000661, 8), (unique, 0x10000661, 8) CALL (ram, 0x121230, 8) , (register, 0xb8, 8) , (register, 0xa8, 8) , (unique, 0x10000471, 8)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x261, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x25d, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x261, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x25d, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x261, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x25d, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x261, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x25d, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x261, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x25d, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x261, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x25d, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x261, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x25d, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x261, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x25d, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x261, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x25d, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x261, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x25d, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x261, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x25d, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x261, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x25d, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x261, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x25d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x10000661, 8), (unique, 0x10000661, 8) CALL (ram, 0x121230, 8) , (register, 0xb8, 8) , (register, 0xa8, 8) , (unique, 0x10000471, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000671, 8) , (const, 0x12457b, 8), (unique, 0x10000671, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x266, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x266, 4), (ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x266, 4), (ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x266, 4), (ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x266, 4), (ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x266, 4), (ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x266, 4), (ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x266, 4), (ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x266, 4), (ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x266, 4), (ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x266, 4), (ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x266, 4), (ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x266, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x266, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x266, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x266, 4), (stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x266, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x266, 4), (stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x266, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x266, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x266, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x266, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x266, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x265, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x266, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x265, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x266, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x265, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x266, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x265, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x266, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x265, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x266, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x265, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x266, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x265, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000479, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x266, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x265, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x124588, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121050, 8) , (unique, 0x10000679, 8) , (register, 0xb0, 8), (unique, 0x10000679, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x3100, 8)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x276, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x276, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x276, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x276, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x276, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x276, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x276, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x276, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x276, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x276, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x276, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x276, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x276, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x298, 4), (ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x298, 4), (ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x298, 4), (ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x298, 4), (ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x298, 4), (ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x298, 4), (ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x298, 4), (ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x298, 4), (ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x298, 4), (ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x298, 4), (ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x298, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x298, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x10, 8) CAST (unique, 0x10000689, 8), (unique, 0x10000689, 8) PTRADD (register, 0x0, 8) , (unique, 0x100001b8, 8) , (const, 0x1, 8), (unique, 0x100001b8, 8) INT_2COMP (unique, 0x10000681, 8), (unique, 0x10000681, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100004f1, 8) COPY (ram, 0x4f04f0, 8), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x298, 4), (ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[ ---  CBRANCH (ram, 0x1245a2, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x10000451, 8) , (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10000689, 8), (unique, 0x10000689, 8) PTRADD (register, 0x0, 8) , (unique, 0x100001b8, 8) , (const, 0x1, 8), (unique, 0x100001b8, 8) INT_2COMP (unique, 0x10000681, 8), (unique, 0x10000681, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (unique, 0x10000451, 8) COPY (ram, 0x4f04f0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(unique, 0x100004f9, 8) COPY (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1)]
[(unique, 0x3100, 8) CAST (unique, 0x10000691, 8), (unique, 0x10000691, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (const, 0x1, 4)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000699, 8) , (const, 0x1245c3, 8), (unique, 0x10000699, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2c3, 4)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x2c3, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x2ab, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x2c3, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x2ab, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x2c3, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x2ab, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x2c3, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x2ab, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x2c3, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x2ab, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x2c3, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x2ab, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x2c3, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x2ab, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x2c3, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x2ab, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x2c3, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x2ab, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x2c3, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x2ab, 4), (ram, 0x4f04f0, 8) MULTIEQUAL (unique, 0x100004f1, 8) , (unique, 0x100004f9, 8)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x2c3, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x2ab, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x2c3, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x2ab, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2c3, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2c3, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2c2, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2c3, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2c2, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2c3, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2c2, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2c3, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2c2, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2c3, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2c2, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2c3, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2c2, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2c3, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2c2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c2, 4)]
[ ---  CBRANCH (ram, 0x124548, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x19eb60, 8) , (const, 0x0, 8) , (unique, 0x100002e9, 8) , (unique, 0x100006a1, 8), (unique, 0x100006a1, 8) CAST (unique, 0x10000479, 8), (unique, 0x100002e9, 8) COPY (const, 0x2b52f6, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) CAST (unique, 0x100006b9, 8), (unique, 0x100006b9, 8) INT_ADD (unique, 0x100006b1, 8) , (unique, 0x100006a9, 8), (unique, 0x100006b1, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x100006a9, 8) INT_MULT (unique, 0x100003a1, 8) , (const, 0x8, 8), (unique, 0x100003a1, 8) INT_MULT (register, 0xa0, 8) , (const, 0x2, 8), (register, 0xa0, 8) INT_SEXT (register, 0xa0, 4)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x30a, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x307, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x30a, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x307, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x30a, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x307, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x30a, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x307, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x30a, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x307, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x30a, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x307, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x30a, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x307, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x30a, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x307, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x30a, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x307, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x30a, 4), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x307, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x30a, 4), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x307, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x30a, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x307, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0xa0, 8) CAST (unique, 0x100006b9, 8), (unique, 0x100006b9, 8) INT_ADD (unique, 0x100006b1, 8) , (unique, 0x100006a9, 8), (unique, 0x100006b1, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x100006a9, 8) INT_MULT (unique, 0x100003a1, 8) , (const, 0x8, 8), (unique, 0x100003a1, 8) INT_MULT (register, 0xa0, 8) , (const, 0x2, 8), (register, 0xa0, 8) INT_SEXT (register, 0xa0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006c9, 8) , (const, 0x1245fe, 8), (unique, 0x100006c9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x30f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x30f, 4), (ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x30f, 4), (ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x30f, 4), (ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x30f, 4), (ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x30f, 4), (ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x30f, 4), (ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x30f, 4), (ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x30f, 4), (ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x30f, 4), (ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x30f, 4), (ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x30f, 4), (ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (unique, 0x10000469, 8) , (const, 0x30f, 4), (unique, 0x10000469, 8) COPY (unique, 0x100006c1, 8), (unique, 0x100006c1, 8) CAST (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x30f, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x30f, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x30f, 4), (stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x30f, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x30f, 4), (stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x30f, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x30f, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x30f, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x30f, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x30f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x30e, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x30f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x30e, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x30f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x30e, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x30f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x30e, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x30f, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x30e, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x30f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x30e, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x30f, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x30e, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x30f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x30e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x124367, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x4eca1c, 4) MULTIEQUAL (ram, 0x4eca1c, 4) , (ram, 0x4eca1c, 4)]
[(ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x12437b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100004e9, 4) COPY (unique, 0x10000429, 4), (unique, 0x10000429, 4) INT_ADD (ram, 0x4eca1c, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x12439d, 1) , (unique, 0x1000042d, 1), (unique, 0x1000042d, 1) INT_NOTEQUAL (unique, 0x10000429, 4) , (const, 0x0, 4), (unique, 0x10000429, 4) INT_ADD (ram, 0x4eca1c, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006d1, 8) , (const, 0x124396, 8), (unique, 0x100006d1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffff78, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9c, 4)]
[(ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x9c, 4)]
[(ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x9c, 4)]
[(ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x9c, 4)]
[(ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x9c, 4)]
[(ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x9c, 4)]
[(ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x9c, 4)]
[(ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x9c, 4)]
[(ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x9c, 4)]
[(ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x9c, 4)]
[(ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x9c, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x9c, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x9c, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x9c, 4), (stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x9c, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x9c, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x9c, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x9c, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x9c, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x9c, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x9c, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x9c, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x9c, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x9c, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x9c, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9c, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x9c, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x9b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9b, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x10000301, 8), (unique, 0x10000301, 8) PTRSUB (const, 0x0, 8) , (const, 0x4eca1c, 8)]
[(unique, 0x100004e5, 4) COPY (ram, 0x4eca1c, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x9c, 4), (ram, 0x4eca1c, 4) INT_ADD (ram, 0x4eca1c, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04f8, 8) MULTIEQUAL (ram, 0x4f04f8, 8) , (ram, 0x4f04f8, 8)]
[(ram, 0x4f04f0, 8) MULTIEQUAL (ram, 0x4f04f0, 8) , (ram, 0x4f04f0, 8)]
[(ram, 0x2bbd8c, 4) MULTIEQUAL (ram, 0x2bbd8c, 4) , (ram, 0x2bbd8c, 4)]
[(ram, 0x2bbd88, 4) MULTIEQUAL (ram, 0x2bbd88, 4) , (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd84, 4) MULTIEQUAL (ram, 0x2bbd84, 4) , (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd80, 4) MULTIEQUAL (ram, 0x2bbd80, 4) , (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd7c, 4) MULTIEQUAL (ram, 0x2bbd7c, 4) , (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd78, 4) MULTIEQUAL (ram, 0x2bbd78, 4) , (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd74, 4) MULTIEQUAL (ram, 0x2bbd74, 4) , (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd70, 4) MULTIEQUAL (ram, 0x2bbd70, 4) , (ram, 0x2bbd70, 4)]
[(ram, 0x4eca1c, 4) COPY (unique, 0x100004ed, 4), (unique, 0x100004ed, 4) MULTIEQUAL (unique, 0x100004e5, 4) , (unique, 0x100004e9, 4)]
[ ---  CBRANCH (ram, 0x1246c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100006d9, 8), (unique, 0x100006d9, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006e1, 8) , (const, 0x1246cc, 8), (unique, 0x100006e1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x8d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x8d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8d, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x8d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x8d, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8c, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x2bbd70, 4) COPY (ram, 0x2bbd70, 4), (ram, 0x2bbd70, 4) INDIRECT (ram, 0x2bbd70, 4) , (const, 0x8d, 4)]
[(ram, 0x2bbd74, 4) COPY (ram, 0x2bbd74, 4), (ram, 0x2bbd74, 4) INDIRECT (ram, 0x2bbd74, 4) , (const, 0x8d, 4)]
[(ram, 0x2bbd78, 4) COPY (ram, 0x2bbd78, 4), (ram, 0x2bbd78, 4) INDIRECT (ram, 0x2bbd78, 4) , (const, 0x8d, 4)]
[(ram, 0x2bbd7c, 4) COPY (ram, 0x2bbd7c, 4), (ram, 0x2bbd7c, 4) INDIRECT (ram, 0x2bbd7c, 4) , (const, 0x8d, 4)]
[(ram, 0x2bbd80, 4) COPY (ram, 0x2bbd80, 4), (ram, 0x2bbd80, 4) INDIRECT (ram, 0x2bbd80, 4) , (const, 0x8d, 4)]
[(ram, 0x2bbd84, 4) COPY (ram, 0x2bbd84, 4), (ram, 0x2bbd84, 4) INDIRECT (ram, 0x2bbd84, 4) , (const, 0x8d, 4)]
[(ram, 0x2bbd88, 4) COPY (ram, 0x2bbd88, 4), (ram, 0x2bbd88, 4) INDIRECT (ram, 0x2bbd88, 4) , (const, 0x8d, 4)]
[(ram, 0x2bbd8c, 4) COPY (ram, 0x2bbd8c, 4), (ram, 0x2bbd8c, 4) INDIRECT (ram, 0x2bbd8c, 4) , (const, 0x8d, 4)]
[(ram, 0x4eca1c, 4) COPY (ram, 0x4eca1c, 4), (ram, 0x4eca1c, 4) INDIRECT (ram, 0x4eca1c, 4) , (const, 0x8d, 4)]
[(ram, 0x4f04f0, 8) COPY (ram, 0x4f04f0, 8), (ram, 0x4f04f0, 8) INDIRECT (ram, 0x4f04f0, 8) , (const, 0x8d, 4)]
[(ram, 0x4f04f8, 8) COPY (ram, 0x4f04f8, 8), (ram, 0x4f04f8, 8) INDIRECT (ram, 0x4f04f8, 8) , (const, 0x8d, 4)]
[(ram, 0x4f0500, 8) COPY (ram, 0x4f0500, 8), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x8d, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x8d, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x2bbd70, 4) COPY (ram, 0x2bbd70, 4)]
[(ram, 0x2bbd74, 4) COPY (ram, 0x2bbd74, 4)]
[(ram, 0x2bbd78, 4) COPY (ram, 0x2bbd78, 4)]
[(ram, 0x2bbd7c, 4) COPY (ram, 0x2bbd7c, 4)]
[(ram, 0x2bbd80, 4) COPY (ram, 0x2bbd80, 4)]
[(ram, 0x2bbd84, 4) COPY (ram, 0x2bbd84, 4)]
[(ram, 0x2bbd88, 4) COPY (ram, 0x2bbd88, 4)]
[(ram, 0x2bbd8c, 4) COPY (ram, 0x2bbd8c, 4)]
[(ram, 0x4eca1c, 4) COPY (ram, 0x4eca1c, 4)]
[(ram, 0x4f04f0, 8) COPY (ram, 0x4f04f0, 8)]
[(ram, 0x4f04f8, 8) COPY (ram, 0x4f04f8, 8)]
[(ram, 0x4f0500, 8) COPY (ram, 0x4f0500, 8)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8)]
