[(register, 0x18, 8) INT_SEXT (register, 0x10, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000a97, 8), (unique, 0x10000a97, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x10000a7f, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x12dab0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x73d, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x73d, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x73d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x73d, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12dabc, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000a7f, 8) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x73d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x73d, 4)]
[ ---  CBRANCH (ram, 0x12dad1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1426e0, 8) , (unique, 0x1000045e, 8), (unique, 0x1000045e, 8) COPY (const, 0x2b3adb, 8)]
[ ---  CBRANCH (ram, 0x12d98e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x76d, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x76d, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x76d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x76d, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12daee, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (register, 0x0, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x76d, 4)]
[ ---  CBRANCH (ram, 0x12db03, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1426e0, 8) , (register, 0x38, 8), (register, 0x38, 8) PTRADD (unique, 0x1000043e, 8) , (register, 0x38, 8) , (const, 0x1, 8), (unique, 0x1000043e, 8) COPY (const, 0x29cd00, 8), (register, 0x38, 8) INT_ZEXT (unique, 0x10000a9f, 1), (unique, 0x10000a9f, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x1000042e, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x1000042e, 8) PTRSUB (const, 0x0, 8) , (const, 0x29ccf0, 8), (register, 0x0, 8) INT_SEXT (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x12d98e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x78d, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x78d, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x78d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x78d, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12db0f, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (register, 0x0, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x78d, 4)]
[ ---  CBRANCH (ram, 0x12db24, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1426e0, 8) , (unique, 0x10000466, 8), (unique, 0x10000466, 8) COPY (const, 0x2b3ae2, 8)]
[ ---  CBRANCH (ram, 0x12d98e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x2b596e, 8)]
[ ---  BRANCH (ram, 0x12d98e, 1)]
[(unique, 0x1000095f, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x48, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x48, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x48, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x48, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x48, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12d99d, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x48, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x48, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x48, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000a7f, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x48, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x48, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x48, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x48, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x48, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x48, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x48, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x12db38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (stack, 0xffffffffffffff90, 8) , (unique, 0x100004a6, 8), (unique, 0x100004a6, 8) COPY (const, 0x2b596e, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x57, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x57, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x57, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x57, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12d9b4, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x57, 4)]
[ ---  CBRANCH (ram, 0x12db38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x1000095f, 8) , (unique, 0x1000047e, 8), (unique, 0x1000047e, 8) COPY (const, 0x2b3d19, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x65, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x65, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x65, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x65, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12d9c4, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x65, 4)]
[ ---  CBRANCH (ram, 0x12da98, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (const, 0x100, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000095f, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x79, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x79, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x79, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x79, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12d9ea, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x79, 4)]
[ ---  CBRANCH (ram, 0x12da98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1a0400, 8) , (unique, 0x1000095f, 8) , (register, 0x0, 8) , (unique, 0x1000044e, 8) , (const, 0x4, 8), (unique, 0x1000044e, 8) PTRSUB (const, 0x0, 8) , (const, 0x29cda0, 8)]
[ ---  CBRANCH (ram, 0x12da70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x12da11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2e, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000095f, 8)]
[ ---  CBRANCH (ram, 0x12da98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2e, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000095f, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x726, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x726, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x726, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x726, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x726, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12da8f, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x726, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x726, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x726, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x726, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x726, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x726, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x726, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x726, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x726, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x726, 4)]
[ ---  CBRANCH (ram, 0x12da2a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1210c0, 8) , (unique, 0x1000095f, 8) , (const, 0x2f, 4) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x12da11, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x12df80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2e, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000095f, 8)]
[ ---  CBRANCH (ram, 0x12da05, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2e, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000095f, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x12da05, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000095f, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x12dfa0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000095f, 8) , (unique, 0x1000051e, 8) , (const, 0x1, 8), (unique, 0x1000051e, 8) INT_SUB (register, 0x0, 8) , (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x12da11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2e, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000095f, 8) , (unique, 0x100006a6, 8) , (const, 0x1, 8), (unique, 0x100006a6, 8) INT_SUB (register, 0x0, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x12da11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2e, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000095f, 8) , (unique, 0x100006ae, 8) , (const, 0x1, 8), (unique, 0x100006ae, 8) INT_SUB (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb3, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0xb3, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0xb3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12da21, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb3, 4)]
[ ---  CBRANCH (ram, 0x12dec8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1210c0, 8) , (unique, 0x1000095f, 8) , (const, 0x2f, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x12da98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000095f, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0xcc, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0xcc, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xcc, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x12db58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6a0, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x6a0, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x6a0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6a0, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12db5d, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x6a0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6a0, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000aa0, 8), (unique, 0x10000aa0, 8) CALL (ram, 0x134930, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd4, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0xd4, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0xd4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12da44, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd4, 4)]
[(unique, 0x100009bf, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x12de80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000aa8, 8), (unique, 0x10000aa8, 8) CALL (ram, 0x12e9e0, 8) , (register, 0x38, 8) , (register, 0x8, 8), (register, 0x38, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x109, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x109, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x109, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x109, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12de88, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x109, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x109, 4)]
[ ---  CBRANCH (ram, 0x12df50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000ab0, 8), (unique, 0x10000ab0, 8) CALL (ram, 0x134930, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11d, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x11d, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x11d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x11d, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12dea0, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (register, 0x0, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11d, 4)]
[(unique, 0x100009c7, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x12da4d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000ab8, 8), (unique, 0x10000ab8, 8) CALL (ram, 0x12e9e0, 8) , (register, 0x38, 8) , (unique, 0x3100, 8), (register, 0x38, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (const, 0x10, 8)]
[(register, 0xa0, 8) COPY (const, 0x2bb120, 8)]
[ ---  BRANCH (ram, 0x12db64, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x12df5f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (register, 0x0, 8)]
[(register, 0xa0, 8) COPY (const, 0x2bb120, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (const, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x12db6d, 1)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000054e, 8) , (unique, 0x100001c5, 8) , (const, 0x1, 8), (unique, 0x1000054e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100001c5, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000566, 8) , (unique, 0x100001c5, 8) , (const, 0x1, 8), (unique, 0x10000566, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100001c5, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000057e, 8) , (unique, 0x100001c5, 8) , (const, 0x1, 8), (unique, 0x1000057e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100001c5, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001c5, 8) , (const, 0x1, 8), (unique, 0x100001c5, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ad0, 8) , (const, 0x12db95, 8), (unique, 0x10000ad0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000766, 8) , (unique, 0x1000075e, 8) , (const, 0x1, 8), (unique, 0x10000766, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x1000075e, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100001c5, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ad8, 8) , (const, 0x12dbb1, 8), (unique, 0x10000ad8, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000077e, 8) , (unique, 0x10000776, 8) , (const, 0x1, 8), (unique, 0x1000077e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x10000776, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100001c5, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x178, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x178, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x16a, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x13e, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x178, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x16a, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x13e, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x178, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x16a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x13e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x178, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x177, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x169, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x12db75, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x178, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x177, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x169, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x178, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x177, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x16a, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x169, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x13e, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x178, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x177, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x169, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x178, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x177, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x169, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x178, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x177, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x169, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x178, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x177, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x169, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x178, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x177, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x169, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x178, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x177, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x169, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000977, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x178, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x177, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x169, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000096f, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x178, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x177, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x169, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x1000099f, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000536, 8) , (unique, 0x100001c5, 8) , (const, 0x1, 8), (unique, 0x10000536, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100001c5, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x12e0d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x135300, 8) , (register, 0x0, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8), (register, 0x0, 8) CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (unique, 0x10000967, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) CAST (unique, 0x10000ac8, 8), (unique, 0x10000ac8, 8) INT_ADD (unique, 0x10000ac0, 8) , (unique, 0x100001c5, 8), (unique, 0x10000ac0, 8) CAST (unique, 0x1000074e, 8), (unique, 0x1000074e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8), (unique, 0x100001c5, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8), (unique, 0x10000967, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ae8, 8) , (const, 0x0, 8), (unique, 0x10000ae8, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100008b3, 8) , (unique, 0x10000ae0, 8) , (const, 0x1, 8), (unique, 0x10000ae0, 8) CAST (unique, 0x100008f3, 8), (unique, 0x100008f3, 8) PTRADD (unique, 0x100008c3, 8) , (unique, 0x100001c5, 8) , (const, 0x1, 8), (unique, 0x100008c3, 8) PTRSUB (register, 0x20, 8) , (const, 0x0, 8), (unique, 0x100008b3, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff58, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x3400, 8), (register, 0x20, 8) CAST (unique, 0x10000af8, 8), (unique, 0x10000af8, 8) INT_ADD (unique, 0x10000af0, 8) , (unique, 0x100008fb, 8), (unique, 0x10000af0, 8) CAST (unique, 0x10000903, 8), (unique, 0x10000903, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (unique, 0x100008fb, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0x8, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000446, 8) , (register, 0x10, 8) , (const, 0x1, 8), (unique, 0x10000446, 8) COPY (const, 0x29cd00, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000436, 8) , (register, 0xb8, 8) , (const, 0x1, 8), (unique, 0x10000436, 8) PTRSUB (const, 0x0, 8) , (const, 0x29ccf0, 8), (register, 0xb8, 8) INT_SEXT (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (stack, 0xffffffffffffffa0, 8), (register, 0x20, 8) CAST (unique, 0x10000b08, 8), (unique, 0x10000b08, 8) INT_ADD (unique, 0x10000b00, 8) , (unique, 0x100001c5, 8), (unique, 0x10000b00, 8) CAST (unique, 0x1000038e, 8), (unique, 0x1000038e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (stack, 0xffffffffffffffb8, 8), (register, 0x20, 8) CAST (unique, 0x10000b18, 8), (unique, 0x10000b18, 8) INT_ADD (unique, 0x10000b10, 8) , (unique, 0x100001c5, 8), (unique, 0x10000b10, 8) CAST (unique, 0x10000396, 8), (unique, 0x10000396, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff40, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (stack, 0xffffffffffffffb0, 8), (register, 0x20, 8) CAST (unique, 0x10000b28, 8), (unique, 0x10000b28, 8) INT_ADD (unique, 0x10000b20, 8) , (unique, 0x1000086a, 8), (unique, 0x10000b20, 8) CAST (unique, 0x10000872, 8), (unique, 0x10000872, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff30, 8), (unique, 0x1000086a, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0x8, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x12dc17, 8), (register, 0x20, 8) CAST (unique, 0x10000b38, 8), (unique, 0x10000b38, 8) INT_ADD (unique, 0x10000b30, 8) , (unique, 0x100001c5, 8), (unique, 0x10000b30, 8) CAST (unique, 0x100003a6, 8), (unique, 0x100003a6, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c7, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x1c7, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x1c7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c7, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1a0, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffff70, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000446, 8) , (register, 0x10, 8) , (const, 0x1, 8), (unique, 0x10000446, 8) COPY (const, 0x29cd00, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000436, 8) , (register, 0xb8, 8) , (const, 0x1, 8), (unique, 0x10000436, 8) PTRSUB (const, 0x0, 8) , (const, 0x29ccf0, 8), (register, 0xb8, 8) INT_SEXT (register, 0x10, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1a0, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1a0, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1a0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1a0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1a0, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1a0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a0, 4)]
[(unique, 0x10000957, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1c7, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1a0, 4)]
[(unique, 0x1000094b, 4) COPY (stack, 0xffffffffffffff7c, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1c7, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1c6, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1bf, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1ba, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1b5, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1b0, 4), (stack, 0xffffffffffffff7c, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x12e090, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000b40, 8), (unique, 0x10000b40, 8) CALL (ram, 0x134c10, 8) , (unique, 0x3400, 8) , (register, 0xa0, 8) , (unique, 0x1000094f, 8) , (register, 0x0, 4) , (unique, 0x1000096f, 8) , (unique, 0x10000977, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100004d6, 8) , (register, 0xb8, 8) , (const, 0x8, 8), (unique, 0x100004d6, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f0520, 8), (unique, 0x1000094f, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1a0, 4), (register, 0xb8, 8) INT_SEXT (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b50, 8) , (const, 0x1, 8), (unique, 0x10000b50, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100008bb, 8) , (unique, 0x10000b48, 8) , (const, 0x1, 8), (unique, 0x10000b48, 8) CAST (unique, 0x10000913, 8), (unique, 0x10000913, 8) PTRADD (unique, 0x100008db, 8) , (unique, 0x100001c5, 8) , (const, 0x1, 8), (unique, 0x100008db, 8) PTRSUB (register, 0x20, 8) , (const, 0x0, 8), (unique, 0x100008bb, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff58, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (stack, 0xffffffffffffff70, 8), (register, 0x20, 8) CAST (unique, 0x10000b60, 8), (unique, 0x10000b60, 8) INT_ADD (unique, 0x10000b58, 8) , (unique, 0x1000091b, 8), (unique, 0x10000b58, 8) CAST (unique, 0x10000923, 8), (unique, 0x10000923, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (unique, 0x1000091b, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x65d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (stack, 0xffffffffffffffa0, 8), (register, 0x20, 8) CAST (unique, 0x10000b70, 8), (unique, 0x10000b70, 8) INT_ADD (unique, 0x10000b68, 8) , (unique, 0x100001c5, 8), (unique, 0x10000b68, 8) CAST (unique, 0x100003de, 8), (unique, 0x100003de, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x664, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x65d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (stack, 0xffffffffffffffb8, 8), (register, 0x20, 8) CAST (unique, 0x10000b80, 8), (unique, 0x10000b80, 8) INT_ADD (unique, 0x10000b78, 8) , (unique, 0x100001c5, 8), (unique, 0x10000b78, 8) CAST (unique, 0x100003e6, 8), (unique, 0x100003e6, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff40, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x669, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x664, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x65d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (stack, 0xffffffffffffffb0, 8), (register, 0x20, 8) CAST (unique, 0x10000b90, 8), (unique, 0x10000b90, 8) INT_ADD (unique, 0x10000b88, 8) , (unique, 0x1000089a, 8), (unique, 0x10000b88, 8) CAST (unique, 0x100008a2, 8), (unique, 0x100008a2, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff30, 8), (unique, 0x1000089a, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0x8, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x66f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x669, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x664, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x65d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x12e0bf, 8), (register, 0x20, 8) CAST (unique, 0x10000ba0, 8), (unique, 0x10000ba0, 8) INT_ADD (unique, 0x10000b98, 8) , (unique, 0x100001c5, 8), (unique, 0x10000b98, 8) CAST (unique, 0x100003f6, 8), (unique, 0x100003f6, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x678, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x678, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x678, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x678, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x678, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x677, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x674, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x66f, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x669, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x664, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x65d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x678, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x677, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x674, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x66f, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x669, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x664, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x65d, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x678, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x677, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x674, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x66f, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x669, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x664, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x65d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x678, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x677, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x674, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x66f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x669, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x664, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x65d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x678, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x677, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x674, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x66f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x669, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x664, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x65d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x678, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x677, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x674, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x66f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x669, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x664, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x65d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x678, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x677, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x674, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x66f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x669, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x664, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x65d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x678, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x677, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x674, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x66f, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x669, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x664, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x65d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x678, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x677, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x674, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x66f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x669, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x664, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x65d, 4)]
[(unique, 0x100009b7, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x12dc2b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000ba8, 8), (unique, 0x10000ba8, 8) CALL (ram, 0x134c10, 8) , (unique, 0x3400, 8) , (register, 0xa0, 8) , (unique, 0x10000957, 8) , (unique, 0x1000094b, 4) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x12dfc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 4) , (const, 0x0, 4), (register, 0x90, 4) INT_AND (stack, 0xffffffffffffff7c, 4) , (const, 0x1, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000bb0, 8) , (const, 0x12dfc9, 8), (unique, 0x10000bb0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100007ae, 8) , (unique, 0x100007a6, 8) , (const, 0x1, 8), (unique, 0x100007ae, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100007a6, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x647, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x647, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x647, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x647, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x647, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x646, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x647, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x646, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x647, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x646, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x647, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x646, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x647, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x646, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x647, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x646, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x647, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x646, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x647, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x646, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  BRANCH (ram, 0x12dc35, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12dfd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000bb8, 8), (unique, 0x10000bb8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000bc0, 8) , (const, 0x12dfda, 8), (unique, 0x10000bc0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100007c6, 8) , (unique, 0x100007be, 8) , (const, 0x1, 8), (unique, 0x100007c6, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100007be, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x640, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x640, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x640, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x640, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x640, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x63f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x640, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x63f, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x640, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x63f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x640, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x63f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x640, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x63f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x640, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x63f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x640, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x63f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x640, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x63f, 4)]
[ ---  CALL (ram, 0x12e3b0, 8) , (register, 0x0, 8) , (register, 0x10, 4)]
[ ---  BRANCH (ram, 0x12dc41, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12dfe0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000bc8, 8), (unique, 0x10000bc8, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x12e024, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0xa8, 4) COPY (const, 0x0, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0xa8, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x12e010, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x12dff8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000bd0, 8), (unique, 0x10000bd0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x8, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000bd8, 8) , (const, 0x12e01e, 8), (unique, 0x10000bd8, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100007de, 8) , (unique, 0x100007d6, 8) , (const, 0x1, 8), (unique, 0x100007de, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100007d6, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5e6, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x5e6, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x5e6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5e6, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5e6, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5e5, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5e6, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5e5, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x5e6, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x5e5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5e6, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5e5, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5e6, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5e5, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x5e6, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x5e5, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x5e6, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x5e5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5e6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5e5, 4)]
[ ---  CALL (ram, 0x12e3b0, 8) , (register, 0x38, 8) , (register, 0x10, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8)]
[ ---  BRANCH (ram, 0x12dff8, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12e030, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000be0, 8), (unique, 0x10000be0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x10, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x12e030, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x61b, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x61b, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x61b, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x38, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100009af, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x12e0d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000be8, 8), (unique, 0x10000be8, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x0, 8) , (unique, 0x100006f6, 8) , (const, 0x8, 8), (unique, 0x100006f6, 8) INT_ADD (register, 0xa8, 8) , (const, 0x4, 8), (register, 0xa8, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000bf0, 8), (unique, 0x10000bf0, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x12dc4e, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x12de28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x12e0fe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0xa0, 8) , (unique, 0x1000062e, 8) , (const, 0x8, 8), (unique, 0x1000062e, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000bf8, 8), (unique, 0x10000bf8, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000456, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x10000456, 8) PTRSUB (const, 0x0, 8) , (const, 0x29cdc0, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c00, 8) , (unique, 0x10000426, 8), (unique, 0x10000c00, 8) CAST (register, 0x20, 8), (unique, 0x10000426, 8) PTRSUB (const, 0x0, 8) , (const, 0x12e11d, 8), (register, 0x20, 8) PTRADD (unique, 0x100007f6, 8) , (unique, 0x100007ee, 8) , (const, 0x1, 8), (unique, 0x100007f6, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100007ee, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5b6, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5b5, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5b6, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5b5, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x5b6, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x5b5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5b6, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5b5, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5b6, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5b5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5b6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5b5, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000476, 8) , (unique, 0x1000046e, 8) , (const, 0x11e, 4) , (unique, 0x100004be, 8), (unique, 0x100004be, 8) COPY (const, 0x2bb110, 8), (unique, 0x10000476, 8) COPY (const, 0x2b3af4, 8), (unique, 0x1000046e, 8) COPY (const, 0x2b3ae7, 8)]
[(ram, 0x4ea9c8, 8) COPY (ram, 0x4ea9c8, 8), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x5b6, 4)]
[(ram, 0x4ea9d8, 8) COPY (ram, 0x4ea9d8, 8), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x5b6, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5b6, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c08, 8) , (const, 0x12dc7c, 8), (unique, 0x10000c08, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000796, 8) , (unique, 0x1000078e, 8) , (const, 0x1, 8), (unique, 0x10000796, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x1000078e, 8) INT_ADD (unique, 0x100001c5, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x22b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x22b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x22b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x22b, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x22b, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x22b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x22b, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x22b, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x22b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x22a, 4)]
[(unique, 0x10000943, 8) COPY (ram, 0x4ea9d8, 8), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x22b, 4)]
[(unique, 0x10000933, 8) COPY (ram, 0x4ea9c8, 8), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x22b, 4)]
[(unique, 0x10000596, 8) INT_ADD (unique, 0x10000221, 8) , (unique, 0x100001c5, 8), (unique, 0x10000221, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x21, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0xbd80, 8)]
[(register, 0xa8, 8) CAST (unique, 0x10000c18, 8), (unique, 0x10000c18, 8) INT_AND (unique, 0x10000c10, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000c10, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000646, 8) , (const, 0x1, 8), (unique, 0x10000646, 8) INT_ADD (unique, 0x1000058e, 8) , (const, 0xf, 8), (unique, 0x1000058e, 8) INT_ADD (unique, 0x10000221, 8) , (unique, 0x100001c5, 8), (unique, 0x10000221, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x21, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x12e0eb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x5ae, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x5ae, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5ae, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xa8, 8) , (const, 0x2f, 1)]
[ ---  BRANCH (ram, 0x12dd1f, 1)]
[(register, 0x80, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000a0f, 8) COPY (register, 0xa8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xb8, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000a0f, 8) , (unique, 0x10000a17, 8)]
[(register, 0x0, 1) INT_AND (unique, 0x10000413, 1) , (const, 0x1, 1), (unique, 0x10000413, 1) SUBPIECE (register, 0x0, 2) , (const, 0x0, 4), (register, 0x0, 2) INT_RIGHT (unique, 0xbc00, 2) , (const, 0x3, 4), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000c20, 8), (unique, 0x10000c20, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000933, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x38, 8) , (const, 0x2, 8), (register, 0x38, 8) INT_SEXT (register, 0x10, 1), (register, 0x10, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x12dce6, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0x10000c28, 1) , (const, 0x34, 1), (unique, 0x10000c28, 1) CAST (unique, 0x3100, 1), (unique, 0x3100, 1) INT_SUB (register, 0x10, 1) , (const, 0x2c, 1), (register, 0x10, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x0, 1) INT_OR (register, 0x0, 1) , (unique, 0x1000035f, 1), (unique, 0x1000035f, 1) INT_AND (unique, 0x10000360, 1) , (const, 0x1, 1), (unique, 0x10000360, 1) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4), (register, 0x98, 8) INT_RIGHT (const, 0x8000000004007, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x3100, 1) , (const, 0x3f, 1)]
[(unique, 0x10000a8f, 4) COPY (register, 0x8, 4), (register, 0x8, 4) INT_ADD (register, 0x80, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x12dee0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) MULTIEQUAL (register, 0x0, 1) , (register, 0x0, 1)]
[(unique, 0x10000a07, 8) COPY (register, 0x30, 8)]
[(unique, 0x10000a5b, 4) COPY (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x12dcfd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0x2f, 1)]
[ ---  CBRANCH (ram, 0x12dd26, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x3, 4)]
[(unique, 0x3100, 4) INT_ADD (register, 0x80, 4) , (const, 0x2, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x59c, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x59c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x59c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x2f, 1)]
[(register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000a5f, 4) COPY (register, 0x8, 4)]
[ ---  BRANCH (ram, 0x12dcfd, 1)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x30b, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x30b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x30b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x0, 1), (register, 0x0, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000c29, 8), (unique, 0x10000c29, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000943, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x38, 8) , (const, 0x4, 8)]
[(unique, 0x100009ff, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000a57, 4) COPY (register, 0x80, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x80, 4) MULTIEQUAL (unique, 0x10000a57, 4) , (unique, 0x10000a5b, 4) , (unique, 0x10000a5f, 4)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0x10000a8f, 4) , (unique, 0x10000a8f, 4) , (unique, 0x3100, 4)]
[(unique, 0x10000a17, 8) COPY (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x100009ff, 8) , (unique, 0x10000a07, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x12dcc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x12dd26, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x80, 4) , (const, 0x2, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x33c, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x33c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x33c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x2f, 1)]
[ ---  CBRANCH (ram, 0x12df73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x1, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x342, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x342, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x342, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(unique, 0x100009f7, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x0, 1), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000a17, 8) , (unique, 0x100009f7, 8) , (register, 0x30, 8) , (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c31, 8) , (const, 0x12dd31, 8), (unique, 0x10000c31, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000064e, 8) , (const, 0x1, 8), (unique, 0x1000064e, 8) INT_ADD (unique, 0x10000596, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x348, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x348, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x345, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x348, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x345, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x347, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x347, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x348, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x347, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x347, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x347, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x348, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x347, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x348, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x347, 4)]
[(unique, 0x1000093b, 8) COPY (ram, 0x4ea9c8, 8), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x348, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x345, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(unique, 0x1000065e, 8) INT_ADD (unique, 0x10000254, 8) , (unique, 0x10000221, 8), (unique, 0x10000254, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x21, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000666, 8) , (const, 0x1, 8), (unique, 0x10000666, 8) INT_ADD (unique, 0x10000254, 8) , (unique, 0x10000221, 8), (unique, 0x10000254, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x21, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000066e, 8) , (const, 0x1, 8), (unique, 0x1000066e, 8) INT_ADD (unique, 0x10000254, 8) , (unique, 0x10000221, 8), (unique, 0x10000254, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x21, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0x38, 8) CAST (unique, 0x10000c41, 8), (unique, 0x10000c41, 8) INT_AND (unique, 0x10000c39, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000c39, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000676, 8) , (const, 0x1, 8), (unique, 0x10000676, 8) INT_ADD (unique, 0x10000656, 8) , (const, 0xf, 8), (unique, 0x10000656, 8) INT_ADD (unique, 0x10000254, 8) , (unique, 0x10000221, 8), (unique, 0x10000254, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x21, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x12e0df, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x57f, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x57f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x57f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x2f, 1)]
[ ---  BRANCH (ram, 0x12ddce, 1)]
[(register, 0x30, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000a3f, 8) COPY (register, 0x38, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000a3f, 8) , (unique, 0x10000a47, 8)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(register, 0x18, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (register, 0x18, 8)]
[(register, 0x0, 1) INT_AND (unique, 0x10000418, 1) , (const, 0x1, 1), (unique, 0x10000418, 1) SUBPIECE (register, 0x0, 2) , (const, 0x0, 4), (register, 0x0, 2) INT_RIGHT (unique, 0xbc00, 2) , (const, 0x3, 4), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000c49, 8), (unique, 0x10000c49, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x1000093b, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x88, 8) , (const, 0x2, 8), (register, 0x88, 8) INT_SEXT (register, 0x10, 1), (register, 0x10, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x12dd96, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0x10000c51, 1) , (const, 0x34, 1), (unique, 0x10000c51, 1) CAST (unique, 0x3100, 1), (unique, 0x3100, 1) INT_SUB (register, 0x10, 1) , (const, 0x2c, 1), (register, 0x10, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x0, 1) INT_OR (register, 0x0, 1) , (unique, 0x10000363, 1), (unique, 0x10000363, 1) INT_AND (unique, 0x10000364, 1) , (const, 0x1, 1), (unique, 0x10000364, 1) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_RIGHT (const, 0x8000000004007, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x3100, 1) , (const, 0x3f, 1)]
[(unique, 0x10000a93, 4) COPY (register, 0x8, 4), (register, 0x8, 4) INT_ADD (register, 0x30, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x12df10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) MULTIEQUAL (register, 0x0, 1) , (register, 0x0, 1)]
[(unique, 0x10000a37, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000a6f, 4) COPY (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x12ddad, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0x2f, 1)]
[ ---  CBRANCH (ram, 0x12ddd5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x3, 4)]
[(unique, 0x3100, 4) INT_ADD (register, 0x30, 4) , (const, 0x2, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x56d, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x56d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x56d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (const, 0x2f, 1)]
[(register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000a73, 4) COPY (register, 0x8, 4)]
[ ---  BRANCH (ram, 0x12ddad, 1)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x427, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x427, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x427, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (register, 0x0, 1), (register, 0x0, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000c52, 8), (unique, 0x10000c52, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000943, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x88, 8) , (const, 0x4, 8)]
[(unique, 0x10000a2f, 8) COPY (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000a6b, 4) COPY (register, 0x30, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x30, 4) MULTIEQUAL (unique, 0x10000a6b, 4) , (unique, 0x10000a6f, 4) , (unique, 0x10000a73, 4)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0x10000a93, 4) , (unique, 0x10000a93, 4) , (unique, 0x3100, 4)]
[(unique, 0x10000a47, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000a2f, 8) , (unique, 0x10000a37, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x12dd70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x12ddd5, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x30, 4) , (const, 0x2, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x458, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x458, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x458, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (const, 0x2f, 1)]
[ ---  CBRANCH (ram, 0x12df6b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x1, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x45e, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x45e, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x45e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(unique, 0x10000a27, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x460, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x460, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x460, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (const, 0x0, 1), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000a47, 8) , (unique, 0x10000a27, 8) , (register, 0x80, 8) , (unique, 0x3100, 8)]
[(unique, 0x1000098f, 8) COPY (register, 0xa8, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x47e, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x47e, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x47e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x10, 1), (register, 0x10, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000c5a, 8), (unique, 0x10000c5a, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000943, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000098f, 8) , (unique, 0x10000997, 8)]
[(unique, 0x10000987, 8) COPY (register, 0x38, 8)]
[(unique, 0x10000997, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000098f, 8) , (unique, 0x10000997, 8)]
[ ---  CBRANCH (ram, 0x12dde0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x0, 1), (register, 0x10, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000c5a, 8), (unique, 0x10000c5a, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000943, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000098f, 8) , (unique, 0x10000997, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x4a0, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x4a0, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4a0, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x10, 1), (register, 0x10, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000c62, 8), (unique, 0x10000c62, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000943, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000097f, 8) , (unique, 0x10000987, 8)]
[(unique, 0x1000097f, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000097f, 8) , (unique, 0x10000987, 8)]
[ ---  CBRANCH (ram, 0x12de00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x0, 1), (register, 0x10, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000c62, 8), (unique, 0x10000c62, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000943, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000097f, 8) , (unique, 0x10000987, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c6a, 8) , (const, 0x12de1c, 8), (unique, 0x10000c6a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000067e, 8) , (const, 0x1, 8), (unique, 0x1000067e, 8) INT_ADD (unique, 0x1000065e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4a6, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x4a6, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x4a6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4a6, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4a6, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4a6, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x4a6, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4a6, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4a6, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x4a6, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4a6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4a5, 4)]
[(unique, 0x100009a7, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x12e0d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x123910, 8) , (register, 0x38, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x100009df, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000099f, 8) , (unique, 0x100009a7, 8) , (unique, 0x100009af, 8) , (unique, 0x100009b7, 8)]
[ ---  BRANCH (ram, 0x12da4d, 1)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000c72, 8), (unique, 0x10000c72, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x12e050, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c7a, 8) , (const, 0x12e05d, 8), (unique, 0x10000c7a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x50c, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x50c, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x50c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x50c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x50c, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x50c, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x50c, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x50c, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x50c, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x50c, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x50c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x50b, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121270, 8) , (unique, 0xbd80, 8) , (const, 0x2f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(unique, 0x10000a87, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121270, 8) , (unique, 0xbd80, 8) , (const, 0x2f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(unique, 0x10000807, 8) PTRADD (unique, 0x10000812, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8), (unique, 0x10000812, 8) MULTIEQUAL (unique, 0x10000a87, 8) , (unique, 0x10000807, 8)]
[ ---  CBRANCH (ram, 0x12e07a, 1) , (unique, 0x10000806, 1), (unique, 0x10000806, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000807, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c8a, 8) , (const, 0x12e085, 8), (unique, 0x10000c8a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x543, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x543, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x542, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x543, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x542, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x543, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x542, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x543, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x542, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x543, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x542, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x543, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x542, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x543, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x542, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x545, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x543, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x545, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x543, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x545, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x543, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xa0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x19d9f0, 8) , (unique, 0x10000807, 8) , (unique, 0x10000c92, 8), (unique, 0x10000c92, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (unique, 0x100002fe, 8) , (const, 0x1, 8), (unique, 0x100002fe, 8) INT_2COMP (unique, 0x10000c82, 8), (unique, 0x10000c82, 8) CAST (unique, 0x10000807, 8)]
[ ---  BRANCH (ram, 0x12de33, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12df40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffa0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x12de62, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c9a, 8) , (const, 0x12de53, 8), (unique, 0x10000c9a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4d3, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x4d3, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x4d3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4d3, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4d2, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4d3, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4d2, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x4d3, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x4d2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4d3, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4d2, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4d3, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4d2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4d3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4d2, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x12de62, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1210d0, 8) , (stack, 0xffffffffffffffa0, 8) , (unique, 0x1000048e, 8) , (unique, 0x10000ca2, 8), (unique, 0x10000ca2, 8) CAST (unique, 0x100004ce, 8), (unique, 0x100004ce, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ea960, 8), (unique, 0x1000048e, 8) COPY (const, 0x2b51af, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x4e4, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x4e4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4e4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000caa, 8) , (const, 0x1, 4), (unique, 0x10000caa, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x34, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100009cf, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x12da4d, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xfffffffe, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000cb2, 8), (unique, 0x10000cb2, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x30, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x501, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x501, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x501, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000cba, 8) , (register, 0x10, 4), (unique, 0x10000cba, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x30, 8) , (const, 0x1, 8), (register, 0x10, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x12da4d, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x6b7, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x6b7, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6b7, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000cc2, 8) , (const, 0x16, 4), (unique, 0x10000cc2, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x100009e7, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x12da4d, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x733, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x733, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x733, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (unique, 0x100004b6, 8), (unique, 0x100004b6, 8) COPY (const, 0x2b596e, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100004c6, 8) , (register, 0x18, 8) , (const, 0x8, 8), (unique, 0x100004c6, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ea960, 8)]
[ ---  BRANCH (ram, 0x12da4d, 1)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x100009bf, 8) , (unique, 0x100009c7, 8) , (unique, 0x100009cf, 8) , (unique, 0x100009cf, 8) , (unique, 0x100009df, 8) , (unique, 0x100009e7, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x12e0f9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000cca, 8), (unique, 0x10000cca, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000cd2, 8) , (const, 0x12e0fe, 8), (unique, 0x10000cd2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x102, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x101, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x102, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x101, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x102, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x101, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x102, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x101, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x102, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x101, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x102, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x101, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4ea9c8, 8) COPY (ram, 0x4ea9c8, 8), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x102, 4)]
[(ram, 0x4ea9d8, 8) COPY (ram, 0x4ea9d8, 8), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x102, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x102, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4ea9c8, 8) COPY (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) COPY (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
