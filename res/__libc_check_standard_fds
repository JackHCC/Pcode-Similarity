[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x402b40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x455d90, 8) , (const, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x402afe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x9, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000149, 8), (unique, 0x10000149, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16f, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x16f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x16f, 4)]
[ ---  CBRANCH (ram, 0x402ba0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x455ed0, 8) , (unique, 0x10000115, 8) , (const, 0x20001, 8) , (const, 0x0, 8), (unique, 0x10000115, 8) COPY (const, 0x49a342, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x189, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x189, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x189, 4)]
[ ---  CBRANCH (ram, 0x402ba0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x455300, 8) , (const, 0x1, 4) , (const, 0x0, 4) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x402ba0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff80, 4) , (const, 0xf000, 4)]
[ ---  CBRANCH (ram, 0x402afe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x107, 8)]
[ ---  BRANCH (ram, 0x402ba0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x39, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x39, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x39, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x402ba8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x455d90, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x402b18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x9, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000151, 8), (unique, 0x10000151, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x100, 4)]
[ ---  CBRANCH (ram, 0x402c10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) CALL (ram, 0x455ed0, 8) , (unique, 0x1000011d, 8) , (const, 0x20000, 8) , (const, 0x0, 8), (unique, 0x1000011d, 8) COPY (const, 0x49a34c, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x111, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x111, 4)]
[ ---  CBRANCH (ram, 0x402c10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x455300, 8) , (const, 0x1, 4) , (const, 0x1, 4) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x402c10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff80, 4) , (const, 0xf000, 4)]
[ ---  CBRANCH (ram, 0x402b18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x103, 8)]
[ ---  BRANCH (ram, 0x402c10, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x52, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x52, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x52, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x402c18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x455d90, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x402b32, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x9, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000159, 8), (unique, 0x10000159, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x91, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x91, 4)]
[ ---  CBRANCH (ram, 0x402c80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) CALL (ram, 0x455ed0, 8) , (unique, 0x10000125, 8) , (const, 0x20000, 8) , (const, 0x0, 8), (unique, 0x10000125, 8) COPY (const, 0x49a34c, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa2, 4)]
[ ---  CBRANCH (ram, 0x402c80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x455300, 8) , (const, 0x1, 4) , (const, 0x2, 4) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x402c80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff80, 4) , (const, 0xf000, 4)]
[ ---  CBRANCH (ram, 0x402b32, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x103, 8)]
[ ---  BRANCH (ram, 0x402c80, 1)]
[ ---  RETURN (const, 0x0, 8)]
