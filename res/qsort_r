[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000511, 8), (unique, 0x10000511, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x40fe58, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 8) , (const, 0x21, 8)]
[(register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (register, 0x10, 8), (register, 0xa0, 8) INT_MULT (register, 0x30, 8) , (const, 0x10, 8)]
[ ---  BRANCH (ram, 0x40fb86, 1)]
[(register, 0x30, 8) INT_MULT (register, 0x30, 8) , (register, 0x10, 8)]
[(unique, 0x100004e9, 8) COPY (register, 0x30, 8)]
[(unique, 0x100004f1, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x40fbf0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x3ff, 8) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x40fea0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77f0, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3e3, 4)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x3e3, 4)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x3e3, 4)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x3e3, 4)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x100004e9, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100004f1, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3e3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3e3, 4)]
[(register, 0x10, 8) COPY (const, 0x1fffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x40fec9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x454e50, 8) , (const, 0x55, 4)]
[(unique, 0x10000361, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x40fec5, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8)]
[(unique, 0x10000369, 8) COPY (register, 0x0, 8)]
[(register, 0x10, 8) INT_SRIGHT (register, 0x10, 8) , (const, 0x2, 4), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000361, 8) , (unique, 0x10000369, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x424, 4)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x424, 4)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x424, 4)]
[(ram, 0x4c77e8, 8) INDIRECT (register, 0x10, 8) , (const, 0x424, 4), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x424, 4)]
[(register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x454e50, 8) , (const, 0x1e, 4)]
[ ---  BRANCH (ram, 0x40fbfe, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x100004f1, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x100004e9, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100003e9, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x40fe80, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (register, 0x0, 8) , (ram, 0x4c77e8, 8), (register, 0x0, 8) INT_DIV (register, 0xa0, 8) , (unique, 0x10000519, 8), (unique, 0x10000519, 8) CAST (register, 0x30, 8), (register, 0x30, 8) INT_SEXT (ram, 0x4c77f0, 4), (ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8), (ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3ba, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3ba, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3ba, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3ba, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3ba, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3ba, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3ba, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3ba, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3ba, 4)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x3c4, 4), (ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x3ba, 4)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x3c4, 4), (ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x3ba, 4)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x3c4, 4), (ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x3ba, 4)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x3c4, 4), (ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x3ba, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (stack, 0xffffffffffffff90, 4), (unique, 0x4f00, 8) CAST (unique, 0x10000529, 8), (unique, 0x10000529, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffff90, 4) SUBPIECE (stack, 0xffffffffffffff90, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3ba, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3ba, 4), (stack, 0xffffffffffffff90, 8) INT_OR (unique, 0x1000021c, 8) , (unique, 0x10000224, 8), (unique, 0x10000224, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x1000021c, 8) INT_AND (stack, 0xffffffffffffff90, 8) , (const, 0xffffffff00000000, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000521, 8), (unique, 0x10000521, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[(unique, 0x10000381, 8) COPY (register, 0x20, 8)]
[(unique, 0x100003f1, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x40fe80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (register, 0xa0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3de, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x3de, 4), (ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x3de, 4), (ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x3de, 4), (ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x3de, 4), (ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x100003e9, 8) , (unique, 0x100003f1, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3de, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x4696a0, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff80, 8) , (register, 0x10, 8) , (register, 0x8, 8) , (register, 0x80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  BRANCH (ram, 0x40fe32, 1)]
[(register, 0x10, 8) PTRADD (unique, 0x1000029c, 8) , (unique, 0x100000ab, 8) , (const, 0x1, 8), (unique, 0x1000029c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100000ab, 8) INT_2COMP (register, 0xa0, 8), (register, 0xa0, 8) INT_AND (register, 0xa0, 8) , (const, 0xfffffffffffff000, 8), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x17, 8)]
[(unique, 0x100000cb, 4) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x17, 8)]
[(unique, 0x100004d9, 8) COPY (register, 0x20, 8)]
[(unique, 0x1000024b, 8) MULTIEQUAL (unique, 0x100004d9, 8) , (unique, 0x100004e1, 8)]
[(unique, 0x10000253, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x40fbc1, 1) , (unique, 0x10000242, 1), (unique, 0x10000242, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x10, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000024b, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000539, 8) , (unique, 0xbe00, 8), (unique, 0x10000539, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000531, 8), (unique, 0x10000531, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x1000024b, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000024b, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x100004e1, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000024b, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000253, 8) , (unique, 0x100000d3, 8) , (const, 0x1, 8), (unique, 0x100000d3, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100000cb, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x40fbd4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100000cb, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000549, 8) , (unique, 0xbe00, 8), (unique, 0x10000549, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000541, 8), (unique, 0x10000541, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x10000253, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x90, 8) CAST (unique, 0x10000559, 8), (unique, 0x10000559, 8) INT_AND (unique, 0x10000551, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000551, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10000253, 8) , (unique, 0x100002ac, 8) , (const, 0x1, 8), (unique, 0x100002ac, 8) INT_ADD (unique, 0x100000d3, 8) , (const, 0xf, 8)]
[(unique, 0x10000379, 8) COPY (register, 0x20, 8)]
[(unique, 0x100003f9, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x40fc4c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x100004f1, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x100004e9, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x100003f9, 8) , (unique, 0x100003f1, 8)]
[(ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[(ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) COPY (unique, 0x10000389, 8), (unique, 0x10000389, 8) MULTIEQUAL (unique, 0x10000379, 8) , (unique, 0x10000381, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x4, 8)]
[(unique, 0x100004f9, 8) COPY (register, 0x8, 8)]
[(unique, 0x10000501, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000509, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x40fe00, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x10, 8) , (const, 0x21, 8)]
[ ---  CBRANCH (ram, 0x40fef0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000179, 8) , (const, 0x0, 8), (unique, 0x10000179, 8) INT_AND (register, 0x0, 8) , (const, 0x3, 8), (register, 0x0, 8) INT_OR (unique, 0x10000561, 8) , (register, 0x10, 8), (unique, 0x10000561, 8) CAST (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x40ff38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x40fe0f, 1)]
[ ---  CBRANCH (ram, 0x40ff11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x40fefc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000023a, 8) , (const, 0x0, 8), (unique, 0x1000023a, 8) INT_AND (unique, 0x10000569, 8) , (const, 0x7, 8), (unique, 0x10000569, 8) CAST (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x40fe0f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001d1, 8) , (const, 0x0, 8), (unique, 0x100001d1, 8) INT_AND (register, 0x0, 8) , (const, 0x7, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x40fe0f, 1)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x40fe0f, 1)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000441, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x40fe26, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000571, 8) , (const, 0x40fe26, 8), (unique, 0x10000571, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x349, 4)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x349, 4)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x349, 4)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x349, 4)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x349, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x349, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x349, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x349, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x349, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x349, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000441, 8) , (const, 0x349, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x349, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100004f9, 8) , (const, 0x349, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x10000501, 8) , (const, 0x349, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x349, 4)]
[ ---  CALL (ram, 0x40f700, 8) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff88, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x100004b9, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x10000509, 8) , (const, 0x349, 4)]
[ ---  CBRANCH (ram, 0x40ff24, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3400, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (stack, 0xffffffffffffff80, 8) , (const, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x10000581, 8), (unique, 0x10000581, 8) INT_ADD (unique, 0x10000579, 8) , (unique, 0x3680, 8), (unique, 0x10000579, 8) CAST (register, 0x90, 8), (unique, 0x3680, 8) INT_MULT (stack, 0xffffffffffffff80, 8) , (const, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_RIGHT (unique, 0x3100, 8) , (const, 0x3, 4), (unique, 0x3100, 8) INT_SUB (unique, 0x3680, 8) , (const, 0x1, 8)]
[(unique, 0x10000339, 8) COPY (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000359, 8) COPY (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x40ff2c, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x17, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_SUB (unique, 0x3680, 8) , (const, 0x1, 8)]
[(unique, 0x100001e1, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8)]
[(register, 0x10, 8) PTRADD (unique, 0x3400, 8) , (unique, 0x100002bc, 8) , (const, 0x8, 8), (unique, 0x100002bc, 8) INT_AND (register, 0x8, 8) , (const, 0xfffffffffffffffe, 8)]
[(unique, 0x10000341, 8) COPY (unique, 0x3400, 8)]
[(unique, 0x100003c9, 8) COPY (stack, 0xffffffffffffff88, 8)]
[(unique, 0x100003d9, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000591, 8), (unique, 0x10000591, 8) INT_ADD (unique, 0x10000589, 8) , (register, 0x10, 8), (unique, 0x10000589, 8) CAST (stack, 0xffffffffffffff88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x1200, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000341, 8) , (unique, 0x10000349, 8), (register, 0x1200, 8) MULTIEQUAL (unique, 0x100003c9, 8) , (unique, 0x100003d1, 8)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x991, 4), (ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x990, 4), (ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x991, 4), (ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x990, 4), (ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x991, 4), (ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x990, 4), (ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x991, 4), (ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x990, 4), (ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000209, 8) , (register, 0x1208, 8), (unique, 0x10000209, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000341, 8) , (unique, 0x10000349, 8), (register, 0x1208, 8) MULTIEQUAL (unique, 0x100003d9, 8) , (unique, 0x100003e1, 8)]
[(unique, 0x10000349, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000341, 8) , (unique, 0x10000349, 8)]
[(unique, 0x100003d1, 8) COPY (register, 0x1200, 8), (register, 0x1200, 8) CAST (unique, 0x100005a1, 8), (unique, 0x100005a1, 8) INT_ADD (unique, 0x10000599, 8) , (unique, 0x100001e1, 8), (unique, 0x10000599, 8) CAST (register, 0x1200, 8), (register, 0x1200, 8) MULTIEQUAL (unique, 0x100003c9, 8) , (unique, 0x100003d1, 8)]
[(unique, 0x100003e1, 8) COPY (register, 0x1208, 8), (register, 0x1208, 8) CAST (unique, 0x100005b1, 8), (unique, 0x100005b1, 8) INT_ADD (unique, 0x100005a9, 8) , (unique, 0x100001e1, 8), (unique, 0x100005a9, 8) CAST (register, 0x1208, 8), (register, 0x1208, 8) MULTIEQUAL (unique, 0x100003d9, 8) , (unique, 0x100003e1, 8)]
[ ---  CBRANCH (ram, 0x40fce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000341, 8) , (unique, 0x10000349, 8)]
[(unique, 0x10000331, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100005c1, 8), (unique, 0x100005c1, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100005b9, 8), (unique, 0x100005b9, 8) CAST (stack, 0xffffffffffffff88, 8), (register, 0x0, 8) INT_MULT (register, 0x10, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_AND (register, 0x8, 8) , (const, 0xfffffffffffffffe, 8)]
[(unique, 0x10000351, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (register, 0x38, 8) , (const, 0x8, 8), (register, 0x38, 8) INT_AND (register, 0x8, 8) , (const, 0xfffffffffffffffe, 8)]
[ ---  CBRANCH (ram, 0x40fd37, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (register, 0x8, 8), (register, 0x38, 8) INT_AND (register, 0x8, 8) , (const, 0xfffffffffffffffe, 8)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x1ed, 4), (ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x1ed, 4), (ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x1ed, 4), (ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x1ed, 4), (ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000331, 8) , (unique, 0x10000339, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000351, 8) , (unique, 0x10000359, 8)]
[(register, 0x0, 8) CAST (unique, 0x100005d1, 8), (unique, 0x100005d1, 8) INT_ADD (unique, 0x100005c9, 8) , (register, 0x10, 8), (unique, 0x100005c9, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000331, 8) , (unique, 0x10000339, 8)]
[ ---  CBRANCH (ram, 0x40fd37, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (unique, 0x3400, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000351, 8) , (unique, 0x10000359, 8)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x206, 4)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x206, 4)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x206, 4)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x206, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x100005e1, 8), (unique, 0x100005e1, 8) INT_ADD (unique, 0x100005d9, 8) , (register, 0x10, 8), (unique, 0x100005d9, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x40fd37, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (unique, 0x3400, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x21d, 4)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x21d, 4)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x21d, 4)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x21d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[(ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(register, 0x30, 8) CAST (unique, 0x100005f1, 8), (unique, 0x100005f1, 8) INT_ADD (unique, 0x3680, 8) , (unique, 0x100005e9, 8), (unique, 0x100005e9, 8) CAST (register, 0x90, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (ram, 0x49a930, 8), (ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8) , (ram, 0x49a930, 8) , (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (ram, 0x49a938, 8), (ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8) , (ram, 0x49a938, 8) , (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[ ---  CBRANCH (ram, 0x40fe70, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xffffffffffffff80, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x40fd5e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005f9, 8) , (const, 0x40fd5e, 8), (unique, 0x100005f9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x241, 4)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x241, 4)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x241, 4)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x241, 4)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x241, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x3400, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100004f9, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x10000501, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x241, 4)]
[ ---  CALL (ram, 0x40f700, 8) , (ram, 0x49a930, 8) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x100004c9, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x10000509, 8) , (const, 0x241, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (unique, 0x100004c9, 8) , (unique, 0x10000509, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x10000501, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x100004f9, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x3400, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[(ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000371, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  BRANCH (ram, 0x40fd86, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[(ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x40fd70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (stack, 0xffffffffffffff90, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000371, 8) , (register, 0x18, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbe00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000601, 8) , (const, 0x40fda2, 8), (unique, 0x10000601, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x261, 4)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x261, 4)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x261, 4)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x261, 4)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x261, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x261, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x261, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x261, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x261, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x261, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x261, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x261, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x261, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x261, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x261, 4)]
[ ---  CALL (ram, 0x401060, 8) , (stack, 0xffffffffffffff78, 8) , (register, 0x18, 8) , (register, 0x10, 8)]
[(unique, 0x10000391, 8) COPY (register, 0x18, 8)]
[(unique, 0x100003a1, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x100003b9, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x261, 4)]
[ ---  BRANCH (ram, 0x40fdb3, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x38, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (register, 0xa8, 8) , (const, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000391, 8) , (unique, 0x10000399, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x100003b9, 8) , (unique, 0x100003c1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000621, 8) , (const, 0x40fdd4, 8), (unique, 0x10000621, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x292, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x292, 4), (ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x28c, 4), (ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x292, 4), (ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x28c, 4), (ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x292, 4), (ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x28c, 4), (ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x292, 4), (ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x28c, 4), (ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x292, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x292, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x292, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x292, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x292, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x292, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x292, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x292, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x292, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x292, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x292, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0x38, 8) , (register, 0xa0, 8) , (register, 0x10, 8), (register, 0xa0, 8) COPY (unique, 0x100003b1, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000391, 8) , (unique, 0x10000399, 8), (unique, 0x100003b1, 8) MULTIEQUAL (unique, 0x100003a1, 8) , (unique, 0x100003a9, 8)]
[(unique, 0x10000399, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) COPY (unique, 0x100003b1, 8), (unique, 0x100003b1, 8) MULTIEQUAL (unique, 0x100003a1, 8) , (unique, 0x100003a9, 8)]
[(unique, 0x100003a9, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_DIV (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) CAST (unique, 0x10000619, 8), (unique, 0x10000619, 8) INT_SUB (unique, 0x10000609, 8) , (unique, 0x10000611, 8), (unique, 0x10000611, 8) CAST (stack, 0xffffffffffffff88, 8), (unique, 0x10000609, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) COPY (unique, 0x100003b1, 8), (unique, 0x100003b1, 8) MULTIEQUAL (unique, 0x100003a1, 8) , (unique, 0x100003a9, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x100003c1, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_DIV (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) CAST (unique, 0x10000619, 8), (unique, 0x10000619, 8) INT_SUB (unique, 0x10000609, 8) , (unique, 0x10000611, 8), (unique, 0x10000611, 8) CAST (stack, 0xffffffffffffff88, 8), (unique, 0x10000609, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) COPY (unique, 0x100003b1, 8), (unique, 0x100003b1, 8) MULTIEQUAL (unique, 0x100003a1, 8) , (unique, 0x100003a9, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x40fdb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_DIV (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) CAST (unique, 0x10000619, 8), (unique, 0x10000619, 8) INT_SUB (unique, 0x10000609, 8) , (unique, 0x10000611, 8), (unique, 0x10000611, 8) CAST (stack, 0xffffffffffffff88, 8), (unique, 0x10000609, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) COPY (unique, 0x100003b1, 8), (unique, 0x100003b1, 8) MULTIEQUAL (unique, 0x100003a1, 8) , (unique, 0x100003a9, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000629, 8) , (const, 0x40fdf2, 8), (unique, 0x10000629, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2ac, 4)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x2ac, 4), (ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x2a5, 4)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x2ac, 4), (ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x2a5, 4)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x2ac, 4), (ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x2a5, 4)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x2ac, 4), (ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x2a5, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ac, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0xa0, 8) , (stack, 0xffffffffffffff78, 8) , (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x40fd70, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[(ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) CAST (unique, 0x10000639, 8), (unique, 0x10000639, 8) INT_ADD (unique, 0x10000631, 8) , (register, 0x10, 8), (unique, 0x10000631, 8) CAST (register, 0x18, 8)]
[(unique, 0x100004a9, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  CBRANCH (ram, 0x40fe26, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbe00, 8) , (stack, 0xffffffffffffff80, 8), (unique, 0xbe00, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x1, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000641, 8) , (const, 0x40fe32, 8), (unique, 0x10000641, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2df, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x2df, 4), (ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8) , (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x2df, 4), (ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8) , (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x2df, 4), (ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x2df, 4), (ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x3400, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0xbe00, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x10000441, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x100004f9, 8) , (stack, 0xffffffffffffffa8, 8) , (unique, 0x100004f9, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x10000501, 8) , (stack, 0xffffffffffffffb0, 8) , (unique, 0x10000501, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (unique, 0x100004a9, 8) , (unique, 0x10000509, 8) , (unique, 0x100004b9, 8) , (unique, 0x10000509, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2df, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c77f0, 4) MULTIEQUAL (ram, 0x4c77f0, 4) , (ram, 0x4c77f0, 4)]
[(ram, 0x4c77e8, 8) MULTIEQUAL (ram, 0x4c77e8, 8) , (ram, 0x4c77e8, 8)]
[(ram, 0x49a938, 8) MULTIEQUAL (ram, 0x49a938, 8) , (ram, 0x49a938, 8)]
[(ram, 0x49a930, 8) MULTIEQUAL (ram, 0x49a930, 8) , (ram, 0x49a930, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x40ff45, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000649, 8), (unique, 0x10000649, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000651, 8) , (unique, 0x1000025c, 8), (unique, 0x10000651, 8) CAST (register, 0x20, 8), (unique, 0x1000025c, 8) PTRSUB (const, 0x0, 8) , (const, 0x40ff4a, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x303, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x49a930, 8) COPY (ram, 0x49a930, 8), (ram, 0x49a930, 8) INDIRECT (ram, 0x49a930, 8) , (const, 0x303, 4)]
[(ram, 0x49a938, 8) COPY (ram, 0x49a938, 8), (ram, 0x49a938, 8) INDIRECT (ram, 0x49a938, 8) , (const, 0x303, 4)]
[(ram, 0x4c77e8, 8) COPY (ram, 0x4c77e8, 8), (ram, 0x4c77e8, 8) INDIRECT (ram, 0x4c77e8, 8) , (const, 0x303, 4)]
[(ram, 0x4c77f0, 4) COPY (ram, 0x4c77f0, 4), (ram, 0x4c77f0, 4) INDIRECT (ram, 0x4c77f0, 4) , (const, 0x303, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x49a930, 8) COPY (ram, 0x49a930, 8)]
[(ram, 0x49a938, 8) COPY (ram, 0x49a938, 8)]
[(ram, 0x4c77e8, 8) COPY (ram, 0x4c77e8, 8)]
[(ram, 0x4c77f0, 4) COPY (ram, 0x4c77f0, 4)]
[ ---  RETURN (const, 0x0, 8)]
