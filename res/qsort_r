[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1395e0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 8) , (const, 0x21, 8)]
[ ---  CBRANCH (ram, 0x1392fc, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xa8, 8) , (const, 0x400, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (register, 0x10, 8), (register, 0xa8, 8) INT_MULT (register, 0x30, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1395f4, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3ff, 8) , (register, 0xa8, 8), (register, 0xa8, 8) INT_MULT (register, 0x30, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (const, 0x0, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100003a0, 8) , (unique, 0x100001b9, 8) , (const, 0x1, 8), (unique, 0x100003a0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x100001b9, 8) INT_2COMP (register, 0xa8, 8), (register, 0xa8, 8) INT_AND (register, 0xa8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100004e0, 8), (unique, 0x100004e0, 8) INT_ADD (unique, 0x100004d8, 8) , (unique, 0x100001b9, 8), (unique, 0x100004d8, 8) CAST (unique, 0x100003c8, 8), (unique, 0x100003c8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8), (unique, 0x100001b9, 8) INT_2COMP (register, 0xa8, 8), (register, 0xa8, 8) INT_AND (register, 0xa8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[(unique, 0x10000498, 8) COPY (register, 0x80, 8)]
[ ---  BRANCH (ram, 0x13935f, 1)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x1396a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4c10, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x46d, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x46d, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x46d, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x46d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x46d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x46d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x46d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x46d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x100004c8, 8) , (const, 0x46d, 4), (unique, 0x100004c8, 8) COPY (unique, 0x100004e8, 8), (unique, 0x100004e8, 8) CAST (register, 0x80, 8)]
[(register, 0x10, 8) COPY (const, 0x1fffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x1396d1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0x55, 4)]
[(unique, 0x10000448, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x1396cd, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8)]
[(unique, 0x10000450, 8) COPY (register, 0x0, 8)]
[(register, 0x10, 8) INT_SRIGHT (register, 0x10, 8) , (const, 0x2, 4), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000448, 8) , (unique, 0x10000450, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4b4, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4b4, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (register, 0x10, 8) , (const, 0x4b4, 4), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x4b4, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4b4, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x4b4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4b4, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x4b4, 4)]
[(register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0x1e, 4)]
[(unique, 0x10000490, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4b4, 4)]
[ ---  BRANCH (ram, 0x13930a, 1)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x10000490, 8)]
[ ---  CBRANCH (ram, 0x139620, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (ram, 0x4c4c08, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_DIV (register, 0xa8, 8) , (unique, 0x100004f0, 8), (unique, 0x100004f0, 8) CAST (register, 0x30, 8), (register, 0x30, 8) INT_SEXT (ram, 0x4c4c10, 4), (ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8), (ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x100004d0, 8) , (const, 0x7a, 4), (unique, 0x100004d0, 8) COPY (unique, 0x10000500, 8), (unique, 0x10000500, 8) CAST (register, 0x80, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000508, 8), (unique, 0x10000508, 8) CALL (ram, 0x11f8a0, 8) , (register, 0xa8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x8d, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7a, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x8d, 4), (ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x7a, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x8d, 4), (ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x7a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000510, 8) , (unique, 0xbc80, 4), (unique, 0x10000510, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7a, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004f8, 8), (unique, 0x100004f8, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x139620, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000508, 8), (unique, 0x10000508, 8) CALL (ram, 0x11f8a0, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x455, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x455, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x455, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CALL (ram, 0x137230, 8) , (register, 0x38, 8) , (stack, 0xffffffffffffff80, 8) , (register, 0x10, 8) , (register, 0x8, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x455, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4c08, 8) COPY (ram, 0x4c4c08, 8), (ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x455, 4), (ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c4c10, 4) COPY (ram, 0x4c4c10, 4), (ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x455, 4), (ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (register, 0x0, 8)]
[(unique, 0x100004a0, 8) COPY (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[(ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3800, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x10000400, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x4, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (unique, 0x10000518, 8), (unique, 0x10000518, 8) CAST (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100004a0, 8) , (unique, 0x10000498, 8)]
[ ---  CBRANCH (ram, 0x139648, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x10, 8) , (const, 0x21, 8)]
[ ---  CBRANCH (ram, 0x139672, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001c9, 8) , (const, 0x0, 8), (unique, 0x100001c9, 8) INT_AND (register, 0x0, 8) , (const, 0x3, 8), (register, 0x0, 8) INT_OR (register, 0x10, 8) , (unique, 0x10000520, 8), (unique, 0x10000520, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x13973a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x139672, 1)]
[ ---  CBRANCH (ram, 0x13971b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x139666, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000221, 8) , (const, 0x0, 8), (unique, 0x10000221, 8) INT_AND (unique, 0x10000528, 8) , (const, 0x7, 8), (unique, 0x10000528, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x139672, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001e1, 8) , (const, 0x0, 8), (unique, 0x100001e1, 8) INT_AND (register, 0x0, 8) , (const, 0x7, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x2, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x139672, 1)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  CBRANCH (ram, 0x1395c5, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000530, 8) , (const, 0x13968f, 8), (unique, 0x10000530, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  CALL (ram, 0x138e70, 8) , (unique, 0x3100, 8) , (register, 0x38, 8) , (unique, 0x10000400, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000538, 8) , (const, 0x13969b, 8), (unique, 0x10000538, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x438, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x437, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x432, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x431, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x438, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x437, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x432, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x431, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x438, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x437, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x432, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x431, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x438, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x437, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x432, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x431, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x438, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x437, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x432, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x431, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x438, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x437, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x432, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x431, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x438, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x437, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x432, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x431, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x438, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x437, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x432, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (register, 0x30, 8) , (const, 0x431, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x100003e8, 8), (unique, 0x100003e8, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x432, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x431, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x438, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x432, 4)]
[(ram, 0x4c4c08, 8) COPY (ram, 0x4c4c08, 8), (ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x438, 4), (ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x432, 4)]
[(ram, 0x4c4c10, 4) COPY (ram, 0x4c4c10, 4), (ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x438, 4), (ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x432, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(stack, 0xffffffffffffff78, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (stack, 0xffffffffffffff80, 8) , (const, 0x8, 8), (unique, 0x3400, 8) PTRADD (register, 0x30, 8) , (stack, 0xffffffffffffff80, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x139732, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3400, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (stack, 0xffffffffffffff80, 8) , (const, 0x8, 8), (unique, 0x3400, 8) PTRADD (register, 0x30, 8) , (stack, 0xffffffffffffff80, 8) , (const, 0x8, 8)]
[(unique, 0x10000458, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INT_2COMP (unique, 0x10000229, 8), (unique, 0x10000229, 8) INT_SRIGHT (register, 0x10, 8) , (const, 0x3f, 4), (register, 0x10, 8) INT_LEFT (unique, 0x10000540, 8) , (const, 0x3c, 4), (unique, 0x10000540, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x1393c4, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) INT_ADD (register, 0x98, 8) , (const, 0x1, 8), (register, 0x98, 8) INT_RIGHT (unique, 0x10000558, 8) , (const, 0x3, 4), (unique, 0x10000558, 8) CAST (register, 0x98, 8), (register, 0x10, 8) INT_2COMP (unique, 0x10000229, 8), (unique, 0x10000229, 8) INT_SRIGHT (register, 0x10, 8) , (const, 0x3f, 4), (register, 0x98, 8) INT_ADD (unique, 0x10000550, 8) , (unique, 0x100002b0, 8), (unique, 0x10000550, 8) CAST (unique, 0x3400, 8), (unique, 0x100002b0, 8) INT_SUB (const, 0x7, 8) , (unique, 0x10000548, 8), (unique, 0x10000548, 8) CAST (unique, 0x3800, 8), (register, 0x10, 8) INT_LEFT (unique, 0x10000540, 8) , (const, 0x3c, 4), (unique, 0x10000540, 8) CAST (unique, 0x3400, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000460, 8) COPY (unique, 0x3100, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x10000458, 8) , (unique, 0x10000460, 8)]
[(unique, 0x10000438, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x1396f7, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0xb, 8)]
[(unique, 0x10000418, 8) COPY (unique, 0x10000560, 8), (unique, 0x10000560, 8) CAST (register, 0x38, 8)]
[(unique, 0x10000428, 8) COPY (unique, 0x3400, 8)]
[(unique, 0x10000430, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1393d1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x167, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x167, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x167, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0x10000568, 8), (unique, 0x10000568, 8) CAST (register, 0x38, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10000578, 8), (unique, 0x10000578, 8) INT_ADD (unique, 0x10000570, 8) , (register, 0x10, 8), (unique, 0x10000570, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x13948c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000430, 8) , (unique, 0x10000438, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x16e, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x16e, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x16e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3400, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000588, 8), (unique, 0x10000588, 8) INT_ADD (unique, 0x10000580, 8) , (register, 0x10, 8), (unique, 0x10000580, 8) CAST (unique, 0x3400, 8)]
[(unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x13948c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x2, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x186, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x186, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x186, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000598, 8), (unique, 0x10000598, 8) INT_ADD (unique, 0x10000590, 8) , (register, 0x10, 8), (unique, 0x10000590, 8) CAST (register, 0x0, 8)]
[(unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x13948c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x3, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x19e, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x19e, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x19e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x100005a8, 8), (unique, 0x100005a8, 8) INT_ADD (unique, 0x100005a0, 8) , (register, 0x10, 8), (unique, 0x100005a0, 8) CAST (register, 0x0, 8)]
[(unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x13948c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x4, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1b6, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x1b6, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x1b6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x100005b8, 8), (unique, 0x100005b8, 8) INT_ADD (unique, 0x100005b0, 8) , (register, 0x10, 8), (unique, 0x100005b0, 8) CAST (register, 0x0, 8)]
[(unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x13948c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x5, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1ce, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x1ce, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x1ce, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x100005c8, 8), (unique, 0x100005c8, 8) INT_ADD (unique, 0x100005c0, 8) , (register, 0x10, 8), (unique, 0x100005c0, 8) CAST (register, 0x0, 8)]
[(unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x13948c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x6, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1e6, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x1e6, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x1e6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x100005d8, 8), (unique, 0x100005d8, 8) INT_ADD (unique, 0x100005d0, 8) , (register, 0x10, 8), (unique, 0x100005d0, 8) CAST (register, 0x0, 8)]
[(unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x13948c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x7, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1fe, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x1fe, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x1fe, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x100005e8, 8), (unique, 0x100005e8, 8) INT_ADD (unique, 0x100005e0, 8) , (register, 0x10, 8), (unique, 0x100005e0, 8) CAST (register, 0x0, 8)]
[(unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x8, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x13948c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x216, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x216, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x216, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x8, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x100005f8, 8), (unique, 0x100005f8, 8) INT_ADD (unique, 0x100005f0, 8) , (register, 0x10, 8), (unique, 0x100005f0, 8) CAST (register, 0x0, 8)]
[(unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x9, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x13948c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0xa, 8)]
[(unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0xa, 8) , (const, 0x8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x231, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x231, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x231, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x9, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000608, 8), (unique, 0x10000608, 8) INT_ADD (unique, 0x10000600, 8) , (register, 0x10, 8), (unique, 0x10000600, 8) CAST (register, 0x0, 8)]
[(ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[(ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(unique, 0x10000410, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10000420, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8)]
[(unique, 0x10000440, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x139503, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[(ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[(ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10000420, 8) , (unique, 0x10000428, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10000410, 8) , (unique, 0x10000418, 8)]
[(unique, 0x10000231, 8) INT_MULT (register, 0x80, 8) , (const, 0x2, 8), (register, 0x80, 8) INT_ADD (register, 0x80, 8) , (const, 0x1, 8), (register, 0x80, 8) INT_RIGHT (unique, 0x3100, 8) , (const, 0x1, 4), (unique, 0x3100, 8) INT_SUB (register, 0x38, 8) , (const, 0x2, 8), (register, 0x38, 8) INT_SUB (unique, 0x3100, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000440, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x139500, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000440, 8) , (register, 0x10, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10000618, 8), (unique, 0x10000618, 8) INT_ADD (register, 0x10, 8) , (unique, 0x10000610, 8), (unique, 0x10000610, 8) CAST (register, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x10000239, 8), (unique, 0x10000239, 8) CAST (unique, 0x10000620, 8), (unique, 0x10000620, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000470, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x30, 8) , (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x100004c0, 8) COPY (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x1200, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000470, 8) , (unique, 0x10000478, 8), (register, 0x1200, 8) MULTIEQUAL (unique, 0x100004c0, 8) , (register, 0x1200, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xa3f, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xa3e, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0xa3f, 4), (ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0xa3e, 4), (ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0xa3f, 4), (ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0xa3e, 4), (ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000269, 8) , (register, 0x1208, 8), (unique, 0x10000269, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000470, 8) , (unique, 0x10000478, 8), (register, 0x1208, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0x1208, 8)]
[(register, 0x1200, 8) CAST (unique, 0x10000638, 8), (unique, 0x10000638, 8) INT_ADD (unique, 0x10000628, 8) , (unique, 0x10000630, 8), (unique, 0x10000630, 8) CAST (unique, 0x10000239, 8), (unique, 0x10000628, 8) CAST (register, 0x1200, 8), (register, 0x1200, 8) MULTIEQUAL (unique, 0x100004c0, 8) , (register, 0x1200, 8)]
[(register, 0x1208, 8) CAST (unique, 0x10000650, 8), (unique, 0x10000650, 8) INT_ADD (unique, 0x10000640, 8) , (unique, 0x10000648, 8), (unique, 0x10000648, 8) CAST (unique, 0x10000239, 8), (unique, 0x10000640, 8) CAST (register, 0x1208, 8), (register, 0x1208, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0x1208, 8)]
[(unique, 0x10000478, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000470, 8) , (unique, 0x10000478, 8)]
[ ---  CBRANCH (ram, 0x1394d8, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 8) , (register, 0x80, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x3400, 8) PTRADD (register, 0x8, 8) , (unique, 0x10000360, 8) , (const, 0x8, 8), (unique, 0x10000360, 8) INT_MULT (register, 0x80, 8) , (const, 0x2, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000660, 8), (unique, 0x10000660, 8) INT_ADD (unique, 0x10000658, 8) , (register, 0x10, 8), (unique, 0x10000658, 8) CAST (register, 0x0, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (unique, 0x10000231, 8)]
[ ---  CBRANCH (ram, 0x139503, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (unique, 0x10000231, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2e5, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x2e5, 4), (ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x2e5, 4), (ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0x3400, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[(ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) PTRADD (register, 0x30, 8) , (stack, 0xffffffffffffff80, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x8, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x13970b, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xffffffffffffff80, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x139534, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000668, 8) , (const, 0x139534, 8), (unique, 0x10000668, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x30d, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x30d, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x30d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x30d, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x30c, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x30d, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x30c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x30d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x30c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x30d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x30c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x30d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x30c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x30d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x30c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x30d, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x30c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x30d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x30c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x30d, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (register, 0x30, 8) , (const, 0x30c, 4)]
[ ---  CALL (ram, 0x138e70, 8) , (unique, 0x3100, 8) , (register, 0x30, 8) , (unique, 0x10000400, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[(ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x10000670, 8), (unique, 0x10000670, 8) CAST (register, 0x38, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[(ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(unique, 0x10000408, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x100003f0, 8) COPY (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[ ---  CBRANCH (ram, 0x1395b2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff90, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (stack, 0xffffffffffffff88, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000678, 8) , (const, 0x139564, 8), (unique, 0x10000678, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x32f, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x32f, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x32f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x32e, 4)]
[ ---  CALL (ram, 0x193a40, 8) , (unique, 0x100003f0, 8) , (unique, 0x10000408, 8) , (register, 0x10, 8)]
[(unique, 0x10000468, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x32e, 4)]
[(unique, 0x10000480, 8) COPY (unique, 0x10000408, 8)]
[(unique, 0x100004a8, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x139573, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x38, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (register, 0x30, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000468, 8) , (register, 0x0, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000480, 8) , (unique, 0x10000488, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000698, 8) , (const, 0x139590, 8), (unique, 0x10000698, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x35b, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x343, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x35b, 4), (ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x343, 4), (ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x35b, 4), (ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x343, 4), (ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x35a, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x35a, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x35a, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x35a, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x35a, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x35a, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x35a, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x35a, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  CALL (ram, 0x193a40, 8) , (register, 0x38, 8) , (register, 0xb8, 8) , (register, 0x10, 8), (register, 0xb8, 8) COPY (unique, 0x100004b8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000480, 8) , (unique, 0x10000488, 8), (unique, 0x100004b8, 8) MULTIEQUAL (unique, 0x100004a8, 8) , (unique, 0x100004b0, 8)]
[(unique, 0x100003f8, 8) COPY (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x35a, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000488, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) COPY (unique, 0x100004b8, 8), (unique, 0x100004b8, 8) MULTIEQUAL (unique, 0x100004a8, 8) , (unique, 0x100004b0, 8)]
[(unique, 0x100004b0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_DIV (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) CAST (unique, 0x10000690, 8), (unique, 0x10000690, 8) INT_SUB (unique, 0x10000680, 8) , (unique, 0x10000688, 8), (unique, 0x10000688, 8) CAST (register, 0x38, 8), (unique, 0x10000680, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) COPY (unique, 0x100004b8, 8), (unique, 0x100004b8, 8) MULTIEQUAL (unique, 0x100004a8, 8) , (unique, 0x100004b0, 8)]
[ ---  CBRANCH (ram, 0x139570, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff90, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3400, 8) , (register, 0x0, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x35a, 4), (register, 0x0, 8) INT_DIV (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) CAST (unique, 0x10000690, 8), (unique, 0x10000690, 8) INT_SUB (unique, 0x10000680, 8) , (unique, 0x10000688, 8), (unique, 0x10000688, 8) CAST (register, 0x38, 8), (unique, 0x10000680, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) COPY (unique, 0x100004b8, 8), (unique, 0x100004b8, 8) MULTIEQUAL (unique, 0x100004a8, 8) , (unique, 0x100004b0, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006a0, 8) , (const, 0x1395b2, 8), (unique, 0x100006a0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x37a, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x376, 4)]
[(ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x37a, 4), (ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x376, 4)]
[(ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x37a, 4), (ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x376, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x37a, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x379, 4)]
[ ---  CALL (ram, 0x193a40, 8) , (register, 0xb8, 8) , (unique, 0x100003f8, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[(ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (stack, 0xffffffffffffff88, 8) , (const, 0x1, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x100006b0, 8), (unique, 0x100006b0, 8) INT_ADD (unique, 0x100006a8, 8) , (register, 0x10, 8), (unique, 0x100006a8, 8) CAST (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x139548, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (stack, 0xffffffffffffff88, 8) , (const, 0x1, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006b8, 8) , (const, 0x1395d1, 8), (unique, 0x100006b8, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x100003e0, 8), (unique, 0x100003e0, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3b4, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4c08, 8) COPY (ram, 0x4c4c08, 8), (ram, 0x4c4c08, 8) INDIRECT (ram, 0x4c4c08, 8) , (const, 0x3b4, 4), (ram, 0x4c4c08, 8) MULTIEQUAL (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8) , (ram, 0x4c4c08, 8)]
[(ram, 0x4c4c10, 4) COPY (ram, 0x4c4c10, 4), (ram, 0x4c4c10, 4) INDIRECT (ram, 0x4c4c10, 4) , (const, 0x3b4, 4), (ram, 0x4c4c10, 4) MULTIEQUAL (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4) , (ram, 0x4c4c10, 4)]
[ ---  RETURN (const, 0x0, 8)]
