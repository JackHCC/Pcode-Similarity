[ ---  CBRANCH (ram, 0x1cc348, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000053a, 8) , (const, 0x2, 4), (unique, 0x1000053a, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x470, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f, 4)]
[ ---  CBRANCH (ram, 0x1cc420, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x189080, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3f, 4)]
[ ---  CALL (ram, 0x1cbcf0, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1cc360, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x8, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000542, 8), (unique, 0x10000542, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3f, 4)]
[(unique, 0x10000482, 8) COPY (register, 0x30, 8)]
[(unique, 0x100004e2, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x1cc373, 1)]
[(unique, 0x1000048a, 8) COPY (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000482, 8) , (unique, 0x1000048a, 8)]
[(unique, 0x100004e6, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) COPY (unique, 0x100004ea, 4), (unique, 0x100004ea, 4) MULTIEQUAL (unique, 0x100004e2, 4) , (unique, 0x100004e6, 4)]
[ ---  CBRANCH (ram, 0x1cc370, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000482, 8) , (unique, 0x1000048a, 8)]
[ ---  CBRANCH (ram, 0x1cc647, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xa8, 8) , (const, 0x1001, 8), (register, 0xa8, 8) INT_MULT (register, 0xa8, 8) , (const, 0x8, 8), (register, 0xa8, 8) INT_SEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (register, 0x0, 4) , (const, 0x2, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x146, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x146, 4)]
[ ---  CBRANCH (ram, 0x1cc39a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2141b0, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000552, 8), (unique, 0x10000552, 8) INT_ADD (unique, 0x1000054a, 8) , (unique, 0x10000145, 8), (unique, 0x1000054a, 8) CAST (unique, 0x1000033d, 8), (unique, 0x1000033d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x10000145, 8) INT_2COMP (register, 0xa8, 8), (register, 0xa8, 8) INT_AND (register, 0xa8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x10000562, 8), (unique, 0x10000562, 8) INT_ADD (unique, 0x1000055a, 8) , (unique, 0x100003ea, 8), (unique, 0x1000055a, 8) CAST (unique, 0x100003f2, 8), (unique, 0x100003f2, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x100003ea, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0x8, 8), (unique, 0x10000145, 8) INT_2COMP (register, 0xa8, 8), (register, 0xa8, 8) INT_AND (register, 0xa8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8)]
[(unique, 0x100004ca, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x155, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x155, 4)]
[(unique, 0x100004d2, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000056a, 8), (unique, 0x1000056a, 8) CALL (ram, 0x11f8a0, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x1cc3b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000056a, 8), (unique, 0x1000056a, 8) CALL (ram, 0x11f8a0, 8) , (register, 0xa8, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x100004ca, 8) , (unique, 0x100004d2, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x38, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xfb, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xf9, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (unique, 0x100002fd, 8), (unique, 0x100002fd, 8) COPY (const, 0x28c58b, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1cc673, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x1, 4)]
[(register, 0x38, 8) COPY (const, 0x28c58b, 8)]
[ ---  BRANCH (ram, 0x1cc400, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc3f9, 8), (register, 0x20, 8) CAST (unique, 0x1000058a, 8), (unique, 0x1000058a, 8) INT_ADD (unique, 0x10000582, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000582, 8) CAST (register, 0x20, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x131, 4)]
[ ---  CALL (ram, 0x193a40, 8) , (register, 0x38, 8) , (register, 0x30, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (unique, 0x1000057a, 8), (unique, 0x1000057a, 8) CAST (register, 0x8, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (unique, 0x10000572, 8), (unique, 0x10000572, 8) CAST (register, 0x30, 8), (register, 0x38, 8) INT_SUB (unique, 0x3100, 8) , (unique, 0x3580, 8), (register, 0x30, 8) INT_SUB (unique, 0x3680, 8) , (unique, 0x3580, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x8, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x8, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (unique, 0x3680, 8) INT_MULT (register, 0xb8, 8) , (const, 0x8, 8), (register, 0xb8, 8) INT_SEXT (register, 0xb8, 4), (register, 0x0, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (register, 0x0, 4) , (const, 0x1, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x131, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x130, 4), (stack, 0xffffffffffffffc0, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000044a, 8) COPY (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x131, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x130, 4), (stack, 0xffffffffffffffc0, 8) COPY (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc40b, 8), (register, 0x20, 8) CAST (unique, 0x1000059a, 8), (unique, 0x1000059a, 8) INT_ADD (unique, 0x10000592, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000592, 8) CAST (register, 0x20, 8)]
[ ---  CALL (ram, 0x1cbcf0, 8) , (register, 0x38, 8) , (register, 0x8, 8) , (register, 0x10, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x1000044a, 8) , (register, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc413, 8), (register, 0x20, 8) CAST (unique, 0x100005aa, 8), (unique, 0x100005aa, 8) INT_ADD (unique, 0x100005a2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100005a2, 8) CAST (register, 0x20, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x13f, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x13b, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x1cc32d, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x169, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x169, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x169, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x169, 4)]
[ ---  CBRANCH (ram, 0x1cc6cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x139760, 8) , (unique, 0x100002f5, 8), (unique, 0x100002f5, 8) COPY (const, 0x28c1ba, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x465, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x465, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x465, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x465, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x100005b2, 8), (unique, 0x100005b2, 8) INT_ADD (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) CALL (ram, 0x1e7e20, 8) , (const, 0x0, 4) , (const, 0x0, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1cc44b, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x178, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x178, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x178, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x178, 4)]
[(register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x180, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x180, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x180, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x180, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x100005d2, 8) , (unique, 0x100005da, 8), (unique, 0x100005da, 8) CAST (unique, 0x3400, 8), (unique, 0x100005d2, 8) CAST (stack, 0xffffffffffffffc0, 8), (unique, 0x3400, 8) CAST (unique, 0x100005ca, 8), (unique, 0x100005ca, 8) INT_ADD (register, 0xb8, 8) , (unique, 0x100005c2, 8), (unique, 0x100005c2, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005ba, 8), (unique, 0x100005ba, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (register, 0x38, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x180, 4), (register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x3100, 8)]
[(unique, 0x10000472, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100005ca, 8), (unique, 0x100005ca, 8) INT_ADD (register, 0xb8, 8) , (unique, 0x100005c2, 8), (unique, 0x100005c2, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005ba, 8), (unique, 0x100005ba, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (register, 0x38, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100004ba, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005ba, 8), (unique, 0x100005ba, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1cc67f, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x100005e2, 8) , (const, 0x1001, 8), (unique, 0x100005e2, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x100005d2, 8) , (unique, 0x100005da, 8), (unique, 0x100005da, 8) CAST (unique, 0x3400, 8), (unique, 0x100005d2, 8) CAST (stack, 0xffffffffffffffc0, 8), (unique, 0x3400, 8) CAST (unique, 0x100005ca, 8), (unique, 0x100005ca, 8) INT_ADD (register, 0xb8, 8) , (unique, 0x100005c2, 8), (unique, 0x100005c2, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005ba, 8), (unique, 0x100005ba, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (register, 0x38, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x180, 4), (register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x3100, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x412, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x412, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x412, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x412, 4)]
[(unique, 0x1000047a, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x100004f6, 8) , (const, 0x412, 4), (unique, 0x100004f6, 8) COPY (unique, 0x100005ea, 8), (unique, 0x100005ea, 8) CAST (unique, 0x3400, 8)]
[(unique, 0x100004c2, 8) COPY (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000051e, 8) , (const, 0x412, 4), (unique, 0x1000051e, 8) COPY (unique, 0x100005f2, 8), (unique, 0x100005f2, 8) CAST (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x1cc472, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2141b0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000602, 8), (unique, 0x10000602, 8) INT_ADD (unique, 0x100005fa, 8) , (unique, 0x100001a1, 8), (unique, 0x100005fa, 8) CAST (unique, 0x10000365, 8), (unique, 0x10000365, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x100001a1, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (stack, 0xffffffffffffffb0, 8) , (const, 0x1e, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x10000612, 8), (unique, 0x10000612, 8) INT_ADD (unique, 0x1000060a, 8) , (unique, 0x1000040a, 8), (unique, 0x1000060a, 8) CAST (unique, 0x10000412, 8), (unique, 0x10000412, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x1000040a, 8) INT_ADD (unique, 0x100001a1, 8) , (const, 0x8, 8), (unique, 0x100001a1, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (stack, 0xffffffffffffffb0, 8) , (const, 0x1e, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10000462, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000472, 8) , (unique, 0x1000047a, 8)]
[(unique, 0x1000049a, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100004ba, 8) , (unique, 0x100004c2, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x42f, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x42f, 4)]
[ ---  CBRANCH (ram, 0x1cc32d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x11f8a0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffa0, 8) COPY (unique, 0x1000061a, 8), (unique, 0x1000061a, 8) CAST (register, 0x0, 8)]
[(unique, 0x1000046a, 8) COPY (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x100004a2, 8) COPY (stack, 0xffffffffffffffc0, 8)]
[ ---  BRANCH (ram, 0x1cc492, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x10000462, 8) , (unique, 0x1000046a, 8)]
[(unique, 0x10000452, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[(unique, 0x100004aa, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x1000049a, 8) , (unique, 0x100004a2, 8)]
[ ---  CBRANCH (ram, 0x1cc6e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x3a, 1), (unique, 0x3a00, 8) CAST (unique, 0x10000632, 8), (unique, 0x10000632, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x1000062a, 8), (unique, 0x1000062a, 8) CAST (register, 0x10, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x10000622, 8) , (const, 0x1, 8), (unique, 0x10000622, 8) CAST (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc708, 8), (register, 0x20, 8) CAST (unique, 0x10000652, 8), (unique, 0x10000652, 8) INT_ADD (unique, 0x1000064a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000064a, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x401, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x401, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3fe, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x401, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x400, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x401, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x400, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x401, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x400, 4)]
[ ---  CALL (ram, 0x1e7e20, 8) , (const, 0x0, 4) , (unique, 0x3100, 8) , (register, 0xb8, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3a00, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000632, 8), (unique, 0x10000632, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x1000062a, 8), (unique, 0x1000062a, 8) CAST (register, 0x10, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x10000622, 8) , (const, 0x1, 8), (unique, 0x10000622, 8) CAST (register, 0x8, 8)]
[(unique, 0x1000045a, 8) COPY (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x401, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x400, 4), (stack, 0xffffffffffffffc0, 8) COPY (unique, 0x10000642, 8), (unique, 0x10000642, 8) CAST (register, 0x8, 8)]
[(unique, 0x100004b2, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x401, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x400, 4), (stack, 0xffffffffffffffb8, 8) COPY (unique, 0x1000063a, 8), (unique, 0x1000063a, 8) CAST (register, 0x80, 8)]
[ ---  BRANCH (ram, 0x1cc49b, 1)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3a00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc4ab, 8), (register, 0x20, 8) CAST (unique, 0x1000066a, 8), (unique, 0x1000066a, 8) INT_ADD (unique, 0x10000662, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000662, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1df, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1df, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1de, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1df, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1de, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1df, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1de, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1df, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1de, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1df, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1de, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffaf, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffc0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000672, 8), (unique, 0x10000672, 8) CALL (ram, 0x193a40, 8) , (unique, 0x3a00, 8) , (register, 0x38, 8) , (register, 0x80, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x1000065a, 8) , (unique, 0x1000037d, 8), (unique, 0x1000065a, 8) CAST (register, 0x8, 8), (unique, 0x1000037d, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000452, 8) , (unique, 0x1000045a, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100004aa, 8) , (unique, 0x100004b2, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1e8, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1df, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x2f, 1), (unique, 0x3100, 8) CAST (unique, 0x10000682, 8), (unique, 0x10000682, 8) INT_ADD (unique, 0x1000067a, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x1000067a, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000672, 8), (unique, 0x10000672, 8) CALL (ram, 0x193a40, 8) , (unique, 0x3a00, 8) , (register, 0x38, 8) , (register, 0x80, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x1000065a, 8) , (unique, 0x1000037d, 8), (unique, 0x1000065a, 8) CAST (register, 0x8, 8), (unique, 0x1000037d, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000452, 8) , (unique, 0x1000045a, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100004aa, 8) , (unique, 0x100004b2, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc4d4, 8), (register, 0x20, 8) CAST (unique, 0x10000692, 8), (unique, 0x10000692, 8) INT_ADD (unique, 0x1000068a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000068a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f3, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1f3, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f2, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1f2, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1f3, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1f2, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x1f3, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x1f2, 4), (stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1f2, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1f2, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x100004da, 8) COPY (unique, 0x1000069a, 8), (unique, 0x1000069a, 8) CAST (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f2, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1cc4fd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x195d30, 8) , (register, 0xa8, 8) , (const, 0x3a, 4), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc4fa, 8), (register, 0x20, 8) CAST (unique, 0x100006ca, 8), (unique, 0x100006ca, 8) INT_ADD (unique, 0x100006c2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100006c2, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21b, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x21b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x21b, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x21b, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21a, 4)]
[(register, 0x0, 8) CAST (unique, 0x100006d2, 8), (unique, 0x100006d2, 8) CALL (ram, 0x193a40, 8) , (register, 0x38, 8) , (register, 0xa8, 8), (register, 0x38, 8) CAST (unique, 0x100006ba, 8), (unique, 0x100006ba, 8) INT_ADD (unique, 0x100006b2, 8) , (register, 0x38, 8), (unique, 0x100006b2, 8) CAST (stack, 0xffffffffffffffc0, 8), (register, 0x38, 8) INT_NEGATE (unique, 0x100006aa, 8), (unique, 0x100006aa, 8) CAST (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x0, 8) , (unique, 0x100001c1, 8) , (const, 0x1, 8), (unique, 0x100001c1, 8) INT_2COMP (unique, 0x100006a2, 8), (unique, 0x100006a2, 8) CAST (register, 0xa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc50b, 8), (register, 0x20, 8) CAST (unique, 0x100006e2, 8), (unique, 0x100006e2, 8) INT_ADD (unique, 0x100006da, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100006da, 8) CAST (register, 0x20, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x222, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x221, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x222, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x221, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x222, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x221, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x222, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x221, 4), (stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x222, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x221, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x222, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x221, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x222, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x221, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1cbcf0, 8) , (register, 0xb8, 8) , (register, 0x30, 8) , (register, 0x10, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x100004da, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1cc580, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100006ea, 8), (unique, 0x100006ea, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x222, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x222, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x1cc5a6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb8, 8) , (const, 0x0, 8)]
[(unique, 0x1000043a, 8) COPY (register, 0x30, 8)]
[(unique, 0x10000526, 4) COPY (register, 0x10, 4), (register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x1cc5b2, 1)]
[(unique, 0x10000442, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000043a, 8) , (unique, 0x10000442, 8)]
[(unique, 0x1000052a, 4) COPY (register, 0x30, 4), (register, 0x30, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) COPY (unique, 0x1000052e, 4), (unique, 0x1000052e, 4) MULTIEQUAL (unique, 0x10000526, 4) , (unique, 0x1000052a, 4)]
[ ---  CBRANCH (ram, 0x1cc5b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000043a, 8) , (unique, 0x10000442, 8)]
[ ---  CBRANCH (ram, 0x1cc715, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3400, 8) , (const, 0x1001, 8), (unique, 0x3400, 8) INT_ADD (stack, 0xffffffffffffffb0, 8) , (register, 0xa8, 8), (register, 0xa8, 8) INT_MULT (register, 0xa8, 8) , (const, 0x8, 8), (register, 0xa8, 8) INT_SEXT (unique, 0x100006f2, 4), (unique, 0x100006f2, 4) CAST (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0x10, 4) , (const, 0x2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc71d, 8), (register, 0x20, 8) CAST (unique, 0x10000706, 8), (unique, 0x10000706, 8) INT_ADD (unique, 0x100006fe, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100006fe, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b4, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3b4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3b3, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3b3, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3b4, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3b3, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x3b4, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x3b3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3b3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b3, 4)]
[(stack, 0xffffffffffffffb8, 4) SUBPIECE (stack, 0xffffffffffffffb8, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3b4, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffffb8, 8) COPY (unique, 0x100006f6, 8), (unique, 0x100006f6, 8) CAST (unique, 0x100002e5, 8), (unique, 0x100002e5, 8) INT_ZEXT (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x1cc5e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2141b0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc733, 8), (register, 0x20, 8) CAST (unique, 0x10000716, 8), (unique, 0x10000716, 8) INT_ADD (unique, 0x1000070e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000070e, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3ca, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3ca, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3ca, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3ca, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3ca, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3c9, 4), (stack, 0xffffffffffffffa8, 4) COPY (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x3ca, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3ca, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3ca, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3ca, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffb8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000071e, 8), (unique, 0x1000071e, 8) CALL (ram, 0x11f8a0, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x1cc757, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000071e, 8), (unique, 0x1000071e, 8) CALL (ram, 0x11f8a0, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1cc554, 1)]
[(stack, 0xffffffffffffff98, 8) COPY (register, 0x0, 8)]
[(unique, 0x100004f2, 4) COPY (stack, 0xffffffffffffffa8, 4)]
[ ---  BRANCH (ram, 0x1cc5f8, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000746, 8), (unique, 0x10000746, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3800, 8) CAST (unique, 0x1000073e, 8), (unique, 0x1000073e, 8) INT_ADD (unique, 0x10000736, 8) , (unique, 0x1000038d, 8), (unique, 0x10000736, 8) CAST (register, 0x20, 8), (unique, 0x1000038d, 8) INT_ADD (unique, 0x10000237, 8) , (const, 0xf, 8), (unique, 0x10000237, 8) INT_2COMP (register, 0xa8, 8), (register, 0xa8, 8) INT_AND (register, 0xa8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8)]
[(unique, 0x10000492, 8) COPY (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x1000072e, 8), (unique, 0x1000072e, 8) INT_ADD (unique, 0x10000726, 8) , (unique, 0x10000237, 8), (unique, 0x10000726, 8) CAST (register, 0x20, 8), (unique, 0x10000237, 8) INT_2COMP (register, 0xa8, 8), (register, 0xa8, 8) INT_AND (register, 0xa8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8)]
[(unique, 0x100004ee, 4) COPY (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000492, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xb8, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x35a, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x358, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x10000305, 8), (unique, 0x10000305, 8) COPY (const, 0x28c58b, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10000532, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1cc748, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x1, 4), (register, 0x30, 4) MULTIEQUAL (unique, 0x100004ee, 4) , (unique, 0x100004f2, 4)]
[(register, 0x38, 8) COPY (const, 0x28c58b, 8)]
[ ---  BRANCH (ram, 0x1cc58f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc63b, 8), (register, 0x20, 8) CAST (unique, 0x1000076a, 8), (unique, 0x1000076a, 8) INT_ADD (unique, 0x10000762, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000762, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a5, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3a5, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3a5, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3a4, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3a5, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3a4, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3a5, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3a4, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x3a5, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x3a4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3a5, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3a4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a4, 4)]
[ ---  CALL (ram, 0x193a40, 8) , (unique, 0x3a00, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x1000075a, 8) , (register, 0x0, 8), (unique, 0x1000075a, 8) CAST (register, 0x30, 8), (register, 0x0, 8) INT_SUB (register, 0x0, 8) , (unique, 0x3580, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x10000752, 8) , (unique, 0x100003a5, 8), (unique, 0x10000752, 8) CAST (register, 0x0, 8), (unique, 0x100003a5, 8) INT_ADD (register, 0x0, 8) , (unique, 0x1000039d, 8), (unique, 0x1000039d, 8) INT_SUB (const, 0x8, 8) , (unique, 0x3580, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0x1000074e, 4), (unique, 0x1000074e, 4) CAST (register, 0x30, 4), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x8, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x30, 4) , (const, 0x2, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(unique, 0x1000050e, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3a5, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x10000532, 8) , (const, 0x3a4, 4)]
[ ---  BRANCH (ram, 0x1cc58f, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x10000506, 8) COPY (stack, 0xffffffffffffffb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc597, 8), (register, 0x20, 8) CAST (unique, 0x1000077a, 8), (unique, 0x1000077a, 8) INT_ADD (unique, 0x10000772, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000772, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2ba, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2ba, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x2ba, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x2b9, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x2ba, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x2b9, 4), (stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2ba, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2ba, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (unique, 0x10000506, 8) , (unique, 0x1000050e, 8) , (unique, 0x10000532, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ba, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1cbcf0, 8) , (register, 0x38, 8) , (unique, 0x10000432, 8) , (register, 0x10, 8), (unique, 0x10000432, 8) COPY (stack, 0xffffffffffffffb8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x38, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (unique, 0x10000506, 8) , (unique, 0x1000050e, 8) , (unique, 0x10000532, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000782, 8), (unique, 0x10000782, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2ba, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2ba, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  BRANCH (ram, 0x1cc51a, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1cc570, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x0, 4) , (const, 0x15, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1cc536, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x6e, 4)]
[ ---  CBRANCH (ram, 0x1cc32d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x74, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x1cc536, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (register, 0x0, 4) , (const, 0x13, 4)]
[ ---  CBRANCH (ram, 0x1cc536, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1cc32d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xd, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffaf, 1) COPY (const, 0x1, 1)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1cc4c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1cc554, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffaf, 1) , (const, 0x0, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x283, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000078a, 8) , (const, 0xd, 4), (unique, 0x1000078a, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc55d, 8), (register, 0x20, 8) CAST (unique, 0x1000079a, 8), (unique, 0x1000079a, 8) INT_ADD (unique, 0x10000792, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000792, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x10000422, 8), (unique, 0x10000422, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1cc566, 8), (register, 0x20, 8) CAST (unique, 0x100007aa, 8), (unique, 0x100007aa, 8) INT_ADD (unique, 0x100007a2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100007a2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x28f, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x289, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x289, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x288, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x289, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x288, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x28f, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x28e, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x289, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x288, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x28f, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x28e, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x289, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x288, 4), (stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x289, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x288, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x289, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x288, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x289, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x288, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x1000042a, 8), (unique, 0x1000042a, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x289, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x288, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  BRANCH (ram, 0x1cc32d, 1)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
