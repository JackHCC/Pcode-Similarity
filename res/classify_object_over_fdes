[ ---  CBRANCH (ram, 0x496282, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (const, 0x0, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000121, 8) COPY (register, 0x8, 8), (register, 0x8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x496218, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x0, 8) INT_SEXT (unique, 0x10000131, 4), (unique, 0x10000131, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3a00, 8)]
[(unique, 0x10000119, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000121, 8) , (unique, 0x10000129, 8)]
[ ---  CBRANCH (ram, 0x49620b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3a00, 8)]
[(register, 0xb8, 4) INT_AND (register, 0xa0, 4) , (const, 0xff, 4)]
[ ---  CBRANCH (ram, 0x4961b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 8) , (register, 0x8, 8), (register, 0x28, 8) INT_ADD (unique, 0x10000135, 8) , (unique, 0x10000101, 8), (unique, 0x10000135, 8) CAST (register, 0x18, 8), (unique, 0x10000101, 8) INT_SUB (const, 0x4, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4962a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xff, 4), (register, 0x0, 4) CALL (ram, 0x495980, 8) , (register, 0x28, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0x0, 8) CALL (ram, 0x4956e0, 8) , (register, 0xb8, 4) , (register, 0x38, 8), (register, 0xb8, 4) INT_AND (register, 0x0, 4) , (const, 0xff, 4)]
[ ---  CBRANCH (ram, 0x4961a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 2) , (const, 0x7f8, 2), (register, 0x10, 2) INT_AND (unique, 0xbc00, 2) , (const, 0x7f8, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000013d, 8), (unique, 0x1000013d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4961b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ZEXT (register, 0x0, 1), (register, 0x0, 1) SUBPIECE (register, 0x0, 2) , (const, 0x0, 4), (register, 0x0, 2) INT_RIGHT (unique, 0xbc00, 2) , (const, 0x3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000014d, 8) , (unique, 0xbb00, 1), (unique, 0x1000014d, 8) CAST (unique, 0x3100, 8), (unique, 0xbb00, 1) INT_OR (unique, 0xbb00, 1) , (const, 0x4, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000145, 8), (unique, 0x10000145, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000155, 8) , (register, 0x0, 2), (unique, 0x10000155, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8), (register, 0x0, 2) INT_OR (register, 0x0, 2) , (unique, 0x100000d6, 2), (unique, 0x100000d6, 2) SUBPIECE (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x3, 4), (register, 0x0, 2) INT_AND (unique, 0xbc00, 2) , (const, 0xf807, 2), (register, 0x10, 4) INT_AND (register, 0x0, 4) , (const, 0xff, 4)]
[ ---  BRANCH (ram, 0x4961b1, 1)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CALL (ram, 0x4957a0, 8) , (register, 0xb8, 4) , (register, 0xb0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x10, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x4961eb, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 4) , (const, 0x8, 4), (register, 0x0, 4) CALL (ram, 0x495670, 8)]
[(register, 0x10, 8) INT_SUB (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_MULT (unique, 0x100000ca, 1) , (const, 0x8, 1), (unique, 0x100000ca, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x49620b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (stack, 0xffffffffffffffc0, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0xbe00, 8) INT_ADD (stack, 0xffffffffffffffb0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x496208, 1) , (unique, 0x100000db, 1), (unique, 0x100000db, 1) BOOL_AND (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (unique, 0xbe00, 8) , (unique, 0xbe00, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[(unique, 0x10000129, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000119, 8) , (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x49628b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000165, 8), (unique, 0x10000165, 8) INT_ADD (unique, 0x1000015d, 8) , (unique, 0x100000f1, 8), (unique, 0x1000015d, 8) CAST (register, 0x18, 8), (unique, 0x100000f1, 8) INT_ADD (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
