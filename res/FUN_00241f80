[(unique, 0x3200, 8) CAST (unique, 0x1000037d, 8), (unique, 0x1000037d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff4c, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x48, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x48, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x241fd7, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x10000359, 8) , (const, 0x48, 4), (unique, 0x10000359, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x10000361, 8) , (const, 0x48, 4), (unique, 0x10000361, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (unique, 0x10000369, 4) , (const, 0x48, 4), (unique, 0x10000369, 4) COPY (register, 0x10, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x48, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x48, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x48, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x48, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x48, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x48, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x48, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000385, 8), (unique, 0x10000385, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff4e, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff4c, 2) COPY (const, 0x10, 2)]
[(stack, 0xffffffffffffff56, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffff48, 4) COPY (const, 0xc, 4)]
[(unique, 0x10000311, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x242028, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222ec0, 8) , (const, 0x10, 4) , (const, 0x80003, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x98, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x98, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x242039, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x98, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x98, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x98, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x98, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x98, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x98, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x98, 4)]
[(unique, 0x10000319, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x242000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222870, 8) , (register, 0x0, 4) , (unique, 0x3200, 8) , (const, 0xc, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xab, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xab, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x24204e, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xab, 4)]
[(unique, 0x10000321, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x242000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222970, 8) , (register, 0x0, 4) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(unique, 0x100002ed, 4) COPY (stack, 0xffffffffffffff50, 4), (stack, 0xffffffffffffff50, 4) SUBPIECE (stack, 0xffffffffffffff4e, 8) , (const, 0x2, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xce, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xce, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x242075, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xce, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xce, 4), (stack, 0xffffffffffffffa8, 8) COPY (const, 0x301001200000014, 8)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0xce, 4), (stack, 0xffffffffffffffb4, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xce, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffef08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffef08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffef08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffef08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffef08, 8)]
[(register, 0x20, 8) CAST (unique, 0x1000038d, 8), (unique, 0x1000038d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffef08, 8)]
[(register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x121260, 8) , (const, 0x0, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb8, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffb9, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffbb, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffff4e, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff56, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffff4c, 2) COPY (const, 0x10, 2)]
[(stack, 0xffffffffffffff60, 8) COPY (const, 0x1000, 8)]
[(unique, 0x1000036d, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffef10, 8)]
[ ---  BRANCH (ram, 0x2420f1, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12c, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x12c, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x12c, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x12c, 4), (stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x12c, 4), (stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x1000036d, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x12c, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x12c, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x12c, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x12c, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x12c, 4), (stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x12c, 4), (stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x12c, 4), (stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2420e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x222d90, 8) , (register, 0x0, 4) , (unique, 0x3100, 8) , (const, 0x14, 8) , (const, 0x0, 4) , (unique, 0x3200, 8) , (const, 0xc, 4)]
[(unique, 0x10000329, 8) COPY (unique, 0x10000395, 8), (unique, 0x10000395, 8) CAST (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x242000, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(stack, 0xffffffffffffff70, 4) COPY (const, 0xc, 4)]
[(stack, 0xffffffffffffff80, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff78, 8) COPY (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (unique, 0x3200, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff98, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000375, 8) COPY (unique, 0x3200, 8)]
[ ---  BRANCH (ram, 0x242181, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x170, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x170, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x170, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x170, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x170, 4), (stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x170, 4), (stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10000375, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x170, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x170, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x170, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x170, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x170, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x170, 4), (stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x170, 4), (stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x170, 4), (stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x170, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x242170, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x222b90, 8) , (register, 0x0, 4) , (unique, 0x3200, 8) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x183, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x183, 4)]
[ ---  CALL (ram, 0x2424c0, 8) , (register, 0x0, 4) , (register, 0x0, 8)]
[(unique, 0x10000331, 8) COPY (unique, 0x100003a5, 8), (unique, 0x100003a5, 8) CAST (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x242000, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x1000039d, 8) , (const, 0x0, 8), (unique, 0x1000039d, 8) CAST (stack, 0xffffffffffffff18, 8), (stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x10000351, 8) , (const, 0x183, 4), (unique, 0x10000351, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000339, 8) COPY (unique, 0x100003ad, 8), (unique, 0x100003ad, 8) CAST (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x242000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000021f, 4) , (const, 0x0, 4), (unique, 0x1000021f, 4) INT_AND (stack, 0xffffffffffffff98, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x242130, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0xf, 8) , (unique, 0x100003b5, 8), (unique, 0x100003b5, 8) CAST (stack, 0xffffffffffffff18, 8)]
[(register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff28, 8)]
[ ---  CBRANCH (ram, 0x242130, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff28, 8)]
[ ---  CBRANCH (ram, 0x242130, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (register, 0x10, 8) , (stack, 0xffffffffffffff18, 8)]
[(unique, 0x100002f9, 8) COPY (stack, 0xffffffffffffff18, 8)]
[(unique, 0x10000309, 8) COPY (stack, 0xffffffffffffff28, 8)]
[ ---  CBRANCH (ram, 0x2422d6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff50, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff50, 4) SUBPIECE (stack, 0xffffffffffffff4e, 8) , (const, 0x2, 8)]
[(unique, 0x10000241, 1) COPY (const, 0x0, 1)]
[(unique, 0x100002f1, 8) COPY (stack, 0xffffffffffffff18, 8)]
[(unique, 0x10000301, 8) COPY (stack, 0xffffffffffffff28, 8)]
[ ---  BRANCH (ram, 0x24223c, 1)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(unique, 0x10000240, 1) MULTIEQUAL (unique, 0x10000241, 1) , (unique, 0x1000023e, 1)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x100002f1, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x242210, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100002ed, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x3, 8) , (const, 0x4, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000301, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x242210, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb0, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x242200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x10, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100003bd, 8), (unique, 0x100003bd, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x24220d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x3, 2)]
[(unique, 0x1000023f, 1) COPY (const, 0x1, 1)]
[(unique, 0x1000022e, 4) INT_ZEXT (unique, 0x10000232, 1), (unique, 0x10000232, 1) BOOL_AND (unique, 0xc800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x308, 2), (unique, 0xc800, 1) INT_LESS (const, 0x1, 2) , (unique, 0x100003d5, 2), (unique, 0x100003d5, 2) CAST (register, 0x30, 2), (register, 0x30, 2) INT_SUB (unique, 0xbc00, 2) , (const, 0x300, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100003cd, 8), (unique, 0x100003cd, 8) INT_ADD (unique, 0x100003c5, 8) , (const, 0x12, 8), (unique, 0x100003c5, 8) CAST (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x242310, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x305, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff38, 8) , (unique, 0x1000022e, 4)]
[ ---  CBRANCH (ram, 0x24234d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff44, 4) , (register, 0xb8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x30e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff30, 8) , (unique, 0x1000022e, 4)]
[ ---  BRANCH (ram, 0x2422b0, 1)]
[(unique, 0x10000239, 1) COPY (const, 0x1, 1)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x242296, 1)]
[(register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x242334, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff44, 4) , (unique, 0xbc80, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(unique, 0x10000236, 1) CAST (unique, 0x100003d7, 1), (unique, 0x100003d7, 1) INT_AND (unique, 0x10000238, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff44, 4) , (const, 0xffffffff, 4), (unique, 0x10000238, 1) MULTIEQUAL (register, 0x206, 1) , (unique, 0x10000239, 1)]
[(stack, 0xffffffffffffff44, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2f2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff30, 8) , (unique, 0x1000022e, 4)]
[ ---  BRANCH (ram, 0x2422a4, 1)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x242210, 1) , (unique, 0x10000234, 1), (unique, 0x10000234, 1) MULTIEQUAL (unique, 0x10000236, 1) , (register, 0x206, 1)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(unique, 0x1000023e, 1) MULTIEQUAL (unique, 0x10000240, 1) , (unique, 0x10000240, 1) , (unique, 0x10000240, 1) , (unique, 0x10000240, 1) , (unique, 0x1000023f, 1)]
[(register, 0x8, 8) CAST (unique, 0x100003e0, 8), (unique, 0x100003e0, 8) INT_ADD (unique, 0x100003d8, 8) , (register, 0x10, 8), (unique, 0x100003d8, 8) CAST (register, 0x8, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0xfffffffc, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x3, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2422f0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_SUB (register, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0xfffffffc, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x3, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4)]
[(register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2422f0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x10, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2422f0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ZEXT (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x242130, 1) , (unique, 0x1000023e, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x293, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x293, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x293, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x293, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x293, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x293, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x293, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x293, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x293, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x293, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[(unique, 0x10000341, 8) COPY (unique, 0x100003e8, 8), (unique, 0x100003e8, 8) CAST (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x242000, 1)]
[(register, 0x8, 8) CAST (unique, 0x100003f8, 8), (unique, 0x100003f8, 8) INT_ADD (unique, 0x100003f0, 8) , (register, 0x10, 8), (unique, 0x100003f0, 8) CAST (register, 0x8, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0xfffffffc, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x3, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000309, 8) , (register, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2422c0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_SUB (register, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0xfffffffc, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x3, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (unique, 0x100002f9, 8) , (register, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x242130, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x10, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x242130, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ZEXT (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x242300, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000400, 8), (unique, 0x10000400, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x380, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x380, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x380, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x380, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x380, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x380, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x380, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x380, 4)]
[ ---  CALL (ram, 0x2424c0, 8) , (register, 0x0, 4) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000349, 8) COPY (unique, 0x10000408, 8), (unique, 0x10000408, 8) CAST (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x242000, 1)]
[ ---  CBRANCH (ram, 0x242000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000410, 8), (unique, 0x10000410, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000311, 8) , (unique, 0x10000319, 8) , (unique, 0x10000321, 8) , (unique, 0x10000329, 8) , (unique, 0x10000331, 8) , (unique, 0x10000339, 8) , (unique, 0x10000341, 8) , (unique, 0x10000349, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x24235b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000418, 8), (unique, 0x10000418, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x1000024b, 8), (unique, 0x1000024b, 8) PTRSUB (const, 0x0, 8) , (const, 0x242360, 8), (register, 0x20, 8) CAST (unique, 0x10000428, 8), (unique, 0x10000428, 8) INT_ADD (unique, 0x10000420, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000420, 8) CAST (register, 0x20, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8d, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x8d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8d, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8d, 4)]
[ ---  RETURN (const, 0x1, 4)]
