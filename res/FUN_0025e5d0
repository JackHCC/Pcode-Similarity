[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb80, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100001d7, 8), (unique, 0x100001d7, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) COPY (const, 0x400, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb80, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb88, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb7c, 8)]
[ ---  BRANCH (ram, 0x25e642, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x56, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x56, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x56, 4), (stack, 0xfffffffffffffb80, 8) MULTIEQUAL (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x56, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x56, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100001cb, 8) COPY (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x56, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x3100, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x100001c7, 4) COPY (stack, 0xfffffffffffffb7c, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x56, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[ ---  CBRANCH (ram, 0x25e672, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x235c80, 8) , (register, 0x38, 8) , (const, 0x2, 4) , (unique, 0x3800, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffbb0, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x3100, 8) , (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[ ---  CBRANCH (ram, 0x25e700, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x25e743, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x400000002, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100001df, 8), (unique, 0x100001df, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffb80, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x155, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x100001e7, 8), (unique, 0x100001e7, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffb80, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x25e6a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffba8, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x15a, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x15a, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x15a, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15a, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xfffffffffffffba8, 8)]
[ ---  BRANCH (ram, 0x25e6a8, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000017d, 8) , (const, 0xc, 4), (unique, 0x1000017d, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x259750, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x129, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x11e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001ef, 8) , (const, 0x61, 4), (unique, 0x100001ef, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x1000018d, 8) , (const, 0x8, 8), (unique, 0x1000018d, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x259750, 8)]
[ ---  CBRANCH (ram, 0x25e6f6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001cb, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x132, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x132, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x132, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x132, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x132, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x132, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x100001cb, 8)]
[ ---  BRANCH (ram, 0x25e6a8, 1)]
[ ---  CBRANCH (ram, 0x25e6d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb7c, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x25e6d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001f7, 8), (unique, 0x100001f7, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe3, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0xe3, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf1, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xe3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000165, 8) , (const, 0xd, 4), (unique, 0x10000165, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x259750, 8)]
[ ---  CBRANCH (ram, 0x25e6f6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffba8, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xe3, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfe, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfe, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0xfe, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfe, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfe, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb80, 8) MULTIEQUAL (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x25e6a8, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x98, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x98, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x98, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x98, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x98, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x98, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x98, 4)]
[ ---  CBRANCH (ram, 0x25e638, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (unique, 0x3800, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa6, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0xa6, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xa6, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000013d, 8) , (const, 0xc, 4), (unique, 0x1000013d, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x259750, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xab, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa8, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001ff, 8) , (const, 0xc, 4), (unique, 0x100001ff, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x1000014d, 8) , (const, 0x8, 8), (unique, 0x1000014d, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x259750, 8)]
[(unique, 0x100001d3, 4) COPY (unique, 0x100001c7, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb80, 8) MULTIEQUAL (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100001d3, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x25e774, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000207, 8), (unique, 0x10000207, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0xd8, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xd8, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd8, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd8, 4)]
[ ---  RETURN (const, 0x1, 4)]
