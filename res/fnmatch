[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004db, 8), (unique, 0x100004db, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x100004cb, 8) COPY (register, 0x30, 8)]
[(unique, 0x100004d3, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1ed838, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100004eb, 8), (unique, 0x100004eb, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xa8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100004e3, 8), (unique, 0x100004e3, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eadc8, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xae, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0xae, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xae, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff70, 8) COPY (const, 0x1ed84e, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xae, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xae, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xae, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x100004cb, 8) , (const, 0xae, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x100004d3, 8) , (const, 0xae, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x100004c3, 8) , (const, 0xae, 4), (unique, 0x100004c3, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xae, 4), (stack, 0xffffffffffffffb8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0xae, 4)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[ ---  CBRANCH (ram, 0x1edabb, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (const, 0x400, 8), (register, 0x0, 8) CALL (ram, 0x121000, 8) , (register, 0x38, 8) , (const, 0x400, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000483, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x1ed8ac, 1)]
[(register, 0x20, 8) PTRADD (unique, 0x1000035b, 8) , (unique, 0x1000013a, 8) , (const, 0x1, 8), (unique, 0x1000035b, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x1000013a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000373, 8) , (unique, 0x1000013a, 8) , (const, 0x1, 8), (unique, 0x10000373, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x1000013a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000038b, 8) , (unique, 0x1000013a, 8) , (const, 0x1, 8), (unique, 0x1000038b, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x1000013a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000503, 8) , (const, 0x1ed88f, 8), (unique, 0x10000503, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000403, 8) , (unique, 0x100003fb, 8) , (const, 0x1, 8), (unique, 0x10000403, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x100003fb, 8) INT_ADD (unique, 0x1000013a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000013a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xef, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0xef, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xef, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xef, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xef, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xef, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xef, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xef, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xef, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xef, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xef, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xef, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xee, 4)]
[ ---  CBRANCH (ram, 0x1edab1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x1bde00, 8) , (unique, 0x1000050b, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x1000050b, 8) CAST (unique, 0x3800, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0x3800, 8) CAST (unique, 0x100004fb, 8), (unique, 0x100004fb, 8) INT_ADD (unique, 0x100004f3, 8) , (unique, 0x1000013a, 8), (unique, 0x100004f3, 8) CAST (unique, 0x100003eb, 8), (unique, 0x100003eb, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8), (unique, 0x1000013a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1eda70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1ed91b, 1)]
[(stack, 0xffffffffffffffb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000047b, 8) COPY (register, 0x20, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000513, 8) , (const, 0x1ed8bf, 8), (unique, 0x10000513, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000047b, 8) , (unique, 0x10000483, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x124, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x124, 4), (ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x124, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x124, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x123, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x124, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x123, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x124, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x123, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x124, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x123, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x124, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x123, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x124, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x123, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x124, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x123, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x124, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x123, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x124, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x123, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1edab1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x1bde00, 8) , (const, 0x0, 8) , (unique, 0x3100, 8) , (const, 0x0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa0, 8)]
[ ---  CBRANCH (ram, 0x1eda86, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (const, 0x3fffffffffffffff, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000051b, 8) , (const, 0x1ed8ed, 8), (unique, 0x1000051b, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x142, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x142, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x142, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x142, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x142, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x142, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x142, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x142, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x142, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000523, 8), (unique, 0x10000523, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3680, 8), (unique, 0x3680, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1edb18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb8, 4) , (const, 0x0, 4), (stack, 0xffffffffffffffb8, 4) SUBPIECE (stack, 0xffffffffffffffb8, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x142, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x141, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000052b, 8) , (unique, 0x100002d3, 8), (unique, 0x1000052b, 8) CAST (register, 0x20, 8), (unique, 0x100002d3, 8) PTRSUB (const, 0x0, 8) , (const, 0x1edb37, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2dc, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2dc, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2dc, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2dc, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2dc, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2dc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2dc, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000303, 8) , (unique, 0x100002eb, 8) , (const, 0x176, 4) , (unique, 0x1000031b, 8), (unique, 0x1000031b, 8) COPY (const, 0x2b9808, 8), (unique, 0x10000303, 8) COPY (const, 0x2b54f6, 8), (unique, 0x100002eb, 8) COPY (const, 0x2b54ec, 8)]
[(ram, 0x4eadc8, 8) COPY (ram, 0x4eadc8, 8), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x2dd, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2dd, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1eda94, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000533, 8) , (const, 0x1ed91b, 8), (unique, 0x10000533, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x166, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x166, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x166, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x166, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x166, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x166, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x166, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x166, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x166, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x166, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x166, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x165, 4)]
[ ---  CALL (ram, 0x1bde00, 8) , (unique, 0x1000053b, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x1000053b, 8) CAST (register, 0x0, 8)]
[(unique, 0x1000044b, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3800, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x1000044b, 8) , (register, 0x20, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x0, 8)]
[(unique, 0x10000443, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x1edaf9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb8, 4) , (const, 0x0, 4), (stack, 0xffffffffffffffb8, 4) SUBPIECE (stack, 0xffffffffffffffb8, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000543, 8) , (const, 0x1edb18, 8), (unique, 0x10000543, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2d4, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2d3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2d4, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2d3, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2d4, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2d3, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2d4, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2d3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2d4, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2d3, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2d4, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2d3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d3, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100002fb, 8) , (unique, 0x100002e3, 8) , (const, 0x17c, 4) , (unique, 0x10000313, 8), (unique, 0x10000313, 8) COPY (const, 0x2b9808, 8), (unique, 0x100002fb, 8) COPY (const, 0x2b54f6, 8), (unique, 0x100002e3, 8) COPY (const, 0x2b54ec, 8)]
[(ram, 0x4eadc8, 8) COPY (ram, 0x4eadc8, 8), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x2d4, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2d4, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000054b, 8) , (const, 0x1ed939, 8), (unique, 0x1000054b, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17d, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x17d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x17d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x17d, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x17d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x17d, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x17d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x17d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x17d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x17d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x17d, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffffb0, 8) COPY (unique, 0x10000443, 8)]
[(unique, 0x1000046b, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1ed999, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (const, 0x400, 8), (register, 0x0, 8) CALL (ram, 0x121000, 8) , (unique, 0x10000443, 8) , (const, 0x400, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001aa, 8) , (const, 0x1, 8), (unique, 0x100001aa, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001aa, 8) , (const, 0x1, 8), (unique, 0x100001aa, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x18, 8) INT_ADD (register, 0x18, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000563, 8) , (const, 0x1ed979, 8), (unique, 0x10000563, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100003c3, 8) , (const, 0x1, 8), (unique, 0x100003c3, 8) INT_ADD (unique, 0x100001aa, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100001aa, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c8, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x1c8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1c7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1c7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1c7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1c7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1c7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1c7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1c7, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1c7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c7, 4)]
[(unique, 0x10000453, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001aa, 8) , (const, 0x1, 8), (unique, 0x100001aa, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1edaa8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CAST (unique, 0x1000056b, 8), (unique, 0x1000056b, 8) CALL (ram, 0x1bde00, 8) , (register, 0xb8, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8), (register, 0xb8, 8) CAST (unique, 0x1000055b, 8), (unique, 0x1000055b, 8) INT_AND (unique, 0x10000553, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000553, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100003bb, 8) , (const, 0x1, 8), (unique, 0x100003bb, 8) INT_ADD (unique, 0x100001aa, 8) , (const, 0xf, 8), (unique, 0x100001aa, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1edaa0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1eda24, 1)]
[(stack, 0xffffffffffffffb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000473, 8) COPY (register, 0x20, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000573, 8) , (const, 0x1ed9ac, 8), (unique, 0x10000573, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000046b, 8) , (unique, 0x10000473, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1fe, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x1fe, 4), (ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1fe, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000423, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x1000045b, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000046b, 8) , (unique, 0x10000473, 8)]
[ ---  CBRANCH (ram, 0x1edaa8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CAST (unique, 0x1000057b, 8), (unique, 0x1000057b, 8) CALL (ram, 0x1bde00, 8) , (const, 0x0, 8) , (unique, 0x3100, 8) , (const, 0x0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000583, 8) , (const, 0x1edab1, 8), (unique, 0x10000583, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) COPY (unique, 0x10000463, 8), (unique, 0x10000463, 8) MULTIEQUAL (unique, 0x10000453, 8) , (unique, 0x1000045b, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2c0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x2c0, 4), (ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2c0, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2c0, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2c0, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2c0, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2c0, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2c0, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2c0, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2c0, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2c0, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x1000043b, 8), (unique, 0x1000043b, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x1ed813, 1)]
[ ---  CBRANCH (ram, 0x1eda7d, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x3ffffffffffffffe, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000058b, 8) , (const, 0x1eda86, 8), (unique, 0x1000058b, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b4, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x2b4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2b4, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b3, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000423, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x2b8, 4), (ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2b8, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000593, 8) , (const, 0xc, 4), (unique, 0x10000593, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 4) COPY (const, 0xfffffffe, 4)]
[ ---  BRANCH (ram, 0x1ed813, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005b3, 8) , (const, 0x1ed9e5, 8), (unique, 0x100005b3, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x223, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x223, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x223, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x223, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x223, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x222, 4), (stack, 0xffffffffffffff80, 8) COPY (register, 0x0, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x223, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x223, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x223, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x223, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x223, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x222, 4)]
[(unique, 0x1000042b, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x223, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x222, 4)]
[(unique, 0x1000041b, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x223, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x222, 4), (stack, 0xffffffffffffff88, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005a3, 8), (unique, 0x100005a3, 8) INT_ADD (unique, 0x1000059b, 8) , (const, 0x1, 8), (unique, 0x1000059b, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1edac2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100005bb, 8), (unique, 0x100005bb, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3680, 8), (unique, 0x3680, 8) INT_MULT (unique, 0x100005ab, 8) , (const, 0x4, 8), (unique, 0x100005ab, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005a3, 8), (unique, 0x100005a3, 8) INT_ADD (unique, 0x1000059b, 8) , (const, 0x1, 8), (unique, 0x1000059b, 8) CAST (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005c3, 8) , (const, 0x1edacb, 8), (unique, 0x100005c3, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2ac, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x2ac, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2ac, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ab, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x1000042b, 8)]
[(register, 0x0, 4) COPY (const, 0xfffffffe, 4)]
[ ---  BRANCH (ram, 0x1ed813, 1)]
[ ---  CBRANCH (ram, 0x1edada, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb8, 4) , (const, 0x0, 4), (stack, 0xffffffffffffffb8, 4) SUBPIECE (stack, 0xffffffffffffffb8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005cb, 8) , (const, 0x1edaf9, 8), (unique, 0x100005cb, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2a4, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2a3, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a4, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a3, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2a4, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2a3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2a4, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2a3, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2a4, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2a3, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2a4, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2a3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2a4, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2a3, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2a4, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2a3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a3, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100002f3, 8) , (unique, 0x100002db, 8) , (const, 0x1ae, 4) , (unique, 0x1000030b, 8), (unique, 0x1000030b, 8) COPY (const, 0x2b9808, 8), (unique, 0x100002f3, 8) COPY (const, 0x2b54f6, 8), (unique, 0x100002db, 8) COPY (const, 0x2b54ec, 8)]
[(ram, 0x4eadc8, 8) COPY (ram, 0x4eadc8, 8), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x2a4, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2a4, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005d3, 8) , (const, 0x1eda19, 8), (unique, 0x100005d3, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x24e, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x24e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x24d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x24d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x24d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x24d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x24d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x24d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24d, 4)]
[ ---  CALL (ram, 0x1bde00, 8) , (register, 0x0, 8) , (unique, 0x3100, 8) , (unique, 0x100005db, 8) , (unique, 0x3100, 8), (unique, 0x100005db, 8) CAST (unique, 0x1000041b, 8)]
[(unique, 0x1000048b, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x24d, 4), (stack, 0xffffffffffffff80, 8) COPY (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000493, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x24d, 4), (stack, 0xffffffffffffff88, 8) COPY (register, 0x0, 8)]
[(unique, 0x1000049b, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x24e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x24d, 4), (stack, 0xffffffffffffff88, 8) COPY (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005eb, 8) , (register, 0x18, 8), (unique, 0x100005eb, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8) , (const, 0x1, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005f3, 8) , (const, 0x1eda48, 8), (unique, 0x100005f3, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000060b, 8) , (const, 0x1eda57, 8), (unique, 0x1000060b, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000413, 8), (unique, 0x10000413, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x284, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff80, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x10000493, 8) , (register, 0x90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000613, 8) , (const, 0x1eda60, 8), (unique, 0x10000613, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x294, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28e, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x284, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x294, 4), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x28e, 4), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x284, 4), (ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x294, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x28e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x284, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x294, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x293, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x284, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x266, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x294, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x293, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x284, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff80, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x10000493, 8) , (register, 0x90, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x294, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x293, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x284, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x266, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x294, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x293, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x284, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x266, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x294, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x293, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x284, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x283, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x266, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x294, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x293, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x284, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x283, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x266, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x294, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x293, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x284, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x283, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x266, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x294, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x293, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x284, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x283, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x266, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000433, 8), (unique, 0x10000433, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x284, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x266, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 4) SUBPIECE (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x294, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x293, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x28d, 4), (stack, 0xffffffffffffff88, 8) CAST (unique, 0x10000603, 8), (unique, 0x10000603, 8) INT_OR (unique, 0x100002ab, 8) , (unique, 0x100002b3, 8), (unique, 0x100002b3, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x100002ab, 8) INT_AND (unique, 0x100005fb, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100005fb, 8) CAST (stack, 0xffffffffffffff88, 8), (register, 0x0, 4) CALL (ram, 0x1ea0b0, 8) , (register, 0xa0, 8) , (register, 0xb8, 8) , (unique, 0x3400, 8) , (register, 0x8, 4) , (register, 0x10, 4) , (const, 0x0, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x284, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x283, 4), (register, 0x8, 4) INT_AND (register, 0x10, 4) , (const, 0x4, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x266, 4), (unique, 0x3400, 8) PTRADD (register, 0xb8, 8) , (unique, 0x100005e3, 8) , (const, 0x4, 8), (unique, 0x100005e3, 8) CAST (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x1000048b, 8) , (register, 0x0, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x1000049b, 8) , (register, 0xb8, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  BRANCH (ram, 0x1ed813, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4e, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x7a, 4), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x4e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4e, 4), (stack, 0xffffffffffffff70, 8) COPY (const, 0x1ed7f0, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x4e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x100004cb, 8) , (const, 0x4e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x100004d3, 8) , (const, 0x4e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x4e, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x4e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x4e, 4)]
[(register, 0x0, 4) CALL (ram, 0x1ec050, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (unique, 0x3400, 8) , (register, 0x8, 4) , (register, 0x10, 4) , (const, 0x0, 8) , (const, 0x0, 8), (register, 0x8, 4) INT_AND (register, 0x10, 4) , (const, 0x4, 4), (unique, 0x3400, 8) PTRADD (register, 0x30, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xffffffffffffff88, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1edad5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000061b, 8), (unique, 0x1000061b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000623, 8) , (const, 0x1edada, 8), (unique, 0x10000623, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa1, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eadc8, 8) COPY (ram, 0x4eadc8, 8), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0xa2, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa2, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eadc8, 8) COPY (ram, 0x4eadc8, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x0, 4)]
