[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[ ---  CBRANCH (ram, 0x47d683, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8)]
[(ram, 0x4c4aa0, 4) COPY (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4ec0, 8) COPY (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4ec8, 8) COPY (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ed0, 8) COPY (ram, 0x4c4ed0, 8)]
[(ram, 0x4c7f40, 8) COPY (ram, 0x4c7f40, 8)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(register, 0x30, 8) PTRADD (unique, 0x10000353, 8) , (unique, 0x100000da, 8) , (const, 0x1, 8), (unique, 0x10000353, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8), (unique, 0x100000da, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3a00, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (register, 0x30, 8) , (const, 0x17, 8), (register, 0x0, 8) INT_ADD (ram, 0x4c4ec0, 8) , (ram, 0x4c7f40, 8)]
[(unique, 0x100000fa, 4) SUBPIECE (unique, 0x3a00, 8) , (const, 0x0, 4), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (register, 0x30, 8) , (const, 0x17, 8), (register, 0x0, 8) INT_ADD (ram, 0x4c4ec0, 8) , (ram, 0x4c7f40, 8)]
[(unique, 0x1000066f, 8) COPY (register, 0x20, 8)]
[(unique, 0x100002c9, 8) MULTIEQUAL (unique, 0x1000066f, 8) , (unique, 0x10000677, 8)]
[(unique, 0x100002d1, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x47d4b9, 1) , (unique, 0x100002c8, 1), (unique, 0x100002c8, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x30, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100002c9, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006b7, 8) , (unique, 0xbe00, 8), (unique, 0x100006b7, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006af, 8), (unique, 0x100006af, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100002c9, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100002c9, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10000677, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100002c9, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100002d1, 8) , (unique, 0x10000102, 8) , (const, 0x1, 8), (unique, 0x10000102, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x100000fa, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x47d9f3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x100000fa, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006c7, 8) , (unique, 0xbe00, 8), (unique, 0x100006c7, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006bf, 8), (unique, 0x100006bf, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x100002d1, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x47d4cb, 1)]
[(register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x4000000, 4)]
[(stack, 0xffffffffffffff08, 4) COPY (const, 0x0, 4)]
[(register, 0x0, 8) CAST (unique, 0x100006d7, 8), (unique, 0x100006d7, 8) INT_AND (unique, 0x100006cf, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100006cf, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x100002d1, 8) , (unique, 0x10000363, 8) , (const, 0x1, 8), (unique, 0x10000363, 8) INT_ADD (unique, 0x10000102, 8) , (const, 0xf, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000060f, 8) COPY (register, 0x8, 8)]
[(unique, 0x10000637, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000657, 8) COPY (register, 0x88, 8)]
[(unique, 0x1000065f, 8) COPY (register, 0x38, 8)]
[(unique, 0x10000667, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (unique, 0x10000667, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (unique, 0x1000065f, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (unique, 0x10000657, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (register, 0x10, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (unique, 0x10000637, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (unique, 0x1000060f, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006df, 8), (unique, 0x100006df, 8) CAST (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbe00, 8)]
[(unique, 0x100005df, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x47d880, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (ram, 0x4c87c0, 4) , (const, 0x1, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(unique, 0x100005e7, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x47d51c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffee0, 8), (unique, 0xbd80, 8) CAST (unique, 0x100006e7, 8), (unique, 0x100006e7, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100006ef, 8), (unique, 0x100006ef, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x10, 8)]
[(register, 0x8, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001de, 8) , (const, 0x1, 8), (unique, 0x100001de, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffff000, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0xf, 8), (register, 0x0, 8) INT_ADD (ram, 0x4c4ec0, 8) , (ram, 0x4c7f40, 8)]
[(unique, 0x100001fe, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0xf, 8), (register, 0x0, 8) INT_ADD (ram, 0x4c4ec0, 8) , (ram, 0x4c7f40, 8)]
[(unique, 0x1000067f, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x47d8ec, 1) , (unique, 0x100002d9, 1), (unique, 0x100002d9, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x8, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000067f, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006ff, 8) , (unique, 0xbe00, 8), (unique, 0x100006ff, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006f7, 8), (unique, 0x100006f7, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000206, 8) , (const, 0x1, 8), (unique, 0x10000206, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100001fe, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000206, 8) , (const, 0x1, 8), (unique, 0x10000206, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100001fe, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000206, 8) , (const, 0x1, 8), (unique, 0x10000206, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100001fe, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000206, 8) , (const, 0x1, 8), (unique, 0x10000206, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100001fe, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x47d900, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100001fe, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000070f, 8) , (unique, 0xbe00, 8), (unique, 0x1000070f, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000707, 8), (unique, 0x10000707, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000717, 8) , (const, 0x47d911, 8), (unique, 0x10000717, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000042b, 8) , (const, 0x1, 8), (unique, 0x1000042b, 8) INT_ADD (unique, 0x10000206, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x4b1, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x4b1, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4b1, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4b1, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4b1, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x1000062f, 8) , (const, 0x4b1, 4), (unique, 0x1000062f, 8) COPY (register, 0x20, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4b1, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x4b1, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x100002eb, 8), (unique, 0x100002eb, 8) COPY (const, 0x4af53e, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000071f, 8), (unique, 0x1000071f, 8) CAST (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4b1, 4)]
[(unique, 0x10000687, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000697, 8) COPY (register, 0xb8, 8)]
[(unique, 0x100006a7, 8) COPY (unique, 0x10000727, 8), (unique, 0x10000727, 8) CAST (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4b1, 4)]
[(unique, 0x100004b3, 8) MULTIEQUAL (unique, 0x10000687, 8) , (unique, 0x1000068f, 8)]
[(unique, 0x100004bb, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x18, 4)]
[(unique, 0x100004c8, 8) MULTIEQUAL (unique, 0x10000697, 8) , (unique, 0x1000069f, 8)]
[(unique, 0x100004d0, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100004d8, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(unique, 0x100004e0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(unique, 0x100004e4, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(unique, 0x100004ec, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(unique, 0x100004f4, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(unique, 0x100004fc, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(unique, 0x10000504, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(unique, 0x10000510, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x10000520, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x10000528, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(unique, 0x10000530, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x10000538, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10000540, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(unique, 0x10000544, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(unique, 0x10000548, 8) MULTIEQUAL (unique, 0x100006a7, 8) , (register, 0xb0, 8)]
[(unique, 0x10000550, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10000558, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(unique, 0x10000560, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(unique, 0x10000568, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(unique, 0x10000570, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(unique, 0x10000578, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(unique, 0x100005ff, 8) COPY (unique, 0x10000508, 8), (unique, 0x10000508, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(unique, 0x1000061f, 8) COPY (unique, 0x10000518, 8), (unique, 0x10000518, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x47da1f, 1) , (unique, 0x100004c7, 1), (unique, 0x100004c7, 1) INT_NOTEQUAL (unique, 0x100004bf, 8) , (const, 0x0, 8), (unique, 0x100004bf, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000607, 8) COPY (unique, 0x100004c8, 8)]
[(unique, 0x10000627, 8) COPY (unique, 0x100004b3, 8)]
[ ---  CBRANCH (ram, 0x47da11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000538, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000072f, 8), (unique, 0x1000072f, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100004bf, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000747, 8) , (const, 0x47d959, 8), (unique, 0x10000747, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000044b, 8) , (const, 0x1, 8), (unique, 0x1000044b, 8) INT_ADD (unique, 0x10000206, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x100004d0, 8) , (const, 0x4e4, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (unique, 0x100004d8, 8) , (const, 0x4e4, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (unique, 0x100004e0, 4) , (const, 0x4e4, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (unique, 0x100004e4, 8) , (const, 0x4e4, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (unique, 0x100004f4, 8) , (const, 0x4e4, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (unique, 0x100004fc, 8) , (const, 0x4e4, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (unique, 0x10000504, 4) , (const, 0x4e4, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (unique, 0x10000607, 8) , (const, 0x4e4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x10000510, 8) , (const, 0x4e4, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x10000627, 8) , (const, 0x4e4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10000520, 8) , (const, 0x4e4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10000528, 8) , (const, 0x4e4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10000530, 8) , (const, 0x4e4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x10000538, 8) , (const, 0x4e4, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (unique, 0x10000540, 4) , (const, 0x4e4, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (unique, 0x10000544, 4) , (const, 0x4e4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x10000550, 8) , (const, 0x4e4, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x10000558, 8) , (const, 0x4e4, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x10000560, 8) , (const, 0x4e4, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x10000568, 8) , (const, 0x4e4, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x10000570, 8) , (const, 0x4e4, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (unique, 0x10000578, 4) , (const, 0x4e4, 4)]
[(register, 0x0, 8) CALL (ram, 0x401160, 8) , (register, 0x20, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000073f, 8), (unique, 0x1000073f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100004bf, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000737, 8), (unique, 0x10000737, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100004bf, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x47da00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4ec8, 8) , (const, 0x0, 8), (ram, 0x4c4ec8, 8) INDIRECT (unique, 0x100004ec, 8) , (const, 0x4e4, 4)]
[(unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000433, 8) , (const, 0x1, 8), (unique, 0x10000433, 8) INT_ADD (unique, 0x10000206, 8) , (const, 0x1, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100005d7, 8) COPY (ram, 0x4c4ec8, 8)]
[ ---  BRANCH (ram, 0x47d9c1, 1)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 4) MULTIEQUAL (unique, 0x100004bb, 4) , (register, 0x18, 4)]
[(unique, 0x100005c7, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100005d7, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x47d9b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000767, 8), (unique, 0x10000767, 8) INT_ADD (unique, 0x1000075f, 8) , (unique, 0x10000483, 8), (unique, 0x1000075f, 8) CAST (unique, 0x1000048b, 8), (unique, 0x1000048b, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x78, 8), (unique, 0x10000483, 8) CAST (unique, 0x10000757, 8), (unique, 0x10000757, 8) INT_ADD (unique, 0x1000074f, 8) , (unique, 0x3900, 8), (unique, 0x1000074f, 8) CAST (unique, 0x1000059d, 8), (unique, 0x1000059d, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0x3900, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000548, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000777, 8) , (const, 0x47d9e9, 8), (unique, 0x10000777, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000453, 8) , (const, 0x1, 8), (unique, 0x10000453, 8) INT_ADD (unique, 0x10000206, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x54a, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x54a, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x54a, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x54a, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x54a, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x54a, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x54a, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x54a, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x54a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x54a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x54a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x54a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x54a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x54a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x54a, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x54a, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x54a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x54a, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x54a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x54a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x54a, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x54a, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x54a, 4)]
[ ---  CBRANCH (ram, 0x47d980, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x20, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000077f, 8), (unique, 0x1000077f, 8) CALL (ram, 0x401160, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x1000076f, 8), (unique, 0x1000076f, 8) INT_ADD (register, 0x0, 8) , (ram, 0x4c4ed0, 8), (register, 0x0, 8) INT_MULT (register, 0xb8, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x47da90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff30, 8)]
[ ---  CBRANCH (ram, 0x47d98d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x20, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x625, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x625, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x625, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x625, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x625, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x625, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x625, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x635, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x635, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x635, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x635, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x635, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x635, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x635, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x47d991, 1)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x557, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x557, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x557, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x557, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x557, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x557, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x557, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x47d991, 1)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x38, 8) COPY (const, 0x4af52b, 8)]
[ ---  CBRANCH (ram, 0x47d9a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 4) , (const, 0x0, 4)]
[(register, 0x38, 8) COPY (const, 0x4b50a6, 8)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000787, 8) , (const, 0x47d9b1, 8), (unique, 0x10000787, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000045b, 8) , (const, 0x1, 8), (unique, 0x1000045b, 8) INT_ADD (unique, 0x10000206, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x57f, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x57f, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x57f, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x57f, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x57f, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x57f, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x57f, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x57f, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x57f, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x57f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x57f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x57f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x57f, 4)]
[ ---  CALL (ram, 0x4853d0, 8) , (register, 0x38, 8) , (register, 0x20, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[(unique, 0x100005cf, 8) COPY (ram, 0x4c4ec8, 8), (ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x57f, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x47da00, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0xb8, 8) , (register, 0x10, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100005c7, 8) , (unique, 0x100005cf, 8)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 4) MULTIEQUAL (unique, 0x100004bb, 4) , (register, 0x18, 4)]
[(register, 0xb0, 8) PTRADD (unique, 0x10000548, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x1000068f, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x1000069f, 8) COPY (stack, 0xfffffffffffffed0, 8), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000548, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (unique, 0x1000061f, 8) , (unique, 0x10000627, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (unique, 0x100005ff, 8) , (unique, 0x10000607, 8)]
[ ---  CBRANCH (ram, 0x47daa3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000530, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000078f, 8) , (const, 0x47dab8, 8), (unique, 0x1000078f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000043b, 8) , (const, 0x1, 8), (unique, 0x1000043b, 8) INT_ADD (unique, 0x10000206, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x100004d0, 8) , (const, 0x613, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (unique, 0x100004d8, 8) , (const, 0x613, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (unique, 0x100004e0, 4) , (const, 0x613, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (unique, 0x100004e4, 8) , (const, 0x613, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (unique, 0x100004ec, 8) , (const, 0x613, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (unique, 0x100004f4, 8) , (const, 0x613, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (unique, 0x100004fc, 8) , (const, 0x613, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (unique, 0x10000504, 4) , (const, 0x613, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x613, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x10000510, 8) , (const, 0x613, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x613, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10000520, 8) , (const, 0x613, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10000528, 8) , (const, 0x613, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10000530, 8) , (const, 0x613, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x10000538, 8) , (const, 0x613, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (unique, 0x10000540, 4) , (const, 0x613, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (unique, 0x10000544, 4) , (const, 0x613, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x10000550, 8) , (const, 0x613, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x10000558, 8) , (const, 0x613, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x10000560, 8) , (const, 0x613, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x10000568, 8) , (const, 0x613, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x10000570, 8) , (const, 0x613, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (unique, 0x10000578, 4) , (const, 0x613, 4)]
[ ---  CALL (ram, 0x4853d0, 8) , (unique, 0x100002fb, 8) , (unique, 0x10000538, 8), (unique, 0x100002fb, 8) COPY (const, 0x4af561, 8)]
[ ---  BRANCH (ram, 0x47da70, 1)]
[(unique, 0x1000063f, 8) COPY (unique, 0x10000530, 8)]
[ ---  CBRANCH (ram, 0x47da54, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000530, 8)]
[(unique, 0x10000647, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x4af52f, 8)]
[ ---  CBRANCH (ram, 0x47da4d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000797, 8), (unique, 0x10000797, 8) CAST (unique, 0x100004d8, 8)]
[(unique, 0x1000064f, 8) COPY (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000079f, 8) , (const, 0x47da70, 8), (unique, 0x1000079f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000443, 8) , (const, 0x1, 8), (unique, 0x10000443, 8) INT_ADD (unique, 0x10000206, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x100004d0, 8) , (const, 0x5f8, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (unique, 0x100004d8, 8) , (const, 0x5f8, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (unique, 0x100004e0, 4) , (const, 0x5f8, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (unique, 0x100004e4, 8) , (const, 0x5f8, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (unique, 0x100004ec, 8) , (const, 0x5f8, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (unique, 0x100004f4, 8) , (const, 0x5f8, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (unique, 0x100004fc, 8) , (const, 0x5f8, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (unique, 0x10000504, 4) , (const, 0x5f8, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x5f8, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x10000510, 8) , (const, 0x5f8, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x5f8, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10000520, 8) , (const, 0x5f8, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10000528, 8) , (const, 0x5f8, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x5f8, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (unique, 0x1000063f, 8) , (unique, 0x10000647, 8) , (unique, 0x1000064f, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x10000538, 8) , (const, 0x5f8, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (unique, 0x10000540, 4) , (const, 0x5f8, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (unique, 0x10000544, 4) , (const, 0x5f8, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x10000550, 8) , (const, 0x5f8, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x10000558, 8) , (const, 0x5f8, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x10000560, 8) , (const, 0x5f8, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x10000568, 8) , (const, 0x5f8, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x10000570, 8) , (const, 0x5f8, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (unique, 0x10000578, 4) , (const, 0x5f8, 4)]
[ ---  CALL (ram, 0x4853d0, 8) , (unique, 0x100002f3, 8) , (unique, 0x10000538, 8) , (stack, 0xfffffffffffffef8, 8), (unique, 0x100002f3, 8) COPY (const, 0x4af54c, 8), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (unique, 0x1000063f, 8) , (unique, 0x10000647, 8) , (unique, 0x1000064f, 8)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x100005ef, 8) COPY (stack, 0xfffffffffffffee8, 8), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[ ---  BRANCH (ram, 0x47d51c, 1)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(register, 0xa8, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007b7, 8) , (const, 0x47d532, 8), (unique, 0x100007b7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100005df, 8) , (unique, 0x100005e7, 8) , (unique, 0x100005ef, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x103, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x103, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x103, 4), (ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x103, 4), (ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x103, 4), (ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x103, 4), (ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x103, 4), (ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x103, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x103, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x103, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x103, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x103, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x103, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x103, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x103, 4), (stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x103, 4), (stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x103, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(register, 0x0, 8) CALL (ram, 0x401160, 8) , (register, 0xb8, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100007af, 8), (unique, 0x100007af, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100007a7, 8), (unique, 0x100007a7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x20, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x100004b3, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (unique, 0x100004c8, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(register, 0x0, 8) CAST (unique, 0x100007bf, 8), (unique, 0x100007bf, 8) INT_NEGATE (stack, 0xffffffffffffff28, 8), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (unique, 0x3200, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(unique, 0x100005bf, 8) COPY (ram, 0x4c4ec8, 8), (ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[ ---  CBRANCH (ram, 0x47d704, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x18, 8) , (ram, 0x4c4ec8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0x18, 8) , (register, 0x18, 8), (ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(unique, 0x100005af, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100005bf, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x47d6f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100007df, 8), (unique, 0x100007df, 8) INT_ADD (unique, 0x100007d7, 8) , (unique, 0x1000038b, 8), (unique, 0x100007d7, 8) CAST (unique, 0x10000393, 8), (unique, 0x10000393, 8) PTRSUB (register, 0x18, 8) , (const, 0x78, 8), (unique, 0x1000038b, 8) CAST (unique, 0x100007cf, 8), (unique, 0x100007cf, 8) INT_ADD (unique, 0x100007c7, 8) , (unique, 0x3900, 8), (unique, 0x100007c7, 8) CAST (unique, 0x1000057d, 8), (unique, 0x1000057d, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0x3900, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007ef, 8) , (const, 0x47d59d, 8), (unique, 0x100007ef, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007f7, 8) , (const, 0x47d5b3, 8), (unique, 0x100007f7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x174, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16a, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x174, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x16a, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x174, 4), (ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x16a, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x174, 4), (ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x16a, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x174, 4), (ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x16a, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x174, 4), (ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x16a, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x174, 4), (ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x174, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x174, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x174, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x174, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x174, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x174, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x174, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x174, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x174, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x174, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x174, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x174, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x174, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x174, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x174, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x16a, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000807, 8), (unique, 0x10000807, 8) INT_SUB (register, 0x0, 8) , (unique, 0x100007ff, 8), (unique, 0x100007ff, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) CALL (ram, 0x401160, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff28, 8), (register, 0x0, 8) CALL (ram, 0x401160, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x16a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x16a, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x100007e7, 8), (unique, 0x100007e7, 8) INT_ADD (register, 0x0, 8) , (ram, 0x4c4ed0, 8), (register, 0x0, 8) INT_MULT (register, 0x18, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x47d7f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000288, 4) , (const, 0x0, 4), (unique, 0x10000288, 4) INT_AND (ram, 0x4c87c0, 4) , (const, 0x1, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x174, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x16a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000080f, 8) , (const, 0x47d809, 8), (unique, 0x1000080f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3f8, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x3f8, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x3f8, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x3f8, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x3f8, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x3f8, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x3f8, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x3f8, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3f8, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3f8, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3f8, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3f8, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3f8, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3f8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3f8, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x3f8, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x3f8, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3f8, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3f8, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3f8, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3f8, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (register, 0x0, 8) , (const, 0x3f8, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x3f8, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x10000303, 8) , (register, 0xb8, 8), (unique, 0x10000303, 8) COPY (const, 0x4af569, 8)]
[ ---  BRANCH (ram, 0x47d5ca, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000817, 8) , (const, 0x47d5dd, 8), (unique, 0x10000817, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x195, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x195, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x195, 4), (ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x195, 4), (ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x195, 4), (ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x195, 4), (ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x195, 4), (ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x195, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x195, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x195, 4), (stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x195, 4), (stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x195, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x195, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x195, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x195, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x195, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x195, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(register, 0x0, 4) CALL (ram, 0x47ce50, 8) , (register, 0xb8, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0x18, 8), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x47d7a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000837, 8), (unique, 0x10000837, 8) INT_ADD (unique, 0x1000082f, 8) , (unique, 0x100003b3, 8), (unique, 0x1000082f, 8) CAST (unique, 0x100003bb, 8), (unique, 0x100003bb, 8) PTRSUB (register, 0x18, 8) , (const, 0x78, 8), (unique, 0x100003b3, 8) CAST (unique, 0x10000827, 8), (unique, 0x10000827, 8) INT_ADD (unique, 0x1000081f, 8) , (unique, 0x3900, 8), (unique, 0x1000081f, 8) CAST (unique, 0x10000585, 8), (unique, 0x10000585, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0x3900, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8)]
[(register, 0xa8, 4) INT_OR (register, 0xa8, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x47d606, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x47d7c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x47d810, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0x8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x47d810, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000084f, 8), (unique, 0x1000084f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31d, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000847, 8), (unique, 0x10000847, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000323, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000323, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c6180, 8), (register, 0x0, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x90, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000083f, 8), (unique, 0x1000083f, 8) INT_ADD (stack, 0x8, 8) , (const, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 1), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x1000085f, 8) , (const, 0x1, 8), (unique, 0x1000085f, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (stack, 0xffffffffffffff30, 8) , (unique, 0x10000857, 8) , (const, 0x1, 8), (unique, 0x10000857, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000867, 8) , (const, 0x47d839, 8), (unique, 0x10000867, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x379, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x379, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x376, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x379, 4), (ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x376, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x379, 4), (ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x376, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x379, 4), (ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x376, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x379, 4), (ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x376, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x379, 4), (ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x376, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x379, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x376, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x379, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x379, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x379, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x379, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x379, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x379, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x379, 4)]
[(register, 0x0, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x47d86f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x4552a0, 8) , (const, 0x1, 4) , (register, 0xb8, 8) , (unique, 0x1000086f, 8), (unique, 0x1000086f, 8) CAST (stack, 0xffffffffffffff00, 8)]
[(register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x4000, 4), (register, 0x10, 4) INT_AND (stack, 0xffffffffffffff50, 4) , (const, 0xf000, 4)]
[ ---  CBRANCH (ram, 0x47d86f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x4000, 4), (register, 0x10, 4) INT_AND (stack, 0xffffffffffffff50, 4) , (const, 0xf000, 4)]
[(register, 0xa8, 4) COPY (const, 0x1, 4)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x3c6, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x3c6, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x3c6, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x3c6, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x3c6, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x3c6, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x3c6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (register, 0x0, 4), (unique, 0x3a00, 8) CAST (unique, 0x1000088f, 8), (unique, 0x1000088f, 8) INT_ADD (unique, 0x10000887, 8) , (unique, 0x10000403, 8), (unique, 0x10000887, 8) CAST (unique, 0x1000040b, 8), (unique, 0x1000040b, 8) PTRSUB (register, 0x18, 8) , (const, 0x78, 8), (unique, 0x10000403, 8) CAST (unique, 0x1000087f, 8), (unique, 0x1000087f, 8) INT_ADD (unique, 0x10000877, 8) , (unique, 0x3900, 8), (unique, 0x10000877, 8) CAST (unique, 0x10000595, 8), (unique, 0x10000595, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0x3900, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x47d7b6, 1)]
[(register, 0xa8, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x47d7b6, 1)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x47d560, 1)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1b7, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x1b7, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x1b7, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x1b7, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x1b7, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x1b7, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1b7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x2, 4), (unique, 0x3a00, 8) CAST (unique, 0x100008af, 8), (unique, 0x100008af, 8) INT_ADD (unique, 0x100008a7, 8) , (unique, 0x100003d3, 8), (unique, 0x100008a7, 8) CAST (unique, 0x100003db, 8), (unique, 0x100003db, 8) PTRSUB (register, 0x18, 8) , (const, 0x78, 8), (unique, 0x100003d3, 8) CAST (unique, 0x1000089f, 8), (unique, 0x1000089f, 8) INT_ADD (unique, 0x10000897, 8) , (unique, 0x3900, 8), (unique, 0x10000897, 8) CAST (unique, 0x1000058d, 8), (unique, 0x1000058d, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0x3900, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8)]
[(register, 0xa8, 4) COPY (const, 0x1, 4)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x47d630, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff0c, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x47d6a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4aa0, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008c7, 8) , (const, 0x47d6bb, 8), (unique, 0x100008c7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x237, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x237, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x237, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x237, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x237, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x237, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x237, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x237, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x237, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x237, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x237, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x237, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x237, 4)]
[(stack, 0xfffffffffffffee8, 4) SUBPIECE (stack, 0xfffffffffffffee8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x237, 4), (stack, 0xfffffffffffffee8, 8) CAST (unique, 0x100008bf, 8), (unique, 0x100008bf, 8) INT_OR (unique, 0x1000029f, 8) , (unique, 0x100002a7, 8), (unique, 0x100002a7, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x1000029f, 8) INT_AND (unique, 0x100008b7, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100008b7, 8) CAST (stack, 0xfffffffffffffee8, 8)]
[(register, 0x80, 8) INT_AND (unique, 0x100008cf, 8) , (const, 0xffffffff, 8), (unique, 0x100008cf, 8) CAST (stack, 0xfffffffffffffee8, 8), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x237, 4), (stack, 0xfffffffffffffee8, 8) CAST (unique, 0x100008bf, 8), (unique, 0x100008bf, 8) INT_OR (unique, 0x1000029f, 8) , (unique, 0x100002a7, 8), (unique, 0x100002a7, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x1000029f, 8) INT_AND (unique, 0x100008b7, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100008b7, 8) CAST (stack, 0xfffffffffffffee8, 8)]
[ ---  CBRANCH (ram, 0x47d6d3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x455300, 8) , (const, 0x1, 4) , (register, 0x0, 4) , (stack, 0xffffffffffffff00, 8)]
[ ---  CBRANCH (ram, 0x47d61e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002b0, 4) , (const, 0x0, 4), (unique, 0x100002b0, 4) INT_AND (stack, 0xffffffffffffff50, 4) , (const, 0x800, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x47d560, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 4) , (const, 0xffffffff, 4), (register, 0x80, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xfffffffffffffee8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008d7, 8) , (const, 0x47d643, 8), (unique, 0x100008d7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1ef, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1ef, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1ef, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1ef, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1ef, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1ef, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x1ef, 4), (stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x1ef, 4), (stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1ef, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1ef, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1ef, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1ef, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(register, 0x80, 8) INT_AND (stack, 0xffffffffffffff28, 8) , (const, 0xffffffff, 8), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1ef, 4), (stack, 0xffffffffffffff28, 8) INT_OR (unique, 0x1000028e, 8) , (unique, 0x10000296, 8), (unique, 0x10000296, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x1000028e, 8) INT_AND (stack, 0xffffffffffffff28, 8) , (const, 0xffffffff00000000, 8), (register, 0x80, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x80, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x201, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1ef, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x201, 4), (ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x1ef, 4), (ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x201, 4), (ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x1ef, 4), (ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x201, 4), (ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x1ef, 4), (ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x201, 4), (ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x1ef, 4), (ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x201, 4), (ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x1ef, 4), (ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x201, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1ef, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xfffffffffffffef0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x100008df, 8), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1ef, 4), (unique, 0x100008df, 8) CAST (stack, 0xffffffffffffff30, 8), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[ ---  CBRANCH (ram, 0x47d67b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x100008df, 8), (unique, 0x100008df, 8) CAST (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008e7, 8) , (const, 0x47d683, 8), (unique, 0x100008e7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x22a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x22a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x22a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x22a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x22a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x22a, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x22a, 4)]
[ ---  CALL (ram, 0x455d60, 8) , (register, 0x80, 8)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x22a, 4)]
[(ram, 0x4c4aa0, 4) COPY (ram, 0x4c4aa0, 4), (ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x22a, 4)]
[(ram, 0x4c4ec0, 8) COPY (ram, 0x4c4ec0, 8), (ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x22a, 4)]
[(ram, 0x4c4ec8, 8) COPY (ram, 0x4c4ec8, 8), (ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x22a, 4)]
[(ram, 0x4c4ed0, 8) COPY (ram, 0x4c4ed0, 8), (ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x22a, 4)]
[(ram, 0x4c7f40, 8) COPY (ram, 0x4c7f40, 8), (ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x22a, 4)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x22a, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008ef, 8) , (const, 0x47d672, 8), (unique, 0x100008ef, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x20d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x20d, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x20d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x20d, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x20d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x20d, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0x0, 8) , (register, 0xb8, 8) , (stack, 0xffffffffffffff30, 8)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x20d, 4)]
[(ram, 0x4c4aa0, 4) COPY (ram, 0x4c4aa0, 4), (ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x20d, 4)]
[(ram, 0x4c4ec0, 8) COPY (ram, 0x4c4ec0, 8), (ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x20d, 4)]
[(ram, 0x4c4ec8, 8) COPY (ram, 0x4c4ec8, 8), (ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x20d, 4)]
[(ram, 0x4c4ed0, 8) COPY (ram, 0x4c4ed0, 8), (ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x20d, 4)]
[(ram, 0x4c7f40, 8) COPY (ram, 0x4c7f40, 8), (ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x20d, 4)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x20d, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x20d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008f7, 8) , (const, 0x47d6db, 8), (unique, 0x100008f7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x258, 4)]
[ ---  CALL (ram, 0x455d60, 8) , (register, 0x80, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x25e, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x258, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x25e, 4), (ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x258, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x25e, 4), (ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x258, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x25e, 4), (ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x258, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x25e, 4), (ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x258, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x25e, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x258, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x2, 4), (unique, 0x4f00, 8) CAST (unique, 0x100008ff, 8), (unique, 0x100008ff, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x258, 4)]
[(unique, 0x100005b7, 8) COPY (ram, 0x4c4ec8, 8), (ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x25e, 4), (ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x47d570, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x0, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100005af, 8) , (unique, 0x100005b7, 8)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x47d721, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x0, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x47d721, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xd, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000907, 8), (unique, 0x10000907, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x47d683, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8)]
[(ram, 0x4c4aa0, 4) COPY (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4ec0, 8) COPY (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4ec8, 8) COPY (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ed0, 8) COPY (ram, 0x4c4ed0, 8)]
[(ram, 0x4c7f40, 8) COPY (ram, 0x4c7f40, 8)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0xbc80, 4) INT_OR (stack, 0xffffffffffffff08, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x47d500, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000091f, 8), (unique, 0x1000091f, 8) CAST (unique, 0xbe00, 8), (unique, 0xbe00, 8) CAST (unique, 0x10000917, 8), (unique, 0x10000917, 8) INT_ADD (unique, 0x1000090f, 8) , (const, 0x8, 8), (unique, 0x1000090f, 8) CAST (stack, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x47d683, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x47daba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000927, 8), (unique, 0x10000927, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffed8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000092f, 8) , (const, 0x47dac2, 8), (unique, 0x1000092f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x304, 4)]
[(ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x304, 4)]
[(ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x304, 4)]
[(ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x304, 4)]
[(ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x304, 4)]
[(ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x304, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (unique, 0xbc80, 4) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0xbe00, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x304, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffed8, 8)]
[ ---  BRANCH (ram, 0x47d761, 1)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7f40, 8) MULTIEQUAL (ram, 0x4c7f40, 8) , (ram, 0x4c7f40, 8)]
[(ram, 0x4c4ed0, 8) MULTIEQUAL (ram, 0x4c4ed0, 8) , (ram, 0x4c4ed0, 8)]
[(ram, 0x4c4ec8, 8) MULTIEQUAL (ram, 0x4c4ec8, 8) , (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ec0, 8) MULTIEQUAL (ram, 0x4c4ec0, 8) , (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4aa0, 4) MULTIEQUAL (ram, 0x4c4aa0, 4) , (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[ ---  CBRANCH (ram, 0x47d683, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed8, 8) , (unique, 0x10000937, 8), (unique, 0x10000937, 8) CAST (unique, 0x1000031b, 8), (unique, 0x1000031b, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4ee0, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x47d683, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed8, 8) , (unique, 0x1000093f, 8), (unique, 0x1000093f, 8) CAST (unique, 0x10000313, 8), (unique, 0x10000313, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4eb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xfffffffffffffed8, 8) , (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x2fd, 4)]
[(ram, 0x4c4aa0, 4) COPY (ram, 0x4c4aa0, 4), (ram, 0x4c4aa0, 4) INDIRECT (ram, 0x4c4aa0, 4) , (const, 0x2fd, 4)]
[(ram, 0x4c4ec0, 8) COPY (ram, 0x4c4ec0, 8), (ram, 0x4c4ec0, 8) INDIRECT (ram, 0x4c4ec0, 8) , (const, 0x2fd, 4)]
[(ram, 0x4c4ec8, 8) COPY (ram, 0x4c4ec8, 8), (ram, 0x4c4ec8, 8) INDIRECT (ram, 0x4c4ec8, 8) , (const, 0x2fd, 4)]
[(ram, 0x4c4ed0, 8) COPY (ram, 0x4c4ed0, 8), (ram, 0x4c4ed0, 8) INDIRECT (ram, 0x4c4ed0, 8) , (const, 0x2fd, 4)]
[(ram, 0x4c7f40, 8) COPY (ram, 0x4c7f40, 8), (ram, 0x4c7f40, 8) INDIRECT (ram, 0x4c7f40, 8) , (const, 0x2fd, 4)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x2fd, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8)]
[(ram, 0x4c4aa0, 4) COPY (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4ec0, 8) COPY (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4ec8, 8) COPY (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ed0, 8) COPY (ram, 0x4c4ed0, 8)]
[(ram, 0x4c7f40, 8) COPY (ram, 0x4c7f40, 8)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8)]
[(ram, 0x4c4aa0, 4) COPY (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4ec0, 8) COPY (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4ec8, 8) COPY (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ed0, 8) COPY (ram, 0x4c4ed0, 8)]
[(ram, 0x4c7f40, 8) COPY (ram, 0x4c7f40, 8)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8)]
[(ram, 0x4c4aa0, 4) COPY (ram, 0x4c4aa0, 4)]
[(ram, 0x4c4ec0, 8) COPY (ram, 0x4c4ec0, 8)]
[(ram, 0x4c4ec8, 8) COPY (ram, 0x4c4ec8, 8)]
[(ram, 0x4c4ed0, 8) COPY (ram, 0x4c4ed0, 8)]
[(ram, 0x4c7f40, 8) COPY (ram, 0x4c7f40, 8)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
