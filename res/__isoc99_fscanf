[ ---  CBRANCH (ram, 0x17c23d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(unique, 0x10000282, 4) COPY (register, 0x1200, 4)]
[(unique, 0x10000286, 4) COPY (register, 0x1220, 4)]
[(unique, 0x1000028a, 4) COPY (register, 0x1240, 4)]
[(unique, 0x1000028e, 4) COPY (register, 0x1260, 4)]
[(unique, 0x10000292, 4) COPY (register, 0x1280, 4)]
[(unique, 0x10000296, 4) COPY (register, 0x12a0, 4)]
[(unique, 0x1000029a, 4) COPY (register, 0x12c0, 4)]
[(unique, 0x1000029e, 4) COPY (register, 0x12e0, 4)]
[(stack, 0xffffffffffffffe8, 4) MULTIEQUAL (stack, 0xffffffffffffffe8, 4) , (unique, 0x1000029e, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (unique, 0x1000029a, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (unique, 0x10000296, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (unique, 0x10000292, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (unique, 0x1000028e, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (unique, 0x1000028a, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (unique, 0x10000286, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0x10000282, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002a2, 8), (unique, 0x100002a2, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x10000202, 8) COPY (register, 0x10, 8)]
[(unique, 0x1000022a, 8) COPY (register, 0x8, 8)]
[(unique, 0x10000252, 8) COPY (register, 0x80, 8)]
[(unique, 0x1000027a, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x17c2ac, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x8000, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000161, 8), (unique, 0x10000161, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x17c2a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002ba, 8), (unique, 0x100002ba, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002b2, 8), (unique, 0x100002b2, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002aa, 8), (unique, 0x100002aa, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x38, 8) , (const, 0x88, 8)]
[ ---  CBRANCH (ram, 0x17c282, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x19c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x8e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x17c29d, 1)]
[(register, 0x80, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x17f, 4)]
[(register, 0x90, 8) INDIRECT (register, 0x30, 8) , (const, 0x17f, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17f, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x10000202, 8) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x1000022a, 8) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10000252, 8) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000027a, 8) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffffe8, 4) INDIRECT (stack, 0xffffffffffffffe8, 4) , (const, 0x17f, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffe8, 4) MULTIEQUAL (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x1000027a, 8) , (stack, 0xffffffffffffff70, 8) , (unique, 0x1000027a, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10000252, 8) , (stack, 0xffffffffffffff68, 8) , (unique, 0x10000252, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x1000022a, 8) , (stack, 0xffffffffffffff60, 8) , (unique, 0x1000022a, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x10000202, 8) , (stack, 0xffffffffffffff58, 8) , (unique, 0x10000202, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff40, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x90, 8) , (register, 0x30, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x97, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002ca, 8) , (register, 0x80, 8), (unique, 0x100002ca, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002c2, 8), (unique, 0x100002c2, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x38, 8) , (const, 0x88, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffe8, 4) MULTIEQUAL (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x1000027a, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10000252, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x1000022a, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x10000202, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x90, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x9f, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x10, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x74, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff28, 4) COPY (const, 0x10, 4)]
[(stack, 0xffffffffffffff2c, 4) INDIRECT (stack, 0xffffffffffffff2c, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff2c, 4) COPY (const, 0x30, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0xd6, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x3800, 8) , (const, 0xd6, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x10000202, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x1000022a, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10000252, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x1000027a, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[(stack, 0xffffffffffffffe8, 4) INDIRECT (stack, 0xffffffffffffffe8, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffffe8, 4) MULTIEQUAL (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xdc, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xd6, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xb0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xffffffeb, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x74, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x16b240, 8) , (register, 0x38, 8) , (register, 0x90, 8) , (register, 0x20, 8) , (const, 0x0, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x17c333, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001b9, 8), (unique, 0x100001b9, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xfe, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002d2, 8), (unique, 0x100002d2, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x38, 8) , (const, 0x88, 8)]
[ ---  CBRANCH (ram, 0x17c333, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002d2, 8), (unique, 0x100002d2, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x38, 8) , (const, 0x88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002da, 8) , (const, 0x0, 8), (unique, 0x100002da, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x17c319, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x10c, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x168, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x11c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x100001da, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CBRANCH (ram, 0x17c333, 1) , (unique, 0x100001d9, 1), (unique, 0x100001d9, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) MULTIEQUAL (unique, 0xbd00, 4) , (unique, 0xbd00, 4)]
[(register, 0x30, 8) INDIRECT (register, 0x30, 8) , (const, 0x15a, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15a, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (unique, 0x100001da, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff2c, 4) INDIRECT (stack, 0xffffffffffffff2c, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffffe8, 4) INDIRECT (stack, 0xffffffffffffffe8, 4) , (const, 0x15a, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffe8, 4) MULTIEQUAL (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff2c, 4) MULTIEQUAL (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (unique, 0x100001da, 4)]
[(register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x30, 8) , (const, 0xffffffff, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x17c34e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff40, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002e2, 8), (unique, 0x100002e2, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff2c, 4) INDIRECT (stack, 0xffffffffffffff2c, 4) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffffe8, 4) INDIRECT (stack, 0xffffffffffffffe8, 4) , (const, 0x14b, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x14b, 4)]
[ ---  RETURN (const, 0x1, 4)]
