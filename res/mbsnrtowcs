[ ---  CBRANCH (ram, 0x1aca7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(register, 0x80, 8) CAST (unique, 0x10000263, 8), (unique, 0x10000263, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c5a00, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(stack, 0xfffffffffffffeac, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffeb0, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffea8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1acbc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1acba8, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (unique, 0x1000025b, 8) , (const, 0x48, 4), (unique, 0x1000025b, 8) COPY (register, 0x80, 8)]
[(unique, 0x3a00, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100001d3, 8) , (const, 0x1, 8), (unique, 0x100001d3, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x18ae90, 8) , (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_SUB (register, 0x10, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1acc98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000283, 8) , (const, 0x0, 8), (unique, 0x10000283, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000027b, 8), (unique, 0x1000027b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000273, 8), (unique, 0x10000273, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000026b, 8), (unique, 0x1000026b, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2dd8, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x48, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x48, 4)]
[(register, 0x0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c1200, 8)]
[ ---  CBRANCH (ram, 0x1acadd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x100001cb, 8), (unique, 0x100001cb, 8) PTRSUB (const, 0x0, 8) , (const, 0x4bf9a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28e, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x28e, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x28e, 4)]
[ ---  CALL (ram, 0x1b95f0, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x1000028b, 8), (unique, 0x1000028b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1acadd, 1)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x1000029b, 8), (unique, 0x1000029b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000293, 8), (unique, 0x10000293, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1acaf8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000293, 8), (unique, 0x10000293, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) CAST (unique, 0x100002bb, 8), (unique, 0x100002bb, 8) INT_XOR (register, 0x18, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002b3, 8), (unique, 0x100002b3, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x18, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x100002ab, 8) , (const, 0x2f, 4), (unique, 0x100002ab, 8) CAST (unique, 0xbd80, 8), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x100002a3, 8) , (const, 0x11, 4), (unique, 0x100002a3, 8) CAST (unique, 0xbd80, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1acbc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffeb8, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe90, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8)]
[ ---  CALL (ram, 0x242d60, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x210, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f4, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x210, 4), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x1f4, 4), (ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x210, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1f4, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x210, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x210, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x210, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (unique, 0x3c80, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x210, 4), (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x210, 4), (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x210, 4), (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x210, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SRIGHT (register, 0x10, 8) , (const, 0x2, 4), (register, 0x10, 8) CAST (unique, 0x100002d3, 8), (unique, 0x100002d3, 8) INT_SUB (unique, 0x100002c3, 8) , (unique, 0x100002cb, 8), (unique, 0x100002cb, 8) CAST (unique, 0x3800, 8), (unique, 0x100002c3, 8) CAST (stack, 0xfffffffffffffe98, 8), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x210, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (unique, 0x1000024b, 8) , (const, 0x1f4, 4), (unique, 0x1000024b, 8) COPY (unique, 0x3800, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1acc18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x5, 4), (register, 0x0, 4) CALLIND (register, 0x18, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3a00, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1acb68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000012d, 4) , (const, 0x0, 4), (unique, 0x1000012d, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffb, 4)]
[(register, 0xb0, 8) INT_SUB (register, 0xb0, 8) , (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x1acb68, 1)]
[ ---  CALL (ram, 0x242d60, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc1, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa7, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0xc1, 4), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0xa7, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xc1, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xa7, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xc1, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xa7, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xc1, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xa7, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xc1, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (unique, 0x3400, 8) , (const, 0xa7, 4), (unique, 0x3400, 8) PTRADD (register, 0x38, 8) , (register, 0x8, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0xc1, 4), (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0xa7, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0xc1, 4), (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0xa7, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0xc1, 4), (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0xa7, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xc1, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xa7, 4)]
[(register, 0x8, 8) INT_SRIGHT (unique, 0x100002f3, 8) , (const, 0x2, 4), (unique, 0x100002f3, 8) CAST (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100002eb, 8), (unique, 0x100002eb, 8) INT_SUB (unique, 0x100002db, 8) , (unique, 0x100002e3, 8), (unique, 0x100002e3, 8) CAST (register, 0x38, 8), (unique, 0x100002db, 8) CAST (stack, 0xfffffffffffffe98, 8), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xc1, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (unique, 0x10000253, 8) , (const, 0xa7, 4), (unique, 0x10000253, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1acb68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100000cd, 4) , (const, 0x0, 4), (unique, 0x100000cd, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffb, 4), (register, 0x0, 4) CALLIND (register, 0x18, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (unique, 0x3a00, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x1, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8)]
[ ---  CBRANCH (ram, 0x1accfe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1bd, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1bd, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1bd, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1bd, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1bd, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1bd, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x100001a3, 8) , (unique, 0x1000019b, 8) , (const, 0x76, 4) , (unique, 0x100001c3, 8), (unique, 0x100001c3, 8) COPY (const, 0x291560, 8), (unique, 0x100001a3, 8) COPY (const, 0x28d87b, 8), (unique, 0x1000019b, 8) COPY (const, 0x28d86e, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x1bd, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1bd, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1acc78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000313, 8), (unique, 0x10000313, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x1000030b, 8), (unique, 0x1000030b, 8) CAST (register, 0x10, 8), (unique, 0x3880, 8) CAST (unique, 0x10000303, 8), (unique, 0x10000303, 8) INT_ADD (unique, 0x100002fb, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x100002fb, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1accdf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000233, 8), (unique, 0x10000233, 8) PTRSUB (stack, 0xfffffffffffffeb8, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1b4, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x10000183, 8) , (unique, 0x10000193, 8) , (const, 0x79, 4) , (unique, 0x100001bb, 8), (unique, 0x100001bb, 8) COPY (const, 0x291560, 8), (unique, 0x10000193, 8) COPY (const, 0x28d86e, 8), (unique, 0x10000183, 8) COPY (const, 0x28d824, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x1b4, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1b4, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x1a3, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1a3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0xb0, 8) INT_SUB (register, 0x8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1acb68, 1)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1acb7d, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1accc0, 1) , (register, 0x206, 1)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x18e, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x18e, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x18e, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x18e, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x18e, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x18e, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x18e, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x18e, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x100001ab, 8) , (unique, 0x1000018b, 8) , (const, 0x84, 4) , (unique, 0x100001b3, 8), (unique, 0x100001b3, 8) COPY (const, 0x291560, 8), (unique, 0x100001ab, 8) COPY (const, 0x291468, 8), (unique, 0x1000018b, 8) COPY (const, 0x28d86e, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x18e, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x18e, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1acba8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x5, 4), (register, 0x8, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffd, 4)]
[ ---  CBRANCH (ram, 0x1acba8, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x1acba8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x4, 4)]
[(register, 0x90, 8) COPY (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x16e, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x16e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000031b, 8) , (const, 0x54, 4), (unique, 0x1000031b, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
