[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x32, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x32, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x32, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x32, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000380, 8), (unique, 0x10000380, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x38, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x261636, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4b, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4b, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000388, 8), (unique, 0x10000388, 8) CALL (ram, 0x121100, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000031c, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) INT_ADD (register, 0x0, 8) , (const, 0x7, 8)]
[(unique, 0x1000033c, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x26165e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6c, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x6c, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x6c, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x6c, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x6c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c, 4)]
[(register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x10, 8)]
[(unique, 0x10000324, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x1000035c, 8) , (const, 0x6c, 4), (unique, 0x1000035c, 8) COPY (unique, 0x3800, 8)]
[(unique, 0x10000344, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x10000364, 8) , (const, 0x6c, 4), (unique, 0x10000364, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000032c, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10000398, 8), (unique, 0x10000398, 8) INT_ADD (unique, 0x10000390, 8) , (register, 0x8, 8), (unique, 0x10000390, 8) CAST (register, 0x10, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x1000031c, 8) , (unique, 0x10000324, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000033c, 8) , (unique, 0x10000344, 8)]
[ ---  CBRANCH (ram, 0x261678, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x97, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x97, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x97, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x97, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x97, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x97, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x97, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x97, 4)]
[(register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x8, 8)]
[(unique, 0x10000334, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000036c, 8) , (const, 0x97, 4), (unique, 0x1000036c, 8) COPY (register, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb0, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0xb0, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb0, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xb0, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xb0, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0xb0, 4), (stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xb0, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb0, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (register, 0xa0, 8), (register, 0xa0, 8) INT_ADD (unique, 0x100003a0, 8) , (unique, 0x10000297, 8), (unique, 0x100003a0, 8) CAST (register, 0x10, 8), (unique, 0x10000297, 8) INT_ADD (register, 0x0, 8) , (register, 0xa0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000032c, 8) , (unique, 0x10000334, 8)]
[ ---  CBRANCH (ram, 0x261697, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xa0, 8) , (const, 0x1001, 8), (register, 0xa0, 8) INT_ADD (unique, 0x100003a0, 8) , (unique, 0x10000297, 8), (unique, 0x100003a0, 8) CAST (register, 0x10, 8), (unique, 0x10000297, 8) INT_ADD (register, 0x0, 8) , (register, 0xa0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000032c, 8) , (unique, 0x10000334, 8)]
[ ---  CBRANCH (ram, 0x261925, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffff98, 8) INT_ADD (unique, 0x1000030c, 8) , (const, 0x1, 4), (unique, 0x1000030c, 8) INT_LEFT (unique, 0x10000304, 8) , (const, 0x20, 8), (unique, 0x10000304, 8) INT_SEXT (unique, 0x100003a8, 4), (unique, 0x100003a8, 4) CAST (stack, 0xffffffffffffff9c, 4), (stack, 0xffffffffffffff9c, 4) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x4, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x100003c4, 8), (unique, 0x100003c4, 8) INT_ADD (unique, 0x100003bc, 8) , (unique, 0x10000122, 8), (unique, 0x100003bc, 8) CAST (unique, 0x100002ef, 8), (unique, 0x100002ef, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa0, 8), (unique, 0x10000122, 8) INT_2COMP (register, 0xa0, 8), (register, 0xa0, 8) INT_AND (register, 0xa0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x1e, 8)]
[(unique, 0x1000034c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x100003b4, 8), (unique, 0x100003b4, 8) INT_ADD (unique, 0x100003ac, 8) , (unique, 0x10000122, 8), (unique, 0x100003ac, 8) CAST (unique, 0x100002a7, 8), (unique, 0x100002a7, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x10000122, 8) INT_2COMP (register, 0xa0, 8), (register, 0xa0, 8) INT_AND (register, 0xa0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x1e, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2e7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2e7, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2e7, 4)]
[ ---  CBRANCH (ram, 0x261946, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100003cc, 8), (unique, 0x100003cc, 8) CALL (ram, 0x1212c0, 8) , (register, 0xa0, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x2617b0, 1)]
[(stack, 0xffffffffffffff98, 8) INT_AND (stack, 0xffffffffffffff98, 8) , (const, 0xffffffff00000000, 8)]
[(unique, 0x10000354, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x2616b2, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2616bd, 8), (register, 0x20, 8) CAST (unique, 0x100003dc, 8), (unique, 0x100003dc, 8) INT_ADD (unique, 0x100003d4, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100003d4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000034c, 8) , (unique, 0x10000354, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf3, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf3, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0xf3, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xf3, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xf2, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xf3, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xf2, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xf3, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xf2, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0xf3, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0xf2, 4), (stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xf3, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xf2, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf2, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CALL (ram, 0x121050, 8) , (unique, 0x100003e4, 8) , (register, 0x38, 8), (unique, 0x100003e4, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2618c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2df, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x2df, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x2616e7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x1, 1), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2616d6, 8), (register, 0x20, 8) CAST (unique, 0x100003f4, 8), (unique, 0x100003f4, 8) INT_ADD (unique, 0x100003ec, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100003ec, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x106, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x106, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x102, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x106, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x102, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x106, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x105, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x106, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x105, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x106, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x105, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x106, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x105, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x106, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x105, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x106, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x105, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121050, 8) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121050, 8) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x2618d5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2cd, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x2cd, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0x0, 1), (register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0x1, 1), (register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2616f2, 8), (register, 0x20, 8) CAST (unique, 0x10000404, 8), (unique, 0x10000404, 8) INT_ADD (unique, 0x100003fc, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100003fc, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x11a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x117, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x11a, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x117, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x11a, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x11a, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x11a, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x119, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x11a, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x11a, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x119, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121050, 8) , (register, 0x38, 8) , (register, 0x10, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121050, 8) , (register, 0x38, 8) , (register, 0x10, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(unique, 0x10000216, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(unique, 0x1000021e, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0x3100, 8)]
[(unique, 0x10000226, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000022e, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000236, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(unique, 0x10000242, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x1000024a, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000252, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(unique, 0x10000256, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(unique, 0x1000025e, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(unique, 0x10000262, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x261703, 1) , (unique, 0x10000215, 1), (unique, 0x10000215, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x1000022e, 8) , (const, 0x2c1, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (unique, 0x10000236, 4) , (const, 0x2c1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000021e, 8) , (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x261715, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000021e, 8) , (const, 0x1, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x261711, 8), (register, 0x20, 8) CAST (unique, 0x10000414, 8), (unique, 0x10000414, 8) INT_ADD (unique, 0x1000040c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000040c, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000226, 8) , (const, 0x12f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12f, 4), (ram, 0x4eae68, 8) INDIRECT (unique, 0x1000022e, 8) , (const, 0x12a, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x12f, 4), (ram, 0x4f0ad4, 4) INDIRECT (unique, 0x10000236, 4) , (const, 0x12a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000242, 8) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000024a, 8) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x12f, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (unique, 0x10000252, 4) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (unique, 0x10000256, 8) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x12f, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (unique, 0x1000025e, 4) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000262, 8) , (const, 0x12e, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121050, 8) , (unique, 0x10000216, 8) , (register, 0x8, 8)]
[(register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (unique, 0x1000014a, 8) , (const, 0x1, 8), (unique, 0x1000014a, 8) INT_2COMP (unique, 0x1000041c, 8), (unique, 0x1000041c, 8) CAST (register, 0xa0, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x10000216, 8)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x261736, 8), (register, 0x20, 8) CAST (unique, 0x1000042c, 8), (unique, 0x1000042c, 8) INT_ADD (unique, 0x10000424, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000424, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000226, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14c, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x14c, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x14c, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x14b, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x10000242, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x14c, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x14b, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x1000024a, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x14c, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x14b, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (unique, 0x10000252, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x14c, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x14b, 4), (stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (unique, 0x10000256, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x14c, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x14b, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (unique, 0x1000025e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000262, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000434, 8), (unique, 0x10000434, 8) CALL (ram, 0x2625e0, 8) , (const, 0x15, 8) , (unique, 0x1000026f, 8) , (unique, 0x10000277, 8) , (unique, 0x3100, 8), (unique, 0x10000277, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f0260, 8), (unique, 0x1000026f, 8) COPY (const, 0x2b7064, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x26182d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x261764, 8), (register, 0x20, 8) CAST (unique, 0x10000444, 8), (unique, 0x10000444, 8) INT_ADD (unique, 0x1000043c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000043c, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x164, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x164, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x164, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x164, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x164, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x164, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x164, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x164, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x164, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x163, 4)]
[ ---  CBRANCH (ram, 0x26182d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x262700, 8) , (const, 0x14, 8) , (register, 0xa0, 8) , (register, 0xa8, 8) , (register, 0xb0, 8) , (const, 0xc, 8)]
[(register, 0xb8, 4) COPY (const, 0xfffffffe, 4)]
[(stack, 0xffffffffffffffbc, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000454, 8), (unique, 0x10000454, 8) INT_ADD (register, 0x0, 8) , (const, 0x20, 8)]
[(stack, 0xffffffffffffffb4, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000044c, 8), (unique, 0x1000044c, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2618b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffb0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000045c, 8), (unique, 0x1000045c, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x26184c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x2617d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffb0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000464, 8), (unique, 0x10000464, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1a8, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x1a8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000474, 8) , (unique, 0xbd00, 4), (unique, 0x10000474, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000046c, 8), (unique, 0x1000046c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2617fd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000047c, 8), (unique, 0x1000047c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffb0, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x261810, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000186, 4) , (const, 0x0, 4), (unique, 0x10000186, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x261810, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 4) , (const, 0x5, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x261741, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0xffffffff, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x228, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x228, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000048c, 8) , (unique, 0xbd00, 4), (unique, 0x1000048c, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000484, 8), (unique, 0x10000484, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x261908, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000494, 8), (unique, 0x10000494, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x261805, 8), (register, 0x20, 8) CAST (unique, 0x100004a4, 8), (unique, 0x100004a4, 8) INT_ADD (unique, 0x1000049c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000049c, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f1, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x1f1, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1f1, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1f0, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x1f1, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f0, 4)]
[ ---  CALL (ram, 0x262050, 8) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x2617a1, 1)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x23e, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x23e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004b4, 8) , (unique, 0xbd00, 4), (unique, 0x100004b4, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004ac, 8), (unique, 0x100004ac, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x261918, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004bc, 8), (unique, 0x100004bc, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x261920, 8), (register, 0x20, 8) CAST (unique, 0x100004cc, 8), (unique, 0x100004cc, 8) INT_ADD (unique, 0x100004c4, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100004c4, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2bc, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2bc, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x2bc, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2bb, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2bb, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x2bc, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x2bb, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x2bb, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x2bc, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x2bb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2bb, 4)]
[ ---  CALL (ram, 0x262050, 8) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x26181c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x261908, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x2617a1, 1)]
[(register, 0xb0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x261847, 8), (register, 0x20, 8) CAST (unique, 0x100004dc, 8), (unique, 0x100004dc, 8) INT_ADD (unique, 0x100004d4, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100004d4, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x25d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x25d, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x25d, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x25c, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x25c, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x25d, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x25c, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x25c, 4), (stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x25d, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x25c, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x261890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x2628a0, 8) , (register, 0xa0, 8) , (register, 0xa8, 8) , (const, 0x14, 8) , (unique, 0x10000314, 8) , (const, 0xc, 8), (unique, 0x10000314, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(ram, 0x4f0ad4, 4) COPY (const, 0x1, 4)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x26187a, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[(unique, 0x1000037c, 4) COPY (stack, 0xffffffffffffffbc, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[ ---  CBRANCH (ram, 0x2618a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb8, 4) , (const, 0x1, 4), (stack, 0xffffffffffffffb8, 4) SUBPIECE (stack, 0xffffffffffffffb4, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[ ---  CBRANCH (ram, 0x2618f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb8, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4f0ad4, 4) COPY (const, 0x1, 4)]
[(unique, 0x10000378, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x26186e, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x28d, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x28d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004e4, 8) , (const, 0x0, 4), (unique, 0x100004e4, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x10000374, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x0, 4)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x10000374, 4) , (unique, 0x10000378, 4) , (unique, 0x1000037c, 4)]
[ ---  CBRANCH (ram, 0x26187a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x26187a, 8), (register, 0x20, 8) CAST (unique, 0x100004f4, 8), (unique, 0x100004f4, 8) INT_ADD (unique, 0x100004ec, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100004ec, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x29c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x29c, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x29c, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x29b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x29c, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x29b, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x29c, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x29b, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x29c, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x29b, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x29c, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x29b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x29c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x29b, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x2617a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x2617b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff98, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff98, 4) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2617b0, 8), (register, 0x20, 8) CAST (unique, 0x10000504, 8), (unique, 0x10000504, 8) INT_ADD (unique, 0x100004fc, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100004fc, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c5, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1c5, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1c5, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1c5, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x1c5, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x1c5, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c4, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xa0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x261941, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000050c, 8), (unique, 0x1000050c, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x261946, 8), (register, 0x20, 8) CAST (unique, 0x1000051c, 8), (unique, 0x1000051c, 8) INT_ADD (unique, 0x10000514, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000514, 8) CAST (register, 0x20, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1eb, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1ea, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1eb, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1ea, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1eb, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1ea, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x1eb, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x1ea, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x1eb, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x1ea, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1eb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ea, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1eb, 4)]
[(ram, 0x4f0ad4, 4) COPY (ram, 0x4f0ad4, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x1eb, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4f0ad4, 4) COPY (ram, 0x4f0ad4, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x261792, 1)]
