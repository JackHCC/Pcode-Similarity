[(register, 0x20, 8) CAST (unique, 0x10000419, 8), (unique, 0x10000419, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa18, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa18, 8)]
[(ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa18, 8) INDIRECT (stack, 0xfffffffffffffa18, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa20, 8) INDIRECT (stack, 0xfffffffffffffa20, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa28, 8) INDIRECT (stack, 0xfffffffffffffa28, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa38, 8) INDIRECT (stack, 0xfffffffffffffa38, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa40, 8) INDIRECT (stack, 0xfffffffffffffa40, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa48, 8) INDIRECT (stack, 0xfffffffffffffa48, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa50, 8) INDIRECT (stack, 0xfffffffffffffa50, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa70, 8) INDIRECT (stack, 0xfffffffffffffa70, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa78, 8) INDIRECT (stack, 0xfffffffffffffa78, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa80, 8) INDIRECT (stack, 0xfffffffffffffa80, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa88, 4) INDIRECT (stack, 0xfffffffffffffa88, 4) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x28, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x28, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffca8, 8)]
[(stack, 0xfffffffffffffac0, 4) INDIRECT (stack, 0xfffffffffffffac0, 4) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffac8, 4) INDIRECT (stack, 0xfffffffffffffac8, 4) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffae8, 4) INDIRECT (stack, 0xfffffffffffffae8, 4) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x28, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x28, 4)]
[ ---  CBRANCH (ram, 0x23836b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000429, 8), (unique, 0x10000429, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x18, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000421, 8), (unique, 0x10000421, 8) INT_ADD (register, 0x0, 8) , (const, 0xe0, 8), (register, 0x0, 8) CALL (ram, 0x237a60, 8), (register, 0x18, 8) INT_SEXT (register, 0x38, 4)]
[(unique, 0x3800, 8) CAST (unique, 0x10000431, 8), (unique, 0x10000431, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa58, 8)]
[(unique, 0x3c80, 8) CAST (unique, 0x10000439, 8), (unique, 0x10000439, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(register, 0x28, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffa18, 8) INDIRECT (stack, 0xfffffffffffffa18, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa18, 8) MULTIEQUAL (stack, 0xfffffffffffffa18, 8) , (unique, 0x1000013f, 8)]
[(stack, 0xfffffffffffffa20, 8) INDIRECT (stack, 0xfffffffffffffa20, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa20, 8) MULTIEQUAL (stack, 0xfffffffffffffa20, 8) , (unique, 0x10000147, 8)]
[(stack, 0xfffffffffffffa28, 8) INDIRECT (stack, 0xfffffffffffffa28, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa28, 8) MULTIEQUAL (stack, 0xfffffffffffffa28, 8) , (unique, 0x1000014f, 8)]
[(stack, 0xfffffffffffffa38, 8) INDIRECT (stack, 0xfffffffffffffa38, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa38, 8) MULTIEQUAL (stack, 0xfffffffffffffa38, 8) , (unique, 0x10000157, 8)]
[(stack, 0xfffffffffffffa40, 8) INDIRECT (stack, 0xfffffffffffffa40, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa40, 8) MULTIEQUAL (stack, 0xfffffffffffffa40, 8) , (unique, 0x1000015f, 8)]
[(stack, 0xfffffffffffffa48, 8) INDIRECT (stack, 0xfffffffffffffa48, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa48, 8) MULTIEQUAL (stack, 0xfffffffffffffa48, 8) , (unique, 0x10000167, 8)]
[(stack, 0xfffffffffffffa50, 8) INDIRECT (stack, 0xfffffffffffffa50, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa50, 8) MULTIEQUAL (stack, 0xfffffffffffffa50, 8) , (unique, 0x1000016f, 8)]
[(stack, 0xfffffffffffffa70, 8) INDIRECT (stack, 0xfffffffffffffa70, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa70, 8) MULTIEQUAL (stack, 0xfffffffffffffa70, 8) , (unique, 0x10000177, 8)]
[(stack, 0xfffffffffffffa78, 8) INDIRECT (stack, 0xfffffffffffffa78, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa78, 8) MULTIEQUAL (stack, 0xfffffffffffffa78, 8) , (unique, 0x1000017f, 8)]
[(stack, 0xfffffffffffffa80, 8) INDIRECT (stack, 0xfffffffffffffa80, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa80, 8) MULTIEQUAL (stack, 0xfffffffffffffa80, 8) , (unique, 0x10000187, 8)]
[(stack, 0xfffffffffffffa88, 4) INDIRECT (stack, 0xfffffffffffffa88, 4) , (const, 0x51, 4), (stack, 0xfffffffffffffa88, 4) MULTIEQUAL (stack, 0xfffffffffffffa88, 4) , (unique, 0x1000018f, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa90, 8) MULTIEQUAL (stack, 0xfffffffffffffa90, 8) , (unique, 0x10000193, 8)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (unique, 0x1000019b, 8)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (unique, 0x100001a3, 8)]
[(stack, 0xfffffffffffffac0, 4) INDIRECT (stack, 0xfffffffffffffac0, 4) , (const, 0x51, 4), (stack, 0xfffffffffffffac0, 4) MULTIEQUAL (stack, 0xfffffffffffffac0, 4) , (unique, 0x100001ab, 4)]
[(stack, 0xfffffffffffffac8, 4) INDIRECT (stack, 0xfffffffffffffac8, 4) , (const, 0x51, 4), (stack, 0xfffffffffffffac8, 4) MULTIEQUAL (stack, 0xfffffffffffffac8, 4) , (unique, 0x100001af, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (unique, 0x100001b3, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (unique, 0x100001bb, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (unique, 0x100001c3, 8)]
[(stack, 0xfffffffffffffae8, 4) INDIRECT (stack, 0xfffffffffffffae8, 4) , (const, 0x51, 4), (stack, 0xfffffffffffffae8, 4) MULTIEQUAL (stack, 0xfffffffffffffae8, 4) , (unique, 0x100001cb, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (unique, 0x100001cf, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x51, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (unique, 0x100001d7, 8)]
[(unique, 0x100003b5, 4) COPY (ram, 0x4c7e20, 4), (ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x51, 4), (ram, 0x4c7e20, 4) MULTIEQUAL (ram, 0x4c7e20, 4) , (unique, 0x1000013b, 4)]
[ ---  CBRANCH (ram, 0x238350, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000222, 8), (unique, 0x10000222, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffa18, 8) COPY (stack, 0xfffffffffffffa70, 8)]
[(stack, 0xfffffffffffffa20, 8) COPY (stack, 0xfffffffffffffa78, 8)]
[(stack, 0xfffffffffffffa28, 8) COPY (stack, 0xfffffffffffffa80, 8)]
[(stack, 0xfffffffffffffa38, 8) COPY (stack, 0xfffffffffffffa90, 8)]
[(stack, 0xfffffffffffffa40, 8) COPY (stack, 0xfffffffffffffa98, 8)]
[(unique, 0x10000409, 8) COPY (register, 0x28, 8)]
[(unique, 0x10000411, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x2383f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffa88, 4) , (const, 0x0, 4)]
[(ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa18, 8) INDIRECT (stack, 0xfffffffffffffa18, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa20, 8) INDIRECT (stack, 0xfffffffffffffa20, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa28, 8) INDIRECT (stack, 0xfffffffffffffa28, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa38, 8) INDIRECT (stack, 0xfffffffffffffa38, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa40, 8) INDIRECT (stack, 0xfffffffffffffa40, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa48, 8) INDIRECT (unique, 0x10000409, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa50, 8) INDIRECT (unique, 0x10000411, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa70, 8) INDIRECT (stack, 0xfffffffffffffa70, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa78, 8) INDIRECT (stack, 0xfffffffffffffa78, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa80, 8) INDIRECT (stack, 0xfffffffffffffa80, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa88, 4) INDIRECT (stack, 0xfffffffffffffa88, 4) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffac0, 4) INDIRECT (stack, 0xfffffffffffffac0, 4) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffac8, 4) INDIRECT (stack, 0xfffffffffffffac8, 4) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffae8, 4) INDIRECT (stack, 0xfffffffffffffae8, 4) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1cd, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1cd, 4)]
[ ---  CBRANCH (ram, 0x238282, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x22d580, 8) , (register, 0x20, 8) , (unique, 0x3800, 8)]
[(ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa18, 8) INDIRECT (stack, 0xfffffffffffffa18, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa20, 8) INDIRECT (stack, 0xfffffffffffffa20, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa28, 8) INDIRECT (stack, 0xfffffffffffffa28, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa38, 8) INDIRECT (stack, 0xfffffffffffffa38, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa40, 8) INDIRECT (stack, 0xfffffffffffffa40, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa48, 8) INDIRECT (stack, 0xfffffffffffffa48, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa50, 8) INDIRECT (stack, 0xfffffffffffffa50, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa70, 8) INDIRECT (stack, 0xfffffffffffffa70, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa78, 8) INDIRECT (stack, 0xfffffffffffffa78, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa80, 8) INDIRECT (stack, 0xfffffffffffffa80, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa88, 4) INDIRECT (stack, 0xfffffffffffffa88, 4) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffac0, 4) INDIRECT (stack, 0xfffffffffffffac0, 4) , (const, 0x1ed, 4), (stack, 0xfffffffffffffac0, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffac8, 4) INDIRECT (stack, 0xfffffffffffffac8, 4) , (const, 0x1ed, 4), (stack, 0xfffffffffffffac8, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1ed, 4), (stack, 0xfffffffffffffad0, 8) INT_ADD (unique, 0x100003ad, 8) , (const, 0x1, 4), (unique, 0x100003ad, 8) INT_LEFT (unique, 0x100003a5, 8) , (const, 0x20, 8), (unique, 0x100003a5, 8) INT_SEXT (unique, 0x10000441, 4), (unique, 0x10000441, 4) CAST (stack, 0xfffffffffffffad4, 4), (stack, 0xfffffffffffffad4, 4) SUBPIECE (stack, 0xfffffffffffffad0, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x1ed, 4), (stack, 0xfffffffffffffad8, 8) INT_OR (unique, 0x10000126, 8) , (unique, 0x1000012e, 8), (unique, 0x1000012e, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x10000126, 8) INT_AND (stack, 0xfffffffffffffad8, 8) , (const, 0xffffffff00000000, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffae8, 4) INDIRECT (stack, 0xfffffffffffffae8, 4) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1ed, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1ed, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x3c80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x238350, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000445, 8) , (const, 0x0, 4), (unique, 0x10000445, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10000232, 8) , (const, 0x8, 8), (unique, 0x10000232, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x30, 8)]
[(ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x9b, 4), (ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x98, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000044d, 8) , (unique, 0x100003b5, 4), (unique, 0x1000044d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000355, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x10000355, 8) PTRSUB (unique, 0x1000024a, 8) , (const, 0x8, 8), (unique, 0x1000024a, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x14, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 4) MULTIEQUAL (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 4) MULTIEQUAL (stack, 0xfffffffffffffac8, 4) , (stack, 0xfffffffffffffac8, 4)]
[(stack, 0xfffffffffffffac0, 4) MULTIEQUAL (stack, 0xfffffffffffffac0, 4) , (stack, 0xfffffffffffffac0, 4)]
[(stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffa90, 8) MULTIEQUAL (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8)]
[(stack, 0xfffffffffffffa88, 4) MULTIEQUAL (stack, 0xfffffffffffffa88, 4) , (stack, 0xfffffffffffffa88, 4)]
[(stack, 0xfffffffffffffa80, 8) MULTIEQUAL (stack, 0xfffffffffffffa80, 8) , (stack, 0xfffffffffffffa80, 8)]
[(stack, 0xfffffffffffffa78, 8) MULTIEQUAL (stack, 0xfffffffffffffa78, 8) , (stack, 0xfffffffffffffa78, 8)]
[(stack, 0xfffffffffffffa70, 8) MULTIEQUAL (stack, 0xfffffffffffffa70, 8) , (stack, 0xfffffffffffffa70, 8)]
[(stack, 0xfffffffffffffa50, 8) MULTIEQUAL (unique, 0x10000411, 8) , (stack, 0xfffffffffffffa50, 8)]
[(stack, 0xfffffffffffffa48, 8) MULTIEQUAL (unique, 0x10000409, 8) , (stack, 0xfffffffffffffa48, 8)]
[(stack, 0xfffffffffffffa40, 8) MULTIEQUAL (stack, 0xfffffffffffffa40, 8) , (stack, 0xfffffffffffffa40, 8)]
[(stack, 0xfffffffffffffa38, 8) MULTIEQUAL (stack, 0xfffffffffffffa38, 8) , (stack, 0xfffffffffffffa38, 8)]
[(stack, 0xfffffffffffffa28, 8) MULTIEQUAL (stack, 0xfffffffffffffa28, 8) , (stack, 0xfffffffffffffa28, 8)]
[(stack, 0xfffffffffffffa20, 8) MULTIEQUAL (stack, 0xfffffffffffffa20, 8) , (stack, 0xfffffffffffffa20, 8)]
[(stack, 0xfffffffffffffa18, 8) MULTIEQUAL (stack, 0xfffffffffffffa18, 8) , (stack, 0xfffffffffffffa18, 8)]
[(ram, 0x4c7e20, 4) MULTIEQUAL (ram, 0x4c7e20, 4) , (ram, 0x4c7e20, 4)]
[ ---  CBRANCH (ram, 0x238380, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10000455, 8), (unique, 0x10000455, 8) INT_ADD (register, 0x0, 8) , (const, 0xe8, 8)]
[(unique, 0x10000121, 1) COPY (const, 0x0, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x38, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x2382b8, 1)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0x10000120, 1) MULTIEQUAL (unique, 0x10000121, 1) , (unique, 0x10000122, 1) , (unique, 0x10000120, 1)]
[ ---  CBRANCH (ram, 0x2382b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffa18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x2382e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000045d, 8), (unique, 0x1000045d, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x238448, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffa20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa18, 8) INDIRECT (stack, 0xfffffffffffffa18, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa20, 8) INDIRECT (stack, 0xfffffffffffffa20, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa28, 8) INDIRECT (stack, 0xfffffffffffffa28, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa38, 8) INDIRECT (stack, 0xfffffffffffffa38, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa40, 8) INDIRECT (stack, 0xfffffffffffffa40, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa48, 8) INDIRECT (stack, 0xfffffffffffffa48, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa50, 8) INDIRECT (stack, 0xfffffffffffffa50, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa70, 8) INDIRECT (stack, 0xfffffffffffffa70, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa78, 8) INDIRECT (stack, 0xfffffffffffffa78, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa80, 8) INDIRECT (stack, 0xfffffffffffffa80, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa88, 4) INDIRECT (stack, 0xfffffffffffffa88, 4) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffac0, 4) INDIRECT (stack, 0xfffffffffffffac0, 4) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffac8, 4) INDIRECT (stack, 0xfffffffffffffac8, 4) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffae8, 4) INDIRECT (stack, 0xfffffffffffffae8, 4) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1bb, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1bb, 4)]
[ ---  CALLIND (unique, 0x10000465, 8) , (register, 0x20, 8) , (unique, 0xbd80, 8), (unique, 0x10000465, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x238350, 1)]
[(unique, 0xbd80, 8) CAST (unique, 0x1000046d, 8), (unique, 0x1000046d, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(unique, 0x100003c9, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x2382d5, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0xbd80, 8) , (register, 0x38, 8)]
[(unique, 0x100003d1, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100003c9, 8) , (unique, 0x100003d1, 8)]
[(unique, 0x100003b9, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2382dc, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x30, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100003c1, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100003b9, 8) , (unique, 0x100003c1, 8)]
[(unique, 0x10000122, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x2382b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x238380, 1) , (unique, 0x1000011f, 1), (unique, 0x1000011f, 1) MULTIEQUAL (unique, 0x10000122, 1) , (unique, 0x10000120, 1)]
[(ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa18, 8) INDIRECT (stack, 0xfffffffffffffa18, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa20, 8) INDIRECT (stack, 0xfffffffffffffa20, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa28, 8) INDIRECT (stack, 0xfffffffffffffa28, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa38, 8) INDIRECT (stack, 0xfffffffffffffa38, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa40, 8) INDIRECT (stack, 0xfffffffffffffa40, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa48, 8) INDIRECT (stack, 0xfffffffffffffa48, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa50, 8) INDIRECT (stack, 0xfffffffffffffa50, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa70, 8) INDIRECT (stack, 0xfffffffffffffa70, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa78, 8) INDIRECT (stack, 0xfffffffffffffa78, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa80, 8) INDIRECT (stack, 0xfffffffffffffa80, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa88, 4) INDIRECT (stack, 0xfffffffffffffa88, 4) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x13c, 4)]
[(stack, 0xfffffffffffffac0, 4) INDIRECT (stack, 0xfffffffffffffac0, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffac0, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffac8, 4) INDIRECT (stack, 0xfffffffffffffac8, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffac8, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x13c, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000475, 8), (unique, 0x10000475, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000036d, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x1000036d, 8) PTRSUB (unique, 0x10000272, 8) , (const, 0x8, 8), (unique, 0x10000272, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x14, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x13c, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000047d, 8), (unique, 0x1000047d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x30, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x13c, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10000292, 8) , (const, 0x8, 8), (unique, 0x10000292, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x30, 8)]
[(stack, 0xfffffffffffffae8, 4) INDIRECT (stack, 0xfffffffffffffae8, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffae8, 4) COPY (const, 0x2, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x100003f9, 8) , (const, 0x13c, 4), (unique, 0x100003f9, 8) COPY (register, 0x38, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (unique, 0x10000401, 8) , (const, 0x13c, 4), (unique, 0x10000401, 8) COPY (register, 0x30, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x3c80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x145, 4), (ram, 0x4c7e20, 4) MULTIEQUAL (ram, 0x4c7e20, 4) , (ram, 0x4c7e20, 4) , (ram, 0x4c7e20, 4) , (ram, 0x4c7e20, 4)]
[(stack, 0xfffffffffffffa18, 8) INDIRECT (stack, 0xfffffffffffffa18, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa18, 8) MULTIEQUAL (stack, 0xfffffffffffffa18, 8) , (stack, 0xfffffffffffffa18, 8) , (stack, 0xfffffffffffffa18, 8) , (stack, 0xfffffffffffffa18, 8)]
[(stack, 0xfffffffffffffa20, 8) INDIRECT (stack, 0xfffffffffffffa20, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa20, 8) MULTIEQUAL (stack, 0xfffffffffffffa20, 8) , (stack, 0xfffffffffffffa20, 8) , (stack, 0xfffffffffffffa20, 8) , (stack, 0xfffffffffffffa20, 8)]
[(stack, 0xfffffffffffffa28, 8) INDIRECT (stack, 0xfffffffffffffa28, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa28, 8) MULTIEQUAL (stack, 0xfffffffffffffa28, 8) , (stack, 0xfffffffffffffa28, 8) , (stack, 0xfffffffffffffa28, 8) , (stack, 0xfffffffffffffa28, 8)]
[(stack, 0xfffffffffffffa38, 8) INDIRECT (stack, 0xfffffffffffffa38, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa38, 8) MULTIEQUAL (stack, 0xfffffffffffffa38, 8) , (stack, 0xfffffffffffffa38, 8) , (stack, 0xfffffffffffffa38, 8) , (stack, 0xfffffffffffffa38, 8)]
[(stack, 0xfffffffffffffa40, 8) INDIRECT (stack, 0xfffffffffffffa40, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa40, 8) MULTIEQUAL (stack, 0xfffffffffffffa40, 8) , (stack, 0xfffffffffffffa40, 8) , (stack, 0xfffffffffffffa40, 8) , (stack, 0xfffffffffffffa40, 8)]
[(stack, 0xfffffffffffffa48, 8) INDIRECT (stack, 0xfffffffffffffa48, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa48, 8) MULTIEQUAL (stack, 0xfffffffffffffa48, 8) , (stack, 0xfffffffffffffa48, 8) , (stack, 0xfffffffffffffa48, 8) , (stack, 0xfffffffffffffa48, 8)]
[(stack, 0xfffffffffffffa50, 8) INDIRECT (stack, 0xfffffffffffffa50, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa50, 8) MULTIEQUAL (stack, 0xfffffffffffffa50, 8) , (stack, 0xfffffffffffffa50, 8) , (stack, 0xfffffffffffffa50, 8) , (stack, 0xfffffffffffffa50, 8)]
[(stack, 0xfffffffffffffa70, 8) INDIRECT (stack, 0xfffffffffffffa70, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa70, 8) MULTIEQUAL (stack, 0xfffffffffffffa70, 8) , (stack, 0xfffffffffffffa70, 8) , (stack, 0xfffffffffffffa70, 8) , (stack, 0xfffffffffffffa70, 8)]
[(stack, 0xfffffffffffffa78, 8) INDIRECT (stack, 0xfffffffffffffa78, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa78, 8) MULTIEQUAL (stack, 0xfffffffffffffa78, 8) , (stack, 0xfffffffffffffa78, 8) , (stack, 0xfffffffffffffa78, 8) , (stack, 0xfffffffffffffa78, 8)]
[(stack, 0xfffffffffffffa80, 8) INDIRECT (stack, 0xfffffffffffffa80, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa80, 8) MULTIEQUAL (stack, 0xfffffffffffffa80, 8) , (stack, 0xfffffffffffffa80, 8) , (stack, 0xfffffffffffffa80, 8) , (stack, 0xfffffffffffffa80, 8)]
[(stack, 0xfffffffffffffa88, 4) INDIRECT (stack, 0xfffffffffffffa88, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffa88, 4) MULTIEQUAL (stack, 0xfffffffffffffa88, 4) , (stack, 0xfffffffffffffa88, 4) , (stack, 0xfffffffffffffa88, 4) , (stack, 0xfffffffffffffa88, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa90, 8) MULTIEQUAL (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffac0, 4) INDIRECT (stack, 0xfffffffffffffac0, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffac0, 4) MULTIEQUAL (stack, 0xfffffffffffffac0, 4) , (stack, 0xfffffffffffffac0, 4) , (stack, 0xfffffffffffffac0, 4) , (stack, 0xfffffffffffffac0, 4)]
[(stack, 0xfffffffffffffac8, 4) INDIRECT (stack, 0xfffffffffffffac8, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffac8, 4) MULTIEQUAL (stack, 0xfffffffffffffac8, 4) , (stack, 0xfffffffffffffac8, 4) , (stack, 0xfffffffffffffac8, 4) , (stack, 0xfffffffffffffac8, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 4) INDIRECT (stack, 0xfffffffffffffae8, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffae8, 4) MULTIEQUAL (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x3c80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x1a9, 4), (ram, 0x4c7e20, 4) INDIRECT (ram, 0x4c7e20, 4) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa18, 8) INDIRECT (stack, 0xfffffffffffffa18, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa18, 8) INDIRECT (stack, 0xfffffffffffffa18, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa20, 8) INDIRECT (stack, 0xfffffffffffffa20, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa20, 8) INDIRECT (stack, 0xfffffffffffffa20, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa28, 8) INDIRECT (stack, 0xfffffffffffffa28, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa28, 8) INDIRECT (stack, 0xfffffffffffffa28, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa38, 8) INDIRECT (stack, 0xfffffffffffffa38, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa38, 8) INDIRECT (stack, 0xfffffffffffffa38, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa40, 8) INDIRECT (stack, 0xfffffffffffffa40, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa40, 8) INDIRECT (stack, 0xfffffffffffffa40, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa48, 8) INDIRECT (stack, 0xfffffffffffffa48, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa48, 8) INDIRECT (stack, 0xfffffffffffffa48, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa50, 8) INDIRECT (stack, 0xfffffffffffffa50, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa50, 8) INDIRECT (stack, 0xfffffffffffffa50, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa70, 8) INDIRECT (stack, 0xfffffffffffffa70, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa70, 8) INDIRECT (stack, 0xfffffffffffffa70, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa78, 8) INDIRECT (stack, 0xfffffffffffffa78, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa78, 8) INDIRECT (stack, 0xfffffffffffffa78, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa80, 8) INDIRECT (stack, 0xfffffffffffffa80, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa80, 8) INDIRECT (stack, 0xfffffffffffffa80, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa88, 4) INDIRECT (stack, 0xfffffffffffffa88, 4) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa88, 4) INDIRECT (stack, 0xfffffffffffffa88, 4) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffac0, 4) INDIRECT (stack, 0xfffffffffffffac0, 4) , (const, 0x1a9, 4), (stack, 0xfffffffffffffac0, 4) INDIRECT (stack, 0xfffffffffffffac0, 4) , (const, 0x1a0, 4), (stack, 0xfffffffffffffac0, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffac8, 4) INDIRECT (stack, 0xfffffffffffffac8, 4) , (const, 0x1a9, 4), (stack, 0xfffffffffffffac8, 4) INDIRECT (stack, 0xfffffffffffffac8, 4) , (const, 0x1a0, 4), (stack, 0xfffffffffffffac8, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1a0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000485, 8), (unique, 0x10000485, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000038d, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x1000038d, 8) PTRSUB (unique, 0x100002ca, 8) , (const, 0x8, 8), (unique, 0x100002ca, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x14, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1a0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000048d, 8), (unique, 0x1000048d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x30, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1a0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100002ea, 8) , (const, 0x8, 8), (unique, 0x100002ea, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x30, 8)]
[(stack, 0xfffffffffffffae8, 4) INDIRECT (stack, 0xfffffffffffffae8, 4) , (const, 0x1a9, 4), (stack, 0xfffffffffffffae8, 4) INDIRECT (stack, 0xfffffffffffffae8, 4) , (const, 0x1a0, 4), (stack, 0xfffffffffffffae8, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1a0, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1a0, 4)]
[(register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(unique, 0x1000013b, 4) MULTIEQUAL (ram, 0x4c7e20, 4) , (ram, 0x4c7e20, 4)]
[(unique, 0x1000013f, 8) MULTIEQUAL (stack, 0xfffffffffffffa18, 8) , (stack, 0xfffffffffffffa18, 8)]
[(unique, 0x10000147, 8) MULTIEQUAL (stack, 0xfffffffffffffa20, 8) , (stack, 0xfffffffffffffa20, 8)]
[(unique, 0x1000014f, 8) MULTIEQUAL (stack, 0xfffffffffffffa28, 8) , (stack, 0xfffffffffffffa28, 8)]
[(unique, 0x10000157, 8) MULTIEQUAL (stack, 0xfffffffffffffa38, 8) , (stack, 0xfffffffffffffa38, 8)]
[(unique, 0x1000015f, 8) MULTIEQUAL (stack, 0xfffffffffffffa40, 8) , (stack, 0xfffffffffffffa40, 8)]
[(unique, 0x10000167, 8) MULTIEQUAL (stack, 0xfffffffffffffa48, 8) , (stack, 0xfffffffffffffa48, 8)]
[(unique, 0x1000016f, 8) MULTIEQUAL (stack, 0xfffffffffffffa50, 8) , (stack, 0xfffffffffffffa50, 8)]
[(unique, 0x10000177, 8) MULTIEQUAL (stack, 0xfffffffffffffa70, 8) , (stack, 0xfffffffffffffa70, 8)]
[(unique, 0x1000017f, 8) MULTIEQUAL (stack, 0xfffffffffffffa78, 8) , (stack, 0xfffffffffffffa78, 8)]
[(unique, 0x10000187, 8) MULTIEQUAL (stack, 0xfffffffffffffa80, 8) , (stack, 0xfffffffffffffa80, 8)]
[(unique, 0x1000018f, 4) MULTIEQUAL (stack, 0xfffffffffffffa88, 4) , (stack, 0xfffffffffffffa88, 4)]
[(unique, 0x10000193, 8) MULTIEQUAL (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8)]
[(unique, 0x1000019b, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(unique, 0x100001a3, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(unique, 0x100001ab, 4) MULTIEQUAL (stack, 0xfffffffffffffac0, 4) , (stack, 0xfffffffffffffac0, 4)]
[(unique, 0x100001af, 4) MULTIEQUAL (stack, 0xfffffffffffffac8, 4) , (stack, 0xfffffffffffffac8, 4)]
[(unique, 0x100001b3, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(unique, 0x100001bb, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(unique, 0x100001c3, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(unique, 0x100001cb, 4) MULTIEQUAL (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x100001cf, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x100001d7, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[ ---  CBRANCH (ram, 0x238362, 1) , (unique, 0x10000136, 1), (unique, 0x10000136, 1) INT_EQUAL (unique, 0x10000137, 4) , (const, 0x0, 4), (unique, 0x10000137, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffa18, 8) INDIRECT (unique, 0x1000013f, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffa20, 8) INDIRECT (unique, 0x10000147, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffa28, 8) INDIRECT (unique, 0x1000014f, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffa38, 8) INDIRECT (unique, 0x10000157, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffa40, 8) INDIRECT (unique, 0x1000015f, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffa48, 8) INDIRECT (unique, 0x10000167, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffa50, 8) INDIRECT (unique, 0x1000016f, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (unique, 0x10000193, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (unique, 0x100001a3, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffac0, 4) INDIRECT (unique, 0x100001ab, 4) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffac8, 4) INDIRECT (unique, 0x100001af, 4) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (unique, 0x100001b3, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (unique, 0x100001bb, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (unique, 0x100001c3, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffae8, 4) INDIRECT (unique, 0x100001cb, 4) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x100001cf, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (unique, 0x100001d7, 8) , (const, 0x17a, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x28, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(ram, 0x4c7e20, 4) COPY (ram, 0x4c7e20, 4), (ram, 0x4c7e20, 4) INDIRECT (unique, 0x1000013b, 4) , (const, 0x17a, 4)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x238208, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000137, 4) , (const, 0x1, 4)]
[(ram, 0x4c7e20, 4) COPY (ram, 0x4c7e20, 4), (ram, 0x4c7e20, 4) MULTIEQUAL (ram, 0x4c7e20, 4) , (unique, 0x1000013b, 4)]
[ ---  RETURN (const, 0x0, 8)]
