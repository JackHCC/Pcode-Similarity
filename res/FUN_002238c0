[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x2f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2f, 4)]
[(ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x2f, 4)]
[(ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x2f, 4)]
[(ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x2f, 4)]
[(ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x2f, 4)]
[(ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x2f, 4)]
[(ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x2f, 4)]
[(ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x2f, 4)]
[(ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x2f, 4)]
[(ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x2f, 4), (stack, 0xfffffffffffff7a0, 8) COPY (const, 0x2238ef, 8)]
[(stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000059a, 8), (unique, 0x1000059a, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x223908, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1426e0, 8) , (unique, 0x1000026f, 8), (unique, 0x1000026f, 8) COPY (const, 0x2b660d, 8)]
[ ---  CBRANCH (ram, 0x223d7d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005a2, 8), (unique, 0x100005a2, 8) CAST (ram, 0x4eae20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x223d9c, 8), (register, 0x20, 8) CAST (unique, 0x100005ca, 8), (unique, 0x100005ca, 8) INT_ADD (unique, 0x100005c2, 8) , (unique, 0x1000016d, 8), (unique, 0x100005c2, 8) CAST (unique, 0x10000427, 8), (unique, 0x10000427, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff7a0, 8), (unique, 0x1000016d, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x23, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8)]
[ ---  CALL (ram, 0x1e58e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x223db6, 8), (register, 0x20, 8) CAST (unique, 0x100005da, 8), (unique, 0x100005da, 8) INT_ADD (unique, 0x100005d2, 8) , (unique, 0x1000016d, 8), (unique, 0x100005d2, 8) CAST (unique, 0x1000043f, 8), (unique, 0x1000043f, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff7a0, 8), (unique, 0x1000016d, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x23, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8)]
[ ---  CALL (ram, 0x164f50, 8) , (register, 0x20, 8) , (unique, 0x3100, 8) , (unique, 0x1000027f, 8) , (register, 0x0, 8), (unique, 0x1000027f, 8) COPY (const, 0x2b6626, 8), (register, 0x20, 8) CAST (unique, 0x100005b2, 8), (unique, 0x100005b2, 8) INT_ADD (unique, 0x100005aa, 8) , (unique, 0x100004f9, 8), (unique, 0x100005aa, 8) CAST (unique, 0x10000501, 8), (unique, 0x10000501, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff7a0, 8), (unique, 0x100004f9, 8) INT_ADD (unique, 0x1000016d, 8) , (const, 0x8, 8), (unique, 0x1000016d, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x23, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x14, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x223dca, 8), (register, 0x20, 8) CAST (unique, 0x100005ea, 8), (unique, 0x100005ea, 8) INT_ADD (unique, 0x100005e2, 8) , (unique, 0x1000016d, 8), (unique, 0x100005e2, 8) CAST (unique, 0x10000457, 8), (unique, 0x10000457, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff7a0, 8), (unique, 0x1000016d, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x23, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x447, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x437, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x424, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x404, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x447, 4), (ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x437, 4), (ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x424, 4), (ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x404, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x447, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x437, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x424, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x404, 4)]
[(ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x447, 4), (ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x437, 4), (ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x424, 4), (ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x404, 4)]
[(ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x447, 4), (ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x437, 4), (ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x424, 4), (ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x404, 4)]
[(ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x447, 4), (ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x437, 4), (ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x424, 4), (ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x404, 4)]
[(ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x447, 4), (ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x437, 4), (ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x424, 4), (ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x404, 4)]
[(ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x447, 4), (ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x437, 4), (ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x424, 4), (ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x404, 4)]
[(ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x447, 4), (ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x437, 4), (ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x424, 4), (ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x404, 4)]
[(ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x447, 4), (ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x437, 4), (ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x424, 4), (ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x404, 4)]
[(ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x447, 4), (ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x437, 4), (ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x424, 4), (ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x404, 4)]
[(ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x447, 4), (ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x437, 4), (ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x424, 4), (ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x404, 4), (stack, 0xfffffffffffff7a0, 8) COPY (const, 0x223d88, 8)]
[(stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x447, 4), (stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x446, 4), (stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x437, 4), (stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x436, 4), (stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x424, 4), (stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x423, 4), (stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x447, 4), (stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x446, 4), (stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x437, 4), (stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x436, 4), (stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x424, 4), (stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x423, 4), (stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x447, 4), (stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x446, 4), (stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x437, 4), (stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x436, 4), (stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x424, 4), (stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x423, 4), (stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x447, 4), (stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x446, 4), (stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x437, 4), (stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x436, 4), (stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x424, 4), (stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x423, 4), (stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x447, 4), (stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x446, 4), (stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x437, 4), (stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x436, 4), (stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x424, 4), (stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x423, 4), (stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x447, 4), (stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x446, 4), (stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x437, 4), (stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x436, 4), (stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x424, 4), (stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x423, 4), (stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x447, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x446, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x437, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x436, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x424, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x423, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x447, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x446, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x437, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x436, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x424, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x423, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x447, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x446, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x437, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x436, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x424, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x423, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x404, 4)]
[(stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x447, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x446, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x437, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x436, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x424, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x423, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x404, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x447, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x446, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x437, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x436, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x424, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x423, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x404, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x447, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x446, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x437, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x436, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x424, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x423, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x404, 4)]
[ ---  CBRANCH (ram, 0x22392a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (register, 0x20, 8) , (const, 0x20241, 8) , (const, 0x1b6, 8), (register, 0x20, 8) INT_ADD (unique, 0x100005ba, 8) , (unique, 0x10000519, 8), (unique, 0x100005ba, 8) CAST (unique, 0x10000521, 8), (unique, 0x10000521, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff7a0, 8), (unique, 0x10000519, 8) INT_ADD (unique, 0x1000016d, 8) , (const, 0x8, 8), (unique, 0x1000016d, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x23, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x58, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x58, 4), (ram, 0x4eae20, 8) MULTIEQUAL (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x58, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x58, 4), (ram, 0x4eb368, 8) MULTIEQUAL (ram, 0x4eb368, 8) , (ram, 0x4eb368, 8) , (ram, 0x4eb368, 8)]
[(ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x58, 4), (ram, 0x4eb370, 8) MULTIEQUAL (ram, 0x4eb370, 8) , (ram, 0x4eb370, 8) , (ram, 0x4eb370, 8)]
[(ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x58, 4), (ram, 0x4eb378, 8) MULTIEQUAL (ram, 0x4eb378, 8) , (ram, 0x4eb378, 8) , (ram, 0x4eb378, 8)]
[(ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x58, 4), (ram, 0x4eb380, 8) MULTIEQUAL (ram, 0x4eb380, 8) , (ram, 0x4eb380, 8) , (ram, 0x4eb380, 8)]
[(ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x58, 4), (ram, 0x4eb388, 8) MULTIEQUAL (ram, 0x4eb388, 8) , (ram, 0x4eb388, 8) , (ram, 0x4eb388, 8)]
[(ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x58, 4), (ram, 0x4eb3a0, 8) MULTIEQUAL (ram, 0x4eb3a0, 8) , (ram, 0x4eb3a0, 8) , (ram, 0x4eb3a0, 8)]
[(ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x58, 4), (ram, 0x4eb3a8, 8) MULTIEQUAL (ram, 0x4eb3a8, 8) , (ram, 0x4eb3a8, 8) , (ram, 0x4eb3a8, 8)]
[(ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x58, 4), (ram, 0x4eb3b8, 8) MULTIEQUAL (ram, 0x4eb3b8, 8) , (ram, 0x4eb3b8, 8) , (ram, 0x4eb3b8, 8)]
[(ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x58, 4), (ram, 0x4f0708, 8) MULTIEQUAL (ram, 0x4f0708, 8) , (ram, 0x4f0708, 8) , (ram, 0x4f0708, 8)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff7a0, 8) COPY (const, 0x223920, 8)]
[(stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff7a8, 8) MULTIEQUAL (stack, 0xfffffffffffff7a8, 8) , (stack, 0xfffffffffffff7a8, 8) , (stack, 0xfffffffffffff7a8, 8)]
[(stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff7b0, 8) MULTIEQUAL (stack, 0xfffffffffffff7b0, 8) , (stack, 0xfffffffffffff7b0, 8) , (stack, 0xfffffffffffff7b0, 8)]
[(stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x58, 4), (stack, 0xfffffffffffff7bf, 1) MULTIEQUAL (stack, 0xfffffffffffff7bf, 1) , (stack, 0xfffffffffffff7bf, 1) , (stack, 0xfffffffffffff7bf, 1)]
[(stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff7c0, 8) MULTIEQUAL (stack, 0xfffffffffffff7c0, 8) , (stack, 0xfffffffffffff7c0, 8) , (stack, 0xfffffffffffff7c0, 8)]
[(stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff7c8, 8) MULTIEQUAL (stack, 0xfffffffffffff7c8, 8) , (stack, 0xfffffffffffff7c8, 8) , (stack, 0xfffffffffffff7c8, 8)]
[(stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff7d0, 8) MULTIEQUAL (stack, 0xfffffffffffff7d0, 8) , (stack, 0xfffffffffffff7d0, 8) , (stack, 0xfffffffffffff7d0, 8)]
[(stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x58, 4), (stack, 0xfffffffffffff7d8, 4) MULTIEQUAL (stack, 0xfffffffffffff7d8, 4) , (stack, 0xfffffffffffff7d8, 4) , (stack, 0xfffffffffffff7d8, 4)]
[(stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x58, 4), (stack, 0xfffffffffffff7e8, 4) MULTIEQUAL (stack, 0xfffffffffffff7e8, 4) , (stack, 0xfffffffffffff7e8, 4) , (stack, 0xfffffffffffff7e8, 4)]
[(stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x58, 4), (stack, 0xfffffffffffff7ec, 4) MULTIEQUAL (stack, 0xfffffffffffff7ec, 4) , (stack, 0xfffffffffffff7ec, 4) , (stack, 0xfffffffffffff7ec, 4)]
[(stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff7f0, 8) MULTIEQUAL (stack, 0xfffffffffffff7f0, 8) , (stack, 0xfffffffffffff7f0, 8) , (stack, 0xfffffffffffff7f0, 8)]
[(stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x58, 4), (stack, 0xfffffffffffff7f8, 4) MULTIEQUAL (stack, 0xfffffffffffff7f8, 4) , (stack, 0xfffffffffffff7f8, 4) , (stack, 0xfffffffffffff7f8, 4)]
[(stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff808, 8) MULTIEQUAL (stack, 0xfffffffffffff808, 8) , (stack, 0xfffffffffffff808, 8) , (stack, 0xfffffffffffff808, 8)]
[(stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff810, 8) MULTIEQUAL (stack, 0xfffffffffffff810, 8) , (stack, 0xfffffffffffff810, 8) , (stack, 0xfffffffffffff810, 8)]
[(stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff818, 8) MULTIEQUAL (stack, 0xfffffffffffff818, 8) , (stack, 0xfffffffffffff818, 8) , (stack, 0xfffffffffffff818, 8)]
[(stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x58, 4), (stack, 0xfffffffffffff820, 8) MULTIEQUAL (stack, 0xfffffffffffff820, 8) , (stack, 0xfffffffffffff820, 8) , (stack, 0xfffffffffffff820, 8)]
[(stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x58, 4), (stack, 0xfffffffffffff828, 4) MULTIEQUAL (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4)]
[(stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x58, 4), (stack, 0xfffffffffffff82c, 2) MULTIEQUAL (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2)]
[(stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x58, 4), (stack, 0xfffffffffffff82e, 1) MULTIEQUAL (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1)]
[(stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x58, 4), (stack, 0xfffffffffffff82f, 1) MULTIEQUAL (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffa90, 8) MULTIEQUAL (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffaa0, 8) MULTIEQUAL (stack, 0xfffffffffffffaa0, 8) , (stack, 0xfffffffffffffaa0, 8) , (stack, 0xfffffffffffffaa0, 8)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffab0, 8) MULTIEQUAL (stack, 0xfffffffffffffab0, 8) , (stack, 0xfffffffffffffab0, 8) , (stack, 0xfffffffffffffab0, 8)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x58, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x223ddd, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (unique, 0x10000277, 8) , (const, 0x20241, 8) , (const, 0x1b6, 8), (unique, 0x10000277, 8) COPY (const, 0x2b661d, 8)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x3e5, 4), (stack, 0xfffffffffffff7a0, 8) COPY (const, 0x223df8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3fe, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x3fe, 4), (ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3fe, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x3fe, 4), (ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x3fe, 4), (ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x3fe, 4), (ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x3fe, 4), (ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x3fe, 4), (ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x3fe, 4), (ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x3fe, 4), (ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x3e5, 4)]
[(ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x3fe, 4), (ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x3e5, 4)]
[(ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x3fe, 4), (ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7a0, 8) COPY (const, 0x223e0b, 8)]
[(stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x3fe, 4), (stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x3fe, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x3fe, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x3fe, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x3fe, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x3e5, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x3fe, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x3e5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3fe, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3e5, 4)]
[ ---  CALL (ram, 0x17ddd0, 8) , (const, 0x0, 8) , (unique, 0x10000287, 8) , (register, 0x0, 8), (unique, 0x10000287, 8) COPY (const, 0x2b662c, 8), (register, 0x0, 8) CALL (ram, 0x19dad0, 8) , (unique, 0xbc80, 4) , (unique, 0x100005fa, 8) , (const, 0x12c, 8), (unique, 0x100005fa, 8) CAST (unique, 0x3200, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005f2, 8), (unique, 0x100005f2, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[ ---  BRANCH (ram, 0x223c4e, 1)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff7c8, 8)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffff7a0, 8) COPY (const, 0x22396a, 8)]
[ ---  CALL (ram, 0x2101e0, 8) , (register, 0x18, 4) , (unique, 0x3200, 8) , (const, 0x14, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff7e8, 8), (register, 0x18, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x83, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x83, 4), (ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x7a, 4), (ram, 0x4eae20, 8) MULTIEQUAL (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x83, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x83, 4), (ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x7a, 4), (ram, 0x4eb368, 8) MULTIEQUAL (ram, 0x4eb368, 8) , (ram, 0x4eb368, 8)]
[(ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x83, 4), (ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x7a, 4), (ram, 0x4eb378, 8) MULTIEQUAL (ram, 0x4eb378, 8) , (ram, 0x4eb378, 8)]
[(ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x83, 4), (ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x7a, 4), (ram, 0x4eb380, 8) MULTIEQUAL (ram, 0x4eb380, 8) , (ram, 0x4eb380, 8)]
[(ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x83, 4), (ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x7a, 4), (ram, 0x4eb388, 8) MULTIEQUAL (ram, 0x4eb388, 8) , (ram, 0x4eb388, 8)]
[(ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x83, 4), (ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x7a, 4), (ram, 0x4eb3a0, 8) MULTIEQUAL (ram, 0x4eb3a0, 8) , (ram, 0x4eb3a0, 8)]
[(ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x83, 4), (ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x7a, 4), (ram, 0x4eb3a8, 8) MULTIEQUAL (ram, 0x4eb3a8, 8) , (ram, 0x4eb3a8, 8)]
[(ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x83, 4), (ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x7a, 4), (ram, 0x4eb3b8, 8) MULTIEQUAL (ram, 0x4eb3b8, 8) , (ram, 0x4eb3b8, 8)]
[(ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x83, 4), (ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x7a, 4), (ram, 0x4f0708, 8) MULTIEQUAL (ram, 0x4f0708, 8) , (ram, 0x4f0708, 8)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x83, 4), (stack, 0xfffffffffffff7a0, 8) COPY (const, 0x223988, 8)]
[(stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x83, 4), (stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffff7a8, 8) MULTIEQUAL (stack, 0xfffffffffffff7a8, 8) , (stack, 0xfffffffffffff7a8, 8)]
[(stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x83, 4), (stack, 0xfffffffffffff7c0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x83, 4), (stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffff7d0, 8) MULTIEQUAL (stack, 0xfffffffffffff7d0, 8) , (stack, 0xfffffffffffff7d0, 8)]
[(stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x83, 4), (stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x7a, 4), (stack, 0xfffffffffffff7d8, 4) MULTIEQUAL (stack, 0xfffffffffffff7d8, 4) , (stack, 0xfffffffffffff7d8, 4)]
[(stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x83, 4), (stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x7a, 4), (stack, 0xfffffffffffff7e8, 4) COPY (const, 0x6e6f6d67, 4)]
[(stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x83, 4), (stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x7a, 4), (stack, 0xfffffffffffff7ec, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x83, 4), (stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffff7f0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x83, 4), (stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x7a, 4), (stack, 0xfffffffffffff7f8, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffff81c, 4) INDIRECT (stack, 0xfffffffffffff81c, 4) , (const, 0x83, 4), (stack, 0xfffffffffffff81c, 4) INDIRECT (stack, 0xfffffffffffff81c, 4) , (const, 0x7a, 4), (stack, 0xfffffffffffff81c, 4) SUBPIECE (stack, 0xfffffffffffff818, 8) , (const, 0x4, 4), (stack, 0xfffffffffffff818, 8) MULTIEQUAL (stack, 0xfffffffffffff818, 8) , (stack, 0xfffffffffffff818, 8)]
[(stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x83, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x7a, 4), (stack, 0xfffffffffffff828, 4) MULTIEQUAL (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4)]
[(stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x83, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x7a, 4), (stack, 0xfffffffffffff82c, 2) MULTIEQUAL (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2)]
[(stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x83, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x7a, 4), (stack, 0xfffffffffffff82e, 1) MULTIEQUAL (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1)]
[(stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x83, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x7a, 4), (stack, 0xfffffffffffff82f, 1) MULTIEQUAL (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x83, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x83, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x83, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x83, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x265db0, 8) , (unique, 0x10000267, 8) , (unique, 0x3200, 8), (unique, 0x10000267, 8) PTRSUB (const, 0x0, 8) , (const, 0x2238a0, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff7c0, 8)]
[(stack, 0xfffffffffffff7c8, 8) INT_AND (stack, 0xfffffffffffff7c8, 8) , (const, 0xffffffffffffff00, 8), (stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x83, 4), (stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffff7c8, 8) MULTIEQUAL (stack, 0xfffffffffffff7c8, 8) , (stack, 0xfffffffffffff7c8, 8)]
[ ---  CBRANCH (ram, 0x223cb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4eb370, 8) , (const, 0x0, 8), (ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x83, 4), (ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x7a, 4), (ram, 0x4eb370, 8) MULTIEQUAL (ram, 0x4eb370, 8) , (ram, 0x4eb370, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x3b2, 4)]
[(ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x3b2, 4)]
[(ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x3b2, 4), (stack, 0xfffffffffffff7a0, 8) COPY (const, 0x223d2b, 8)]
[(stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x3b2, 4), (stack, 0xfffffffffffff7b0, 8) COPY (stack, 0xfffffffffffff7c0, 8)]
[(stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x3b2, 4)]
[(stack, 0xfffffffffffff808, 8) INDIRECT (register, 0x1200, 8) , (const, 0x3b2, 4), (register, 0x1200, 8) CAST (unique, 0x1000060a, 8), (unique, 0x1000060a, 8) INT_SUB (ram, 0x4eb3a0, 8) , (stack, 0xfffffffffffff7c0, 8)]
[(stack, 0xfffffffffffff810, 8) INDIRECT (register, 0x1208, 8) , (const, 0x3b2, 4), (register, 0x1208, 8) INT_SUB (ram, 0x4eb3a8, 8) , (stack, 0xfffffffffffff7c0, 8)]
[(stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x3b2, 4), (stack, 0xfffffffffffff818, 8) CAST (unique, 0x10000612, 8), (unique, 0x10000612, 8) INT_OR (unique, 0x1000024f, 8) , (unique, 0x1000025f, 8), (unique, 0x1000025f, 8) INT_LEFT (unique, 0x10000257, 8) , (const, 0x20, 4), (unique, 0x10000257, 8) INT_ZEXT (stack, 0xfffffffffffff81c, 4), (unique, 0x1000024f, 8) INT_AND (register, 0x0, 8) , (const, 0xffffffff, 8), (register, 0x0, 8) INT_RIGHT (ram, 0x4eb370, 8) , (const, 0x1, 4)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (unique, 0x1000058a, 8) , (const, 0x3b2, 4), (unique, 0x1000058a, 8) COPY (unique, 0x3200, 8)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x3b2, 4), (stack, 0xfffffffffffffa90, 8) COPY (const, 0x1, 8)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (unique, 0x3200, 8) , (const, 0x3b2, 4), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff808, 8)]
[(stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x3b2, 4), (stack, 0xfffffffffffffaa0, 8) COPY (const, 0x28, 8)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x3b2, 4), (stack, 0xfffffffffffffaa8, 8) COPY (unique, 0x10000602, 8), (unique, 0x10000602, 8) CAST (ram, 0x4eb368, 8)]
[(stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x3b2, 4), (stack, 0xfffffffffffffab0, 8) COPY (ram, 0x4eb370, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b2, 4)]
[ ---  CALL (ram, 0x224de0, 8)]
[(stack, 0xfffffffffffff82c, 2) COPY (const, 0x0, 2)]
[(stack, 0xfffffffffffff828, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffff82e, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffff82f, 1) COPY (const, 0x73, 1)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x2239b7, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffff82f, 1) MULTIEQUAL (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1)]
[(stack, 0xfffffffffffff82e, 1) MULTIEQUAL (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1)]
[(stack, 0xfffffffffffff82c, 2) MULTIEQUAL (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2)]
[(stack, 0xfffffffffffff828, 4) MULTIEQUAL (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4)]
[(stack, 0xfffffffffffff7f8, 4) MULTIEQUAL (stack, 0xfffffffffffff7f8, 4) , (stack, 0xfffffffffffff7f8, 4)]
[(stack, 0xfffffffffffff7f0, 8) MULTIEQUAL (stack, 0xfffffffffffff7f0, 8) , (stack, 0xfffffffffffff7f0, 8)]
[(stack, 0xfffffffffffff7ec, 4) MULTIEQUAL (stack, 0xfffffffffffff7ec, 4) , (stack, 0xfffffffffffff7ec, 4)]
[(stack, 0xfffffffffffff7e8, 4) MULTIEQUAL (stack, 0xfffffffffffff7e8, 4) , (stack, 0xfffffffffffff7e8, 4)]
[(stack, 0xfffffffffffff7d8, 4) MULTIEQUAL (stack, 0xfffffffffffff7d8, 4) , (stack, 0xfffffffffffff7d8, 4)]
[(stack, 0xfffffffffffff7d0, 8) MULTIEQUAL (stack, 0xfffffffffffff7d0, 8) , (stack, 0xfffffffffffff7d0, 8)]
[(stack, 0xfffffffffffff7c8, 8) MULTIEQUAL (stack, 0xfffffffffffff7c8, 8) , (stack, 0xfffffffffffff7c8, 8)]
[(stack, 0xfffffffffffff7c0, 8) MULTIEQUAL (stack, 0xfffffffffffff7c0, 8) , (stack, 0xfffffffffffff7c0, 8)]
[(stack, 0xfffffffffffff7a8, 8) MULTIEQUAL (stack, 0xfffffffffffff7a8, 8) , (stack, 0xfffffffffffff7a8, 8)]
[(ram, 0x4f0708, 8) MULTIEQUAL (ram, 0x4f0708, 8) , (ram, 0x4f0708, 8)]
[(ram, 0x4eb3b8, 8) MULTIEQUAL (ram, 0x4eb3b8, 8) , (ram, 0x4eb3b8, 8)]
[(ram, 0x4eb3a8, 8) MULTIEQUAL (ram, 0x4eb3a8, 8) , (ram, 0x4eb3a8, 8)]
[(ram, 0x4eb3a0, 8) MULTIEQUAL (ram, 0x4eb3a0, 8) , (ram, 0x4eb3a0, 8)]
[(ram, 0x4eb388, 8) MULTIEQUAL (ram, 0x4eb388, 8) , (ram, 0x4eb388, 8)]
[(ram, 0x4eb380, 8) MULTIEQUAL (ram, 0x4eb380, 8) , (ram, 0x4eb380, 8)]
[(ram, 0x4eb378, 8) MULTIEQUAL (ram, 0x4eb378, 8) , (ram, 0x4eb378, 8)]
[(ram, 0x4eb370, 8) MULTIEQUAL (ram, 0x4eb370, 8) , (ram, 0x4eb370, 8)]
[(ram, 0x4eb368, 8) MULTIEQUAL (ram, 0x4eb368, 8) , (ram, 0x4eb368, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae20, 8) MULTIEQUAL (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(unique, 0x3200, 8) CAST (unique, 0x1000061a, 8), (unique, 0x1000061a, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff7bf, 8)]
[(unique, 0x10000542, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa88, 8)]
[(unique, 0x10000562, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff808, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000542, 8) , (unique, 0x1000054a, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000562, 8) , (register, 0x10, 8)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0xaa, 4), (stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x3200, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000542, 8) , (unique, 0x1000054a, 8)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0xb6, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0xaa, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0xa8, 4), (stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x1, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000542, 8) , (unique, 0x1000054a, 8)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0xb9, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0xb6, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0xaa, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0xa8, 4), (stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x14, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000542, 8) , (unique, 0x1000054a, 8)]
[(register, 0x10, 8) CAST (unique, 0x1000062a, 8), (unique, 0x1000062a, 8) INT_ADD (unique, 0x10000622, 8) , (const, 0x14, 8), (unique, 0x10000622, 8) CAST (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000562, 8) , (register, 0x10, 8)]
[(unique, 0x1000054a, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000542, 8) , (unique, 0x1000054a, 8)]
[ ---  CBRANCH (ram, 0x2239d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3200, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000542, 8) , (unique, 0x1000054a, 8)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000056a, 8) COPY (stack, 0xfffffffffffff7a8, 8)]
[ ---  CBRANCH (ram, 0x223af5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_RIGHT (ram, 0x4eb380, 8) , (const, 0x3, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffff82f, 1) MULTIEQUAL (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1)]
[(stack, 0xfffffffffffff82e, 1) MULTIEQUAL (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1)]
[(stack, 0xfffffffffffff82c, 2) MULTIEQUAL (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2)]
[(stack, 0xfffffffffffff828, 4) MULTIEQUAL (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4)]
[(stack, 0xfffffffffffff7d8, 4) MULTIEQUAL (stack, 0xfffffffffffff7d8, 4) , (register, 0x0, 4) , (stack, 0xfffffffffffff7d8, 4)]
[(stack, 0xfffffffffffff7d0, 8) MULTIEQUAL (stack, 0xfffffffffffff7d0, 8) , (register, 0x0, 8) , (stack, 0xfffffffffffff7d0, 8)]
[(stack, 0xfffffffffffff7c8, 8) MULTIEQUAL (stack, 0xfffffffffffff7c8, 8) , (register, 0x88, 8) , (stack, 0xfffffffffffff7c8, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x223acb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000632, 8), (unique, 0x10000632, 8) INT_ADD (ram, 0x4eb378, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x8, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x88, 8) INT_ADD (register, 0x88, 8) , (register, 0x8, 8), (register, 0x88, 8) INT_MULT (unique, 0x3680, 8) , (register, 0xb0, 8), (register, 0x8, 8) INT_SUB (ram, 0x4eb3a0, 8) , (stack, 0xfffffffffffff7c0, 8), (unique, 0x3680, 8) INT_MULT (ram, 0x4eb3b8, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (stack, 0xfffffffffffff7c8, 4), (unique, 0x3400, 8) CAST (unique, 0x10000652, 8), (unique, 0x10000652, 8) INT_ADD (unique, 0x1000064a, 8) , (unique, 0x3300, 8), (unique, 0x1000064a, 8) CAST (register, 0xb8, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x14, 8), (stack, 0xfffffffffffff7c8, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000205, 8) , (stack, 0xfffffffffffff7cc, 4), (unique, 0x10000205, 8) CAST (unique, 0x10000662, 8), (unique, 0x10000662, 8) INT_ADD (unique, 0x1000065a, 8) , (unique, 0x100003bf, 8), (unique, 0x1000065a, 8) CAST (unique, 0x100003c7, 8), (unique, 0x100003c7, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff808, 8), (unique, 0x100003bf, 8) INT_ADD (unique, 0x3300, 8) , (const, 0x4, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x14, 8), (stack, 0xfffffffffffff7cc, 4) SUBPIECE (unique, 0x10000532, 8) , (const, 0x0, 4), (unique, 0x10000532, 8) INT_RIGHT (register, 0x88, 8) , (const, 0x20, 4), (register, 0x0, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000020d, 8) , (stack, 0xfffffffffffff7d0, 4), (unique, 0x1000020d, 8) CAST (unique, 0x10000672, 8), (unique, 0x10000672, 8) INT_ADD (unique, 0x1000066a, 8) , (unique, 0x3300, 8), (unique, 0x1000066a, 8) CAST (unique, 0x100003df, 8), (unique, 0x100003df, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff810, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x14, 8), (stack, 0xfffffffffffff7d0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_SEXT (register, 0x10, 4), (register, 0x0, 8) INT_SUB (unique, 0xbd80, 8) , (stack, 0xfffffffffffff7c0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000063a, 8), (unique, 0x1000063a, 8) INT_ADD (ram, 0x4eb388, 8) , (register, 0x80, 8), (register, 0x80, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000215, 8) , (stack, 0xfffffffffffff7d4, 4), (unique, 0x10000215, 8) CAST (unique, 0x10000682, 8), (unique, 0x10000682, 8) INT_ADD (unique, 0x1000067a, 8) , (unique, 0x100003ef, 8), (unique, 0x1000067a, 8) CAST (unique, 0x100003f7, 8), (unique, 0x100003f7, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff810, 8), (unique, 0x100003ef, 8) INT_ADD (unique, 0x3300, 8) , (const, 0x4, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x14, 8), (stack, 0xfffffffffffff7d4, 4) SUBPIECE (unique, 0x1000053a, 8) , (const, 0x0, 4), (unique, 0x1000053a, 8) INT_RIGHT (unique, 0x10000642, 8) , (const, 0x20, 4), (unique, 0x10000642, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (register, 0x10, 4), (register, 0x0, 8) INT_SUB (unique, 0xbd80, 8) , (stack, 0xfffffffffffff7c0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000063a, 8), (unique, 0x1000063a, 8) INT_ADD (ram, 0x4eb388, 8) , (register, 0x80, 8), (register, 0x80, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[(stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x1b1, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0xa1e, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0xa1c, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0xa1a, 4), (stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0xa19, 4), (stack, 0xfffffffffffff828, 4) MULTIEQUAL (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4)]
[(stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x1b1, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0xa1e, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0xa1c, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0xa1a, 4), (stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0xa19, 4), (stack, 0xfffffffffffff82c, 2) MULTIEQUAL (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2)]
[(stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x1b1, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0xa1e, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0xa1c, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0xa1a, 4), (stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0xa19, 4), (stack, 0xfffffffffffff82e, 1) MULTIEQUAL (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1)]
[(stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x1b1, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0xa1e, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0xa1c, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0xa1a, 4), (stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0xa19, 4), (stack, 0xfffffffffffff82f, 1) MULTIEQUAL (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0xa1e, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0xa1c, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0xa1a, 4), (stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0xa19, 4), (stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0xa1e, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0xa1c, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0xa1a, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0xa19, 4), (stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0xa1e, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0xa1c, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0xa1a, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0xa19, 4), (stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa1e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa1c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa1a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa19, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x10000692, 8), (unique, 0x10000692, 8) INT_ADD (unique, 0x1000068a, 8) , (unique, 0x3300, 8), (unique, 0x1000068a, 8) CAST (unique, 0x1000040f, 8), (unique, 0x1000040f, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff818, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x14, 8), (register, 0x0, 8) INT_SEXT (register, 0x10, 4), (register, 0x0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x1000063a, 8), (unique, 0x1000063a, 8) INT_ADD (ram, 0x4eb388, 8) , (register, 0x80, 8), (register, 0x80, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x223c70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x20, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x223a70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000069a, 8), (unique, 0x1000069a, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x80, 8), (unique, 0x3880, 8) INT_ADD (ram, 0x4eb388, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x223a30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0xb0, 8), (register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x223a70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffff82f, 1) MULTIEQUAL (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1)]
[(stack, 0xfffffffffffff82e, 1) MULTIEQUAL (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1)]
[(stack, 0xfffffffffffff82c, 2) MULTIEQUAL (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2)]
[(stack, 0xfffffffffffff828, 4) MULTIEQUAL (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4)]
[(stack, 0xfffffffffffff7d8, 4) MULTIEQUAL (stack, 0xfffffffffffff7d8, 4) , (register, 0x0, 4)]
[(stack, 0xfffffffffffff7d0, 8) MULTIEQUAL (stack, 0xfffffffffffff7d0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffff7c8, 8) MULTIEQUAL (stack, 0xfffffffffffff7c8, 8) , (register, 0x88, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x223a30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0xb0, 8), (register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffff82f, 1) MULTIEQUAL (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1)]
[(stack, 0xfffffffffffff82e, 1) MULTIEQUAL (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1)]
[(stack, 0xfffffffffffff82c, 2) MULTIEQUAL (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2)]
[(stack, 0xfffffffffffff828, 4) MULTIEQUAL (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4)]
[(stack, 0xfffffffffffff7d8, 4) MULTIEQUAL (stack, 0xfffffffffffff7d8, 4) , (register, 0x0, 4)]
[(stack, 0xfffffffffffff7d0, 8) MULTIEQUAL (stack, 0xfffffffffffff7d0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffff7c8, 8) MULTIEQUAL (stack, 0xfffffffffffff7c8, 8) , (register, 0x88, 8)]
[(unique, 0x10000572, 8) COPY (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x223af5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffff82f, 1) MULTIEQUAL (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1)]
[(stack, 0xfffffffffffff82e, 1) MULTIEQUAL (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1)]
[(stack, 0xfffffffffffff82c, 2) MULTIEQUAL (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2)]
[(stack, 0xfffffffffffff828, 4) MULTIEQUAL (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4)]
[(stack, 0xfffffffffffff7d8, 4) MULTIEQUAL (stack, 0xfffffffffffff7d8, 4) , (stack, 0xfffffffffffff7d8, 4) , (stack, 0xfffffffffffff7d8, 4)]
[(stack, 0xfffffffffffff7d0, 8) MULTIEQUAL (stack, 0xfffffffffffff7d0, 8) , (stack, 0xfffffffffffff7d0, 8) , (stack, 0xfffffffffffff7d0, 8)]
[(stack, 0xfffffffffffff7c8, 8) MULTIEQUAL (stack, 0xfffffffffffff7c8, 8) , (stack, 0xfffffffffffff7c8, 8) , (stack, 0xfffffffffffff7c8, 8)]
[(stack, 0xfffffffffffff7a8, 8) MULTIEQUAL (unique, 0x1000056a, 8) , (unique, 0x10000572, 8) , (unique, 0x10000572, 8)]
[(stack, 0xfffffffffffff7bf, 1) COPY (const, 0x2, 1)]
[(stack, 0xfffffffffffff810, 8) COPY (const, 0x1, 8)]
[(stack, 0xfffffffffffff820, 8) COPY (const, 0x8, 8)]
[(stack, 0xfffffffffffffa90, 8) COPY (const, 0x8, 8)]
[(stack, 0xfffffffffffffaa0, 8) COPY (const, 0x8, 8)]
[(stack, 0xfffffffffffffab0, 8) COPY (const, 0x8, 8)]
[(stack, 0xfffffffffffffac0, 8) COPY (const, 0x8, 8)]
[(stack, 0xfffffffffffffad0, 8) COPY (const, 0x8, 8)]
[(stack, 0xfffffffffffffae0, 8) COPY (const, 0x8, 8)]
[(stack, 0xfffffffffffffaf0, 8) COPY (const, 0x8, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (const, 0x8, 8)]
[(unique, 0x10000592, 8) COPY (ram, 0x4f0708, 8)]
[(unique, 0x10000468, 8) MULTIEQUAL (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8)]
[(unique, 0x10000470, 8) MULTIEQUAL (stack, 0xfffffffffffffaa0, 8) , (stack, 0xfffffffffffffaa0, 8)]
[(unique, 0x10000478, 8) MULTIEQUAL (stack, 0xfffffffffffffab0, 8) , (stack, 0xfffffffffffffab0, 8)]
[(unique, 0x10000480, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(unique, 0x10000488, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(unique, 0x10000490, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(unique, 0x10000498, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x100004a0, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x100004b0, 8) MULTIEQUAL (stack, 0xfffffffffffff7c8, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100004b8, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(unique, 0x100004c0, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(unique, 0x100004c8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[ ---  CBRANCH (ram, 0x223c47, 1) , (unique, 0x10000467, 1), (unique, 0x10000467, 1) INT_NOTEQUAL (unique, 0x100004a8, 8) , (const, 0x0, 8), (unique, 0x100004a8, 8) MULTIEQUAL (unique, 0x10000592, 8) , (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  CBRANCH (ram, 0x223c3a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006a2, 8), (unique, 0x100006a2, 8) INT_ADD (unique, 0x100004a8, 8) , (const, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006aa, 8), (unique, 0x100006aa, 8) INT_ADD (unique, 0x100004a8, 8) , (const, 0x28, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006b2, 8), (unique, 0x100006b2, 8) INT_ADD (unique, 0x100004a8, 8) , (const, 0x10, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000552, 8) COPY (register, 0x10, 8), (register, 0x10, 8) COPY (const, 0x0, 8)]
[(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x2, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000552, 8) , (unique, 0x1000055a, 8) , (register, 0x10, 8)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffa88, 8) MULTIEQUAL (unique, 0x100004b8, 8) , (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffa90, 8) MULTIEQUAL (unique, 0x10000468, 8) , (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (unique, 0x3400, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x10000337, 8) , (unique, 0x100004d1, 8) , (const, 0x8, 8), (unique, 0x100004d1, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (unique, 0x10000337, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa88, 8), (unique, 0x3400, 8) CAST (unique, 0x100006ba, 8), (unique, 0x100006ba, 8) INT_ADD (register, 0x98, 8) , (unique, 0x3680, 8), (unique, 0x3680, 8) INT_MULT (register, 0x80, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000552, 8) , (unique, 0x1000055a, 8) , (register, 0x10, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x98, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffa98, 8) MULTIEQUAL (unique, 0x100004c0, 8) , (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffaa0, 8) MULTIEQUAL (unique, 0x10000470, 8) , (stack, 0xfffffffffffffaa0, 8) , (stack, 0xfffffffffffffaa0, 8)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (unique, 0x100004c8, 8) , (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffab0, 8) MULTIEQUAL (unique, 0x10000478, 8) , (stack, 0xfffffffffffffab0, 8) , (stack, 0xfffffffffffffab0, 8)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (unique, 0x10000480, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (unique, 0x10000488, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (unique, 0x10000490, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (unique, 0x10000498, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (unique, 0x100004a0, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (register, 0x0, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x10000357, 8) , (unique, 0x100004e1, 8) , (const, 0x8, 8), (unique, 0x100004e1, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x2, 8), (unique, 0x10000357, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa88, 8), (register, 0x0, 8) CAST (unique, 0x100006c2, 8), (unique, 0x100006c2, 8) INT_ADD (unique, 0x3680, 8) , (register, 0x38, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (unique, 0x3680, 8) INT_MULT (register, 0x80, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000552, 8) , (unique, 0x1000055a, 8) , (register, 0x10, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8) , (unique, 0xbd80, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x223c30, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (register, 0x80, 8), (register, 0x80, 8) INT_ADD (register, 0x80, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(unique, 0x1000055a, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x223bd0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x6, 8) , (register, 0x10, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006ca, 8), (unique, 0x100006ca, 8) INT_ADD (unique, 0x100004a8, 8) , (const, 0x28, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006d2, 8), (unique, 0x100006d2, 8) INT_ADD (unique, 0x100004a8, 8) , (const, 0x10, 8)]
[ ---  BRANCH (ram, 0x223bd0, 1)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (unique, 0x100004a0, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (unique, 0x10000498, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (unique, 0x10000490, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (unique, 0x10000488, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (unique, 0x10000480, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffab0, 8) MULTIEQUAL (unique, 0x10000478, 8) , (stack, 0xfffffffffffffab0, 8)]
[(stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (unique, 0x100004c8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffaa0, 8) MULTIEQUAL (unique, 0x10000470, 8) , (stack, 0xfffffffffffffaa0, 8)]
[(stack, 0xfffffffffffffa98, 8) MULTIEQUAL (unique, 0x100004c0, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffa90, 8) MULTIEQUAL (unique, 0x10000468, 8) , (stack, 0xfffffffffffffa90, 8)]
[(stack, 0xfffffffffffffa88, 8) MULTIEQUAL (unique, 0x100004b8, 8) , (stack, 0xfffffffffffffa88, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006da, 8), (unique, 0x100006da, 8) INT_ADD (unique, 0x100004a8, 8) , (const, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x31d, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x31d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x31d, 4)]
[(ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x31d, 4)]
[(ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x31d, 4)]
[(ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x31d, 4)]
[(ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x31d, 4)]
[(ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x31d, 4)]
[(ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x31d, 4)]
[(ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x31d, 4)]
[(ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x31d, 4)]
[(ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x31d, 4), (stack, 0xfffffffffffff7a0, 8) COPY (const, 0x223c4e, 8)]
[(stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7b0, 8) INDIRECT (register, 0x0, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7c8, 8) INDIRECT (unique, 0x100004b0, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff808, 8) INDIRECT (unique, 0x3200, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff818, 8) INDIRECT (unique, 0x10000582, 8) , (const, 0x31d, 4), (unique, 0x10000582, 8) COPY (unique, 0x3200, 8)]
[(stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (unique, 0x100004b8, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (unique, 0x10000468, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (unique, 0x100004c0, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffaa0, 8) INDIRECT (unique, 0x10000470, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (unique, 0x100004c8, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffab0, 8) INDIRECT (unique, 0x10000478, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (unique, 0x10000480, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (unique, 0x10000488, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (unique, 0x10000490, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x10000498, 8) , (const, 0x31d, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (unique, 0x100004a0, 8) , (const, 0x31d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x31d, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x18, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffab0, 8) MULTIEQUAL (stack, 0xfffffffffffffab0, 8) , (stack, 0xfffffffffffffab0, 8)]
[(stack, 0xfffffffffffffaa8, 8) MULTIEQUAL (stack, 0xfffffffffffffaa8, 8) , (stack, 0xfffffffffffffaa8, 8)]
[(stack, 0xfffffffffffffaa0, 8) MULTIEQUAL (stack, 0xfffffffffffffaa0, 8) , (stack, 0xfffffffffffffaa0, 8)]
[(stack, 0xfffffffffffffa98, 8) MULTIEQUAL (stack, 0xfffffffffffffa98, 8) , (stack, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffa90, 8) MULTIEQUAL (stack, 0xfffffffffffffa90, 8) , (stack, 0xfffffffffffffa90, 8)]
[(stack, 0xfffffffffffffa88, 8) MULTIEQUAL (stack, 0xfffffffffffffa88, 8) , (stack, 0xfffffffffffffa88, 8)]
[(stack, 0xfffffffffffff82f, 1) MULTIEQUAL (stack, 0xfffffffffffff82f, 1) , (stack, 0xfffffffffffff82f, 1)]
[(stack, 0xfffffffffffff82e, 1) MULTIEQUAL (stack, 0xfffffffffffff82e, 1) , (stack, 0xfffffffffffff82e, 1)]
[(stack, 0xfffffffffffff82c, 2) MULTIEQUAL (stack, 0xfffffffffffff82c, 2) , (stack, 0xfffffffffffff82c, 2)]
[(stack, 0xfffffffffffff828, 4) MULTIEQUAL (stack, 0xfffffffffffff828, 4) , (stack, 0xfffffffffffff828, 4)]
[(stack, 0xfffffffffffff820, 8) MULTIEQUAL (stack, 0xfffffffffffff820, 8) , (stack, 0xfffffffffffff820, 8)]
[(stack, 0xfffffffffffff818, 8) MULTIEQUAL (stack, 0xfffffffffffff818, 8) , (stack, 0xfffffffffffff818, 8)]
[(stack, 0xfffffffffffff810, 8) MULTIEQUAL (stack, 0xfffffffffffff810, 8) , (stack, 0xfffffffffffff810, 8)]
[(stack, 0xfffffffffffff808, 8) MULTIEQUAL (stack, 0xfffffffffffff808, 8) , (stack, 0xfffffffffffff808, 8)]
[(stack, 0xfffffffffffff7f8, 4) MULTIEQUAL (stack, 0xfffffffffffff7f8, 4) , (stack, 0xfffffffffffff7f8, 4)]
[(stack, 0xfffffffffffff7f0, 8) MULTIEQUAL (stack, 0xfffffffffffff7f0, 8) , (stack, 0xfffffffffffff7f0, 8)]
[(stack, 0xfffffffffffff7ec, 4) MULTIEQUAL (stack, 0xfffffffffffff7ec, 4) , (stack, 0xfffffffffffff7ec, 4)]
[(stack, 0xfffffffffffff7e8, 4) MULTIEQUAL (stack, 0xfffffffffffff7e8, 4) , (stack, 0xfffffffffffff7e8, 4)]
[(stack, 0xfffffffffffff7d8, 4) MULTIEQUAL (stack, 0xfffffffffffff7d8, 4) , (stack, 0xfffffffffffff7d8, 4)]
[(stack, 0xfffffffffffff7d0, 8) MULTIEQUAL (stack, 0xfffffffffffff7d0, 8) , (stack, 0xfffffffffffff7d0, 8)]
[(stack, 0xfffffffffffff7c8, 8) MULTIEQUAL (stack, 0xfffffffffffff7c8, 8) , (stack, 0xfffffffffffff7c8, 8)]
[(stack, 0xfffffffffffff7c0, 8) MULTIEQUAL (stack, 0xfffffffffffff7c0, 8) , (stack, 0xfffffffffffff7c0, 8)]
[(stack, 0xfffffffffffff7bf, 1) MULTIEQUAL (stack, 0xfffffffffffff7bf, 1) , (stack, 0xfffffffffffff7bf, 1)]
[(stack, 0xfffffffffffff7b0, 8) MULTIEQUAL (stack, 0xfffffffffffff7b0, 8) , (stack, 0xfffffffffffff7b0, 8)]
[(stack, 0xfffffffffffff7a8, 8) MULTIEQUAL (stack, 0xfffffffffffff7a8, 8) , (stack, 0xfffffffffffff7a8, 8)]
[(ram, 0x4f0708, 8) MULTIEQUAL (ram, 0x4f0708, 8) , (ram, 0x4f0708, 8)]
[(ram, 0x4eb3b8, 8) MULTIEQUAL (ram, 0x4eb3b8, 8) , (ram, 0x4eb3b8, 8)]
[(ram, 0x4eb3a8, 8) MULTIEQUAL (ram, 0x4eb3a8, 8) , (ram, 0x4eb3a8, 8)]
[(ram, 0x4eb3a0, 8) MULTIEQUAL (ram, 0x4eb3a0, 8) , (ram, 0x4eb3a0, 8)]
[(ram, 0x4eb388, 8) MULTIEQUAL (ram, 0x4eb388, 8) , (ram, 0x4eb388, 8)]
[(ram, 0x4eb380, 8) MULTIEQUAL (ram, 0x4eb380, 8) , (ram, 0x4eb380, 8)]
[(ram, 0x4eb378, 8) MULTIEQUAL (ram, 0x4eb378, 8) , (ram, 0x4eb378, 8)]
[(ram, 0x4eb370, 8) MULTIEQUAL (ram, 0x4eb370, 8) , (ram, 0x4eb370, 8)]
[(ram, 0x4eb368, 8) MULTIEQUAL (ram, 0x4eb368, 8) , (ram, 0x4eb368, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae20, 8) MULTIEQUAL (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8)]
[ ---  CBRANCH (ram, 0x223e10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100006e2, 8), (unique, 0x100006e2, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffff7a0, 8) INDIRECT (stack, 0xfffffffffffff7a0, 8) , (const, 0x341, 4), (stack, 0xfffffffffffff7a0, 8) PTRSUB (const, 0x0, 8) , (const, 0x223e15, 8)]
[(stack, 0xfffffffffffff7a8, 8) INDIRECT (stack, 0xfffffffffffff7a8, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7b0, 8) INDIRECT (stack, 0xfffffffffffff7b0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7bf, 1) INDIRECT (stack, 0xfffffffffffff7bf, 1) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7c0, 8) INDIRECT (stack, 0xfffffffffffff7c0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7c8, 8) INDIRECT (stack, 0xfffffffffffff7c8, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7d0, 8) INDIRECT (stack, 0xfffffffffffff7d0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7d8, 4) INDIRECT (stack, 0xfffffffffffff7d8, 4) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7e8, 4) INDIRECT (stack, 0xfffffffffffff7e8, 4) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7ec, 4) INDIRECT (stack, 0xfffffffffffff7ec, 4) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7f0, 8) INDIRECT (stack, 0xfffffffffffff7f0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff7f8, 4) INDIRECT (stack, 0xfffffffffffff7f8, 4) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff808, 8) INDIRECT (stack, 0xfffffffffffff808, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff810, 8) INDIRECT (stack, 0xfffffffffffff810, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff818, 8) INDIRECT (stack, 0xfffffffffffff818, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff820, 8) INDIRECT (stack, 0xfffffffffffff820, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff828, 4) INDIRECT (stack, 0xfffffffffffff828, 4) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff82c, 2) INDIRECT (stack, 0xfffffffffffff82c, 2) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff82e, 1) INDIRECT (stack, 0xfffffffffffff82e, 1) , (const, 0x341, 4)]
[(stack, 0xfffffffffffff82f, 1) INDIRECT (stack, 0xfffffffffffff82f, 1) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffa88, 8) INDIRECT (stack, 0xfffffffffffffa88, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffa90, 8) INDIRECT (stack, 0xfffffffffffffa90, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffa98, 8) INDIRECT (stack, 0xfffffffffffffa98, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffaa0, 8) INDIRECT (stack, 0xfffffffffffffaa0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffaa8, 8) INDIRECT (stack, 0xfffffffffffffaa8, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffab0, 8) INDIRECT (stack, 0xfffffffffffffab0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x341, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x341, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x341, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae20, 8) COPY (ram, 0x4eae20, 8), (ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x341, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x341, 4)]
[(ram, 0x4eb368, 8) COPY (ram, 0x4eb368, 8), (ram, 0x4eb368, 8) INDIRECT (ram, 0x4eb368, 8) , (const, 0x341, 4)]
[(ram, 0x4eb370, 8) COPY (ram, 0x4eb370, 8), (ram, 0x4eb370, 8) INDIRECT (ram, 0x4eb370, 8) , (const, 0x341, 4)]
[(ram, 0x4eb378, 8) COPY (ram, 0x4eb378, 8), (ram, 0x4eb378, 8) INDIRECT (ram, 0x4eb378, 8) , (const, 0x341, 4)]
[(ram, 0x4eb380, 8) COPY (ram, 0x4eb380, 8), (ram, 0x4eb380, 8) INDIRECT (ram, 0x4eb380, 8) , (const, 0x341, 4)]
[(ram, 0x4eb388, 8) COPY (ram, 0x4eb388, 8), (ram, 0x4eb388, 8) INDIRECT (ram, 0x4eb388, 8) , (const, 0x341, 4)]
[(ram, 0x4eb3a0, 8) COPY (ram, 0x4eb3a0, 8), (ram, 0x4eb3a0, 8) INDIRECT (ram, 0x4eb3a0, 8) , (const, 0x341, 4)]
[(ram, 0x4eb3a8, 8) COPY (ram, 0x4eb3a8, 8), (ram, 0x4eb3a8, 8) INDIRECT (ram, 0x4eb3a8, 8) , (const, 0x341, 4)]
[(ram, 0x4eb3b8, 8) COPY (ram, 0x4eb3b8, 8), (ram, 0x4eb3b8, 8) INDIRECT (ram, 0x4eb3b8, 8) , (const, 0x341, 4)]
[(ram, 0x4f0708, 8) COPY (ram, 0x4f0708, 8), (ram, 0x4f0708, 8) INDIRECT (ram, 0x4f0708, 8) , (const, 0x341, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae20, 8) COPY (ram, 0x4eae20, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4eb368, 8) COPY (ram, 0x4eb368, 8)]
[(ram, 0x4eb370, 8) COPY (ram, 0x4eb370, 8)]
[(ram, 0x4eb378, 8) COPY (ram, 0x4eb378, 8)]
[(ram, 0x4eb380, 8) COPY (ram, 0x4eb380, 8)]
[(ram, 0x4eb388, 8) COPY (ram, 0x4eb388, 8)]
[(ram, 0x4eb3a0, 8) COPY (ram, 0x4eb3a0, 8)]
[(ram, 0x4eb3a8, 8) COPY (ram, 0x4eb3a8, 8)]
[(ram, 0x4eb3b8, 8) COPY (ram, 0x4eb3b8, 8)]
[(ram, 0x4f0708, 8) COPY (ram, 0x4f0708, 8)]
[ ---  RETURN (const, 0x0, 8)]
