[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x36, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2d, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x36, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x2d, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x36, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x2d, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x36, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x2d, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x36, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x2d, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x36, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x2d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000705, 8), (unique, 0x10000705, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x100006e5, 8) COPY (register, 0x8, 8)]
[(unique, 0x100006ed, 8) COPY (register, 0x10, 8)]
[(unique, 0x100006f5, 8) COPY (register, 0x30, 8)]
[(unique, 0x100006fd, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x241739, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x36, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2d, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ef910, 4) , (const, 0x0, 4)]
[(ram, 0x4ef910, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ef910, 4) , (const, 0x0, 4)]
[(ram, 0x4ef910, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x24175c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6e8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6e8, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x6e8, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x6e8, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x6e8, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x6e8, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x6e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x6e8, 4), (stack, 0xfffffffffffffe30, 8) COPY (const, 0x241755, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x6e8, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x100006e5, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x100006ed, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x100006f5, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x100006fd, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x6e8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x6e8, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x10000374, 8), (unique, 0x10000374, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ef910, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (unique, 0x100006fd, 8) , (stack, 0xffffffffffffff30, 8) , (unique, 0x100006fd, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (unique, 0x100006f5, 8) , (stack, 0xffffffffffffff28, 8) , (unique, 0x100006f5, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (unique, 0x100006ed, 8) , (stack, 0xffffffffffffff20, 8) , (unique, 0x100006ed, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (unique, 0x100006e5, 8) , (stack, 0xffffffffffffff18, 8) , (unique, 0x100006e5, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8)]
[ ---  CBRANCH (ram, 0x241773, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ef918, 8) , (const, 0x0, 8), (ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x70, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x70, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x70, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x70, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x70, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x70, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x70, 4), (stack, 0xfffffffffffffeb0, 8) COPY (const, 0x24176b, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x70, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x70, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x70, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x70, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x70, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x70, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x70, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x70, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x70, 4)]
[(unique, 0x1000052e, 8) COPY (ram, 0x4ef918, 8), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x70, 4)]
[ ---  CBRANCH (ram, 0x2418a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x25ffa0, 8)]
[ ---  CBRANCH (ram, 0x241773, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (ram, 0x4ef918, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6c7, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x6c7, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x6c7, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x6c7, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x6c7, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x6c7, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6c7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ef918, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x2417e1, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x8a, 4), (ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x8a, 4), (ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x8a, 4), (ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x8a, 4), (ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x8a, 4), (ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x8a, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x8a, 4), (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x8a, 4), (stack, 0xfffffffffffffeb0, 8) COPY (const, 0x241784, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x8a, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x8a, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x8a, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x8a, 4), (stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x8a, 4), (stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x8a, 4), (stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x8a, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x8a, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x8a, 4), (stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x8a, 4), (stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x8a, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x8a, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x8a, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x8a, 4), (stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x8a, 4), (stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x8a, 4), (stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x8a, 4), (stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x8a, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x8a, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x8a, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x8a, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x8a, 4), (stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x8a, 4), (stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x8a, 4), (stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000057e, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2417dc, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222ec0, 8) , (const, 0x10, 4) , (const, 0x3, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb6, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0xb6, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0xb6, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0xb6, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0xb6, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0xb6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xb6, 4), (stack, 0xfffffffffffffeb0, 8) COPY (const, 0x2417cc, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb6, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffff3c, 4) COPY (const, 0xc, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0xb6, 4), (stack, 0xffffffffffffff40, 2) COPY (const, 0x10, 2)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0xb6, 4), (stack, 0xffffffffffffff42, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0xb6, 4), (stack, 0xffffffffffffff4a, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb6, 4)]
[(unique, 0x10000566, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2418e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222870, 8) , (register, 0x0, 4) , (unique, 0x3200, 8) , (const, 0xc, 4), (unique, 0x3200, 8) CAST (unique, 0x1000070d, 8), (unique, 0x1000070d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff40, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b4, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x1b4, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x1b4, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x1b4, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x1b4, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x1b4, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1b4, 4), (stack, 0xfffffffffffffeb0, 8) COPY (const, 0x2418f2, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1b4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b4, 4)]
[(unique, 0x1000056e, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2417d4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222970, 8) , (register, 0x0, 4) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff3c, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1e1, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x1e1, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x1e1, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x1e1, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x1e1, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x1e1, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1e1, 4), (stack, 0xfffffffffffffeb0, 8) COPY (const, 0x241934, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x1e1, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x1e1, 4), (stack, 0xfffffffffffffeec, 4) COPY (stack, 0xffffffffffffff44, 4), (stack, 0xffffffffffffff44, 4) SUBPIECE (stack, 0xffffffffffffff42, 8) , (const, 0x2, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10000657, 8) , (const, 0x1e1, 4), (unique, 0x10000657, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x1e1, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1e1, 4), (stack, 0xffffffffffffffa8, 8) COPY (const, 0x301001600000014, 8)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x1e1, 4), (stack, 0xffffffffffffffb4, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e1, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffeeb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffeeb8, 8)]
[(stack, 0xffffffffffffffb9, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffff4e, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x121260, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffbb, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffff56, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffff4c, 2) COPY (const, 0x10, 2)]
[(stack, 0xffffffffffffff60, 8) COPY (const, 0x1000, 8)]
[(unique, 0x1000065f, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000715, 8), (unique, 0x10000715, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff4c, 8)]
[ ---  BRANCH (ram, 0x2419a9, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x234, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x234, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x234, 4), (ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x234, 4), (ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x234, 4), (ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x234, 4), (ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x234, 4), (ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x234, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x234, 4), (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x234, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x234, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x234, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x234, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x234, 4), (stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x234, 4), (stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x234, 4), (stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x234, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x234, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x234, 4), (stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x234, 4), (stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x234, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x234, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (register, 0x20, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (unique, 0x1000065f, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x234, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x234, 4), (stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x234, 4), (stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x234, 4), (stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x234, 4), (stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (register, 0x20, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x234, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x234, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x234, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x234, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x234, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x234, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x234, 4), (stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x234, 4), (stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x234, 4), (stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x234, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x241998, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x222d90, 8) , (register, 0x0, 4) , (unique, 0x3100, 8) , (const, 0x14, 8) , (const, 0x0, 4) , (unique, 0x3200, 8) , (const, 0xc, 4)]
[ ---  CBRANCH (ram, 0x241e5d, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(stack, 0xfffffffffffffed7, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffff08, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffed6, 1) COPY (const, 0x0, 1)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (const, 0x20, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff70, 4) COPY (const, 0xc, 4)]
[(stack, 0xffffffffffffff80, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff98, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff68, 8) COPY (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff78, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (unique, 0x3200, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[ ---  BRANCH (ram, 0x241a79, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x295, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x295, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x295, 4), (ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x295, 4), (ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x295, 4), (ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x295, 4), (ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x295, 4), (ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x295, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x295, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x295, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x295, 4), (stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x295, 4), (stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x295, 4), (stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x295, 4), (stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x295, 4), (stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x295, 4), (stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x295, 4), (stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x295, 4), (stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x295, 4), (stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x295, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x295, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x295, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x295, 4), (stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x295, 4), (stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x295, 4), (stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x295, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000053e, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  CBRANCH (ram, 0x241a68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x222b90, 8) , (register, 0x0, 4) , (unique, 0x3200, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x241d48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000071d, 8), (unique, 0x1000071d, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x696, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x696, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x696, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x696, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x696, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x696, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x696, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x696, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x696, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x696, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x696, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x696, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x696, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x696, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x696, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x696, 4)]
[ ---  CALL (ram, 0x2424c0, 8) , (register, 0x0, 4) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x100005ae, 8) COPY (unique, 0x1000053e, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2a6, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x2a6, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x2a6, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x2a6, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x2a6, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x2a6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2a6, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a6, 4)]
[ ---  CALL (ram, 0x2424c0, 8)]
[(unique, 0x100005be, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2a6, 4)]
[ ---  CBRANCH (ram, 0x241e65, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000725, 8) , (const, 0x0, 8), (unique, 0x10000725, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x241e65, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000347, 4) , (const, 0x0, 4), (unique, 0x10000347, 4) INT_AND (stack, 0xffffffffffffff98, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x241a20, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x1000072d, 8) , (const, 0x10, 8), (unique, 0x1000072d, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x241a20, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x10, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffef8, 8)]
[ ---  CBRANCH (ram, 0x241a20, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffff50, 4) SUBPIECE (stack, 0xffffffffffffff4e, 8) , (const, 0x2, 8)]
[(register, 0x80, 1) COPY (const, 0x0, 1)]
[(unique, 0x100005a6, 8) COPY (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x100006cb, 4) COPY (stack, 0xfffffffffffffeec, 4)]
[ ---  BRANCH (ram, 0x241b2e, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x100005a6, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xa0, 8)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (register, 0x80, 1)]
[(register, 0x18, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0x100006cb, 4) , (register, 0x8, 4)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x1000060b, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x241b00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (register, 0x10, 4)]
[(unique, 0x10000613, 8) COPY (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x241b00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(unique, 0x1000061b, 8) COPY (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x241b00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffb0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x241af0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x14, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000735, 8), (unique, 0x10000735, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x241afd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x3, 2)]
[(unique, 0x10000217, 1) COPY (const, 0x1, 1)]
[(unique, 0x10000623, 8) COPY (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x241b00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0x2, 1), (register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf7, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000073d, 8), (unique, 0x1000073d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x241e71, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) PTRADD (unique, 0x1000037c, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x1000037c, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffe8, 8)]
[(register, 0x30, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000745, 8), (unique, 0x10000745, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x241e71, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc00, 2) , (const, 0x4, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000745, 8), (unique, 0x10000745, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x241e71, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x1000074d, 8), (unique, 0x1000074d, 8) INT_ZEXT (unique, 0xbc00, 2)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000643, 4) COPY (stack, 0xfffffffffffffee8, 4)]
[ ---  BRANCH (ram, 0x241c38, 1)]
[(unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100006e1, 4) COPY (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x241d70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x1, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000075d, 8), (unique, 0x1000075d, 8) INT_ADD (unique, 0x10000755, 8) , (const, 0x2, 8), (unique, 0x10000755, 8) CAST (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x38, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x241be8, 1)]
[(unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x10000586, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x241bb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0x1000058e, 8) COPY (unique, 0x3100, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000586, 8) , (unique, 0x1000058e, 8)]
[(register, 0x38, 8) CAST (unique, 0x1000076d, 8), (unique, 0x1000076d, 8) INT_ADD (unique, 0x10000765, 8) , (register, 0x30, 8), (unique, 0x10000765, 8) CAST (register, 0x38, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1fffc, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x241bd6, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (unique, 0x1000026c, 8) , (const, 0x1, 8), (unique, 0x1000026c, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1fffc, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x3, 4)]
[(register, 0x30, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000775, 8), (unique, 0x10000775, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x241bd6, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 2) , (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000775, 8), (unique, 0x10000775, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x241b96, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x8, 8) , (register, 0x0, 8), (register, 0x8, 8) CAST (unique, 0x1000077d, 8), (unique, 0x1000077d, 8) INT_ZEXT (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x241c38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x241e3e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2, 1)]
[ ---  CBRANCH (ram, 0x241e52, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x100007f, 4)]
[(register, 0x0, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x241d88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x241d88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x241d88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffed7, 1) COPY (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x241c38, 1)]
[ ---  CBRANCH (ram, 0x241c2c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x1000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(register, 0x0, 1) COPY (const, 0x1, 1)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (unique, 0x100006e1, 4) , (unique, 0x100006e1, 4) , (unique, 0x10000643, 4) , (unique, 0x100006e1, 4) , (unique, 0x100006e1, 4) , (unique, 0x100006e1, 4) , (unique, 0x100006e1, 4)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (register, 0x0, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (register, 0x0, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x241d98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 8)]
[(unique, 0x10000596, 8) COPY (register, 0x88, 8)]
[(unique, 0x100006cf, 4) COPY (register, 0x8, 4)]
[(unique, 0x100006d7, 1) COPY (register, 0x80, 1)]
[ ---  CBRANCH (ram, 0x241d98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x625, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x625, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x625, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x625, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x625, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x625, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x625, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x625, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x625, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x625, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x625, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x625, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x10000603, 8) , (const, 0x625, 4), (unique, 0x10000603, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_MULT (stack, 0xfffffffffffffed8, 8) , (const, 0x2, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x625, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x625, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x625, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x625, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x625, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x625, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x625, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x625, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x625, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x625, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x625, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000785, 8), (unique, 0x10000785, 8) CALL (ram, 0x121020, 8) , (stack, 0xffffffffffffff08, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_MULT (unique, 0x3880, 8) , (const, 0x8, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x100002b5, 8) , (const, 0x3, 8), (unique, 0x100002b5, 8) INT_MULT (stack, 0xfffffffffffffed8, 8) , (const, 0x6, 8)]
[(stack, 0xfffffffffffffee8, 1) SUBPIECE (stack, 0xfffffffffffffee8, 4) , (const, 0x0, 8), (stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x625, 4), (stack, 0xfffffffffffffee8, 4) INT_OR (unique, 0x10000358, 4) , (unique, 0x1000035c, 4), (unique, 0x1000035c, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0x10000358, 4) INT_AND (stack, 0xfffffffffffffee8, 4) , (const, 0xffffff00, 4)]
[(unique, 0x1000059e, 8) COPY (stack, 0xfffffffffffffec8, 8), (stack, 0xfffffffffffffec8, 8) INDIRECT (unique, 0x100005f6, 8) , (const, 0x625, 4), (unique, 0x100005f6, 8) COPY (register, 0x88, 8)]
[(unique, 0x100006c7, 4) COPY (stack, 0xfffffffffffffec4, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (unique, 0x100005f2, 4) , (const, 0x625, 4), (unique, 0x100005f2, 4) COPY (register, 0x10, 4)]
[(unique, 0x100006d3, 4) COPY (stack, 0xfffffffffffffed0, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (unique, 0x100005fe, 4) , (const, 0x625, 4), (unique, 0x100005fe, 4) COPY (register, 0x8, 4)]
[(unique, 0x100006d8, 1) COPY (stack, 0xfffffffffffffed5, 1), (stack, 0xfffffffffffffed5, 1) INDIRECT (unique, 0x10000602, 1) , (const, 0x625, 4), (unique, 0x10000602, 1) COPY (register, 0x80, 1)]
[ ---  BRANCH (ram, 0x241c55, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 1) MULTIEQUAL (unique, 0xbb00, 1) , (stack, 0xfffffffffffffee8, 1)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000596, 8) , (unique, 0x1000059e, 8)]
[(register, 0x80, 1) MULTIEQUAL (unique, 0x100006d7, 1) , (unique, 0x100006d8, 1)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0x100006c7, 4)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0x100006cf, 4) , (unique, 0x100006d3, 4)]
[(unique, 0x100005ce, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x241eaf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000079d, 8) , (register, 0x0, 1), (unique, 0x1000079d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x6, 8) , (const, 0x4, 8), (register, 0x0, 1) INT_OR (register, 0x0, 1) , (register, 0x206, 1), (register, 0x0, 1) INT_AND (register, 0x0, 1) , (const, 0x2, 1), (register, 0x0, 1) INT_RIGHT (unique, 0xbb00, 1) , (const, 0x3, 4), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff08, 8) , (unique, 0x1000046c, 8) , (const, 0x4, 8), (unique, 0x1000046c, 8) INT_MULT (stack, 0xfffffffffffffee0, 8) , (const, 0x6, 8), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58800, 1) , (const, 0x0, 1), (unique, 0x58800, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x24, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000795, 8), (unique, 0x10000795, 8) INT_ADD (unique, 0x1000078d, 8) , (const, 0x12, 8), (unique, 0x1000078d, 8) CAST (register, 0xa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) CAST (unique, 0x100007bd, 8), (unique, 0x100007bd, 8) INT_ADD (unique, 0x100007b5, 8) , (const, 0x19, 8), (unique, 0x100007b5, 8) CAST (unique, 0x3400, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007ad, 8), (unique, 0x100007ad, 8) INT_ADD (unique, 0x100007a5, 8) , (const, 0x11, 8), (unique, 0x100007a5, 8) CAST (register, 0xa8, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff08, 8) , (unique, 0x1000046c, 8) , (const, 0x4, 8), (unique, 0x1000046c, 8) INT_MULT (stack, 0xfffffffffffffee0, 8) , (const, 0x6, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4f3, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4ec, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4e5, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x4f3, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x4ec, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x4e5, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x4f3, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x4ec, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x4e5, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x4f3, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x4ec, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x4e5, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x4f3, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x4ec, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x4e5, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x4f3, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x4ec, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x4e5, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4f3, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4ec, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4e5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x7, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x5, 8) , (const, 0x4, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff08, 8) , (unique, 0x1000046c, 8) , (const, 0x4, 8), (unique, 0x1000046c, 8) INT_MULT (stack, 0xfffffffffffffee0, 8) , (const, 0x6, 8)]
[(unique, 0x100006d9, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (stack, 0xfffffffffffffee0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x241e0b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 1) , (const, 0x2, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x9, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0xffff0000, 4), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff08, 8) , (unique, 0x1000050c, 8) , (const, 0x4, 8), (unique, 0x1000050c, 8) INT_ADD (unique, 0x10000504, 8) , (const, 0x4, 8), (unique, 0x10000504, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x6, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5c6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5c0, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5b8, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5b5, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x5c6, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x5c0, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x5b8, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x5b5, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x5c6, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x5c0, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x5b8, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x5b5, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x5c6, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x5c0, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x5b8, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x5b5, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x5c6, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x5c0, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x5b8, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x5b5, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x5c6, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x5c0, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x5b8, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x5b5, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5c6, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5c0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5b8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5b5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0xb, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x241b00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100002fb, 4), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x8, 8) , (const, 0x4, 8), (unique, 0x100002fb, 4) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000323, 8) , (unique, 0x100002ff, 4), (unique, 0x10000323, 8) PTRADD (unique, 0x3400, 8) , (const, 0x9, 8) , (const, 0x4, 8), (unique, 0x100002ff, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000303, 8), (unique, 0x10000303, 8) PTRADD (register, 0x88, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000032b, 8) , (unique, 0x1000030b, 4), (unique, 0x1000032b, 8) PTRADD (unique, 0x3400, 8) , (const, 0xa, 8) , (const, 0x4, 8), (unique, 0x1000030b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000030f, 8), (unique, 0x1000030f, 8) PTRADD (register, 0x88, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1145, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1143, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1141, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1140, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x1145, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x1143, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x1141, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x1140, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x1145, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x1143, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x1141, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x1140, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x1145, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x1143, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x1141, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x1140, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x1145, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x1143, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x1141, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x1140, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x1145, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x1143, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x1141, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x1140, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1145, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1143, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1141, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1140, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000333, 8) , (unique, 0x10000317, 4), (unique, 0x10000333, 8) PTRADD (unique, 0x3400, 8) , (const, 0xb, 8) , (const, 0x4, 8), (unique, 0x10000317, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000031b, 8), (unique, 0x1000031b, 8) PTRADD (register, 0x88, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x241b00, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (unique, 0x1000060b, 8) , (unique, 0x10000613, 8) , (unique, 0x1000061b, 8) , (unique, 0x10000623, 8) , (unique, 0x100006d9, 8) , (unique, 0x100006d9, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (register, 0x80, 1) , (register, 0x80, 1) , (register, 0x80, 1) , (register, 0x80, 1) , (register, 0x80, 1) , (register, 0x80, 1) , (unique, 0x10000217, 1)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x10000546, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(register, 0xa8, 8) CAST (unique, 0x100007cd, 8), (unique, 0x100007cd, 8) INT_ADD (unique, 0x100007c5, 8) , (register, 0x18, 8), (unique, 0x100007c5, 8) CAST (register, 0xa8, 8), (register, 0x18, 8) INT_ZEXT (register, 0x18, 4), (register, 0x18, 4) INT_AND (register, 0x18, 4) , (const, 0xfffffffc, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x241cd0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 8) , (register, 0xa0, 8), (register, 0xa0, 8) INT_SUB (register, 0xa0, 8) , (register, 0x18, 8), (register, 0x18, 8) INT_ZEXT (register, 0x18, 4), (register, 0x18, 4) INT_AND (register, 0x18, 4) , (const, 0xfffffffc, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x241cd0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x241cd0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x0, 8) , (register, 0xa0, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x241a20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x241e79, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x241e79, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed7, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x596, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x596, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x596, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x596, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x596, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x596, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x596, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x596, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x596, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x596, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x596, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x596, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x596, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x596, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x596, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eb414, 4) INT_ADD (ram, 0x4eb414, 4) , (const, 0x2, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x596, 4)]
[(unique, 0xbb00, 1) COPY (stack, 0xfffffffffffffed6, 1), (stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x596, 4)]
[(register, 0xb0, 8) CAST (unique, 0x100007d5, 8), (unique, 0x100007d5, 8) PTRSUB (const, 0x0, 8) , (const, 0x4eb410, 8)]
[(unique, 0xbb00, 1) COPY (stack, 0xfffffffffffffed7, 1), (stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x596, 4)]
[ ---  BRANCH (ram, 0x241d21, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x572, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x572, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x572, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x572, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x572, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x572, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x572, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x572, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x572, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000546, 8) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x25ffa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x2, 4), (unique, 0x3100, 8) PTRADD (unique, 0x10000546, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x1, 1), (unique, 0x3100, 8) CAST (unique, 0x100007e5, 8), (unique, 0x100007e5, 8) INT_ADD (unique, 0x100007dd, 8) , (const, 0x9, 8), (unique, 0x100007dd, 8) CAST (unique, 0x10000546, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007ed, 8) , (stack, 0xfffffffffffffed6, 1), (unique, 0x100007ed, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000546, 8) , (const, 0x2, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x572, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x587, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x581, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x57e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x57b, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x574, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x572, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x587, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x581, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x57e, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x57b, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x574, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x572, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x587, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x581, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x57e, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x57b, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x574, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x572, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x587, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x581, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x57e, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x57b, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x574, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x572, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x587, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x581, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x57e, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x57b, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x574, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x572, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x587, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x581, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x57e, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x57b, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x574, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x572, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x587, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x581, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x57e, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x57b, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x574, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x572, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007f5, 8) , (stack, 0xfffffffffffffee0, 8), (unique, 0x100007f5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000546, 8) , (const, 0x4, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x572, 4)]
[(unique, 0x10000536, 8) COPY (stack, 0xfffffffffffffef0, 8), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007fd, 8) , (const, 0x241d30, 8), (unique, 0x100007fd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (stack, 0xfffffffffffffef0, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x58f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x58f, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x58f, 4), (ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x58f, 4), (ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (unique, 0xbb00, 1)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x58f, 4), (ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (unique, 0xbb00, 1)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x58f, 4), (ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x58f, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x58e, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x58f, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x58e, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x58e, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x58f, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x58e, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x58f, 4), (stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x58e, 4), (stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x58f, 4), (stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x58e, 4), (stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x58f, 4), (stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x58e, 4), (stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x58e, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x58e, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x58f, 4), (stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x58e, 4), (stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x58f, 4), (stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x58e, 4), (stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x58e, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x58e, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x58e, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x58f, 4), (stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x58e, 4), (stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x58f, 4), (stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x58e, 4), (stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x58f, 4), (stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x58e, 4), (stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x58f, 4), (stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x58e, 4), (stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x58e, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x58e, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x58e, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x58e, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x58f, 4), (stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x58e, 4), (stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x58f, 4), (stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x58e, 4), (stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x58f, 4), (stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x58e, 4), (stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x58e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[(unique, 0x10000556, 8) COPY (ram, 0x4ef918, 8), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x58f, 4), (ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(unique, 0x100005ea, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000546, 8) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x2417e1, 1)]
[ ---  CBRANCH (ram, 0x241e5d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000805, 8), (unique, 0x10000805, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x100005b6, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x241d5a, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5cd, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5cd, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x5cd, 4), (ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x5cd, 4), (ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x5cd, 4), (ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x5cd, 4), (ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x5cd, 4), (ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5cd, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x5cd, 4), (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x5cd, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x5cd, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x5cd, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x5cd, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x5cd, 4), (stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x5cd, 4), (stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x5cd, 4), (stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5cd, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x5cd, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x5cd, 4), (stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x5cd, 4), (stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x5cd, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x5cd, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x5cd, 4), (stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x5cd, 4), (stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x5cd, 4), (stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x5cd, 4), (stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x5cd, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x5cd, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x5cd, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x5cd, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x5cd, 4), (stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x5cd, 4), (stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x5cd, 4), (stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5cd, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100005ae, 8) , (unique, 0x100005b6, 8) , (unique, 0x100005be, 8) , (unique, 0x100005be, 8) , (unique, 0x100005ce, 8)]
[(unique, 0x10000576, 8) COPY (stack, 0xfffffffffffffef0, 8), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x5cd, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[ ---  BRANCH (ram, 0x2417d4, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000080d, 8) , (const, 0x2417dc, 8), (unique, 0x1000080d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000566, 8) , (unique, 0x1000056e, 8) , (unique, 0x10000576, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc5, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc5, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0xc5, 4), (ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0xc5, 4), (ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0xc5, 4), (ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0xc5, 4), (ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0xc5, 4), (ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xc5, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0xc5, 4), (stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xc5, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xc5, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xc4, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc5, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xc5, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xc4, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0xc5, 4), (stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0xc4, 4), (stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0xc5, 4), (stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0xc4, 4), (stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0xc5, 4), (stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0xc4, 4), (stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc5, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc5, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0xc5, 4), (stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0xc4, 4), (stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0xc5, 4), (stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0xc4, 4), (stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc5, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc5, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc4, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0xc5, 4), (stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0xc4, 4), (stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0xc5, 4), (stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0xc4, 4), (stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0xc5, 4), (stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0xc4, 4), (stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0xc5, 4), (stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0xc4, 4), (stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xc4, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xc4, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xc4, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0xc4, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0xc5, 4), (stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0xc4, 4), (stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0xc5, 4), (stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0xc4, 4), (stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xc5, 4), (stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xc4, 4), (stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x1000057e, 8) , (register, 0x20, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000054e, 8) COPY (register, 0x10, 8), (register, 0x10, 8) COPY (const, 0x0, 8)]
[(unique, 0x100005e2, 8) COPY (ram, 0x4ef918, 8), (ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(ram, 0x4ef918, 8) MULTIEQUAL (unique, 0x100005e2, 8) , (unique, 0x100005ea, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (unique, 0x1000052e, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (unique, 0x10000536, 8) , (register, 0x20, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x1000054e, 8) , (unique, 0x10000556, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2417f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100005da, 4) COPY (unique, 0x10000524, 4), (unique, 0x10000524, 4) INT_ADD (ram, 0x4ef910, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x241817, 1) , (unique, 0x10000528, 1), (unique, 0x10000528, 1) INT_NOTEQUAL (unique, 0x10000524, 4) , (const, 0x0, 4), (unique, 0x10000524, 4) INT_ADD (ram, 0x4ef910, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000815, 8) , (const, 0x241810, 8), (unique, 0x10000815, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffff78, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x19a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x19a, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x19a, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x19a, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x19a, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x19a, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x19a, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x19a, 4), (stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x19a, 4), (stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x19a, 4), (stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x199, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x19a, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x19a, 4), (stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x19a, 4), (stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x19a, 4), (stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x19a, 4), (stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x19a, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x19a, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x199, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x19a, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x199, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x19a, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x199, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x19a, 4), (stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x199, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x19a, 4), (stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x199, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x19a, 4), (stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x199, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x19a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x199, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x1000036c, 8), (unique, 0x1000036c, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ef910, 8)]
[(unique, 0x1000055e, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0x19a, 4)]
[(unique, 0x100005d6, 4) COPY (ram, 0x4ef910, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x19a, 4), (ram, 0x4ef910, 4) INT_ADD (ram, 0x4ef910, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x1000055e, 8) , (register, 0x10, 8)]
[(ram, 0x4ef910, 4) COPY (unique, 0x100005de, 4), (unique, 0x100005de, 4) MULTIEQUAL (unique, 0x100005d6, 4) , (unique, 0x100005da, 4)]
[ ---  CBRANCH (ram, 0x2418c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff30, 8) , (const, 0x1, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x18c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x187, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x18c, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x187, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x18c, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x187, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x18c, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x187, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x18c, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x187, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x18c, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x187, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x18c, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x187, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff28, 8) , (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x241878, 1)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff30, 8) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000081d, 8), (unique, 0x1000081d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff28, 8) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000082d, 8), (unique, 0x1000082d, 8) INT_ADD (unique, 0x10000825, 8) , (const, 0x9, 8), (unique, 0x10000825, 8) CAST (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff18, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000835, 8), (unique, 0x10000835, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x125, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x117, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10e, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x12a, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x125, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x117, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x10e, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x12a, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x125, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x117, 4), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x10e, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x12a, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x125, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x117, 4), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x10e, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x12a, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x125, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x117, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x10e, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x12a, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x125, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x117, 4), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x10e, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x12a, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x125, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x117, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x10e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff20, 8) , (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x241878, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x241878, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x142, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x142, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x142, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x142, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x142, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x142, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x142, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x241cc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000083d, 8) , (const, 0x241cc8, 8), (unique, 0x1000083d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x181, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x181, 4)]
[(ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x181, 4)]
[(ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x181, 4)]
[(ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x181, 4)]
[(ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x181, 4)]
[(ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x181, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x181, 4)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x181, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x181, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x181, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x181, 4), (stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x181, 4), (stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x181, 4), (stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x181, 4), (stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x181, 4), (stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x181, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x181, 4), (stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x181, 4), (stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x181, 4), (stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x181, 4), (stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x181, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x181, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x180, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x181, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x181, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x180, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x181, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x180, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x181, 4), (stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x180, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x181, 4), (stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x180, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x181, 4), (stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x180, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x181, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x180, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x241878, 1)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffb9, 2) MULTIEQUAL (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2) , (stack, 0xffffffffffffffb9, 2)]
[(stack, 0xffffffffffffffb8, 1) MULTIEQUAL (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1) , (stack, 0xffffffffffffffb8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff56, 2) MULTIEQUAL (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2) , (stack, 0xffffffffffffff56, 2)]
[(stack, 0xffffffffffffff4e, 8) MULTIEQUAL (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8) , (stack, 0xffffffffffffff4e, 8)]
[(stack, 0xffffffffffffff4c, 2) MULTIEQUAL (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2) , (stack, 0xffffffffffffff4c, 2)]
[(stack, 0xffffffffffffff4a, 2) MULTIEQUAL (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2) , (stack, 0xffffffffffffff4a, 2)]
[(stack, 0xffffffffffffff42, 8) MULTIEQUAL (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8) , (stack, 0xffffffffffffff42, 8)]
[(stack, 0xffffffffffffff40, 2) MULTIEQUAL (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2) , (stack, 0xffffffffffffff40, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed7, 1) MULTIEQUAL (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1) , (stack, 0xfffffffffffffed7, 1)]
[(stack, 0xfffffffffffffed6, 1) MULTIEQUAL (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1) , (stack, 0xfffffffffffffed6, 1)]
[(stack, 0xfffffffffffffed5, 1) MULTIEQUAL (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1) , (stack, 0xfffffffffffffed5, 1)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe30, 8) MULTIEQUAL (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8) , (stack, 0xfffffffffffffe30, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef918, 8) MULTIEQUAL (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8) , (ram, 0x4ef918, 8)]
[(ram, 0x4ef910, 4) MULTIEQUAL (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4) , (ram, 0x4ef910, 4)]
[(ram, 0x4eb419, 1) MULTIEQUAL (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1) , (ram, 0x4eb419, 1)]
[(ram, 0x4eb418, 1) MULTIEQUAL (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1) , (ram, 0x4eb418, 1)]
[(ram, 0x4eb414, 4) MULTIEQUAL (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4) , (ram, 0x4eb414, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x241eb7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000845, 8), (unique, 0x10000845, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000084d, 8) , (unique, 0x10000364, 8), (unique, 0x1000084d, 8) CAST (register, 0x20, 8), (unique, 0x10000364, 8) PTRSUB (const, 0x0, 8) , (const, 0x241ebc, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffe30, 8) INDIRECT (stack, 0xfffffffffffffe30, 8) , (const, 0x17b, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x17b, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x17b, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x17b, 4), (stack, 0xfffffffffffffed5, 1) INDIRECT (stack, 0xfffffffffffffed5, 1) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x17b, 4), (stack, 0xfffffffffffffed6, 1) INDIRECT (stack, 0xfffffffffffffed6, 1) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x17b, 4), (stack, 0xfffffffffffffed7, 1) INDIRECT (stack, 0xfffffffffffffed7, 1) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x17b, 4), (stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x17b, 4), (stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x17a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x17b, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x17b, 4), (stack, 0xffffffffffffff40, 2) INDIRECT (stack, 0xffffffffffffff40, 2) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff42, 8) INDIRECT (stack, 0xffffffffffffff42, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x17b, 4), (stack, 0xffffffffffffff4a, 2) INDIRECT (stack, 0xffffffffffffff4a, 2) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x17b, 4), (stack, 0xffffffffffffff4c, 2) INDIRECT (stack, 0xffffffffffffff4c, 2) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff4e, 8) INDIRECT (stack, 0xffffffffffffff4e, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x17b, 4), (stack, 0xffffffffffffff56, 2) INDIRECT (stack, 0xffffffffffffff56, 2) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x17b, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x17b, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x17b, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x17b, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x17b, 4), (stack, 0xffffffffffffffb8, 1) INDIRECT (stack, 0xffffffffffffffb8, 1) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x17b, 4), (stack, 0xffffffffffffffb9, 2) INDIRECT (stack, 0xffffffffffffffb9, 2) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x17b, 4), (stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0x17a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17a, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x17b, 4)]
[(ram, 0x4eb414, 4) COPY (ram, 0x4eb414, 4), (ram, 0x4eb414, 4) INDIRECT (ram, 0x4eb414, 4) , (const, 0x17b, 4)]
[(ram, 0x4eb418, 1) COPY (ram, 0x4eb418, 1), (ram, 0x4eb418, 1) INDIRECT (ram, 0x4eb418, 1) , (const, 0x17b, 4)]
[(ram, 0x4eb419, 1) COPY (ram, 0x4eb419, 1), (ram, 0x4eb419, 1) INDIRECT (ram, 0x4eb419, 1) , (const, 0x17b, 4)]
[(ram, 0x4ef910, 4) COPY (ram, 0x4ef910, 4), (ram, 0x4ef910, 4) INDIRECT (ram, 0x4ef910, 4) , (const, 0x17b, 4)]
[(ram, 0x4ef918, 8) COPY (ram, 0x4ef918, 8), (ram, 0x4ef918, 8) INDIRECT (ram, 0x4ef918, 8) , (const, 0x17b, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x17b, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4eb414, 4) COPY (ram, 0x4eb414, 4)]
[(ram, 0x4eb418, 1) COPY (ram, 0x4eb418, 1)]
[(ram, 0x4eb419, 1) COPY (ram, 0x4eb419, 1)]
[(ram, 0x4ef910, 4) COPY (ram, 0x4ef910, 4)]
[(ram, 0x4ef918, 8) COPY (ram, 0x4ef918, 8)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8)]
