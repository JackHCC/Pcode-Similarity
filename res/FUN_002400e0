[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffffd4, 2) INDIRECT (stack, 0xffffffffffffffd4, 2) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffffd6, 8) INDIRECT (stack, 0xffffffffffffffd6, 8) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffffde, 2) INDIRECT (stack, 0xffffffffffffffde, 2) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2e, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000087, 8), (unique, 0x10000087, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222ec0, 8) , (const, 0x10, 4) , (const, 0x80003, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x240190, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222ec0, 8) , (const, 0x10, 4) , (const, 0x80003, 4) , (const, 0x0, 4)]
[(register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x240169, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x57, 4)]
[(stack, 0xffffffffffffffd4, 2) INDIRECT (stack, 0xffffffffffffffd4, 2) , (const, 0x57, 4), (stack, 0xffffffffffffffd4, 2) COPY (const, 0x10, 2)]
[(stack, 0xffffffffffffffd6, 8) INDIRECT (stack, 0xffffffffffffffd6, 8) , (const, 0x57, 4), (stack, 0xffffffffffffffd6, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffde, 2) INDIRECT (stack, 0xffffffffffffffde, 2) , (const, 0x57, 4), (stack, 0xffffffffffffffde, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x57, 4)]
[ ---  CBRANCH (ram, 0x240180, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222870, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (const, 0xc, 4), (unique, 0x3800, 8) CAST (unique, 0x1000008f, 8), (unique, 0x1000008f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x6d, 4), (stack, 0xffffffffffffffd0, 4) COPY (const, 0xc, 4)]
[(stack, 0xffffffffffffffd4, 2) INDIRECT (stack, 0xffffffffffffffd4, 2) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffd6, 8) INDIRECT (stack, 0xffffffffffffffd6, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffde, 2) INDIRECT (stack, 0xffffffffffffffde, 2) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x6d, 4)]
[ ---  CBRANCH (ram, 0x240180, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222970, 8) , (unique, 0xbc80, 4) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffde, 2) MULTIEQUAL (stack, 0xffffffffffffffde, 2) , (stack, 0xffffffffffffffde, 2)]
[(stack, 0xffffffffffffffd6, 8) MULTIEQUAL (stack, 0xffffffffffffffd6, 8) , (stack, 0xffffffffffffffd6, 8)]
[(stack, 0xffffffffffffffd4, 2) MULTIEQUAL (stack, 0xffffffffffffffd4, 2) , (stack, 0xffffffffffffffd4, 2)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x240169, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffd8, 4), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffd8, 4) SUBPIECE (stack, 0xffffffffffffffd6, 8) , (const, 0x2, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffde, 2) MULTIEQUAL (stack, 0xffffffffffffffde, 2) , (stack, 0xffffffffffffffde, 2) , (stack, 0xffffffffffffffde, 2)]
[(stack, 0xffffffffffffffd6, 8) MULTIEQUAL (stack, 0xffffffffffffffd6, 8) , (stack, 0xffffffffffffffd6, 8) , (stack, 0xffffffffffffffd6, 8)]
[(stack, 0xffffffffffffffd4, 2) MULTIEQUAL (stack, 0xffffffffffffffd4, 2) , (stack, 0xffffffffffffffd4, 2) , (stack, 0xffffffffffffffd4, 2)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x240197, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000097, 8), (unique, 0x10000097, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffd4, 2) INDIRECT (stack, 0xffffffffffffffd4, 2) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffd6, 8) INDIRECT (stack, 0xffffffffffffffd6, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffde, 2) INDIRECT (stack, 0xffffffffffffffde, 2) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xab, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
