[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100025b4, 8), (unique, 0x100025b4, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffef0, 8) COPY (register, 0x80, 8)]
[(stack, 0xfffffffffffffef8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10001a03, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0x10001a03, 8) PTRSUB (register, 0x88, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff00, 8) COPY (register, 0x88, 8)]
[(stack, 0xfffffffffffffee8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1dc3f0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x100025c4, 4) , (const, 0xd, 4), (unique, 0x100025c4, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100025bc, 8), (unique, 0x100025bc, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10002380, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xc, 4)]
[ ---  CBRANCH (ram, 0x1dc3fc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(unique, 0x10002384, 4) COPY (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffff1c, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10002380, 4) , (unique, 0x10002384, 4)]
[ ---  BRANCH (ram, 0x1dc2f2, 1)]
[(stack, 0xffffffffffffff1c, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0xc, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0x10002090, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1dc349, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100025c8, 8), (unique, 0x100025c8, 8) CAST (register, 0x10, 8)]
[(stack, 0xffffffffffffff20, 8) COPY (register, 0x30, 8)]
[(unique, 0x10001f88, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0x3800, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001f88, 8) , (unique, 0x10001f90, 8)]
[(unique, 0x10001de8, 8) COPY (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x1000259c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1dc390, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x25, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x100025d8, 8), (unique, 0x100025d8, 8) INT_AND (unique, 0x100025d0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100025d0, 8) CAST (stack, 0xffffffffffffff08, 8)]
[(unique, 0x100020f0, 8) COPY (register, 0x90, 8), (register, 0x90, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (unique, 0x100019dd, 8) , (unique, 0x100019dd, 8) , (unique, 0x100019dd, 8) , (unique, 0x100019dd, 8)]
[(register, 0x90, 4) SUBPIECE (register, 0x90, 8) , (const, 0x0, 4), (register, 0x90, 8) COPY (unique, 0x10002118, 8), (unique, 0x10002118, 8) MULTIEQUAL (unique, 0x100020f0, 8) , (unique, 0x100020f8, 8) , (unique, 0x10002100, 8) , (unique, 0x10002108, 8) , (unique, 0x10002110, 8)]
[(unique, 0x28200, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100025f0, 8), (unique, 0x100025f0, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x100025e8, 8), (unique, 0x100025e8, 8) INT_ADD (unique, 0x100025e0, 8) , (const, 0x4, 8), (unique, 0x100025e0, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x100019c4, 8) , (unique, 0x100019c4, 8) , (unique, 0x100019c4, 8) , (unique, 0x100019c4, 8)]
[(register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100025f0, 8), (unique, 0x100025f0, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x100025e8, 8), (unique, 0x100025e8, 8) INT_ADD (unique, 0x100025e0, 8) , (const, 0x4, 8), (unique, 0x100025e0, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x100019c4, 8) , (unique, 0x100019c4, 8) , (unique, 0x100019c4, 8) , (unique, 0x100019c4, 8)]
[(unique, 0x100019c4, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x100019d0, 4) MULTIEQUAL (unique, 0x28200, 4) , (unique, 0x28200, 4)]
[(unique, 0x100019dd, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x10002100, 8) COPY (unique, 0x100019d5, 8), (unique, 0x100019d5, 8) INT_ZEXT (unique, 0x100019cc, 4), (unique, 0x100019cc, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1dc3d0, 1) , (unique, 0x100019e5, 1), (unique, 0x100019e5, 1) BOOL_NEGATE (unique, 0x100019d4, 1), (unique, 0x100019d4, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x88, 4) SUBPIECE (unique, 0x100019dd, 8) , (const, 0x0, 4)]
[(stack, 0xffffffffffffff0c, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1dc3d8, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) BOOL_AND (unique, 0xcf00, 1) , (unique, 0xcf80, 1), (unique, 0xcf80, 1) INT_EQUAL (register, 0x20b, 1) , (register, 0x207, 1), (unique, 0xcf00, 1) BOOL_NEGATE (unique, 0x100019d4, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100019d0, 4) , (const, 0x0, 4), (register, 0x20b, 1) INT_SBORROW (unique, 0x100019cc, 4) , (const, 0x30, 4)]
[ ---  CBRANCH (ram, 0x1dc410, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100019cc, 4) , (const, 0x5e, 4)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x100025fc, 8), (unique, 0x100025fc, 8) INT_ADD (unique, 0x10001d40, 8) , (const, 0x1, 4), (unique, 0x10001d40, 8) INT_LEFT (unique, 0x10001d38, 8) , (const, 0x20, 8), (unique, 0x10001d38, 8) INT_SEXT (unique, 0x100025f8, 4), (unique, 0x100025f8, 4) CAST (stack, 0xffffffffffffff0c, 4)]
[(unique, 0x100020f8, 8) COPY (register, 0x90, 8)]
[ ---  BRANCH (ram, 0x1dc3a0, 1)]
[(unique, 0x10002110, 8) COPY (unique, 0x100019d5, 8)]
[ ---  CBRANCH (ram, 0x1dc3d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100019cc, 4) , (const, 0x5f, 4)]
[(register, 0x98, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x1dc467, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x9, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x100019cc, 4) , (const, 0x30, 4)]
[ ---  CBRANCH (ram, 0x1dc450, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100019cc, 4) , (const, 0x23, 4)]
[(unique, 0x10002108, 8) COPY (unique, 0x100019d5, 8)]
[ ---  CBRANCH (ram, 0x1dc3d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100019cc, 4) , (const, 0x2d, 4)]
[(register, 0x98, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x1dc423, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x0, 4) , (const, 0xa, 4), (register, 0x0, 4) INT_SUB (unique, 0x100019cc, 4) , (const, 0x30, 4)]
[(register, 0x98, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002370, 8) COPY (unique, 0x100019c4, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x100019d5, 8) , (register, 0x8, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 4) , (const, 0xccccccc, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x1000261c, 8), (unique, 0x1000261c, 8) INT_ADD (unique, 0x10002614, 8) , (const, 0x4, 8), (unique, 0x10002614, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002370, 8) , (unique, 0x10002378, 8)]
[(unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000260c, 8), (unique, 0x1000260c, 8) INT_ADD (unique, 0x10002604, 8) , (const, 0x4, 8), (unique, 0x10002604, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002370, 8) , (unique, 0x10002378, 8)]
[ ---  CBRANCH (ram, 0x1dc4c5, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x10002624, 4) , (const, 0xccccccd, 4), (unique, 0x10002624, 4) CAST (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4)]
[(register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dc4c0, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x1dc480, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x8, 4) , (const, 0x38, 4)]
[ ---  CBRANCH (ram, 0x1dc4e0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x9, 4) , (unique, 0x3100, 4)]
[(register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(register, 0x98, 4) COPY (const, 0x7fffffff, 4)]
[ ---  BRANCH (ram, 0x1dc423, 1)]
[(register, 0x98, 4) COPY (const, 0x7fffffff, 4)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002628, 8), (unique, 0x10002628, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1dc48e, 1)]
[(register, 0x98, 4) INT_ADD (unique, 0x10000394, 4) , (unique, 0x10000398, 4), (unique, 0x10000398, 4) INT_MULT (register, 0x98, 4) , (const, 0xa, 4), (unique, 0x10000394, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffffd0, 4)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4)]
[(register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10002378, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x1dc46a, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0xa, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x3100, 4) , (register, 0x0, 4)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x100019c4, 8) , (unique, 0x3100, 8) , (unique, 0x100019c4, 8) , (register, 0xb8, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4)]
[(stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8)]
[(unique, 0x1000258c, 8) COPY (register, 0x18, 8)]
[(unique, 0x10002594, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dc498, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x45, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (unique, 0x100019d5, 8) , (register, 0x8, 8) , (unique, 0x100019d5, 8) , (register, 0x8, 8)]
[(unique, 0x10002584, 8) COPY (unique, 0x10002594, 8)]
[ ---  BRANCHIND (register, 0x8, 8)]
[(unique, 0x100025a4, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002648, 8), (unique, 0x10002648, 8) INT_ADD (unique, 0x10002640, 8) , (const, 0x4, 8), (unique, 0x10002640, 8) CAST (register, 0xb8, 8)]
[ ---  BRANCHIND (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002638, 8), (unique, 0x10002638, 8) INT_ADD (unique, 0x10002630, 8) , (const, 0x4, 8), (unique, 0x10002630, 8) CAST (register, 0xb8, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002658, 8), (unique, 0x10002658, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002650, 8), (unique, 0x10002650, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1de8fa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de924, 8), (register, 0x20, 8) CAST (unique, 0x10002698, 8), (unique, 0x10002698, 8) INT_ADD (unique, 0x10002690, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002690, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb01, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xb01, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xb01, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xb00, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb01, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb00, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb01, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb00, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xb01, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb01, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb01, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb01, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb01, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb01, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xb01, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb01, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xb01, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xb00, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb01, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb00, 4)]
[(register, 0x90, 8) INT_AND (unique, 0x100026a0, 8) , (const, 0xffffffff, 8), (unique, 0x100026a0, 8) CAST (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xb01, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xb00, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10002688, 8), (unique, 0x10002688, 8) INT_OR (unique, 0x10001891, 8) , (register, 0x90, 8), (unique, 0x10001891, 8) INT_AND (unique, 0x10002680, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002680, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xb01, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xb00, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10002678, 8), (unique, 0x10002678, 8) INT_OR (unique, 0x10001881, 8) , (unique, 0x10001889, 8), (unique, 0x10001889, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x10001881, 8) INT_AND (unique, 0x10002670, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002670, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(register, 0x8, 8) INT_AND (unique, 0x100026a8, 8) , (const, 0xffffffff, 8), (unique, 0x100026a8, 8) CAST (stack, 0xfffffffffffffec8, 8), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xb01, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xb00, 4), (stack, 0xfffffffffffffec8, 8) CAST (unique, 0x10002668, 8), (unique, 0x10002668, 8) INT_OR (unique, 0x10001871, 8) , (register, 0x8, 8), (unique, 0x10001871, 8) INT_AND (unique, 0x10002660, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002660, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[ ---  CBRANCH (ram, 0x1dd661, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1df020, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100026b8, 8), (unique, 0x100026b8, 8) INT_ADD (unique, 0x100026b0, 8) , (const, 0x14, 8), (unique, 0x100026b0, 8) CAST (unique, 0x10001de8, 8)]
[(unique, 0x1000244c, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1de952, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x100026c0, 4), (unique, 0x100026c0, 4) CAST (stack, 0xfffffffffffffed0, 4)]
[(unique, 0x10002450, 4) COPY (stack, 0xfffffffffffffed0, 4)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x1000244c, 4) , (unique, 0x10002450, 4)]
[(register, 0xa8, 8) INT_ZEXT (unique, 0x100026dc, 4), (unique, 0x100026dc, 4) CAST (register, 0x38, 4), (register, 0x38, 4) INT_ADD (register, 0x38, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100026d4, 8), (unique, 0x100026d4, 8) INT_ADD (register, 0x0, 8) , (const, 0x4, 8), (register, 0x38, 4) INT_MULT (register, 0x38, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100026cc, 8), (unique, 0x100026cc, 8) INT_ADD (register, 0x0, 8) , (const, 0x40, 8), (register, 0x38, 4) INT_SUB (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100026c4, 8), (unique, 0x100026c4, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1dd600, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100026e8, 8), (unique, 0x100026e8, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100026e0, 8), (unique, 0x100026e0, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x4f, 4)]
[ ---  CBRANCH (ram, 0x1de790, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[ ---  CBRANCH (ram, 0x1dce78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100026f0, 8), (unique, 0x100026f0, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (const, 0x348, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002700, 8), (unique, 0x10002700, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100026f8, 8), (unique, 0x100026f8, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002710, 8), (unique, 0x10002710, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002708, 8), (unique, 0x10002708, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002720, 8), (unique, 0x10002720, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002718, 8), (unique, 0x10002718, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002730, 8), (unique, 0x10002730, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002728, 8), (unique, 0x10002728, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002740, 8), (unique, 0x10002740, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002738, 8), (unique, 0x10002738, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002750, 8), (unique, 0x10002750, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002748, 8), (unique, 0x10002748, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002760, 8), (unique, 0x10002760, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002758, 8), (unique, 0x10002758, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002770, 8), (unique, 0x10002770, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002768, 8), (unique, 0x10002768, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x4f, 4)]
[ ---  CBRANCH (ram, 0x1de964, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[ ---  CBRANCH (ram, 0x1dce78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002778, 8), (unique, 0x10002778, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (const, 0x358, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002788, 8), (unique, 0x10002788, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002780, 8), (unique, 0x10002780, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1de8b9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de8da, 8), (register, 0x20, 8) CAST (unique, 0x100027b8, 8), (unique, 0x100027b8, 8) INT_ADD (unique, 0x100027b0, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100027b0, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1df7, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1df7, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1df7, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1df6, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1df7, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1df6, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1df7, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1df6, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1df7, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1df6, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1df7, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1df7, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1df7, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1df7, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1df7, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1df7, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1df7, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1df7, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1df7, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1df6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1df7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1df6, 4)]
[(register, 0x90, 4) SUBPIECE (register, 0x90, 8) , (const, 0x0, 4), (register, 0x90, 8) INT_AND (unique, 0x100027c0, 8) , (const, 0xffffffff, 8), (unique, 0x100027c0, 8) CAST (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1df7, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1df6, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x100027a8, 8), (unique, 0x100027a8, 8) INT_OR (unique, 0x10001861, 8) , (register, 0x90, 8), (unique, 0x10001861, 8) INT_AND (unique, 0x100027a0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100027a0, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1df7, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1df6, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10002798, 8), (unique, 0x10002798, 8) INT_OR (unique, 0x10001851, 8) , (unique, 0x10001859, 8), (unique, 0x10001859, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x10001851, 8) INT_AND (unique, 0x10002790, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002790, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[ ---  CBRANCH (ram, 0x1dd5d2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1df020, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100027c8, 8), (unique, 0x100027c8, 8) INT_ADD (register, 0x0, 8) , (const, 0x38, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100027d8, 8), (unique, 0x100027d8, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100027d0, 8), (unique, 0x100027d0, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x4f, 4)]
[ ---  CBRANCH (ram, 0x1de771, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[ ---  CBRANCH (ram, 0x1dce78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100027e0, 8), (unique, 0x100027e0, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (const, 0x360, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100027f0, 8), (unique, 0x100027f0, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100027e8, 8), (unique, 0x100027e8, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002800, 8), (unique, 0x10002800, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100027f8, 8), (unique, 0x100027f8, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(register, 0xb8, 8) CAST (unique, 0x10002808, 8), (unique, 0x10002808, 8) PTRSUB (const, 0x0, 8) , (const, 0x2bc998, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002818, 8), (unique, 0x10002818, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002810, 8), (unique, 0x10002810, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002828, 8), (unique, 0x10002828, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002820, 8), (unique, 0x10002820, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(register, 0xb8, 8) CAST (unique, 0x10002830, 8), (unique, 0x10002830, 8) PTRSUB (const, 0x0, 8) , (const, 0x2bc754, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002840, 8), (unique, 0x10002840, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002838, 8), (unique, 0x10002838, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002850, 8), (unique, 0x10002850, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002848, 8), (unique, 0x10002848, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002860, 8), (unique, 0x10002860, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002858, 8), (unique, 0x10002858, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002870, 8), (unique, 0x10002870, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002868, 8), (unique, 0x10002868, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002880, 8), (unique, 0x10002880, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002878, 8), (unique, 0x10002878, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10002430, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002890, 8), (unique, 0x10002890, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002888, 8), (unique, 0x10002888, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100028a0, 8), (unique, 0x100028a0, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002898, 8), (unique, 0x10002898, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100028b0, 8), (unique, 0x100028b0, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100028a8, 8), (unique, 0x100028a8, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1de7ae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de7d5, 8), (register, 0x20, 8) CAST (unique, 0x100028f0, 8), (unique, 0x100028f0, 8) INT_ADD (unique, 0x100028e8, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100028e8, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x225b, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x225b, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x225b, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x225a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x225b, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x225a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x225b, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x225a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x225b, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x225b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x225b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x225b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x225b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x225b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x225b, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x225b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x225b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x225a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x225b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x225a, 4)]
[(stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x225b, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x225a, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x100028e0, 8), (unique, 0x100028e0, 8) INT_OR (unique, 0x1000182d, 8) , (register, 0x90, 8), (unique, 0x1000182d, 8) INT_AND (unique, 0x100028d8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100028d8, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(register, 0x90, 8) INT_AND (unique, 0x100028f8, 8) , (const, 0xffffffff, 8), (unique, 0x100028f8, 8) CAST (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x225b, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x225a, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x100028e0, 8), (unique, 0x100028e0, 8) INT_OR (unique, 0x1000182d, 8) , (register, 0x90, 8), (unique, 0x1000182d, 8) INT_AND (unique, 0x100028d8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100028d8, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x225b, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x225a, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x100028d0, 8), (unique, 0x100028d0, 8) INT_OR (unique, 0x1000181d, 8) , (unique, 0x10001825, 8), (unique, 0x10001825, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x1000181d, 8) INT_AND (unique, 0x100028c8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100028c8, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(register, 0x8, 8) INT_AND (unique, 0x10002900, 8) , (const, 0xffffffff, 8), (unique, 0x10002900, 8) CAST (stack, 0xfffffffffffffec8, 8), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x225b, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x225a, 4), (stack, 0xfffffffffffffec8, 8) CAST (unique, 0x100028c0, 8), (unique, 0x100028c0, 8) INT_OR (unique, 0x1000180d, 8) , (register, 0x8, 8), (unique, 0x1000180d, 8) INT_AND (unique, 0x100028b8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100028b8, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[ ---  CBRANCH (ram, 0x1dd6c9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1df020, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de816, 8), (register, 0x20, 8) CAST (unique, 0x10002930, 8), (unique, 0x10002930, 8) INT_ADD (unique, 0x10002928, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002928, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2282, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2282, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2282, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2281, 4), (stack, 0xfffffffffffffec8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002908, 8), (unique, 0x10002908, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2282, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2281, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2282, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2281, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2282, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2281, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2282, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2281, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2282, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2282, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2282, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2282, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2281, 4), (stack, 0xffffffffffffff18, 4) COPY (stack, 0xfffffffffffffed8, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2282, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2282, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2282, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2282, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2282, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2281, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2282, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2281, 4)]
[(stack, 0xfffffffffffffed0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002940, 8), (unique, 0x10002940, 8) CALL (ram, 0x121090, 8) , (unique, 0x10002938, 8), (unique, 0x10002938, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002908, 8), (unique, 0x10002908, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[(unique, 0x10002428, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1de834, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_SUB (stack, 0xfffffffffffffed8, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002940, 8), (unique, 0x10002940, 8) CALL (ram, 0x121090, 8) , (unique, 0x10002938, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2282, 4), (unique, 0x10002938, 8) CAST (unique, 0xbd80, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2281, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10002920, 8), (unique, 0x10002920, 8) INT_OR (unique, 0x1000183e, 8) , (unique, 0x10001846, 8), (unique, 0x10001846, 8) INT_AND (unique, 0x10002918, 8) , (const, 0xffffffff, 8), (unique, 0x10002918, 8) CAST (stack, 0xfffffffffffffed0, 8), (unique, 0x1000183e, 8) INT_AND (unique, 0x10002910, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002910, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002908, 8), (unique, 0x10002908, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[(unique, 0x1000242c, 4) COPY (register, 0x10, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002948, 8), (unique, 0x10002948, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10002428, 4) , (unique, 0x1000242c, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002948, 8), (unique, 0x10002948, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10002428, 4) , (unique, 0x1000242c, 4)]
[ ---  CBRANCH (ram, 0x1dc5ca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x10001e10, 8) COPY (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x10002308, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1de88c, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x10, 4)]
[(unique, 0x3400, 8) CAST (unique, 0x10002958, 8), (unique, 0x10002958, 8) INT_ADD (unique, 0x10002950, 8) , (unique, 0x3300, 8), (unique, 0x10002950, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x1ded38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff18, 4) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ded45, 8), (register, 0x20, 8) CAST (unique, 0x10002968, 8), (unique, 0x10002968, 8) INT_ADD (unique, 0x10002960, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002960, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2344, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2344, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2344, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2343, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2344, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2343, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2344, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2343, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2344, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2343, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2344, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2343, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2344, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2343, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2344, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2344, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2344, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2344, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2344, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2344, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2344, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2344, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2344, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2343, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2344, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2343, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002970, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x10002970, 8) CAST (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002978, 8), (unique, 0x10002978, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[ ---  BRANCH (ram, 0x1de88c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de888, 8), (register, 0x20, 8) CAST (unique, 0x10002988, 8), (unique, 0x10002988, 8) INT_ADD (unique, 0x10002980, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002980, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x22ea, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x22ea, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x22ea, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x22e9, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x22ea, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x22e9, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x22ea, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x22e9, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x22ea, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x22e9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x22ea, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x22e9, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x22ea, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x22e9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x22ea, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x22ea, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x22ea, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x22ea, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x22ea, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x22ea, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x22ea, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x22ea, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x22ea, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x22e9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x22ea, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x22e9, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002990, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x10002990, 8) CAST (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002998, 8), (unique, 0x10002998, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10002308, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10001e10, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) INT_SEXT (unique, 0x100029a0, 4), (unique, 0x100029a0, 4) CAST (stack, 0xfffffffffffffed0, 4), (stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[ ---  CBRANCH (ram, 0x1dec4c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x3100, 8) INT_SUB (register, 0x18, 8) , (const, 0x1, 8)]
[(unique, 0x10001e00, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1de8af, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dec70, 8), (register, 0x20, 8) CAST (unique, 0x100029bc, 8), (unique, 0x100029bc, 8) INT_ADD (unique, 0x100029b4, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100029b4, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2323, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2323, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2322, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2323, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2322, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2323, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2322, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2323, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2322, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2323, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2322, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2323, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2322, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2323, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2322, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2323, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2322, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2323, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2322, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2323, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2322, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2323, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2322, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2323, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2322, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2323, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2322, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2323, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2322, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2323, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2322, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2327, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2323, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (register, 0x0, 4), (unique, 0x3b80, 8) CAST (unique, 0x100029cc, 8), (unique, 0x100029cc, 8) INT_ADD (unique, 0x100029c4, 8) , (unique, 0x3a80, 8), (unique, 0x100029c4, 8) CAST (register, 0xa8, 8), (unique, 0x3a80, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001dd0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100029ac, 8), (unique, 0x100029ac, 8) INT_ADD (unique, 0x100029a4, 8) , (unique, 0x3300, 8), (unique, 0x100029a4, 8) CAST (register, 0x8, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (unique, 0x10001dd0, 8) COPY (stack, 0xffffffffffffff00, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10001e00, 8) , (unique, 0x10001e08, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10001e08, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2323, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2322, 4), (stack, 0xffffffffffffff08, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10001e00, 8) , (unique, 0x10001e08, 8)]
[ ---  CBRANCH (ram, 0x1dec59, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de8af, 8), (register, 0x20, 8) CAST (unique, 0x100029dc, 8), (unique, 0x100029dc, 8) INT_ADD (unique, 0x100029d4, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100029d4, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2305, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2305, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2305, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2304, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2305, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2304, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2305, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2304, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2305, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2304, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2305, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2304, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2305, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2304, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2305, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2305, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2305, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2305, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2305, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2305, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2305, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2305, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2305, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2304, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2305, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2304, 4)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x100029e4, 8) , (unique, 0x100029ec, 8) , (register, 0x18, 8), (unique, 0x100029ec, 8) CAST (register, 0x8, 8), (unique, 0x100029e4, 8) CAST (register, 0xa8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3b80, 8) CAST (unique, 0x100029fc, 8), (unique, 0x100029fc, 8) INT_ADD (unique, 0x100029f4, 8) , (unique, 0x3a80, 8), (unique, 0x100029f4, 8) CAST (register, 0xa8, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x1dc5ca, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002a0c, 8), (unique, 0x10002a0c, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002a04, 8), (unique, 0x10002a04, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4)]
[ ---  CBRANCH (ram, 0x1dd7bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x10002a1c, 8), (unique, 0x10002a1c, 8) INT_OR (unique, 0x10001585, 8) , (unique, 0x100019dd, 8), (unique, 0x10001585, 8) INT_AND (unique, 0x10002a14, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002a14, 8) CAST (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002a2c, 8), (unique, 0x10002a2c, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002a24, 8), (unique, 0x10002a24, 8) CAST (register, 0xb0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002a3c, 8), (unique, 0x10002a3c, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002a34, 8), (unique, 0x10002a34, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dc97d, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10001fc8, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1dc331, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002a44, 8), (unique, 0x10002a44, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0x10, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002a4c, 8), (unique, 0x10002a4c, 8) CAST (register, 0xb0, 8)]
[(register, 0xa8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(register, 0x80, 8) INT_AND (unique, 0x10002a54, 8) , (const, 0xffffffff, 8), (unique, 0x10002a54, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(unique, 0x100023b4, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dc9ce, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x98, 4) , (const, 0x1, 4)]
[(unique, 0x100023b8, 4) COPY (register, 0x0, 4)]
[(register, 0xb8, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100023b4, 4) , (unique, 0x100023b8, 4)]
[ ---  CBRANCH (ram, 0x1de684, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0xa8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (unique, 0x10002a5c, 8) , (register, 0xb8, 8), (unique, 0x10002a5c, 8) CAST (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1de6f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x100020d0, 8) COPY (unique, 0x10002a64, 8), (unique, 0x10002a64, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1de6ed, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffec8, 8) CAST (unique, 0x10002a74, 8), (unique, 0x10002a74, 8) INT_OR (unique, 0x100017cc, 8) , (register, 0x8, 8), (unique, 0x100017cc, 8) INT_AND (unique, 0x10002a6c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002a6c, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10002a94, 8), (unique, 0x10002a94, 8) INT_OR (unique, 0x100017dc, 8) , (unique, 0x100017e4, 8), (unique, 0x100017e4, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x100017dc, 8) INT_AND (unique, 0x10002a8c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002a8c, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10002aa4, 8), (unique, 0x10002aa4, 8) INT_OR (unique, 0x100017ec, 8) , (register, 0x90, 8), (unique, 0x100017ec, 8) INT_AND (unique, 0x10002a9c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002a9c, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10002a84, 8), (unique, 0x10002a84, 8) INT_ADD (unique, 0x10002a7c, 8) , (unique, 0x3300, 8), (unique, 0x10002a7c, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1decea, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1decf7, 8), (register, 0x20, 8) CAST (unique, 0x10002ab4, 8), (unique, 0x10002ab4, 8) INT_ADD (unique, 0x10002aac, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002aac, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9e0, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x9e0, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x9e0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x9df, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x9e0, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x9df, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x9e0, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x9df, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x9e0, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9e0, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x9e0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x9e0, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x9e0, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x9e0, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x9e0, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x9e0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x9e0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x9df, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9e0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9df, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002abc, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x10002abc, 8) CAST (register, 0x18, 8)]
[(register, 0x90, 8) INT_AND (unique, 0x10002ac4, 8) , (const, 0xffffffff, 8), (unique, 0x10002ac4, 8) CAST (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x9e0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x9df, 4)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x9e0, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x9df, 4)]
[(unique, 0x100019a4, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x9e0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x9df, 4)]
[ ---  BRANCH (ram, 0x1de6ed, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de6d2, 8), (register, 0x20, 8) CAST (unique, 0x10002ad4, 8), (unique, 0x10002ad4, 8) INT_ADD (unique, 0x10002acc, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002acc, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9b2, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x9b2, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x9b2, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x9b1, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x9b2, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x9b1, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x9b2, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x9b1, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x9b2, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9b2, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x9b2, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x9b2, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x9b2, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x9b2, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x9b2, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x9b2, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x9b2, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x9b1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9b2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9b1, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002adc, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x10002adc, 8) CAST (register, 0x18, 8)]
[(unique, 0x100019ac, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x9b2, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x9b1, 4)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x9b2, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x9b1, 4)]
[(register, 0x90, 8) INT_AND (unique, 0x10002ae4, 8) , (const, 0xffffffff, 8), (unique, 0x10002ae4, 8) CAST (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x9b2, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x9b1, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (unique, 0x100019ac, 4) , (unique, 0x100019a4, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10002af4, 8), (unique, 0x10002af4, 8) INT_ADD (unique, 0x10002aec, 8) , (const, 0x4, 8), (unique, 0x10002aec, 8) CAST (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100020d0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x9c5, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002afc, 8) , (const, 0x2d, 4), (unique, 0x10002afc, 8) CAST (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100020d0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0x3100, 8)]
[(register, 0x80, 8) INT_ZEXT (unique, 0x10002b04, 4), (unique, 0x10002b04, 4) CAST (register, 0x80, 4), (register, 0x80, 4) INT_2COMP (register, 0xa8, 4)]
[ ---  BRANCH (ram, 0x1dca54, 1)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (unique, 0x10002b08, 8) , (register, 0xb8, 8), (unique, 0x10002b08, 8) CAST (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1dca51, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x10001eb8, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dca47, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffec8, 8) CAST (unique, 0x10002b18, 8), (unique, 0x10002b18, 8) INT_OR (unique, 0x100013a3, 8) , (register, 0x8, 8), (unique, 0x100013a3, 8) INT_AND (unique, 0x10002b10, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002b10, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10002b28, 8), (unique, 0x10002b28, 8) INT_ADD (unique, 0x10002b20, 8) , (unique, 0x3300, 8), (unique, 0x10002b20, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x0, 4)]
[(stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10002b38, 8), (unique, 0x10002b38, 8) INT_OR (unique, 0x100013b3, 8) , (register, 0x80, 8), (unique, 0x100013b3, 8) INT_AND (unique, 0x10002b30, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002b30, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10002b48, 8), (unique, 0x10002b48, 8) INT_OR (unique, 0x100013c3, 8) , (unique, 0x100013cb, 8), (unique, 0x100013cb, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x100013c3, 8) INT_AND (unique, 0x10002b40, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002b40, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) CAST (unique, 0x10002b58, 8), (unique, 0x10002b58, 8) INT_OR (unique, 0x100013d3, 8) , (register, 0x90, 8), (unique, 0x100013d3, 8) INT_AND (unique, 0x10002b50, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002b50, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x1dec1c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dec2c, 8), (register, 0x20, 8) CAST (unique, 0x10002b68, 8), (unique, 0x10002b68, 8) INT_ADD (unique, 0x10002b60, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002b60, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x960, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x960, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x960, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x95f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x960, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x95f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x960, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x960, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x960, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x960, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x960, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x960, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x960, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x960, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x960, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x95f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x960, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x95f, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002b70, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x10002b70, 8) CAST (register, 0x18, 8)]
[(register, 0x90, 8) INT_AND (unique, 0x10002b78, 8) , (const, 0xffffffff, 8), (unique, 0x10002b78, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x960, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x95f, 4)]
[(register, 0x80, 8) INT_AND (unique, 0x10002b80, 8) , (const, 0xffffffff, 8), (unique, 0x10002b80, 8) CAST (stack, 0xfffffffffffffed0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x960, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x95f, 4)]
[(unique, 0x100019b4, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x960, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x95f, 4)]
[(unique, 0x100024b4, 4) COPY (stack, 0xfffffffffffffed8, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x960, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x95f, 4)]
[ ---  BRANCH (ram, 0x1dca47, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dca2c, 8), (register, 0x20, 8) CAST (unique, 0x10002b90, 8), (unique, 0x10002b90, 8) INT_ADD (unique, 0x10002b88, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002b88, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x43d, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x43d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x43d, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x43c, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x43d, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x43c, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x43d, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x43d, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x43d, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x43d, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x43d, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x43d, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x43d, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x43d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x43d, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x43d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x43c, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002b98, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x10002b98, 8) CAST (register, 0x18, 8)]
[(unique, 0x100019bc, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x43d, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x43c, 4)]
[(register, 0x80, 8) INT_AND (unique, 0x10002ba0, 8) , (const, 0xffffffff, 8), (unique, 0x10002ba0, 8) CAST (stack, 0xfffffffffffffed0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x43d, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x43c, 4)]
[(register, 0x90, 8) INT_AND (unique, 0x10002ba8, 8) , (const, 0xffffffff, 8), (unique, 0x10002ba8, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x43d, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x43c, 4)]
[(unique, 0x100024b0, 4) COPY (stack, 0xfffffffffffffed8, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x43d, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x43c, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (unique, 0x100019bc, 4) , (unique, 0x100019b4, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (unique, 0x100024b0, 4) , (unique, 0x100024b4, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x44f, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002bb0, 8) , (const, 0x2b, 4), (unique, 0x10002bb0, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001eb8, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(register, 0x18, 8) CAST (unique, 0x10002bc0, 8), (unique, 0x10002bc0, 8) INT_ADD (unique, 0x10002bb8, 8) , (const, 0x4, 8), (unique, 0x10002bb8, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001eb8, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0xb0, 8) CAST (unique, 0x10002bd0, 8), (unique, 0x10002bd0, 8) INT_ADD (unique, 0x10002bc8, 8) , (register, 0xb8, 8), (unique, 0x10002bc8, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10002540, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x4, 4)]
[ ---  CBRANCH (ram, 0x1dca6a, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x3, 4) , (unique, 0x10002bd8, 4), (unique, 0x10002bd8, 4) CAST (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4)]
[(unique, 0x10002544, 4) COPY (register, 0x98, 4)]
[(register, 0x38, 8) INT_ZEXT (register, 0x38, 4), (register, 0x38, 4) INT_ADD (register, 0x38, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_REM (register, 0x30, 4) , (const, 0x3c, 4), (register, 0x30, 4) SUBPIECE (unique, 0x1000051a, 8) , (const, 0x0, 4), (unique, 0x1000051a, 8) INT_DIV (register, 0x80, 8) , (const, 0x3c, 8), (register, 0x38, 4) INT_MULT (unique, 0x1000109e, 4) , (const, 0x64, 4), (unique, 0x1000109e, 4) SUBPIECE (unique, 0x10000502, 8) , (const, 0x0, 4), (unique, 0x10000502, 8) INT_DIV (register, 0x80, 8) , (const, 0xe10, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002be4, 8), (unique, 0x10002be4, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002bdc, 8), (unique, 0x10002bdc, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10002454, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x10002540, 4) , (unique, 0x10002544, 4)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002bf4, 8), (unique, 0x10002bf4, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002bec, 8), (unique, 0x10002bec, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd661, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10002538, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd67b, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x10002bfc, 4), (unique, 0x10002bfc, 4) CAST (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (stack, 0xfffffffffffffed0, 4) , (register, 0x98, 4)]
[(unique, 0x1000253c, 4) COPY (register, 0x98, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(register, 0x38, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_REM (register, 0x30, 4) , (const, 0x64, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x64, 4), (register, 0x30, 4) INT_SREM (unique, 0xbc80, 4) , (const, 0x64, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002c08, 8), (unique, 0x10002c08, 8) INT_ADD (unique, 0x10002c00, 8) , (const, 0x14, 8), (unique, 0x10002c00, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10002458, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x10002538, 4) , (unique, 0x1000253c, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002c18, 8), (unique, 0x10002c18, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002c10, 8), (unique, 0x10002c10, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dda64, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8) , (unique, 0x3100, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002c20, 8), (unique, 0x10002c20, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (const, 0x328, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002c30, 8), (unique, 0x10002c30, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002c28, 8), (unique, 0x10002c28, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1ddad7, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10002530, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1ddaeb, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10002c38, 4), (unique, 0x10002c38, 4) CAST (register, 0x98, 4)]
[(unique, 0x10002534, 4) COPY (register, 0x98, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002c3c, 8), (unique, 0x10002c3c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x1000245c, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x10002530, 4) , (unique, 0x10002534, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(unique, 0x100019e9, 1) COPY (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x1dd71c, 1)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(unique, 0x100019e8, 1) MULTIEQUAL (register, 0x206, 1) , (unique, 0x100019e9, 1)]
[(unique, 0x10002528, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1dd735, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10002c44, 4), (unique, 0x10002c44, 4) CAST (register, 0x98, 4)]
[(unique, 0x1000252c, 4) COPY (register, 0x98, 4)]
[(register, 0x38, 8) INT_ZEXT (register, 0x38, 4), (register, 0x38, 4) INT_ADD (register, 0x38, 4) , (const, 0x1, 4), (register, 0x38, 4) INT_SREM (unique, 0x3100, 4) , (const, 0x7, 4), (unique, 0x3100, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x6, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002c48, 8), (unique, 0x10002c48, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002c58, 8), (unique, 0x10002c58, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002c50, 8), (unique, 0x10002c50, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10002460, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x10002528, 4) , (unique, 0x1000252c, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(unique, 0x100023ac, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dc90b, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (register, 0x98, 4) , (const, 0x1, 4)]
[(unique, 0x100023b0, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x0, 8) , (register, 0xb8, 8), (register, 0x0, 8) CAST (unique, 0x10002c70, 8), (unique, 0x10002c70, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002c68, 8), (unique, 0x10002c68, 8) CAST (register, 0xb0, 8), (register, 0xb8, 8) CAST (unique, 0x10002c60, 8), (unique, 0x10002c60, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100023ac, 4) , (unique, 0x100023b0, 4)]
[ ---  CBRANCH (ram, 0x1dc958, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x10001f68, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dc949, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(unique, 0x3400, 8) CAST (unique, 0x10002c80, 8), (unique, 0x10002c80, 8) INT_ADD (unique, 0x10002c78, 8) , (unique, 0x3300, 8), (unique, 0x10002c78, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dea51, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dea61, 8), (register, 0x20, 8) CAST (unique, 0x10002c90, 8), (unique, 0x10002c90, 8) INT_ADD (unique, 0x10002c88, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002c88, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xde1, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xde1, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xde1, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xde0, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xde1, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xde0, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xde1, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xde0, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xde1, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xde0, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xde1, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xde0, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xde1, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xde0, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xde1, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xde1, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xde1, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xde1, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xde1, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xde1, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xde1, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xde1, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xde1, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xde0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xde1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xde0, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002c98, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x10002c98, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x1dc949, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc949, 8), (register, 0x20, 8) CAST (unique, 0x10002ca8, 8), (unique, 0x10002ca8, 8) INT_ADD (unique, 0x10002ca0, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002ca0, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xdce, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xdce, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xdce, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xdcd, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xdce, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xdcd, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xdce, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xdcd, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xdce, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xdcd, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xdce, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xdcd, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xdce, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xdcd, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xdce, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xdce, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xdce, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xdce, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xdce, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xdce, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xdce, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xdce, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xdce, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xdcd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdce, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdcd, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002cb0, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x10002cb0, 8) CAST (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xdd0, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002cb8, 8) , (const, 0x9, 4), (unique, 0x10002cb8, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001f68, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(register, 0x18, 8) CAST (unique, 0x10002cc8, 8), (unique, 0x10002cc8, 8) INT_ADD (unique, 0x10002cc0, 8) , (const, 0x4, 8), (unique, 0x10002cc0, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001f68, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcfb5, 8), (register, 0x20, 8) CAST (unique, 0x10002d78, 8), (unique, 0x10002d78, 8) INT_ADD (unique, 0x10002d70, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002d70, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe07, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xe07, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xe07, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xe06, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xe07, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xe06, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xe07, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xe06, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xe07, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xe06, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xe07, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xe06, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xe07, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xe06, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xe07, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xe06, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xe07, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xe06, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xe06, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xe06, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe07, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe06, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xe07, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xe06, 4), (stack, 0xffffffffffffff28, 8) COPY (unique, 0x100018d8, 8), (unique, 0x100018d8, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff30, 4) COPY (unique, 0x1000121e, 4), (unique, 0x1000121e, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002cf8, 8), (unique, 0x10002cf8, 8) CAST (unique, 0x10001222, 8), (unique, 0x10001222, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff34, 4) COPY (unique, 0x1000122a, 4), (unique, 0x1000122a, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000122e, 8), (unique, 0x1000122e, 8) CAST (unique, 0x10002d08, 8), (unique, 0x10002d08, 8) INT_ADD (unique, 0x10002d00, 8) , (const, 0xc, 8), (unique, 0x10002d00, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff38, 4) COPY (unique, 0x1000124e, 4), (unique, 0x1000124e, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002d10, 8), (unique, 0x10002d10, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff3c, 4) COPY (unique, 0x10001252, 4), (unique, 0x10001252, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001256, 8), (unique, 0x10001256, 8) CAST (unique, 0x10002d20, 8), (unique, 0x10002d20, 8) INT_ADD (unique, 0x10002d18, 8) , (const, 0x14, 8), (unique, 0x10002d18, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff40, 4) COPY (unique, 0x1000125e, 4), (unique, 0x1000125e, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002d28, 8), (unique, 0x10002d28, 8) CAST (unique, 0x10001262, 8), (unique, 0x10001262, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff44, 4) COPY (unique, 0x1000126a, 4), (unique, 0x1000126a, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000126e, 8), (unique, 0x1000126e, 8) CAST (unique, 0x10002d38, 8), (unique, 0x10002d38, 8) INT_ADD (unique, 0x10002d30, 8) , (const, 0x1c, 8), (unique, 0x10002d30, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff48, 4) COPY (unique, 0x1000128e, 4), (unique, 0x1000128e, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002d40, 8), (unique, 0x10002d40, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff4c, 4) COPY (unique, 0x10001292, 4), (unique, 0x10001292, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001296, 8), (unique, 0x10001296, 8) CAST (unique, 0x10002d50, 8), (unique, 0x10002d50, 8) INT_ADD (unique, 0x10002d48, 8) , (const, 0x24, 8), (unique, 0x10002d48, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff50, 4) COPY (unique, 0x1000129e, 4), (unique, 0x1000129e, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002d58, 8), (unique, 0x10002d58, 8) CAST (unique, 0x100012a2, 8), (unique, 0x100012a2, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xe07, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xe06, 4), (stack, 0xffffffffffffff54, 4) COPY (unique, 0x100012aa, 4), (unique, 0x100012aa, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100012ae, 8), (unique, 0x100012ae, 8) CAST (unique, 0x10002d68, 8), (unique, 0x10002d68, 8) INT_ADD (unique, 0x10002d60, 8) , (const, 0x2c, 8), (unique, 0x10002d60, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe07, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe06, 4), (stack, 0xffffffffffffff58, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xe07, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xe06, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe07, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe06, 4)]
[(register, 0x30, 4) SUBPIECE (unique, 0x10001d48, 8) , (const, 0x0, 4), (unique, 0x10001d48, 8) INT_RIGHT (unique, 0x10002d80, 8) , (const, 0x3f, 4), (unique, 0x10002d80, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1d1fa0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10002cd0, 8), (unique, 0x10002cd0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(register, 0x90, 8) INT_AND (unique, 0x10002d88, 8) , (const, 0xffffffff, 8), (unique, 0x10002d88, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xe07, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xe06, 4), (stack, 0xfffffffffffffee0, 8) CAST (unique, 0x10002cf0, 8), (unique, 0x10002cf0, 8) INT_OR (unique, 0x10001485, 8) , (register, 0x90, 8), (unique, 0x10001485, 8) INT_AND (unique, 0x10002ce8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002ce8, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xe07, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xe06, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10002ce0, 8), (unique, 0x10002ce0, 8) INT_OR (unique, 0x10001475, 8) , (unique, 0x1000147d, 8), (unique, 0x1000147d, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x10001475, 8) INT_AND (unique, 0x10002cd8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002cd8, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x100020a8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1d1fa0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10002cd0, 8), (unique, 0x10002cd0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[ ---  CBRANCH (ram, 0x1de415, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1d1fa0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10002cd0, 8), (unique, 0x10002cd0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002da0, 8) , (register, 0x10, 4), (unique, 0x10002da0, 8) CAST (register, 0x8, 8), (register, 0x10, 4) INT_SUB (const, 0x30, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ADD (unique, 0x10001116, 4) , (unique, 0x1000111a, 4), (unique, 0x10001116, 4) SUBPIECE (register, 0x38, 8) , (const, 0x0, 4), (unique, 0x1000111a, 4) INT_MULT (unique, 0x100011c6, 4) , (const, 0xfffffff6, 4), (unique, 0x100011c6, 4) SUBPIECE (unique, 0x10000e04, 8) , (const, 0x0, 4), (unique, 0x10000e04, 8) INT_SDIV (register, 0x38, 8) , (const, 0xa, 8), (register, 0x8, 8) CAST (unique, 0x10002d98, 8), (unique, 0x10002d98, 8) INT_ADD (unique, 0x10002d90, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x10002d90, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0x3100, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100020a0, 8) , (register, 0x0, 8)]
[(unique, 0x100020a0, 8) COPY (unique, 0x10000e04, 8), (unique, 0x10000e04, 8) INT_SDIV (register, 0x38, 8) , (const, 0xa, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100020a0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1de420, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000e04, 8) , (const, 0x0, 8), (unique, 0x10000e04, 8) INT_SDIV (register, 0x38, 8) , (const, 0xa, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100020a0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002db8, 8) , (register, 0x0, 4), (unique, 0x10002db8, 8) CAST (register, 0x8, 8), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x30, 4), (register, 0x0, 4) INT_ADD (unique, 0x100010aa, 4) , (unique, 0x100010ae, 4), (unique, 0x100010aa, 4) SUBPIECE (register, 0x38, 8) , (const, 0x0, 4), (unique, 0x100010ae, 4) INT_MULT (unique, 0x1000116a, 4) , (const, 0xfffffff6, 4), (unique, 0x1000116a, 4) SUBPIECE (unique, 0x1000064b, 8) , (const, 0x0, 4), (unique, 0x1000064b, 8) INT_SDIV (register, 0x38, 8) , (const, 0xa, 8), (register, 0x8, 8) CAST (unique, 0x10002db0, 8), (unique, 0x10002db0, 8) INT_ADD (unique, 0x10002da8, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x10002da8, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100020a8, 8) , (unique, 0x100020b0, 8)]
[(unique, 0x100020b0, 8) COPY (unique, 0x1000064b, 8), (unique, 0x1000064b, 8) INT_SDIV (register, 0x38, 8) , (const, 0xa, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100020a8, 8) , (unique, 0x100020b0, 8)]
[ ---  CBRANCH (ram, 0x1dcfe8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000064b, 8) , (const, 0x0, 8), (unique, 0x1000064b, 8) INT_SDIV (register, 0x38, 8) , (const, 0xa, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100020a8, 8) , (unique, 0x100020b0, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0xb8, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002dc8, 8), (unique, 0x10002dc8, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002dc0, 8), (unique, 0x10002dc0, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10001f78, 8) COPY (register, 0x18, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002de0, 8), (unique, 0x10002de0, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002dd8, 8), (unique, 0x10002dd8, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dce73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002dd0, 8), (unique, 0x10002dd0, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (const, 0x338, 8) , (const, 0x1, 8)]
[(register, 0xb8, 8) CAST (unique, 0x10002de8, 8), (unique, 0x10002de8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2bc9c0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x1dc645, 1)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(unique, 0x100023d4, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dcde5, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (register, 0x98, 4) , (const, 0x1, 4)]
[(unique, 0x100023d8, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x0, 8) , (register, 0xb8, 8), (register, 0x0, 8) CAST (unique, 0x10002e00, 8), (unique, 0x10002e00, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002df8, 8), (unique, 0x10002df8, 8) CAST (register, 0xb0, 8), (register, 0xb8, 8) CAST (unique, 0x10002df0, 8), (unique, 0x10002df0, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100023d4, 4) , (unique, 0x100023d8, 4)]
[ ---  CBRANCH (ram, 0x1dc958, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x10001f60, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dce27, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(unique, 0x3400, 8) CAST (unique, 0x10002e10, 8), (unique, 0x10002e10, 8) INT_ADD (unique, 0x10002e08, 8) , (unique, 0x3300, 8), (unique, 0x10002e08, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dea66, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dea76, 8), (register, 0x20, 8) CAST (unique, 0x10002e20, 8), (unique, 0x10002e20, 8) INT_ADD (unique, 0x10002e18, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002e18, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x120e, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x120e, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x120e, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x120d, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x120e, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x120d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x120e, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x120d, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x120e, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x120d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x120e, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x120d, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x120e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x120d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x120e, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x120e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x120e, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x120e, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x120e, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x120e, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x120e, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x120e, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x120e, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x120d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x120e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x120d, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002e28, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x10002e28, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x1dce27, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dce27, 8), (register, 0x20, 8) CAST (unique, 0x10002e38, 8), (unique, 0x10002e38, 8) INT_ADD (unique, 0x10002e30, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002e30, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11fc, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x11fc, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x11fc, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x11fb, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x11fc, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x11fb, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x11fc, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x11fb, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x11fc, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x11fb, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x11fc, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x11fb, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x11fc, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x11fb, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x11fc, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x11fc, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x11fc, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x11fc, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x11fc, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x11fc, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x11fc, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x11fc, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x11fc, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x11fb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11fc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11fb, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10002e40, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x10002e40, 8) CAST (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x11fe, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002e48, 8) , (const, 0xa, 4), (unique, 0x10002e48, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001f60, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(register, 0x18, 8) CAST (unique, 0x10002e58, 8), (unique, 0x10002e58, 8) INT_ADD (unique, 0x10002e50, 8) , (const, 0x4, 8), (unique, 0x10002e50, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001f60, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[ ---  BRANCH (ram, 0x1dc958, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002e68, 8), (unique, 0x10002e68, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002e60, 8), (unique, 0x10002e60, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dda91, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10002520, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1ddaa6, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x10002e70, 4), (unique, 0x10002e70, 4) CAST (register, 0x98, 4)]
[(unique, 0x10002524, 4) COPY (register, 0x98, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10002e84, 8), (unique, 0x10002e84, 8) INT_OR (unique, 0x100015ea, 8) , (unique, 0x100015f2, 8), (unique, 0x100015f2, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x100015ea, 8) INT_AND (unique, 0x10002e7c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002e7c, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002e74, 8), (unique, 0x10002e74, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x38, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002e74, 8), (unique, 0x10002e74, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10002464, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x10002520, 4) , (unique, 0x10002524, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002e94, 8), (unique, 0x10002e94, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002e8c, 8), (unique, 0x10002e8c, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd9b5, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x38, 8) INT_ZEXT (stack, 0xffffffffffffff1c, 4)]
[(unique, 0x10002508, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd9c9, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x10002e9c, 4), (unique, 0x10002e9c, 4) CAST (register, 0x98, 4)]
[(unique, 0x1000250c, 4) COPY (register, 0x98, 4)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002ea8, 8), (unique, 0x10002ea8, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002ea0, 8), (unique, 0x10002ea0, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd97e, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10002518, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd993, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x10002eb0, 4), (unique, 0x10002eb0, 4) CAST (register, 0x98, 4)]
[(unique, 0x1000251c, 4) COPY (register, 0x98, 4)]
[(register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002eb4, 8), (unique, 0x10002eb4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10002500, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x10002518, 4) , (unique, 0x1000251c, 4)]
[ ---  BRANCH (ram, 0x1dd8fc, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002ec4, 8), (unique, 0x10002ec4, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002ebc, 8), (unique, 0x10002ebc, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd938, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100024f8, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x1dd94d, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x2, 4) , (unique, 0x10002ecc, 4), (unique, 0x10002ecc, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024fc, 4) COPY (register, 0x98, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10002ee8, 8), (unique, 0x10002ee8, 8) INT_OR (unique, 0x100015d0, 8) , (unique, 0x100015d8, 8), (unique, 0x100015d8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x100015d0, 8) INT_AND (unique, 0x10002ee0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002ee0, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002ed8, 8), (unique, 0x10002ed8, 8) INT_ADD (unique, 0x10002ed0, 8) , (const, 0x1c, 8), (unique, 0x10002ed0, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(register, 0x38, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002ed8, 8), (unique, 0x10002ed8, 8) INT_ADD (unique, 0x10002ed0, 8) , (const, 0x1c, 8), (unique, 0x10002ed0, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(unique, 0x1000246c, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100024f8, 4) , (unique, 0x100024fc, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002ef8, 8), (unique, 0x10002ef8, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002ef0, 8), (unique, 0x10002ef0, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd8e4, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10002510, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd8f9, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x10002f00, 4), (unique, 0x10002f00, 4) CAST (register, 0x98, 4)]
[(unique, 0x10002514, 4) COPY (register, 0x98, 4)]
[(register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002f0c, 8), (unique, 0x10002f0c, 8) INT_ADD (unique, 0x10002f04, 8) , (const, 0xc, 8), (unique, 0x10002f04, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10002504, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x10002510, 4) , (unique, 0x10002514, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x10002468, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x10002500, 4) , (unique, 0x10002504, 4) , (unique, 0x10002508, 4) , (unique, 0x1000250c, 4)]
[ ---  CBRANCH (ram, 0x1dcab0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 4) , (const, 0x30, 4)]
[(unique, 0x10002498, 4) COPY (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1dd919, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 4) , (const, 0x2d, 4)]
[(register, 0x90, 8) COPY (const, 0x5f, 8)]
[(unique, 0x1000249c, 4) COPY (register, 0xb8, 4)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002f1c, 8), (unique, 0x10002f1c, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002f14, 8), (unique, 0x10002f14, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dda1e, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100024e8, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dda33, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x10002f24, 4), (unique, 0x10002f24, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024ec, 4) COPY (register, 0x98, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002f30, 8), (unique, 0x10002f30, 8) INT_ADD (unique, 0x10002f28, 8) , (const, 0xc, 8), (unique, 0x10002f28, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10002478, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100024e8, 4) , (unique, 0x100024ec, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002f40, 8), (unique, 0x10002f40, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002f38, 8), (unique, 0x10002f38, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd9f1, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8) , (unique, 0x3100, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002f48, 8), (unique, 0x10002f48, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (const, 0x320, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x1000256c, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x1dc79d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4)]
[(unique, 0x10002570, 4) COPY (stack, 0xffffffffffffff08, 4)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x1000256c, 4) , (unique, 0x10002570, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002f58, 8), (unique, 0x10002f58, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10002f50, 8), (unique, 0x10002f50, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1de765, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x45, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(register, 0x38, 8) CAST (unique, 0x10002f60, 8), (unique, 0x10002f60, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[(unique, 0x10001096, 2) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002f68, 8), (unique, 0x10002f68, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1de54b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4)]
[ ---  CBRANCH (ram, 0x1de565, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002f72, 8), (unique, 0x10002f72, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cf6, 8) , (const, 0x1, 8), (unique, 0x10001cf6, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10002f70, 2), (unique, 0x10002f70, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x10001096, 2) , (const, 0x93, 2)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de585, 8), (register, 0x20, 8) CAST (unique, 0x10002fc2, 8), (unique, 0x10002fc2, 8) INT_ADD (unique, 0x10002fba, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002fba, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14a4, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x14a4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x14a4, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x14a3, 4), (stack, 0xfffffffffffffec8, 8) CAST (unique, 0x10002f92, 8), (unique, 0x10002f92, 8) INT_OR (unique, 0x10001774, 8) , (unique, 0x1000177c, 8), (unique, 0x1000177c, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10001774, 8) INT_AND (unique, 0x10002f8a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002f8a, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x14a4, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x14a3, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10002fa2, 8), (unique, 0x10002fa2, 8) INT_OR (unique, 0x10001784, 8) , (unique, 0x1000178c, 8), (unique, 0x1000178c, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10001784, 8) INT_AND (unique, 0x10002f9a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002f9a, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x14a4, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x14a3, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10002fb2, 8), (unique, 0x10002fb2, 8) INT_OR (unique, 0x10001794, 8) , (register, 0x90, 8), (unique, 0x10001794, 8) INT_AND (unique, 0x10002faa, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002faa, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x14a4, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x14a3, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x14a4, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x14a3, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x14a4, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x14a3, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x14a4, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x14a4, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x14a4, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x14a4, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x14a4, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x14a4, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x14a4, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x14a4, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x14a3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14a4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14a3, 4)]
[(unique, 0x10002420, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1de59b, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xffffffffffffff08, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121090, 8) , (register, 0x38, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x14a4, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x14a3, 4), (stack, 0xffffffffffffff08, 8) CAST (unique, 0x10002f82, 8), (unique, 0x10002f82, 8) INT_OR (unique, 0x10001764, 8) , (unique, 0x1000176c, 8), (unique, 0x1000176c, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x10001764, 8) INT_AND (unique, 0x10002f7a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002f7a, 8) CAST (stack, 0xffffffffffffff08, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10002424, 4) COPY (register, 0x98, 4)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002fca, 8), (unique, 0x10002fca, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10002420, 4) , (unique, 0x10002424, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002fca, 8), (unique, 0x10002fca, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10002420, 4) , (unique, 0x10002424, 4)]
[ ---  CBRANCH (ram, 0x1dc8e7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffec8, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 8)]
[(unique, 0x10002310, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1de610, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffee0, 8) CAST (unique, 0x10002fe2, 8), (unique, 0x10002fe2, 8) INT_OR (unique, 0x100017a7, 8) , (unique, 0x100017af, 8), (unique, 0x100017af, 8) INT_AND (unique, 0x10002fda, 8) , (const, 0xffffffff, 8), (unique, 0x10002fda, 8) CAST (stack, 0xfffffffffffffed0, 8), (unique, 0x100017a7, 8) INT_AND (unique, 0x10002fd2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002fd2, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10002ff2, 8), (unique, 0x10002ff2, 8) INT_ADD (unique, 0x10002fea, 8) , (unique, 0x3300, 8), (unique, 0x10002fea, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[(register, 0x30, 4) COPY (const, 0x30, 4)]
[ ---  CBRANCH (ram, 0x1de5f7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffed8, 4) , (const, 0x30, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8)]
[(register, 0x30, 4) COPY (const, 0x20, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de5ff, 8), (register, 0x20, 8) CAST (unique, 0x10003002, 8), (unique, 0x10003002, 8) INT_ADD (unique, 0x10002ffa, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10002ffa, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1510, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1510, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1510, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x150f, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1510, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x150f, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1510, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x150f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1510, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x150f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1510, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x150f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1510, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1510, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1510, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1510, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1510, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1510, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1510, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1510, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1510, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x150f, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x1000300a, 8) , (register, 0x30, 4) , (register, 0x10, 8), (unique, 0x1000300a, 8) CAST (register, 0x18, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003012, 8), (unique, 0x10003012, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1510, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x150f, 4)]
[(unique, 0x10002554, 4) COPY (stack, 0xfffffffffffffee0, 4), (stack, 0xfffffffffffffee0, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1510, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x150f, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10002310, 8) , (unique, 0x3400, 8)]
[(register, 0xb8, 8) INT_SEXT (register, 0x0, 4)]
[(unique, 0x1000113e, 2) SUBPIECE (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1debbd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (unique, 0x10002554, 4)]
[(register, 0x8, 8) CAST (unique, 0x1000301a, 8), (unique, 0x1000301a, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1debde, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003024, 8), (unique, 0x10003024, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001d26, 8) , (const, 0x1, 8), (unique, 0x10001d26, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10003022, 2), (unique, 0x10003022, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x1000113e, 2) , (const, 0x93, 2)]
[(unique, 0x3100, 8) INT_SUB (register, 0xb8, 8) , (const, 0x1, 8)]
[(unique, 0x10001df0, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1de648, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dec01, 8), (register, 0x20, 8) CAST (unique, 0x1000304c, 8), (unique, 0x1000304c, 8) INT_ADD (unique, 0x10003044, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003044, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x157e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x157e, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x157d, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x157e, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x157d, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x157e, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x157d, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x157e, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x157d, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x157e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x157d, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x157e, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x157d, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x157e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x157d, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x157e, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x157d, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x157e, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x157d, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x157e, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x157d, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x157e, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x157d, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x157e, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x157d, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x157e, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x157d, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x157e, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x157d, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x157e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x157d, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1582, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x157e, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (register, 0x0, 4), (unique, 0x3b80, 8) CAST (unique, 0x1000305c, 8), (unique, 0x1000305c, 8) INT_ADD (unique, 0x10003054, 8) , (unique, 0x3a80, 8), (unique, 0x10003054, 8) CAST (register, 0xa8, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001dc8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10003034, 8), (unique, 0x10003034, 8) INT_ADD (unique, 0x1000302c, 8) , (unique, 0x3300, 8), (unique, 0x1000302c, 8) CAST (register, 0x8, 8), (unique, 0x3300, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8), (unique, 0x10001dc8, 8) COPY (stack, 0xffffffffffffff00, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10001df0, 8) , (unique, 0x10001df8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x18, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10001df8, 8) COPY (unique, 0x10003064, 8), (unique, 0x10003064, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x157e, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x157d, 4), (stack, 0xfffffffffffffee0, 8) COPY (unique, 0x1000303c, 8), (unique, 0x1000303c, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10001df0, 8) , (unique, 0x10001df8, 8)]
[ ---  CBRANCH (ram, 0x1debeb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0xffffffffffffffff, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0xffffffffffffffff, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x18, 8)]
[(register, 0x30, 8) CAST (unique, 0x1000306c, 8), (unique, 0x1000306c, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1de63d, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003076, 8), (unique, 0x10003076, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cfe, 8) , (const, 0x1, 8), (unique, 0x10001cfe, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10003074, 2), (unique, 0x10003074, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x1000113e, 2) , (const, 0x93, 2)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de648, 8), (register, 0x20, 8) CAST (unique, 0x10003086, 8), (unique, 0x10003086, 8) INT_ADD (unique, 0x1000307e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000307e, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1546, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1546, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1546, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1545, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1546, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1545, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1546, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1545, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1546, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1545, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1546, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1545, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1546, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1545, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1546, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1546, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1546, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1546, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1546, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1546, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1546, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1546, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1546, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1545, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1546, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1545, 4)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x1000308e, 8) , (register, 0x30, 8) , (register, 0xb8, 8), (unique, 0x1000308e, 8) CAST (register, 0xa8, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3b80, 8) CAST (unique, 0x1000309e, 8), (unique, 0x1000309e, 8) INT_ADD (unique, 0x10003096, 8) , (unique, 0x3a80, 8), (unique, 0x10003096, 8) CAST (register, 0xa8, 8), (unique, 0x3a80, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x1dc8e7, 1)]
[ ---  CBRANCH (ram, 0x1dc7e7, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100030a8, 8), (unique, 0x100030a8, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001c96, 8) , (const, 0x1, 8), (unique, 0x10001c96, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x100030a6, 2), (unique, 0x100030a6, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x10001096, 2) , (const, 0x42, 2)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc80e, 8), (register, 0x20, 8) CAST (unique, 0x100030f8, 8), (unique, 0x100030f8, 8) INT_ADD (unique, 0x100030f0, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100030f0, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1375, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1375, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1374, 4), (stack, 0xfffffffffffffec8, 8) CAST (unique, 0x100030c8, 8), (unique, 0x100030c8, 8) INT_OR (unique, 0x10001359, 8) , (unique, 0x10001361, 8), (unique, 0x10001361, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10001359, 8) INT_AND (unique, 0x100030c0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100030c0, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1375, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1374, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x100030d8, 8), (unique, 0x100030d8, 8) INT_OR (unique, 0x10001369, 8) , (unique, 0x10001371, 8), (unique, 0x10001371, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10001369, 8) INT_AND (unique, 0x100030d0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100030d0, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1375, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1374, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x100030e8, 8), (unique, 0x100030e8, 8) INT_OR (unique, 0x10001379, 8) , (register, 0x90, 8), (unique, 0x10001379, 8) INT_AND (unique, 0x100030e0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100030e0, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1375, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1374, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1375, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1374, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1375, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1374, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1375, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1375, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1375, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1375, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1375, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1375, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1375, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1375, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1374, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1375, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1374, 4)]
[(unique, 0x100023a4, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dc81f, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xffffffffffffff08, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121090, 8) , (register, 0x38, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1375, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1374, 4), (stack, 0xffffffffffffff08, 8) CAST (unique, 0x100030b8, 8), (unique, 0x100030b8, 8) INT_OR (unique, 0x10001349, 8) , (unique, 0x10001351, 8), (unique, 0x10001351, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x10001349, 8) INT_AND (unique, 0x100030b0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100030b0, 8) CAST (stack, 0xffffffffffffff08, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100023a8, 4) COPY (register, 0x98, 4)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003100, 8), (unique, 0x10003100, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (register, 0x0, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x100023a4, 4) , (unique, 0x100023a8, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003100, 8), (unique, 0x10003100, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (register, 0x0, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x100023a4, 4) , (unique, 0x100023a8, 4)]
[ ---  CBRANCH (ram, 0x1dc8e7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffec8, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 8)]
[(unique, 0x10001ea8, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dc897, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffee0, 8) CAST (unique, 0x10003118, 8), (unique, 0x10003118, 8) INT_OR (unique, 0x1000138b, 8) , (unique, 0x10001393, 8), (unique, 0x10001393, 8) INT_AND (unique, 0x10003110, 8) , (const, 0xffffffff, 8), (unique, 0x10003110, 8) CAST (stack, 0xfffffffffffffed0, 8), (unique, 0x1000138b, 8) INT_AND (unique, 0x10003108, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003108, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10003128, 8), (unique, 0x10003128, 8) INT_ADD (unique, 0x10003120, 8) , (unique, 0x3300, 8), (unique, 0x10003120, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[(register, 0x30, 4) COPY (const, 0x30, 4)]
[ ---  CBRANCH (ram, 0x1dc87a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffed8, 4) , (const, 0x30, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8)]
[(register, 0x30, 4) COPY (const, 0x20, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc885, 8), (register, 0x20, 8) CAST (unique, 0x10003138, 8), (unique, 0x10003138, 8) INT_ADD (unique, 0x10003130, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003130, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13e0, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x13e0, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x13e0, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x13e0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x13e0, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x13e0, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x13e0, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x13e0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x13e0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13e0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13df, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003140, 8) , (register, 0x30, 4) , (register, 0x10, 8), (unique, 0x10003140, 8) CAST (register, 0x18, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003148, 8), (unique, 0x10003148, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x13e0, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x13df, 4)]
[(unique, 0x10002440, 4) COPY (stack, 0xfffffffffffffee0, 4), (stack, 0xfffffffffffffee0, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001ea8, 8) , (unique, 0x3400, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x10003158, 8), (unique, 0x10003158, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003150, 8), (unique, 0x10003150, 8) INT_SEXT (register, 0x0, 4)]
[(unique, 0x1000109a, 2) SUBPIECE (register, 0x80, 4) , (const, 0x0, 4), (register, 0x80, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1dea97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (unique, 0x10002440, 4)]
[(register, 0xa8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1deac1, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x80, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003162, 8), (unique, 0x10003162, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001d16, 8) , (const, 0x1, 8), (unique, 0x10001d16, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10003160, 2), (unique, 0x10003160, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x1000109a, 2) , (const, 0x42, 2)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0xbd80, 8)]
[(unique, 0x3100, 8) INT_ADD (unique, 0x1000316a, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x1000316a, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1dc8e3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1deadf, 8), (register, 0x20, 8) CAST (unique, 0x10003182, 8), (unique, 0x10003182, 8) INT_ADD (unique, 0x1000317a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000317a, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1463, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1463, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1462, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1463, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1462, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1463, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1462, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1463, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1462, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1463, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1462, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1463, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1462, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1463, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1462, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1463, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1462, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1463, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1462, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1463, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1462, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1463, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1462, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1463, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1462, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1463, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1462, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1463, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1462, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1463, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1462, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1463, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1462, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1467, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1463, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x10003192, 8), (unique, 0x10003192, 8) INT_ADD (unique, 0x1000318a, 8) , (unique, 0x3300, 8), (unique, 0x1000318a, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001db8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003172, 8), (unique, 0x10003172, 8) CAST (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (unique, 0x3a80, 8) , (const, 0x1, 8), (unique, 0x3a80, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (unique, 0x10001db8, 8) COPY (stack, 0xffffffffffffff00, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[ ---  CBRANCH (ram, 0x1deace, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x30, 8) CAST (unique, 0x1000319a, 8), (unique, 0x1000319a, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1dc8cd, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x80, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100031a4, 8), (unique, 0x100031a4, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001c9e, 8) , (const, 0x1, 8), (unique, 0x10001c9e, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x100031a2, 2), (unique, 0x100031a2, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x1000109a, 2) , (const, 0x42, 2)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc8dc, 8), (register, 0x20, 8) CAST (unique, 0x100031b4, 8), (unique, 0x100031b4, 8) INT_ADD (unique, 0x100031ac, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100031ac, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x141b, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x141b, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x141b, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x141a, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x141b, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x141a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x141b, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x141a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x141b, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x141a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x141b, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x141a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x141b, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x141a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x141b, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x141b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x141b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x141b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x141b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x141b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x141b, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x141b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x141b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x141a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x141b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x141a, 4)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x100031bc, 8) , (register, 0x30, 8) , (unique, 0x100031c4, 8), (unique, 0x100031c4, 8) CAST (register, 0x0, 8), (unique, 0x100031bc, 8) CAST (register, 0x18, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100031dc, 8), (unique, 0x100031dc, 8) INT_ADD (unique, 0x100031d4, 8) , (unique, 0x3300, 8), (unique, 0x100031d4, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x100031cc, 8) , (const, 0x4, 8), (unique, 0x100031cc, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) CAST (unique, 0x100031f4, 8), (unique, 0x100031f4, 8) INT_ADD (unique, 0x100031e4, 8) , (unique, 0x100031ec, 8), (unique, 0x100031ec, 8) CAST (stack, 0xffffffffffffff08, 8), (unique, 0x100031e4, 8) CAST (register, 0xb0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10001f20, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0x3400, 8) , (register, 0x18, 8) , (unique, 0x3b80, 8)]
[ ---  BRANCH (ram, 0x1dc331, 1)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x10003204, 8), (unique, 0x10003204, 8) INT_OR (unique, 0x100017fd, 8) , (unique, 0x10001805, 8), (unique, 0x10001805, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100017fd, 8) INT_AND (unique, 0x100031fc, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100031fc, 8) CAST (stack, 0xffffffffffffff08, 8)]
[(unique, 0x100021e0, 8) COPY (register, 0xa0, 8)]
[ ---  BRANCH (ram, 0x1dc508, 1)]
[(register, 0x38, 8) CAST (unique, 0x1000320c, 8), (unique, 0x1000320c, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003214, 8), (unique, 0x10003214, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0xa8, 8) CAST (unique, 0x10003224, 8), (unique, 0x10003224, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000321c, 8), (unique, 0x1000321c, 8) CAST (register, 0xb0, 8)]
[(unique, 0x1000257c, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x1ddc67, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4)]
[(unique, 0x10002580, 4) COPY (stack, 0xffffffffffffff08, 4)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x1000257c, 4) , (unique, 0x10002580, 4)]
[ ---  CBRANCH (ram, 0x1ddc81, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x7, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000322e, 8), (unique, 0x1000322e, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cc6, 8) , (const, 0x1, 8), (unique, 0x10001cc6, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x1000322c, 2), (unique, 0x1000322c, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x10001106, 2) , (const, 0x34, 2), (unique, 0x10001106, 2) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ddca7, 8), (register, 0x20, 8) CAST (unique, 0x1000327e, 8), (unique, 0x1000327e, 8) INT_ADD (unique, 0x10003276, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003276, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2754, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2754, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2754, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2753, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2754, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2753, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x1000325e, 8), (unique, 0x1000325e, 8) INT_OR (unique, 0x10001674, 8) , (register, 0x90, 8), (unique, 0x10001674, 8) INT_AND (unique, 0x10003256, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003256, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2754, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2753, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x1000324e, 8), (unique, 0x1000324e, 8) INT_OR (unique, 0x10001664, 8) , (unique, 0x1000166c, 8), (unique, 0x1000166c, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10001664, 8) INT_AND (unique, 0x10003246, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003246, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2754, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2753, 4), (stack, 0xfffffffffffffee0, 8) CAST (unique, 0x1000326e, 8), (unique, 0x1000326e, 8) INT_OR (unique, 0x10001684, 8) , (unique, 0x1000168c, 8), (unique, 0x1000168c, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10001684, 8) INT_AND (unique, 0x10003266, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003266, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2754, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2753, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2754, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2753, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2754, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2754, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2754, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2754, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2754, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2754, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2754, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2754, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2753, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2754, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2753, 4)]
[(unique, 0x10002410, 4) COPY (register, 0xa0, 4), (register, 0xa0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1ddcb8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xffffffffffffff08, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121090, 8) , (register, 0x38, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2754, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2753, 4), (stack, 0xffffffffffffff08, 8) CAST (unique, 0x1000323e, 8), (unique, 0x1000323e, 8) INT_OR (unique, 0x10001654, 8) , (unique, 0x1000165c, 8), (unique, 0x1000165c, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x10001654, 8) INT_AND (unique, 0x10003236, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003236, 8) CAST (stack, 0xffffffffffffff08, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10002414, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0xa8, 8) , (register, 0xa0, 8), (register, 0xa0, 8) CAST (unique, 0x10003286, 8), (unique, 0x10003286, 8) INT_SEXT (register, 0xa0, 4), (register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (register, 0x8, 4), (register, 0xa0, 4) MULTIEQUAL (unique, 0x10002410, 4) , (unique, 0x10002414, 4)]
[ ---  CBRANCH (ram, 0x1ddc36, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 8)]
[(unique, 0x10001974, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1ddd30, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffee0, 8) CAST (unique, 0x1000329e, 8), (unique, 0x1000329e, 8) INT_OR (unique, 0x10001697, 8) , (unique, 0x1000169f, 8), (unique, 0x1000169f, 8) INT_AND (unique, 0x10003296, 8) , (const, 0xffffffff, 8), (unique, 0x10003296, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0x10001697, 8) INT_AND (unique, 0x1000328e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000328e, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100032ae, 8), (unique, 0x100032ae, 8) INT_ADD (unique, 0x100032a6, 8) , (unique, 0x3300, 8), (unique, 0x100032a6, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[(stack, 0xffffffffffffff08, 8) COPY (unique, 0x100032b6, 8), (unique, 0x100032b6, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1deb4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed0, 4) , (const, 0x30, 4), (stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1deb5b, 8), (register, 0x20, 8) CAST (unique, 0x100032c6, 8), (unique, 0x100032c6, 8) INT_ADD (unique, 0x100032be, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100032be, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2867, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2867, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2867, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2866, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2867, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2866, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2867, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2866, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2867, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2866, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2867, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2866, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2867, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2867, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2867, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2867, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2867, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2867, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2867, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2866, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2867, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2866, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x100032ce, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x100032ce, 8) CAST (register, 0x18, 8)]
[(register, 0x8, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2867, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2866, 4)]
[(unique, 0x10001934, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2867, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2866, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100032d6, 8), (unique, 0x100032d6, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2867, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2866, 4)]
[ ---  BRANCH (ram, 0x1ddd30, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ddd18, 8), (register, 0x20, 8) CAST (unique, 0x100032e6, 8), (unique, 0x100032e6, 8) INT_ADD (unique, 0x100032de, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100032de, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x27ba, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x27ba, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x27ba, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x27ba, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x27ba, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x27ba, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x27ba, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x27ba, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x27ba, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x27ba, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x27ba, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x27ba, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x27ba, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x27ba, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x27ba, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x27b9, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x100032ee, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x100032ee, 8) CAST (register, 0x18, 8)]
[(unique, 0x1000197c, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x27ba, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x27b9, 4)]
[(register, 0x8, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x27ba, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x27b9, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100032f6, 8), (unique, 0x100032f6, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x27ba, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10002584, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100032fe, 8), (unique, 0x100032fe, 8) INT_SEXT (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x1000110a, 2) SUBPIECE (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1de982, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4), (register, 0x88, 4) MULTIEQUAL (unique, 0x10001974, 4) , (unique, 0x1000197c, 4) , (unique, 0x10001934, 4)]
[(register, 0x30, 8) CAST (unique, 0x10003306, 8), (unique, 0x10003306, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1ddc1c, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0x7, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003310, 8), (unique, 0x10003310, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cce, 8) , (const, 0x1, 8), (unique, 0x10001cce, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x1000330e, 2), (unique, 0x1000330e, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x1000110a, 2) , (const, 0x34, 2)]
[ ---  BRANCH (ram, 0x1ddc1c, 1)]
[(register, 0x8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1de9aa, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0x7, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000331a, 8), (unique, 0x1000331a, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001d06, 8) , (const, 0x1, 8), (unique, 0x10001d06, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10003318, 2), (unique, 0x10003318, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x1000110a, 2) , (const, 0x34, 2)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0xbd80, 8)]
[(unique, 0x3100, 8) INT_ADD (unique, 0x10003322, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10003322, 8) CAST (register, 0x0, 8)]
[(unique, 0x10002180, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1ddc32, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x1000332a, 8), (unique, 0x1000332a, 8) CAST (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de9d1, 8), (register, 0x20, 8) CAST (unique, 0x10003342, 8), (unique, 0x10003342, 8) INT_ADD (unique, 0x1000333a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000333a, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2842, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2842, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2841, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2842, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2841, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2842, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2841, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2842, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2841, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2842, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2841, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2842, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2841, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2842, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2841, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2842, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2841, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2842, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2841, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2842, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2841, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2842, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2841, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2842, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2841, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2842, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2841, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2842, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2841, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2842, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2841, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2846, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2842, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x10003352, 8), (unique, 0x10003352, 8) INT_ADD (unique, 0x1000334a, 8) , (unique, 0x3300, 8), (unique, 0x1000334a, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001da8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003332, 8), (unique, 0x10003332, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x8, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (unique, 0x10001da8, 8) COPY (stack, 0xffffffffffffff00, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10002190, 8) COPY (unique, 0x1000335a, 8), (unique, 0x1000335a, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2842, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2841, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x1de9c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(unique, 0x100023c4, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dcc1a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4)]
[(unique, 0x100023c8, 4) COPY (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x1000336a, 8), (unique, 0x1000336a, 8) INT_OR (unique, 0x10001409, 8) , (unique, 0x10001411, 8), (unique, 0x10001411, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x10001409, 8) INT_AND (unique, 0x10003362, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003362, 8) CAST (stack, 0xffffffffffffff08, 8), (register, 0x0, 4) MULTIEQUAL (unique, 0x100023c4, 4) , (unique, 0x100023c8, 4)]
[ ---  CBRANCH (ram, 0x1de36d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffee8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1de402, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003372, 8), (unique, 0x10003372, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1dcc48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffee8, 8)]
[ ---  CBRANCH (ram, 0x1de380, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000337a, 8), (unique, 0x1000337a, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1de3d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffef0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de3a6, 8), (register, 0x20, 8) CAST (unique, 0x100033ba, 8), (unique, 0x100033ba, 8) INT_ADD (unique, 0x100033b2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100033b2, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d53, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1d53, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1d52, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1d53, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1d52, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1d53, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1d53, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1d53, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d53, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1d53, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1d53, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d53, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d53, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d52, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d53, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d52, 4)]
[ ---  CALL (ram, 0x1d4080, 8)]
[(unique, 0x10001994, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1d53, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1d52, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x1000338a, 8), (unique, 0x1000338a, 8) INT_OR (unique, 0x1000172e, 8) , (unique, 0x100019dd, 8), (unique, 0x1000172e, 8) INT_AND (unique, 0x10003382, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003382, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x1000199c, 4) SUBPIECE (stack, 0xfffffffffffffee8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1d53, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1d52, 4), (stack, 0xfffffffffffffee8, 8) CAST (unique, 0x100033aa, 8), (unique, 0x100033aa, 8) INT_OR (unique, 0x1000174e, 8) , (register, 0x90, 8), (unique, 0x1000174e, 8) INT_AND (unique, 0x100033a2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100033a2, 8) CAST (stack, 0xfffffffffffffee8, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1d64, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1d53, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xfffffffffffffef0, 8) , (const, 0x1, 1), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1d53, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1d52, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100033c2, 8), (unique, 0x100033c2, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x4, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d53, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d52, 4)]
[(unique, 0x10002550, 4) COPY (stack, 0xfffffffffffffee0, 4), (stack, 0xfffffffffffffee0, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1d53, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1d52, 4), (stack, 0xfffffffffffffee0, 8) CAST (unique, 0x1000339a, 8), (unique, 0x1000339a, 8) INT_OR (unique, 0x1000173e, 8) , (unique, 0x10001746, 8), (unique, 0x10001746, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x1000173e, 8) INT_AND (unique, 0x10003392, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003392, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (unique, 0x1000199c, 4)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0x10001994, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (unique, 0x10002550, 4)]
[(register, 0x0, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(stack, 0xfffffffffffffee8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1dcc48, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x2, 4), (unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(stack, 0xfffffffffffffee8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100033ca, 8), (unique, 0x100033ca, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (ram, 0x4eae40, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1dcc48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100033ca, 8), (unique, 0x100033ca, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (ram, 0x4eae40, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffee8, 8) COPY (const, 0x2b3c79, 8)]
[ ---  BRANCH (ram, 0x1dcc48, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcca1, 8), (register, 0x20, 8) CAST (unique, 0x10003402, 8), (unique, 0x10003402, 8) INT_ADD (unique, 0x100033fa, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100033fa, 8) CAST (register, 0x20, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1be9, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1be8, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(register, 0x20, 8) CAST (unique, 0x10003412, 8), (unique, 0x10003412, 8) INT_ADD (unique, 0x1000340a, 8) , (unique, 0x100005ab, 8), (unique, 0x1000340a, 8) CAST (register, 0x20, 8), (unique, 0x100005ab, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x22, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) CALL (ram, 0x1cc2d0, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (unique, 0x10001d88, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x10001d88, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x20, 8) CAST (unique, 0x10003422, 8), (unique, 0x10003422, 8) INT_ADD (unique, 0x1000341a, 8) , (unique, 0x100005ab, 8), (unique, 0x1000341a, 8) CAST (register, 0x20, 8), (unique, 0x100005ab, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x22, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) CALL (ram, 0x1cc2d0, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (unique, 0x10001d88, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x10001d88, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x20, 8) CAST (unique, 0x10003432, 8), (unique, 0x10003432, 8) INT_ADD (unique, 0x1000342a, 8) , (unique, 0x100005ab, 8), (unique, 0x1000342a, 8) CAST (register, 0x20, 8), (unique, 0x100005ab, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x22, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) CALL (ram, 0x1cc2d0, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (unique, 0x10001d88, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x10001d88, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dccdf, 8), (register, 0x20, 8) CAST (unique, 0x1000345a, 8), (unique, 0x1000345a, 8) INT_ADD (unique, 0x10003452, 8) , (unique, 0x10001a83, 8), (unique, 0x10003452, 8) CAST (register, 0x20, 8), (unique, 0x10001a83, 8) INT_ADD (unique, 0x100005ab, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100005ab, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x22, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) CALL (ram, 0x1cc2d0, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (unique, 0x10001d88, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x10001d88, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c19, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1be9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1c19, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1be9, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1c19, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1c18, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1be9, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1be8, 4), (stack, 0xfffffffffffffec8, 8) CAST (unique, 0x100033ea, 8), (unique, 0x100033ea, 8) INT_OR (unique, 0x1000142a, 8) , (unique, 0x10001432, 8), (unique, 0x10001432, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x1000142a, 8) INT_AND (unique, 0x100033e2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100033e2, 8) CAST (stack, 0xfffffffffffffec8, 8), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1c19, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1c18, 4), (stack, 0xfffffffffffffed0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000344a, 8), (unique, 0x1000344a, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3800, 8) CAST (unique, 0x10003442, 8), (unique, 0x10003442, 8) INT_ADD (unique, 0x1000343a, 8) , (unique, 0x10001a7b, 8), (unique, 0x1000343a, 8) CAST (register, 0x20, 8), (unique, 0x10001a7b, 8) INT_ADD (unique, 0x100005ab, 8) , (const, 0xf, 8), (unique, 0x100005ab, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x22, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) CALL (ram, 0x1cc2d0, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (unique, 0x10001d88, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x10001d88, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1c19, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1c18, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1be9, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1be8, 4), (stack, 0xfffffffffffffee0, 8) COPY (unique, 0x100033f2, 8), (unique, 0x100033f2, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1c19, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1c18, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1be9, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1be8, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1c19, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1c18, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1be9, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1be8, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1c19, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1c18, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1be9, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1be8, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1c19, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1c18, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1be9, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1be8, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1c19, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1c18, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1be9, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1be8, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1c19, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1c18, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1be9, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1be8, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff18, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1c19, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1c18, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1be9, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1be8, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1c19, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1c18, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1be9, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1be8, 4), (stack, 0xffffffffffffff28, 8) COPY (stack, 0xfffffffffffffee8, 8), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1c19, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1c18, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1be9, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1be8, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1c19, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1c18, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1be9, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1be8, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1c19, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1c18, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1be9, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1be8, 4), (stack, 0xffffffffffffff68, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c19, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c18, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1be9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1be8, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1cc2d0, 8) , (register, 0x0, 8) , (unique, 0x10001d60, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000344a, 8), (unique, 0x1000344a, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3800, 8) CAST (unique, 0x10003442, 8), (unique, 0x10003442, 8) INT_ADD (unique, 0x1000343a, 8) , (unique, 0x10001a7b, 8), (unique, 0x1000343a, 8) CAST (register, 0x20, 8), (unique, 0x10001a7b, 8) INT_ADD (unique, 0x100005ab, 8) , (const, 0xf, 8), (unique, 0x100005ab, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x22, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (unique, 0x10001d60, 8) COPY (stack, 0xfffffffffffffee0, 8), (register, 0x0, 8) CALL (ram, 0x1cc2d0, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (unique, 0x10001d88, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1be9, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1be8, 4), (stack, 0xfffffffffffffee0, 8) COPY (unique, 0x100033f2, 8), (unique, 0x100033f2, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x10001d88, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x100023cc, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dccf2, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xfffffffffffffed8, 4) , (register, 0xb8, 4), (register, 0xb8, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1c19, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1c18, 4), (register, 0x0, 8) CALL (ram, 0x1cc2d0, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8) , (unique, 0x3200, 8) , (unique, 0x10001d88, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1be9, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1be8, 4), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x100033da, 8), (unique, 0x100033da, 8) INT_OR (unique, 0x1000141a, 8) , (unique, 0x10001422, 8), (unique, 0x10001422, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x1000141a, 8) INT_AND (unique, 0x100033d2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100033d2, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x10001d88, 8) COPY (stack, 0xffffffffffffff00, 8), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x100023d0, 4) COPY (register, 0x98, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x1000346a, 8), (unique, 0x1000346a, 8) CAST (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x10003462, 8), (unique, 0x10003462, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0xb8, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x100023cc, 4) , (unique, 0x100023d0, 4)]
[(unique, 0x10002058, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) CAST (unique, 0x1000347a, 8), (unique, 0x1000347a, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10003472, 8), (unique, 0x10003472, 8) CAST (register, 0xb0, 8), (register, 0x30, 8) CAST (unique, 0x10003462, 8), (unique, 0x10003462, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0xb8, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x100023cc, 4) , (unique, 0x100023d0, 4)]
[(unique, 0x10001fa8, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1dc77a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x100018c8, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 4)]
[(unique, 0x10001ec0, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dcd5d, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10003492, 8), (unique, 0x10003492, 8) INT_OR (unique, 0x1000143d, 8) , (unique, 0x10001445, 8), (unique, 0x10001445, 8) INT_AND (unique, 0x1000348a, 8) , (const, 0xffffffff, 8), (unique, 0x1000348a, 8) CAST (stack, 0xfffffffffffffec8, 8), (unique, 0x1000143d, 8) INT_AND (unique, 0x10003482, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003482, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100034a2, 8), (unique, 0x100034a2, 8) INT_ADD (unique, 0x1000349a, 8) , (unique, 0x3300, 8), (unique, 0x1000349a, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dea7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff18, 4) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dea8b, 8), (register, 0x20, 8) CAST (unique, 0x100034b2, 8), (unique, 0x100034b2, 8) INT_ADD (unique, 0x100034aa, 8) , (unique, 0x10001a93, 8), (unique, 0x100034aa, 8) CAST (register, 0x20, 8), (unique, 0x10001a93, 8) INT_ADD (unique, 0x100005ab, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d31, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1d31, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1d31, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1d30, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1d31, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1d30, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1d31, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1d30, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1d31, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1d30, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1d31, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1d30, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1d31, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1d31, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1d31, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d31, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d31, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1d31, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1d31, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d31, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d31, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d30, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d31, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d30, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x100034ba, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x100034ba, 8) CAST (register, 0x18, 8)]
[(unique, 0x100018a7, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1d31, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1d30, 4)]
[ ---  BRANCH (ram, 0x1dcd5d, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcd56, 8), (register, 0x20, 8) CAST (unique, 0x100034ca, 8), (unique, 0x100034ca, 8) INT_ADD (unique, 0x100034c2, 8) , (unique, 0x10001a8b, 8), (unique, 0x100034c2, 8) CAST (register, 0x20, 8), (unique, 0x10001a8b, 8) INT_ADD (unique, 0x100005ab, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c87, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1c87, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1c87, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1c86, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1c87, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1c86, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1c87, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1c86, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1c87, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1c86, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1c87, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1c86, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1c87, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1c87, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1c87, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1c87, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1c87, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1c87, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1c87, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1c87, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1c87, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c87, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c86, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x100034d2, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x100034d2, 8) CAST (register, 0x18, 8)]
[(unique, 0x100018d0, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1c87, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1c86, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001ec0, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(unique, 0x10001d90, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10001d50, 8) COPY (stack, 0xfffffffffffffed0, 8), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(register, 0xb8, 8) INT_SEXT (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1de706, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4), (register, 0x88, 4) MULTIEQUAL (unique, 0x100018c8, 4) , (unique, 0x100018d0, 4) , (unique, 0x100018a7, 4)]
[(unique, 0x3100, 8) INT_SUB (register, 0xb8, 8) , (const, 0x1, 8)]
[(unique, 0x10002138, 8) COPY (register, 0xa0, 8)]
[(unique, 0x10002330, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dcdc4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0xa0, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de73b, 8), (register, 0x20, 8) CAST (unique, 0x100034f2, 8), (unique, 0x100034f2, 8) INT_ADD (unique, 0x100034ea, 8) , (unique, 0x10001aab, 8), (unique, 0x100034ea, 8) CAST (register, 0x20, 8), (unique, 0x10001aab, 8) INT_ADD (unique, 0x100005ab, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d12, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1d12, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1d12, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1d12, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1d12, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1d12, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1d12, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1d12, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1d11, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d12, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d11, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d12, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d11, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1d12, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1d11, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1d12, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1d11, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d12, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d11, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d12, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d11, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d12, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d11, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1d16, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1d12, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x10003502, 8), (unique, 0x10003502, 8) INT_ADD (unique, 0x100034fa, 8) , (unique, 0x3300, 8), (unique, 0x100034fa, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225e50, 8) , (unique, 0xbc80, 4) , (unique, 0x10001d90, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100034e2, 8), (unique, 0x100034e2, 8) INT_ADD (unique, 0x100034da, 8) , (unique, 0x3300, 8), (unique, 0x100034da, 8) CAST (unique, 0x10001d50, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[(unique, 0x10002148, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1d12, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1d11, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10002340, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1d12, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x1de72f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x1de74e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de760, 8), (register, 0x20, 8) CAST (unique, 0x10003512, 8), (unique, 0x10003512, 8) INT_ADD (unique, 0x1000350a, 8) , (unique, 0x10001a9b, 8), (unique, 0x1000350a, 8) CAST (register, 0x20, 8), (unique, 0x10001a9b, 8) INT_ADD (unique, 0x100005ab, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1cf0, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1cf0, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1cf0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1cef, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1cf0, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1cef, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1cf0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1cef, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1cf0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1cef, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1cf0, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1cef, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1cf0, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1cef, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1cf0, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1cf0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1cef, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1cf0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1cef, 4)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x1000351a, 8) , (unique, 0x10003522, 8) , (register, 0xb8, 8), (unique, 0x10003522, 8) CAST (unique, 0x10001d50, 8), (unique, 0x1000351a, 8) CAST (register, 0x18, 8)]
[(unique, 0x10002130, 8) COPY (register, 0xa0, 8)]
[(unique, 0x10002328, 8) COPY (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dcdc4, 1)]
[(unique, 0x3100, 8) INT_SUB (register, 0xb8, 8) , (const, 0x1, 8)]
[(unique, 0x10002128, 8) COPY (register, 0xa0, 8)]
[(unique, 0x10002320, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dcdc4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0xa0, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcda8, 8), (register, 0x20, 8) CAST (unique, 0x10003542, 8), (unique, 0x10003542, 8) INT_ADD (unique, 0x1000353a, 8) , (unique, 0x10001aa3, 8), (unique, 0x1000353a, 8) CAST (register, 0x20, 8), (unique, 0x10001aa3, 8) INT_ADD (unique, 0x100005ab, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1cc6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1cc6, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1cc5, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1cc6, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1cc5, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1cc6, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1cc5, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1cc6, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1cc5, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1cc6, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1cc5, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1cc6, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1cc5, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1cc6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1cc5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1cca, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1cc6, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x10003552, 8), (unique, 0x10003552, 8) INT_ADD (unique, 0x1000354a, 8) , (unique, 0x3300, 8), (unique, 0x1000354a, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001d90, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10003532, 8), (unique, 0x10003532, 8) INT_ADD (unique, 0x1000352a, 8) , (unique, 0x3300, 8), (unique, 0x1000352a, 8) CAST (unique, 0x10001d50, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[(unique, 0x10002140, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1cc6, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1cc5, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10002338, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1cc6, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1cc5, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x1dcd9c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x10002320, 8) , (unique, 0x10002328, 8) , (unique, 0x10002330, 8) , (unique, 0x10002338, 8) , (unique, 0x10002340, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10002128, 8) , (unique, 0x10002130, 8) , (unique, 0x10002138, 8) , (unique, 0x10002140, 8) , (unique, 0x10002148, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10003562, 8), (unique, 0x10003562, 8) INT_ADD (unique, 0x1000355a, 8) , (unique, 0x3300, 8), (unique, 0x1000355a, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8)]
[(unique, 0x10001fb0, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x1dc77a, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003572, 8), (unique, 0x10003572, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000356a, 8), (unique, 0x1000356a, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd5d2, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(unique, 0x10002444, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1dd5e6, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x1000357a, 4), (unique, 0x1000357a, 4) CAST (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (stack, 0xfffffffffffffed0, 4) , (register, 0x98, 4)]
[(unique, 0x10002448, 4) COPY (register, 0x98, 4)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x10002444, 4) , (unique, 0x10002448, 4)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10003596, 8), (unique, 0x10003596, 8) INT_OR (unique, 0x10001546, 8) , (unique, 0x1000154e, 8), (unique, 0x1000154e, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10001546, 8) INT_AND (unique, 0x1000358e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000358e, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003586, 8), (unique, 0x10003586, 8) INT_ADD (unique, 0x1000357e, 8) , (const, 0x14, 8), (unique, 0x1000357e, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(register, 0xa8, 8) INT_ZEXT (unique, 0x3200, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x76c, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003586, 8), (unique, 0x10003586, 8) INT_ADD (unique, 0x1000357e, 8) , (const, 0x14, 8), (unique, 0x1000357e, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100035a6, 8), (unique, 0x100035a6, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000359e, 8), (unique, 0x1000359e, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd59c, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8) , (unique, 0x3100, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100035ae, 8), (unique, 0x100035ae, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (const, 0x330, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100035be, 8), (unique, 0x100035be, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100035b6, 8), (unique, 0x100035b6, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd50d, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100024e0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd527, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x100035c6, 4), (unique, 0x100035c6, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024e4, 4) COPY (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x100035da, 8), (unique, 0x100035da, 8) INT_OR (unique, 0x10001514, 8) , (unique, 0x1000151c, 8), (unique, 0x1000151c, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10001514, 8) INT_AND (unique, 0x100035d2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100035d2, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100035ca, 8), (unique, 0x100035ca, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x38, 8) INT_ZEXT (unique, 0x100035f2, 4), (unique, 0x100035f2, 4) CAST (unique, 0x10001908, 4), (unique, 0x10001908, 4) INT_SDIV (unique, 0x3a00, 4) , (const, 0x7, 4), (unique, 0x3a00, 4) INT_ADD (unique, 0x3880, 4) , (unique, 0xbc80, 4), (unique, 0x3880, 4) INT_ADD (register, 0x0, 4) , (const, 0x7, 4), (register, 0x0, 4) INT_SUB (unique, 0x100011aa, 4) , (unique, 0x3100, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100035ea, 8), (unique, 0x100035ea, 8) INT_ADD (unique, 0x100035e2, 8) , (const, 0x1c, 8), (unique, 0x100035e2, 8) CAST (stack, 0xffffffffffffff10, 8), (unique, 0x100011aa, 4) INT_MULT (unique, 0x10001900, 4) , (const, 0x7, 4), (unique, 0x10001900, 4) INT_SDIV (unique, 0x3100, 4) , (const, 0x7, 4), (unique, 0x3100, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x6, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100035ca, 8), (unique, 0x100035ca, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(unique, 0x1000247c, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100024e0, 4) , (unique, 0x100024e4, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100035fe, 8), (unique, 0x100035fe, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100035f6, 8), (unique, 0x100035f6, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd4b6, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100024d8, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd4cb, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x10003606, 4), (unique, 0x10003606, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024dc, 4) COPY (register, 0x98, 4)]
[(register, 0x38, 8) INT_ZEXT (unique, 0x10003622, 4), (unique, 0x10003622, 4) CAST (unique, 0x100018f8, 4), (unique, 0x100018f8, 4) INT_SDIV (register, 0x30, 4) , (const, 0x7, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x7, 4), (register, 0x30, 4) INT_SUB (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000361a, 8), (unique, 0x1000361a, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003612, 8), (unique, 0x10003612, 8) INT_ADD (unique, 0x1000360a, 8) , (const, 0x1c, 8), (unique, 0x1000360a, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(unique, 0x10002480, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100024d8, 4) , (unique, 0x100024dc, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0xb8, 8) CAST (unique, 0x10003626, 8), (unique, 0x10003626, 8) PTRSUB (const, 0x0, 8) , (const, 0x2bc998, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003636, 8), (unique, 0x10003636, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000362e, 8), (unique, 0x1000362e, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003646, 8), (unique, 0x10003646, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000363e, 8), (unique, 0x1000363e, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd420, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100024d0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd435, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x1000364e, 4), (unique, 0x1000364e, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024d4, 4) COPY (register, 0x98, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003652, 8), (unique, 0x10003652, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10002484, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100024d0, 4) , (unique, 0x100024d4, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0xb8, 8) CAST (unique, 0x1000365a, 8), (unique, 0x1000365a, 8) PTRSUB (const, 0x0, 8) , (const, 0x2bc754, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000366a, 8), (unique, 0x1000366a, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10003662, 8), (unique, 0x10003662, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x0, 4) COPY (const, 0x1, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1de283, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x10003672, 8), (unique, 0x10003672, 8) INT_LEFT (unique, 0x10001722, 8) , (const, 0x20, 4), (unique, 0x10001722, 8) INT_ZEXT (stack, 0xffffffffffffff0c, 4)]
[(unique, 0x10002568, 4) COPY (register, 0x88, 4)]
[ ---  BRANCH (ram, 0x1dc651, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc69b, 8), (register, 0x20, 8) CAST (unique, 0x100036da, 8), (unique, 0x100036da, 8) INT_ADD (unique, 0x100036d2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100036d2, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xff0, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xff0, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xff0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xfef, 4), (stack, 0xfffffffffffffec8, 8) CAST (unique, 0x100036a2, 8), (unique, 0x100036a2, 8) INT_OR (unique, 0x10001313, 8) , (register, 0x90, 8), (unique, 0x10001313, 8) INT_AND (unique, 0x1000369a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000369a, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xff0, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xfef, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10003692, 8), (unique, 0x10003692, 8) INT_OR (unique, 0x10001303, 8) , (unique, 0x1000130b, 8), (unique, 0x1000130b, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10001303, 8) INT_AND (unique, 0x1000368a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000368a, 8) CAST (stack, 0xfffffffffffffed0, 8), (register, 0x88, 4) MULTIEQUAL (unique, 0x10002568, 4) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xff0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xfef, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x100036ba, 8), (unique, 0x100036ba, 8) INT_OR (unique, 0x10001323, 8) , (unique, 0x1000132b, 8), (unique, 0x1000132b, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10001323, 8) INT_AND (unique, 0x100036b2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100036b2, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100036aa, 8), (unique, 0x100036aa, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xff0, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xfef, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xff0, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xfef, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xff0, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xff0, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xff0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xfef, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xff0, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xff0, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xff0, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xff0, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xff0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xff0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xfef, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xff0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfef, 4)]
[(unique, 0x10002398, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dc6ac, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xfffffffffffffee0, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffee0, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121090, 8) , (unique, 0xbd80, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xff0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xfef, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100036ca, 8), (unique, 0x100036ca, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001c86, 8) , (const, 0x1, 8), (unique, 0x10001c86, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100036c6, 4), (unique, 0x100036c6, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x5a, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0xb, 4) , (unique, 0x100036c2, 4), (unique, 0x100036c2, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100036aa, 8), (unique, 0x100036aa, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (stack, 0xfffffffffffffee0, 8) CAST (unique, 0x10003682, 8), (unique, 0x10003682, 8) INT_OR (unique, 0x100012f3, 8) , (unique, 0x100012fb, 8), (unique, 0x100012fb, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x100012f3, 8) INT_AND (unique, 0x1000367a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000367a, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x1000239c, 4) COPY (register, 0x98, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x100036ea, 8), (unique, 0x100036ea, 8) CAST (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x100036e2, 8), (unique, 0x100036e2, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (register, 0x0, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x10002398, 4) , (unique, 0x1000239c, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) CAST (unique, 0x100036fa, 8), (unique, 0x100036fa, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100036f2, 8), (unique, 0x100036f2, 8) CAST (register, 0xb0, 8), (register, 0x30, 8) CAST (unique, 0x100036e2, 8), (unique, 0x100036e2, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (register, 0x0, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x10002398, 4) , (unique, 0x1000239c, 4)]
[(unique, 0x10001f98, 8) COPY (unique, 0x10003702, 8), (unique, 0x10003702, 8) CAST (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1dc77a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8)]
[(unique, 0x10001f58, 8) COPY (register, 0x18, 8)]
[(unique, 0x100023a0, 4) COPY (stack, 0xfffffffffffffed8, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1dc728, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x1000371a, 8), (unique, 0x1000371a, 8) INT_OR (unique, 0x10001336, 8) , (unique, 0x1000133e, 8), (unique, 0x1000133e, 8) INT_AND (unique, 0x10003712, 8) , (const, 0xffffffff, 8), (unique, 0x10003712, 8) CAST (stack, 0xfffffffffffffed0, 8), (unique, 0x10001336, 8) INT_AND (unique, 0x1000370a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000370a, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x1000372a, 8), (unique, 0x1000372a, 8) INT_ADD (unique, 0x10003722, 8) , (unique, 0x3300, 8), (unique, 0x10003722, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[(register, 0x30, 4) COPY (const, 0x30, 4)]
[ ---  CBRANCH (ram, 0x1dc70c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffec8, 4) , (const, 0x30, 4), (stack, 0xfffffffffffffec8, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 8)]
[(register, 0x30, 4) COPY (const, 0x20, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc717, 8), (register, 0x20, 8) CAST (unique, 0x1000373a, 8), (unique, 0x1000373a, 8) INT_ADD (unique, 0x10003732, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003732, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1063, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1063, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1063, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1062, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1063, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1062, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1063, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1062, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1063, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1062, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1063, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1062, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1063, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1063, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1063, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1063, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1063, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1063, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1063, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1063, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1063, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1062, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003742, 8) , (register, 0x30, 4) , (register, 0x10, 8), (unique, 0x10003742, 8) CAST (register, 0x18, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000374a, 8), (unique, 0x1000374a, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1063, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1062, 4)]
[(unique, 0x1000243c, 4) COPY (stack, 0xfffffffffffffed8, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1063, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1062, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 4) MULTIEQUAL (unique, 0x100023a0, 4) , (unique, 0xbc80, 4)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001f58, 8) , (unique, 0x3400, 8)]
[(unique, 0x10001d78, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003752, 8), (unique, 0x10003752, 8) INT_SEXT (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1de2f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (unique, 0x1000243c, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000375e, 8), (unique, 0x1000375e, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001ce6, 8) , (const, 0x1, 8), (unique, 0x10001ce6, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0x1000375a, 4), (unique, 0x1000375a, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (unique, 0x10000dcb, 4) , (const, 0x5a, 4), (unique, 0x10000dcb, 4) INT_ZEXT (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0xb, 4) , (register, 0x30, 4)]
[(unique, 0x3100, 8) INT_ADD (unique, 0x10003766, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10003766, 8) CAST (register, 0x0, 8)]
[(unique, 0x10002160, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1dc776, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de34c, 8), (register, 0x20, 8) CAST (unique, 0x1000377e, 8), (unique, 0x1000377e, 8) INT_ADD (unique, 0x10003776, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003776, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1184, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1184, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1184, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1184, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1184, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1184, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1184, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1184, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1184, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1183, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1184, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1183, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1184, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1183, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1184, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1183, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1184, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1183, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1184, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1183, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1184, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1183, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1184, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1183, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1188, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1184, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x1000378e, 8), (unique, 0x1000378e, 8) INT_ADD (unique, 0x10003786, 8) , (unique, 0x3300, 8), (unique, 0x10003786, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225e50, 8) , (unique, 0xbc80, 4) , (unique, 0x10001d78, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000376e, 8), (unique, 0x1000376e, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(unique, 0x10002168, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1184, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1183, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  CBRANCH (ram, 0x1de340, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x1de460, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000379a, 8), (unique, 0x1000379a, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cee, 8) , (const, 0x1, 8), (unique, 0x10001cee, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10003796, 4), (unique, 0x10003796, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (unique, 0x10000e58, 4) , (const, 0x5a, 4), (unique, 0x10000e58, 4) INT_ZEXT (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0xb, 4) , (register, 0x30, 4)]
[(unique, 0x3100, 8) INT_ADD (unique, 0x100037a2, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x100037a2, 8) CAST (register, 0x0, 8)]
[(unique, 0x10002158, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1dc776, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de4ad, 8), (register, 0x20, 8) CAST (unique, 0x100037ba, 8), (unique, 0x100037ba, 8) INT_ADD (unique, 0x100037b2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100037b2, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1119, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1118, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1118, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1118, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1118, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1118, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1118, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1118, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1119, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1118, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1119, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1118, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1119, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1118, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1119, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1118, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1119, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1118, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1119, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1118, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1119, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1118, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1119, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1118, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x111d, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x1119, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x100037ca, 8), (unique, 0x100037ca, 8) INT_ADD (unique, 0x100037c2, 8) , (unique, 0x3300, 8), (unique, 0x100037c2, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001d78, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100037aa, 8), (unique, 0x100037aa, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[(unique, 0x10002170, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1119, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1118, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  CBRANCH (ram, 0x1de4a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc76f, 8), (register, 0x20, 8) CAST (unique, 0x100037e6, 8), (unique, 0x100037e6, 8) INT_ADD (unique, 0x100037de, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100037de, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10bb, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x10bb, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x10bb, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x10ba, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x10bb, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x10ba, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x10bb, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x10ba, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x10bb, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x10ba, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x10bb, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x10ba, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x10bb, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x10ba, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x10bb, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x10bb, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x10bb, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x10bb, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x10bb, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x10bb, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x10bb, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x10bb, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x10bb, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x10ba, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10bb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10ba, 4)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x100037ee, 8) , (unique, 0xbd80, 8) , (unique, 0x100037f6, 8), (unique, 0x100037f6, 8) CAST (register, 0x0, 8), (unique, 0x100037ee, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100037d6, 8), (unique, 0x100037d6, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001c8e, 8) , (const, 0x1, 8), (unique, 0x10001c8e, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100037d2, 4), (unique, 0x100037d2, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (unique, 0x10000454, 4) , (const, 0x5a, 4), (unique, 0x10000454, 4) INT_ZEXT (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0xb, 4) , (register, 0x30, 4)]
[(unique, 0x10002150, 8) COPY (register, 0xa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10002150, 8) , (unique, 0x10002158, 8) , (unique, 0x10002160, 8) , (unique, 0x10002168, 8) , (unique, 0x10002170, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x1000380e, 8), (unique, 0x1000380e, 8) INT_ADD (unique, 0x10003806, 8) , (unique, 0x3300, 8), (unique, 0x10003806, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x100037fe, 8) , (const, 0x4, 8), (unique, 0x100037fe, 8) CAST (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0xb0, 8) CAST (unique, 0x10003826, 8), (unique, 0x10003826, 8) INT_ADD (unique, 0x10003816, 8) , (unique, 0x1000381e, 8), (unique, 0x1000381e, 8) CAST (stack, 0xfffffffffffffee0, 8), (unique, 0x10003816, 8) CAST (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10001f18, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0x3400, 8) , (register, 0x18, 8) , (unique, 0x3400, 8)]
[(unique, 0x10001fe0, 8) COPY (unique, 0x1000382e, 8), (unique, 0x1000382e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001f98, 8) , (unique, 0x10001f98, 8) , (unique, 0x10001fa8, 8) , (unique, 0x10001fb0, 8)]
[ ---  BRANCH (ram, 0x1dc331, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000383e, 8), (unique, 0x1000383e, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10003836, 8), (unique, 0x10003836, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd45c, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100024c8, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd471, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x10003846, 4), (unique, 0x10003846, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024cc, 4) COPY (register, 0x98, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003852, 8), (unique, 0x10003852, 8) INT_ADD (unique, 0x1000384a, 8) , (const, 0x4, 8), (unique, 0x1000384a, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10002488, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100024c8, 4) , (unique, 0x100024cc, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003862, 8), (unique, 0x10003862, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000385a, 8), (unique, 0x1000385a, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd3ca, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x38, 8) INT_ZEXT (stack, 0xffffffffffffff1c, 4)]
[(unique, 0x100024c0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd3de, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x1000386a, 4), (unique, 0x1000386a, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024c4, 4) COPY (register, 0x98, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(unique, 0x1000248c, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100024c0, 4) , (unique, 0x100024c4, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003876, 8), (unique, 0x10003876, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000386e, 8), (unique, 0x1000386e, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd38d, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100024b8, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd3a2, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x1000387e, 4), (unique, 0x1000387e, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024bc, 4) COPY (register, 0x98, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003882, 8), (unique, 0x10003882, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10002490, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100024b8, 4) , (unique, 0x100024bc, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003892, 8), (unique, 0x10003892, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000388a, 8), (unique, 0x1000388a, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd216, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0x30, 4) MULTIEQUAL (unique, 0x10002430, 4) , (register, 0x8, 4)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100038ba, 8), (unique, 0x100038ba, 8) INT_ADD (unique, 0x100038b2, 8) , (const, 0x14, 8), (unique, 0x100038b2, 8) CAST (stack, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x1de4c0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x3a00, 4) , (const, 0x0, 4), (unique, 0x3a00, 4) INT_ADD (unique, 0x3880, 4) , (unique, 0x10001192, 4), (unique, 0x3880, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (register, 0x38, 4), (unique, 0x10001192, 4) INT_MULT (unique, 0x1000118a, 4) , (const, 0x7, 4), (unique, 0x1000118a, 4) INT_SDIV (register, 0x38, 4) , (const, 0x7, 4), (register, 0x38, 4) INT_ADD (register, 0x38, 4) , (const, 0x17e, 4), (register, 0x38, 4) INT_SUB (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100038aa, 8), (unique, 0x100038aa, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100038a2, 8), (unique, 0x100038a2, 8) INT_ADD (unique, 0x1000389a, 8) , (const, 0x1c, 8), (unique, 0x1000389a, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(register, 0x38, 8) INT_ZEXT (unique, 0x3200, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x76b, 4)]
[(register, 0x10, 4) COPY (const, 0x16d, 4)]
[ ---  CBRANCH (ram, 0x1de50c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10001126, 4) , (const, 0x0, 4), (unique, 0x10001126, 4) INT_AND (unique, 0x3200, 4) , (const, 0x3, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x76b, 4)]
[(register, 0x10, 4) COPY (const, 0x16e, 4)]
[ ---  CBRANCH (ram, 0x1de50c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3200, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_MULT (unique, 0x10001206, 4) , (const, 0x64, 4), (unique, 0x10001206, 4) INT_SDIV (unique, 0x100038c2, 4) , (const, 0x64, 4), (unique, 0x100038c2, 4) CAST (unique, 0x3200, 4)]
[(register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x16e, 4), (register, 0x10, 4) INT_NEGATE (unique, 0x10000ea0, 4), (unique, 0x10000ea0, 4) INT_2COMP (unique, 0x12600, 4), (unique, 0x12600, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1000112a, 4) , (const, 0x0, 4), (unique, 0x1000112a, 4) INT_SREM (unique, 0x100038c6, 4) , (const, 0x190, 4), (unique, 0x100038c6, 4) CAST (unique, 0x3200, 4)]
[(register, 0x80, 4) INT_ADD (unique, 0x10000eb4, 4) , (unique, 0x100011f6, 4), (unique, 0x10000eb4, 4) INT_ADD (register, 0x88, 4) , (const, 0x3, 4), (unique, 0x100011f6, 4) INT_MULT (unique, 0x100011ee, 4) , (const, 0x7, 4), (unique, 0x100011ee, 4) INT_SDIV (register, 0x80, 4) , (const, 0x7, 4), (register, 0x88, 4) INT_SUB (register, 0x88, 4) , (register, 0x80, 4), (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x17e, 4), (register, 0x80, 4) INT_SUB (register, 0x88, 4) , (unique, 0xbc80, 4), (register, 0x88, 4) INT_ADD (unique, 0xbc80, 4) , (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  BRANCH (ram, 0x1dd317, 1)]
[(register, 0x38, 8) INT_ZEXT (unique, 0x3200, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x76c, 4)]
[(register, 0x0, 4) COPY (const, 0x16d, 4)]
[ ---  CBRANCH (ram, 0x1dd2c6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100010ba, 4) , (const, 0x0, 4), (unique, 0x100010ba, 4) INT_AND (unique, 0x3200, 4) , (const, 0x3, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x76c, 4)]
[(stack, 0xfffffffffffffed0, 8) CAST (unique, 0x100038da, 8), (unique, 0x100038da, 8) INT_OR (unique, 0x100014b5, 8) , (unique, 0x100014bd, 8), (unique, 0x100014bd, 8) INT_ZEXT (unique, 0x100038d6, 4), (unique, 0x100038d6, 4) CAST (register, 0x0, 4), (unique, 0x100014b5, 8) INT_AND (unique, 0x100038ce, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100038ce, 8) CAST (stack, 0xfffffffffffffed0, 8), (register, 0x0, 4) INT_SRIGHT (unique, 0x100038ca, 4) , (const, 0x1f, 4), (unique, 0x100038ca, 4) CAST (unique, 0x3200, 4)]
[(unique, 0x100014c5, 8) CAST (unique, 0x100038ea, 8), (unique, 0x100038ea, 8) INT_AND (unique, 0x100038e2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100038e2, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(register, 0x0, 4) COPY (const, 0x16e, 4)]
[ ---  CBRANCH (ram, 0x1dd2c6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3200, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_MULT (unique, 0x10001196, 4) , (const, 0x64, 4), (unique, 0x10001196, 4) INT_SDIV (unique, 0x100038f2, 4) , (const, 0x64, 4), (unique, 0x100038f2, 4) CAST (unique, 0x3200, 4)]
[(register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x16d, 4), (register, 0x0, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3200, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_MULT (unique, 0x100019ea, 4) , (const, 0x190, 4), (unique, 0x100019ea, 4) INT_SDIV (unique, 0x100038f6, 4) , (const, 0x190, 4), (unique, 0x100038f6, 4) CAST (unique, 0x3200, 4)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10003902, 8), (unique, 0x10003902, 8) INT_OR (unique, 0x100014d6, 8) , (unique, 0x100014de, 8), (unique, 0x100014de, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100014d6, 8) INT_AND (unique, 0x100038fa, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100038fa, 8) CAST (stack, 0xfffffffffffffed8, 8), (register, 0x88, 4) INT_SUB (unique, 0xbc80, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (unique, 0x100014c5, 8) , (unique, 0x100014c5, 8)]
[(unique, 0x10002558, 4) COPY (unique, 0x3a00, 4)]
[ ---  CBRANCH (ram, 0x1dd317, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ADD (unique, 0x1000075f, 4) , (unique, 0x1000119e, 4), (unique, 0x1000075f, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_SUB (register, 0x88, 4) , (register, 0x88, 4), (unique, 0x1000119e, 4) INT_MULT (unique, 0x100018e8, 4) , (const, 0x7, 4), (unique, 0x100018e8, 4) INT_SDIV (register, 0x88, 4) , (const, 0x7, 4), (register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0x17e, 4), (register, 0x88, 4) INT_SUB (register, 0x88, 4) , (unique, 0xbc80, 4), (register, 0x88, 4) INT_SUB (unique, 0xbc80, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x38, 8) INT_ZEXT (unique, 0x3200, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x76d, 4)]
[(unique, 0x1000255c, 4) COPY (register, 0x0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(register, 0x80, 4) MULTIEQUAL (unique, 0x10002558, 4) , (unique, 0x1000255c, 4) , (register, 0x80, 4)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1de672, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x47, 4)]
[(unique, 0x100024a0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1de67f, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x1000390a, 4), (unique, 0x1000390a, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024a4, 4) COPY (register, 0x98, 4)]
[(unique, 0x100024f0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1dd334, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x1000390e, 4), (unique, 0x1000390e, 4) CAST (register, 0x98, 4)]
[(unique, 0x100024f4, 4) COPY (register, 0x98, 4)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x100024f0, 4) , (unique, 0x100024f4, 4)]
[ ---  CBRANCH (ram, 0x1de652, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x67, 4)]
[(register, 0x38, 8) INT_ZEXT (register, 0x38, 4), (register, 0x38, 4) INT_ADD (unique, 0x1000192c, 4) , (const, 0x1, 4), (unique, 0x1000192c, 4) INT_SDIV (register, 0x80, 4) , (const, 0x7, 4)]
[(unique, 0x10002474, 4) COPY (register, 0xb8, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(register, 0x38, 8) INT_ZEXT (register, 0x80, 4), (register, 0x80, 4) INT_REM (unique, 0x3100, 4) , (const, 0x64, 4), (unique, 0x3100, 4) INT_ADD (register, 0x38, 4) , (const, 0x64, 4), (register, 0x38, 4) INT_SREM (register, 0x38, 4) , (const, 0x64, 4), (register, 0x38, 4) SUBPIECE (register, 0x38, 8) , (const, 0x0, 4)]
[(unique, 0x10002470, 4) COPY (register, 0xb8, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000391a, 8), (unique, 0x1000391a, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10003912, 8), (unique, 0x10003912, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd1f0, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0xb8, 8) CAST (unique, 0x10003922, 8), (unique, 0x10003922, 8) PTRSUB (const, 0x0, 8) , (const, 0x2bca50, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003932, 8), (unique, 0x10003932, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000392a, 8), (unique, 0x1000392a, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd789, 1)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0xb8, 8) CAST (unique, 0x1000393a, 8), (unique, 0x1000393a, 8) PTRSUB (const, 0x0, 8) , (const, 0x2bc970, 8)]
[ ---  BRANCH (ram, 0x1dce78, 1)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0x3100, 8) , (register, 0xa0, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (register, 0xa0, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dceac, 8), (register, 0x20, 8) CAST (unique, 0x1000396a, 8), (unique, 0x1000396a, 8) INT_ADD (unique, 0x10003962, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003962, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb9e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xb9e, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xb9e, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xb9d, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xb9e, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xb9d, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x1000395a, 8), (unique, 0x1000395a, 8) INT_OR (unique, 0x10001462, 8) , (unique, 0x1000146a, 8), (unique, 0x1000146a, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10001462, 8) INT_AND (unique, 0x10003952, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003952, 8) CAST (stack, 0xfffffffffffffed0, 8), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xb9e, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xb9d, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb9e, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb9d, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb9e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb9d, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xb9e, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xb9d, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb9e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb9d, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb9e, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb9d, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb9e, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb9d, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb9e, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb9d, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb9e, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb9d, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xb9e, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xb9d, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb9e, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb9d, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xb9e, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xb9d, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb9e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb9d, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100023dc, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dcec2, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xfffffffffffffed8, 4) , (register, 0x0, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (register, 0x0, 4) CALL (ram, 0x1dc280, 8) , (const, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (register, 0xb8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xb9e, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xb9d, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x1000394a, 8), (unique, 0x1000394a, 8) INT_OR (unique, 0x10001452, 8) , (unique, 0x1000145a, 8), (unique, 0x1000145a, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x10001452, 8) INT_AND (unique, 0x10003942, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003942, 8) CAST (stack, 0xfffffffffffffed8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (unique, 0xbd80, 8) , (register, 0xb8, 8), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (stack, 0xfffffffffffffed0, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x100023e0, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003972, 8), (unique, 0x10003972, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x100023dc, 4) , (unique, 0x100023e0, 4)]
[(register, 0xb0, 8) CAST (unique, 0x1000398a, 8), (unique, 0x1000398a, 8) INT_ADD (unique, 0x1000397a, 8) , (unique, 0x10003982, 8), (unique, 0x10003982, 8) CAST (register, 0x0, 8), (unique, 0x1000397a, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10001fd8, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1dc331, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dcf18, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000399a, 8), (unique, 0x1000399a, 8) INT_ADD (unique, 0x10003992, 8) , (unique, 0x3300, 8), (unique, 0x10003992, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1de2e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed0, 4) , (const, 0x30, 4), (stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de2f3, 8), (register, 0x20, 8) CAST (unique, 0x100039aa, 8), (unique, 0x100039aa, 8) INT_ADD (unique, 0x100039a2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100039a2, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc67, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xc67, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc67, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc66, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc67, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc66, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc67, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc66, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc67, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc66, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc67, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc66, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc67, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc66, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc67, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc67, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc67, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc67, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc67, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc67, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc67, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc67, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc67, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc66, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc67, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc66, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x100039b2, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x100039b2, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x1dcf18, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcf18, 8), (register, 0x20, 8) CAST (unique, 0x100039c2, 8), (unique, 0x100039c2, 8) INT_ADD (unique, 0x100039ba, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100039ba, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc09, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xc09, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc09, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc09, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc09, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc09, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc09, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc09, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc09, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc09, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc09, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc09, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc09, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc09, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc09, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc09, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc09, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc09, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc08, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x100039ca, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x100039ca, 8) CAST (register, 0x18, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100039e2, 8), (unique, 0x100039e2, 8) INT_ADD (unique, 0x100039da, 8) , (unique, 0x3300, 8), (unique, 0x100039da, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0xa8, 8) INT_SEXT (register, 0x0, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcf4d, 8), (register, 0x20, 8) CAST (unique, 0x100039f2, 8), (unique, 0x100039f2, 8) INT_ADD (unique, 0x100039ea, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100039ea, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc21, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xc21, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc21, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc20, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc21, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc20, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc21, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc20, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc21, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc20, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc21, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc20, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc21, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc20, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc21, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc20, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc21, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc20, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc21, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc20, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc21, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc20, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc21, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc20, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc21, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc20, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc21, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc20, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc21, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc20, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1dc280, 8) , (unique, 0x10001d58, 8) , (unique, 0x10001d68, 8) , (register, 0xb8, 8), (unique, 0x10001d58, 8) COPY (stack, 0xfffffffffffffed8, 8), (unique, 0x10001d68, 8) COPY (unique, 0x100039d2, 8), (unique, 0x100039d2, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10001d98, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc21, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc20, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[ ---  CBRANCH (ram, 0x1de292, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff08, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc21, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc20, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10001bbc, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001bc4, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(unique, 0x10001bcc, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x10001bd4, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(unique, 0x10001bdc, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x10001be4, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10001bec, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x10001bf4, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(unique, 0x10001bfc, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x10001c04, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10001c0c, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10001c14, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10001c1c, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(unique, 0x10001c20, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(unique, 0x10001c24, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(unique, 0x10001c2c, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(unique, 0x10001c34, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(unique, 0x10001c38, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(unique, 0x10001c3c, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(unique, 0x10001c40, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(unique, 0x10001c44, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(unique, 0x10001c48, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(unique, 0x10001c4c, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(unique, 0x10001c50, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(unique, 0x10001c54, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(unique, 0x10001c58, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(unique, 0x10001c5c, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x10001c64, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x10001c6c, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1dcf5b, 1) , (unique, 0x10001bb3, 1), (unique, 0x10001bb3, 1) INT_LESS (unique, 0x10001bb4, 8) , (unique, 0x3400, 8), (unique, 0x10001bb4, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de2b6, 8), (register, 0x20, 8) CAST (unique, 0x10003a0a, 8), (unique, 0x10003a0a, 8) INT_ADD (unique, 0x10003a02, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003a02, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10001bbc, 8) , (const, 0xc52, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc52, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (unique, 0x10001bcc, 8) , (const, 0xc51, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc52, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (unique, 0x10001bd4, 8) , (const, 0xc51, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc52, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x10001bdc, 8) , (const, 0xc51, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc52, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x10001be4, 8) , (const, 0xc51, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc52, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10001bec, 8) , (const, 0xc51, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc52, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10001bf4, 8) , (const, 0xc51, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc52, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10001bfc, 8) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc52, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x10001c04, 8) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc52, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x10001c0c, 8) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc52, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x10001c14, 8) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (unique, 0x10001c1c, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (unique, 0x10001c20, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc52, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x10001c24, 8) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc52, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x10001c2c, 8) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (unique, 0x10001c34, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (unique, 0x10001c38, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (unique, 0x10001c3c, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (unique, 0x10001c40, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (unique, 0x10001c44, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (unique, 0x10001c48, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (unique, 0x10001c4c, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (unique, 0x10001c50, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (unique, 0x10001c54, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc52, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (unique, 0x10001c58, 4) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc52, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x10001c5c, 8) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc52, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10001c64, 8) , (const, 0xc51, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc52, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10001c6c, 8) , (const, 0xc51, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xc55, 4), (ram, 0x4eae40, 8) INDIRECT (unique, 0x10001bc4, 8) , (const, 0xc52, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003a12, 8) , (register, 0x0, 4), (unique, 0x10003a12, 8) CAST (unique, 0x10001bb4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001d98, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100039fa, 8), (unique, 0x100039fa, 8) CAST (unique, 0x10001bb4, 8)]
[(register, 0x18, 8) CAST (unique, 0x10003a22, 8), (unique, 0x10003a22, 8) INT_ADD (unique, 0x10003a1a, 8) , (const, 0x4, 8), (unique, 0x10003a1a, 8) CAST (unique, 0x10001bb4, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003a32, 8), (unique, 0x10003a32, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10003a2a, 8), (unique, 0x10003a2a, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dd6c9, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100024a8, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1dd6e2, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10003a3a, 4), (unique, 0x10003a3a, 4) CAST (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (stack, 0xfffffffffffffed0, 4) , (register, 0x98, 4)]
[(unique, 0x100024ac, 4) COPY (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10003a56, 8), (unique, 0x10003a56, 8) INT_OR (unique, 0x10001561, 8) , (unique, 0x10001569, 8), (unique, 0x10001569, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10001561, 8) INT_AND (unique, 0x10003a4e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003a4e, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003a46, 8), (unique, 0x10003a46, 8) INT_ADD (unique, 0x10003a3e, 8) , (const, 0x14, 8), (unique, 0x10003a3e, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(register, 0x38, 8) INT_ZEXT (unique, 0x10003a5e, 4), (unique, 0x10003a5e, 4) CAST (register, 0x38, 4), (register, 0x38, 4) INT_ADD (unique, 0x1000191c, 4) , (unique, 0x10001202, 4), (unique, 0x10001202, 4) INT_SRIGHT (register, 0x30, 4) , (const, 0x1f, 4), (register, 0x30, 4) INT_SREM (unique, 0x3200, 4) , (const, 0x64, 4), (unique, 0x1000191c, 4) INT_SDIV (unique, 0x3200, 4) , (const, 0x64, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x76c, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003a46, 8), (unique, 0x10003a46, 8) INT_ADD (unique, 0x10003a3e, 8) , (const, 0x14, 8), (unique, 0x10003a3e, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x4f, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(unique, 0x10002494, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100024a8, 4) , (unique, 0x100024ac, 4)]
[ ---  BRANCH (ram, 0x1dcab0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x10002454, 4) , (unique, 0x10002458, 4) , (unique, 0x1000245c, 4) , (unique, 0x10002460, 4) , (unique, 0x10002464, 4) , (unique, 0x10002468, 4) , (unique, 0x1000246c, 4) , (unique, 0x10002470, 4) , (unique, 0x10002474, 4) , (unique, 0x10002478, 4) , (unique, 0x1000247c, 4) , (unique, 0x10002480, 4) , (unique, 0x10002484, 4) , (unique, 0x10002488, 4) , (unique, 0x1000248c, 4) , (unique, 0x10002490, 4) , (unique, 0x10002494, 4) , (unique, 0x10002498, 4) , (unique, 0x1000249c, 4) , (unique, 0x100024a0, 4) , (unique, 0x100024a4, 4)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x100019e6, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (unique, 0x100019e8, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x1dd600, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4), (register, 0x38, 4) SUBPIECE (register, 0x38, 8) , (const, 0x0, 4), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1dd600, 1) , (unique, 0x100019e7, 1), (unique, 0x100019e7, 1) BOOL_NEGATE (unique, 0x100019e6, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (unique, 0x3100, 8) , (register, 0xa0, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4) , (stack, 0xfffffffffffffed0, 4) , (register, 0x98, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x30, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dd610, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4), (register, 0x38, 4) SUBPIECE (register, 0xa8, 8) , (const, 0x0, 4), (register, 0xa8, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0x30, 4) COPY (const, 0x1, 4)]
[(register, 0xa8, 8) INT_ZEXT (unique, 0x10003a62, 4), (unique, 0x10003a62, 4) CAST (register, 0x38, 4), (register, 0x38, 4) INT_2COMP (register, 0x38, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcadd, 8), (register, 0x20, 8) CAST (unique, 0x10003a8e, 8), (unique, 0x10003a8e, 8) INT_ADD (unique, 0x10003a86, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003a86, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x56a, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x56a, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x56a, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x569, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x56a, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x569, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10003a7e, 8), (unique, 0x10003a7e, 8) INT_OR (unique, 0x100013f4, 8) , (register, 0x90, 8), (unique, 0x100013f4, 8) INT_AND (unique, 0x10003a76, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003a76, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x56a, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x569, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x56a, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x569, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x56a, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x569, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x56a, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x56a, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x56a, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x56a, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x56a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x56a, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x56a, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x56a, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x569, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x56a, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x569, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x56a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x569, 4)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x56a, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x569, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10003a6e, 8), (unique, 0x10003a6e, 8) INT_OR (unique, 0x100013e4, 8) , (unique, 0x100013ec, 8), (unique, 0x100013ec, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x100013e4, 8) INT_AND (unique, 0x10003a66, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003a66, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[ ---  CBRANCH (ram, 0x1de180, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003a96, 8), (unique, 0x10003a96, 8) CALL (ram, 0x1df330, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcb03, 8), (register, 0x20, 8) CAST (unique, 0x10003aa6, 8), (unique, 0x10003aa6, 8) INT_ADD (unique, 0x10003a9e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003a9e, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x583, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x583, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x583, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffec8, 8) COPY (register, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x583, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x582, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x583, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x582, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x583, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x582, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x583, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x583, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x583, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x583, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x583, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x583, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x583, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x583, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x582, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x583, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x582, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x583, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x582, 4)]
[(stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x583, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x582, 4)]
[(stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x583, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x582, 4)]
[ ---  CBRANCH (ram, 0x1de180, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003ab6, 8), (unique, 0x10003ab6, 8) CALL (ram, 0x121090, 8) , (unique, 0x10003aae, 8), (unique, 0x10003aae, 8) CAST (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(unique, 0xbc80, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 8) INT_AND (unique, 0x10003abe, 8) , (const, 0xffffffff, 8), (unique, 0x10003abe, 8) CAST (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(register, 0x30, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x1dd610, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x98, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x98, 4) , (register, 0x98, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003ad6, 8) , (register, 0xa8, 4), (unique, 0x10003ad6, 8) CAST (register, 0x8, 8), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (const, 0x30, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (unique, 0x10001910, 4), (unique, 0x10001910, 4) INT_MULT (unique, 0x1000093d, 4) , (const, 0xfffffff6, 4), (unique, 0x1000093d, 4) SUBPIECE (unique, 0x1000092d, 8) , (const, 0x0, 4), (unique, 0x1000092d, 8) INT_DIV (register, 0xa8, 8) , (const, 0xa, 8), (register, 0x8, 8) CAST (unique, 0x10003ace, 8), (unique, 0x10003ace, 8) INT_ADD (unique, 0x10003ac6, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x10003ac6, 8) CAST (register, 0x8, 8), (register, 0xa8, 4) SUBPIECE (register, 0xa8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x1000092d, 8)]
[(unique, 0x10001f80, 8) COPY (register, 0x18, 8)]
[(unique, 0x10002548, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dd620, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000093d, 4) , (const, 0x0, 4), (unique, 0x1000093d, 4) SUBPIECE (unique, 0x1000092d, 8) , (const, 0x0, 4), (unique, 0x1000092d, 8) INT_DIV (register, 0xa8, 8) , (const, 0xa, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x1000092d, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x98, 4) MULTIEQUAL (stack, 0xfffffffffffffed8, 4) , (unique, 0x10002548, 4)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001f78, 8) , (unique, 0x10001f80, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x90, 4) SUBPIECE (register, 0x90, 8) , (const, 0x0, 4), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x1dd04f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6fa, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x2d, 4), (unique, 0x3100, 8) CAST (unique, 0x10003ae6, 8), (unique, 0x10003ae6, 8) INT_ADD (unique, 0x10003ade, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x10003ade, 8) CAST (register, 0x8, 8)]
[(register, 0x8, 8) CAST (unique, 0x10003af6, 8), (unique, 0x10003af6, 8) INT_ADD (unique, 0x10003aee, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x10003aee, 8) CAST (register, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0xa8, 8) CAST (unique, 0x10003b0e, 8), (unique, 0x10003b0e, 8) INT_SUB (unique, 0x10003afe, 8) , (unique, 0x10003b06, 8), (unique, 0x10003b06, 8) CAST (register, 0x8, 8), (unique, 0x10003afe, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10001f38, 8) COPY (register, 0x18, 8)]
[(unique, 0x100023e4, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dd103, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 4) , (const, 0x2d, 4)]
[ ---  CBRANCH (ram, 0x1dd103, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10003b1e, 4), (unique, 0x10003b1e, 4) CAST (register, 0x80, 4), (register, 0x80, 4) INT_SUB (register, 0xb8, 4) , (register, 0x10, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x10, 8) INT_SRIGHT (unique, 0x10003b16, 8) , (const, 0x2, 4), (unique, 0x10003b16, 8) CAST (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x1de1f6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x5f, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x10003b26, 8), (unique, 0x10003b26, 8) INT_SEXT (unique, 0x10003b22, 4), (unique, 0x10003b22, 4) CAST (register, 0x80, 4)]
[(unique, 0x10001e70, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1de257, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10003b5e, 8), (unique, 0x10003b5e, 8) INT_ADD (unique, 0x10003b56, 8) , (unique, 0x3300, 8), (unique, 0x10003b56, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10003b4e, 8) , (const, 0x4, 8), (unique, 0x10003b4e, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de23b, 8), (register, 0x20, 8) CAST (unique, 0x10003b7e, 8), (unique, 0x10003b7e, 8) INT_ADD (unique, 0x10003b76, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003b76, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8f3, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x8f3, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x8f3, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x8f3, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x8f3, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x8f3, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8f3, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8f3, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8f3, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8f3, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x8f3, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8f3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x8f3, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8f3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8f2, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003b86, 8) , (const, 0x20, 4) , (unique, 0x10003b8e, 8), (unique, 0x10003b8e, 8) CAST (register, 0xb8, 8), (unique, 0x10003b86, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffec8, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x8f3, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x8f2, 4), (stack, 0xfffffffffffffec8, 8) CAST (unique, 0x10003b36, 8), (unique, 0x10003b36, 8) INT_OR (unique, 0x100016f1, 8) , (unique, 0x100016f9, 8), (unique, 0x100016f9, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x100016f1, 8) INT_AND (unique, 0x10003b2e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003b2e, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x10001984, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x8f3, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x8f2, 4), (stack, 0xfffffffffffffee0, 8) CAST (unique, 0x10003b6e, 8), (unique, 0x10003b6e, 8) INT_OR (unique, 0x10001711, 8) , (register, 0x90, 8), (unique, 0x10001711, 8) INT_AND (unique, 0x10003b66, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003b66, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10001e78, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x8f3, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x8f2, 4), (stack, 0xfffffffffffffed8, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000254c, 4) COPY (stack, 0xfffffffffffffed0, 4), (stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x8f3, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x8f2, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10003b46, 8), (unique, 0x10003b46, 8) INT_OR (unique, 0x10001701, 8) , (unique, 0x10001709, 8), (unique, 0x10001709, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x10001701, 8) INT_AND (unique, 0x10003b3e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003b3e, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (unique, 0x10001984, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001f38, 8) , (unique, 0x3400, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10001e70, 8) , (unique, 0x10001e78, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003bb6, 8), (unique, 0x10003bb6, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10003bae, 8), (unique, 0x10003bae, 8) CAST (register, 0xb0, 8), (register, 0xb0, 8) CAST (unique, 0x10003ba6, 8), (unique, 0x10003ba6, 8) INT_ADD (unique, 0x10003b96, 8) , (unique, 0x10003b9e, 8), (unique, 0x10003b9e, 8) CAST (register, 0xb8, 8), (unique, 0x10003b96, 8) CAST (register, 0xb0, 8), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(register, 0x0, 4) INT_SUB (register, 0x98, 4) , (register, 0x80, 4), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (stack, 0xfffffffffffffec8, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (unique, 0x1000254c, 4)]
[(unique, 0x100023f0, 4) COPY (register, 0x98, 4), (register, 0x98, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1de27e, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (unique, 0x10003bbe, 4) , (unique, 0x10003bc2, 4), (unique, 0x10003bc2, 4) CAST (register, 0x98, 4), (unique, 0x10003bbe, 4) CAST (register, 0x80, 4), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (stack, 0xfffffffffffffec8, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (unique, 0x1000254c, 4)]
[(unique, 0x100023f4, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x10003bca, 8), (unique, 0x10003bca, 8) INT_SEXT (unique, 0x10003bc6, 4), (unique, 0x10003bc6, 4) CAST (register, 0xb8, 4)]
[(register, 0xb8, 8) INT_SEXT (unique, 0x10003bd2, 4), (unique, 0x10003bd2, 4) CAST (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x1dd0b7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(register, 0xb0, 8) CAST (unique, 0x10003bee, 8), (unique, 0x10003bee, 8) INT_ADD (unique, 0x10003be6, 8) , (const, 0x1, 8), (unique, 0x10003be6, 8) CAST (register, 0xb0, 8)]
[(register, 0x0, 8) CAST (unique, 0x10003c06, 8), (unique, 0x10003c06, 8) INT_SUB (unique, 0x10003bf6, 8) , (unique, 0x10003bfe, 8), (unique, 0x10003bfe, 8) CAST (register, 0x8, 8), (unique, 0x10003bf6, 8) CAST (unique, 0x3100, 8), (register, 0x8, 8) CAST (unique, 0x10003bde, 8), (unique, 0x10003bde, 8) INT_ADD (unique, 0x10003bd6, 8) , (const, 0x4, 8), (unique, 0x10003bd6, 8) CAST (register, 0x8, 8)]
[(unique, 0x10001e58, 8) COPY (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x10003bde, 8), (unique, 0x10003bde, 8) INT_ADD (unique, 0x10003bd6, 8) , (const, 0x4, 8), (unique, 0x10003bd6, 8) CAST (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1dd0ec, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x7a1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003c0e, 8) , (const, 0x2d, 4), (unique, 0x10003c0e, 8) CAST (register, 0x18, 8)]
[(register, 0x18, 8) CAST (unique, 0x10003c1e, 8), (unique, 0x10003c1e, 8) INT_ADD (unique, 0x10003c16, 8) , (const, 0x4, 8), (unique, 0x10003c16, 8) CAST (register, 0x18, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0x0, 8)]
[(unique, 0x10001e60, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10001ee8, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dd0ec, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10003c3e, 8), (unique, 0x10003c3e, 8) INT_ADD (unique, 0x10003c36, 8) , (unique, 0x3300, 8), (unique, 0x10003c36, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dd0de, 8), (register, 0x20, 8) CAST (unique, 0x10003c4e, 8), (unique, 0x10003c4e, 8) INT_ADD (unique, 0x10003c46, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003c46, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7c3, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x7c3, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x7c3, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x7c2, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x7c3, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x7c2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x7c3, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x7c2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x7c3, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x7c2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x7c3, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x7c3, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x7c3, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x7c3, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x7c3, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x7c3, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x7c3, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x7c3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x7c3, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x7c2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7c3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7c2, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003c56, 8) , (const, 0x30, 4) , (register, 0xb8, 8), (unique, 0x10003c56, 8) CAST (register, 0x18, 8)]
[(unique, 0x1000198c, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x7c3, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x7c2, 4), (stack, 0xfffffffffffffee0, 8) CAST (unique, 0x10003c2e, 8), (unique, 0x10003c2e, 8) INT_OR (unique, 0x1000149e, 8) , (register, 0x90, 8), (unique, 0x1000149e, 8) INT_AND (unique, 0x10003c26, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003c26, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10001e68, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x7c3, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x7c2, 4), (stack, 0xfffffffffffffed8, 8) COPY (register, 0x8, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (unique, 0x1000198c, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001f38, 8) , (unique, 0x10001ee8, 8) , (unique, 0x3400, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10001e58, 8) , (unique, 0x10001e60, 8) , (unique, 0x10001e68, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003c76, 8), (unique, 0x10003c76, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10003c6e, 8), (unique, 0x10003c6e, 8) CAST (register, 0xb0, 8), (register, 0xb0, 8) CAST (unique, 0x10003c66, 8), (unique, 0x10003c66, 8) INT_ADD (unique, 0x10003c5e, 8) , (register, 0xb8, 8), (unique, 0x10003c5e, 8) CAST (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(unique, 0x100023ec, 4) COPY (register, 0x98, 4), (register, 0x98, 4) COPY (const, 0x0, 4)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001f38, 8) , (unique, 0x10001f38, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100023f8, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dd114, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (register, 0x98, 4) , (register, 0xa8, 4), (register, 0xa8, 4) SUBPIECE (register, 0xa8, 8) , (const, 0x0, 4), (register, 0xa8, 8) INT_SRIGHT (unique, 0x10003c7e, 8) , (const, 0x2, 4), (unique, 0x10003c7e, 8) CAST (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8), (register, 0x98, 4) MULTIEQUAL (unique, 0x100023e4, 4) , (unique, 0x100023e4, 4) , (unique, 0x100023ec, 4) , (unique, 0x100023f0, 4) , (unique, 0x100023f4, 4)]
[(unique, 0x100023fc, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x10003c86, 8), (unique, 0x10003c86, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (register, 0xa8, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100023f8, 4) , (unique, 0x100023fc, 4)]
[ ---  CBRANCH (ram, 0x1dc958, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x10001e40, 8) COPY (register, 0x8, 8)]
[(unique, 0x10001ec8, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dd16f, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10003c96, 8), (unique, 0x10003c96, 8) INT_ADD (unique, 0x10003c8e, 8) , (unique, 0x3300, 8), (unique, 0x10003c8e, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1de1d6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de1e3, 8), (register, 0x20, 8) CAST (unique, 0x10003ca6, 8), (unique, 0x10003ca6, 8) INT_ADD (unique, 0x10003c9e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003c9e, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8bd, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x8bd, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x8bd, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x8bc, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x8bd, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x8bc, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x8bd, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x8bc, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x8bd, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x8bc, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x8bd, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x8bd, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8bd, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8bd, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8bd, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8bd, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x8bd, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8bd, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x8bd, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x8bc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8bd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8bc, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003cae, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x10003cae, 8) CAST (register, 0x18, 8)]
[(unique, 0x10001e50, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x8bd, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x8bc, 4)]
[(unique, 0x10001ed8, 8) COPY (unique, 0x10003cb6, 8), (unique, 0x10003cb6, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x8bd, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x8bc, 4)]
[ ---  BRANCH (ram, 0x1dd16f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dd161, 8), (register, 0x20, 8) CAST (unique, 0x10003cc6, 8), (unique, 0x10003cc6, 8) INT_ADD (unique, 0x10003cbe, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003cbe, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x867, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x867, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x867, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x867, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x867, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x867, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x867, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x867, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x867, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x867, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x866, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003cce, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x10003cce, 8) CAST (register, 0x18, 8)]
[(unique, 0x10001e48, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x866, 4)]
[(unique, 0x10001ed0, 8) COPY (unique, 0x10003cd6, 8), (unique, 0x10003cd6, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001ec8, 8) , (unique, 0x10001ed0, 8) , (unique, 0x10001ed8, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10001e40, 8) , (unique, 0x10001e48, 8) , (unique, 0x10001e50, 8)]
[(unique, 0x10001da0, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x10003ce6, 8), (unique, 0x10003ce6, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003cde, 8), (unique, 0x10003cde, 8) INT_SEXT (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x1de160, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x3100, 8) INT_ADD (unique, 0x10003cee, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10003cee, 8) CAST (register, 0x0, 8)]
[(unique, 0x100022c8, 8) COPY (register, 0xa0, 8)]
[(unique, 0x10002358, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dcbff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0xb0, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dd1c4, 8), (register, 0x20, 8) CAST (unique, 0x10003d0e, 8), (unique, 0x10003d0e, 8) INT_ADD (unique, 0x10003d06, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003d06, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x89f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x89f, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x89e, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x89f, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x89e, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x89f, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x89e, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x89f, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x89e, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x89f, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x89e, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x89f, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x89e, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x8a3, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x89f, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x10003d1e, 8), (unique, 0x10003d1e, 8) INT_ADD (unique, 0x10003d16, 8) , (unique, 0x3300, 8), (unique, 0x10003d16, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001da0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10003cfe, 8), (unique, 0x10003cfe, 8) INT_ADD (unique, 0x10003cf6, 8) , (unique, 0x3300, 8), (unique, 0x10003cf6, 8) CAST (register, 0x8, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x4, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb0, 8)]
[(unique, 0x100022d8, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10002368, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x89f, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x89e, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x1dd1b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb0, 8)]
[(unique, 0x100023bc, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dcb2a, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xfffffffffffffed0, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4)]
[(unique, 0x100023c0, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x10003d26, 8), (unique, 0x10003d26, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (register, 0x0, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100023bc, 4) , (unique, 0x100023c0, 4)]
[ ---  CBRANCH (ram, 0x1dc958, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x10001e38, 8) COPY (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x10001ea0, 8) COPY (register, 0x18, 8)]
[(unique, 0x100020b8, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1dcb8f, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10003d36, 8), (unique, 0x10003d36, 8) INT_ADD (unique, 0x10003d2e, 8) , (unique, 0x3300, 8), (unique, 0x10003d2e, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x10003d3e, 8), (unique, 0x10003d3e, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[ ---  CBRANCH (ram, 0x1de2c3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed8, 4) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de2d3, 8), (register, 0x20, 8) CAST (unique, 0x10003d4e, 8), (unique, 0x10003d4e, 8) INT_ADD (unique, 0x10003d46, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003d46, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x66a, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x66a, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x66a, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x669, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x66a, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x669, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x66a, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x669, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x66a, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x669, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x66a, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x66a, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x66a, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x66a, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x66a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x66a, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x66a, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x66a, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x66a, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x66a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x669, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003d56, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x10003d56, 8) CAST (register, 0x18, 8)]
[(unique, 0x10001e30, 8) COPY (unique, 0x10003d5e, 8), (unique, 0x10003d5e, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x66a, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x669, 4)]
[(unique, 0x100020c8, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x66a, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x669, 4)]
[ ---  BRANCH (ram, 0x1dcb8f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcb81, 8), (register, 0x20, 8) CAST (unique, 0x10003d6e, 8), (unique, 0x10003d6e, 8) INT_ADD (unique, 0x10003d66, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003d66, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5f3, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x5f3, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x5f3, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x5f3, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x5f3, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x5f3, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x5f3, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x5f3, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x5f3, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5f3, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5f3, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5f3, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x5f3, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5f3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5f3, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f2, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003d76, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x10003d76, 8) CAST (register, 0x18, 8)]
[(unique, 0x10001e28, 8) COPY (unique, 0x10003d7e, 8), (unique, 0x10003d7e, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x5f3, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x5f2, 4)]
[(unique, 0x100020c0, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5f3, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10001ea0, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10001e38, 8) , (unique, 0x10001e28, 8) , (unique, 0x10001e30, 8)]
[(unique, 0x10001d80, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x10003d8e, 8), (unique, 0x10003d8e, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003d86, 8), (unique, 0x10003d86, 8) INT_SEXT (register, 0x80, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (unique, 0x100020b8, 8) , (unique, 0x100020c0, 8) , (unique, 0x100020c8, 8)]
[ ---  CBRANCH (ram, 0x1de160, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de16e, 8), (register, 0x20, 8) CAST (unique, 0x10003d9e, 8), (unique, 0x10003d9e, 8) INT_ADD (unique, 0x10003d96, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003d96, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x660, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x660, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x660, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x65f, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x660, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x65f, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x660, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x65f, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x660, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x10002560, 8) , (const, 0x65f, 4), (unique, 0x10002560, 8) COPY (unique, 0x10003da6, 8), (unique, 0x10003da6, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x660, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x65f, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x660, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x65f, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x660, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x65f, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x660, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x65f, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x660, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x65f, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x660, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x65f, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x660, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x65f, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x660, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x65f, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x660, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x65f, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x660, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x65f, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x660, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x65f, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x660, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x65f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x10003dae, 8) , (unique, 0x10003db6, 8) , (unique, 0x10003dbe, 8), (unique, 0x10003dbe, 8) CAST (register, 0x0, 8), (unique, 0x10003db6, 8) CAST (register, 0x8, 8), (unique, 0x10003dae, 8) CAST (register, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x100022c0, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0x10002350, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1dcbff, 1)]
[(unique, 0x3100, 8) INT_ADD (unique, 0x10003dc6, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10003dc6, 8) CAST (register, 0x0, 8)]
[(unique, 0x100022b8, 8) COPY (register, 0xa0, 8)]
[(unique, 0x10002348, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1dcbff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0xb0, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dcbdc, 8), (register, 0x20, 8) CAST (unique, 0x10003de6, 8), (unique, 0x10003de6, 8) INT_ADD (unique, 0x10003dde, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003dde, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x62b, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x62b, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x62a, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x62b, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x62a, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x62b, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x62a, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x62b, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x62a, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x62b, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x62a, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x62b, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x62a, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x62b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x62a, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x62b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x62a, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x62b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x62a, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x62b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x62a, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x62b, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x62a, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x62b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x62a, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x62b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x62a, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x62b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x62a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x62f, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x62b, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x10003df6, 8), (unique, 0x10003df6, 8) INT_ADD (unique, 0x10003dee, 8) , (unique, 0x3300, 8), (unique, 0x10003dee, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001d80, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10003dd6, 8), (unique, 0x10003dd6, 8) INT_ADD (unique, 0x10003dce, 8) , (unique, 0x3300, 8), (unique, 0x10003dce, 8) CAST (register, 0x8, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x4, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb0, 8)]
[(unique, 0x100022d0, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x62b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x62a, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10002360, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x62b, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x62a, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x1dcbd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x10002348, 8) , (unique, 0x10002350, 8) , (unique, 0x10002358, 8) , (unique, 0x10002360, 8) , (unique, 0x10002368, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x100022b8, 8) , (unique, 0x100022c0, 8) , (unique, 0x100022c8, 8) , (unique, 0x100022d0, 8) , (unique, 0x100022d8, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10003e0e, 8), (unique, 0x10003e0e, 8) INT_ADD (unique, 0x10003e06, 8) , (unique, 0x3300, 8), (unique, 0x10003e06, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10003dfe, 8) , (const, 0x4, 8), (unique, 0x10003dfe, 8) CAST (stack, 0xfffffffffffffee0, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  BRANCH (ram, 0x1dc958, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0xb0, 8) CAST (unique, 0x10003e26, 8), (unique, 0x10003e26, 8) INT_ADD (unique, 0x10003e16, 8) , (unique, 0x10003e1e, 8), (unique, 0x10003e1e, 8) CAST (register, 0xb8, 8), (unique, 0x10003e16, 8) CAST (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10001f08, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0x3400, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x10001fd0, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x1dc331, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003e36, 8), (unique, 0x10003e36, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10003e2e, 8), (unique, 0x10003e2e, 8) CAST (register, 0xb0, 8)]
[(unique, 0x100020e8, 8) COPY (unique, 0x100019dd, 8)]
[ ---  CBRANCH (ram, 0x1dd7be, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x10003e46, 8), (unique, 0x10003e46, 8) INT_OR (unique, 0x100016aa, 8) , (unique, 0x100019dd, 8), (unique, 0x100016aa, 8) INT_AND (unique, 0x10003e3e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003e3e, 8) CAST (stack, 0xffffffffffffff08, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003e4e, 8), (unique, 0x10003e4e, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003e56, 8), (unique, 0x10003e56, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1dde67, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 4) , (const, 0x4f, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (unique, 0x100020e8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xb8, 8)]
[(register, 0x38, 8) CAST (unique, 0x10003e5e, 8), (unique, 0x10003e5e, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1dde88, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x8, 4) , (const, 0xc, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003e68, 8), (unique, 0x10003e68, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cd6, 8) , (const, 0x1, 8), (unique, 0x10001cd6, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10003e66, 2), (unique, 0x10003e66, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x1000110e, 2) , (const, 0x4e, 2), (unique, 0x1000110e, 2) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ddea7, 8), (register, 0x20, 8) CAST (unique, 0x10003ea8, 8), (unique, 0x10003ea8, 8) INT_ADD (unique, 0x10003ea0, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003ea0, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x24cc, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x24cc, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x24cc, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x24cb, 4), (stack, 0xfffffffffffffec8, 8) CAST (unique, 0x10003e88, 8), (unique, 0x10003e88, 8) INT_OR (unique, 0x100016cb, 8) , (unique, 0x100016d3, 8), (unique, 0x100016d3, 8) INT_ZEXT (register, 0x8, 4), (unique, 0x100016cb, 8) INT_AND (unique, 0x10003e80, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003e80, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x24cc, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x24cb, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10003e98, 8), (unique, 0x10003e98, 8) INT_OR (unique, 0x100016db, 8) , (register, 0x90, 8), (unique, 0x100016db, 8) INT_AND (unique, 0x10003e90, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003e90, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x24cc, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x24cb, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x24cc, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x24cb, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x24cc, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x24cb, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x24cc, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x24cc, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x24cc, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x24cc, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x24cc, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x24cc, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x24cc, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x24cc, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x24cc, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x24cb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24cc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24cb, 4)]
[(unique, 0x10002418, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1ddeb8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xfffffffffffffed8, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121090, 8) , (register, 0x38, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x24cc, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x24cb, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10003e78, 8), (unique, 0x10003e78, 8) INT_OR (unique, 0x100016bb, 8) , (unique, 0x100016c3, 8), (unique, 0x100016c3, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x100016bb, 8) INT_AND (unique, 0x10003e70, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003e70, 8) CAST (stack, 0xfffffffffffffed8, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(unique, 0x1000241c, 4) COPY (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003eb0, 8), (unique, 0x10003eb0, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (register, 0x0, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x10002418, 4) , (unique, 0x1000241c, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003eb0, 8), (unique, 0x10003eb0, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (register, 0x0, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x10002418, 4) , (unique, 0x1000241c, 4)]
[(unique, 0x100022a8, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1dc5ca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffec8, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1ddf19, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(register, 0x30, 4) COPY (const, 0x30, 4)]
[(unique, 0x3400, 8) CAST (unique, 0x10003ec0, 8), (unique, 0x10003ec0, 8) INT_ADD (unique, 0x10003eb8, 8) , (unique, 0x3300, 8), (unique, 0x10003eb8, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1ddf04, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffed0, 4) , (const, 0x30, 4), (stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8)]
[(register, 0x30, 4) COPY (const, 0x20, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ddf0f, 8), (register, 0x20, 8) CAST (unique, 0x10003ed0, 8), (unique, 0x10003ed0, 8) INT_ADD (unique, 0x10003ec8, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003ec8, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2530, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2530, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2530, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x252f, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2530, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x252f, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2530, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x252f, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2530, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x252f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2530, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x252f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2530, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x252f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2530, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2530, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2530, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2530, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2530, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2530, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2530, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2530, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2530, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x252f, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003ed8, 8) , (register, 0x30, 4) , (register, 0x10, 8), (unique, 0x10003ed8, 8) CAST (register, 0x18, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003ee0, 8), (unique, 0x10003ee0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2530, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x252f, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10002594, 8) , (unique, 0x3400, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x10003ef0, 8), (unique, 0x10003ef0, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003ee8, 8), (unique, 0x10003ee8, 8) INT_SEXT (register, 0x0, 4)]
[(unique, 0x10001112, 2) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (register, 0x8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1deaf2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(register, 0x30, 8) CAST (unique, 0x10003ef8, 8), (unique, 0x10003ef8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1ddf52, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x8, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003f02, 8), (unique, 0x10003f02, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cde, 8) , (const, 0x1, 8), (unique, 0x10001cde, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10003f00, 2), (unique, 0x10003f00, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x10001112, 2) , (const, 0x4e, 2)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ddf61, 8), (register, 0x20, 8) CAST (unique, 0x10003f12, 8), (unique, 0x10003f12, 8) INT_ADD (unique, 0x10003f0a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003f0a, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x256b, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x256b, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x256b, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x256a, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x256b, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x256a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x256b, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x256a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x256b, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x256a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x256b, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x256a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x256b, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x256a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x256b, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x256b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x256b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x256b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x256b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x256b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x256b, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x256b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x256b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x256a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x256b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x256a, 4)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x10003f1a, 8) , (register, 0x30, 8) , (unique, 0x10003f22, 8), (unique, 0x10003f22, 8) CAST (register, 0x0, 8), (unique, 0x10003f1a, 8) CAST (register, 0x18, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100022f0, 8) COPY (register, 0xa0, 8)]
[ ---  BRANCH (ram, 0x1dc5bf, 1)]
[(register, 0xa8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1deb1a, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x8, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003f2c, 8), (unique, 0x10003f2c, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001d1e, 8) , (const, 0x1, 8), (unique, 0x10001d1e, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10003f2a, 2), (unique, 0x10003f2a, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x10001112, 2) , (const, 0x4e, 2)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0xbd80, 8)]
[(unique, 0x3100, 8) INT_ADD (unique, 0x10003f34, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10003f34, 8) CAST (register, 0x0, 8)]
[(unique, 0x100022e0, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1dc5c6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1deb38, 8), (register, 0x20, 8) CAST (unique, 0x10003f4c, 8), (unique, 0x10003f4c, 8) INT_ADD (unique, 0x10003f44, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003f44, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x25a0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x25a0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x259f, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x25a0, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x259f, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x25a0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x259f, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x25a0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x259f, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x25a0, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x259f, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x25a0, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x259f, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x25a0, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x259f, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x25a0, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x259f, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x25a0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x259f, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x25a0, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x259f, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x25a0, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x259f, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x25a0, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x259f, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x25a0, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x259f, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x25a0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x259f, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x25a0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x259f, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25a0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x259f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x25a4, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x25a0, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x10003f5c, 8), (unique, 0x10003f5c, 8) INT_ADD (unique, 0x10003f54, 8) , (unique, 0x3300, 8), (unique, 0x10003f54, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001dc0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003f3c, 8), (unique, 0x10003f3c, 8) CAST (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (unique, 0x3a80, 8) , (const, 0x1, 8), (unique, 0x3a80, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (unique, 0x10001dc0, 8) COPY (stack, 0xffffffffffffff00, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x100022f8, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1deb27, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x38, 8) CAST (unique, 0x10003f64, 8), (unique, 0x10003f64, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1dd7f5, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003f6e, 8), (unique, 0x10003f6e, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001ca6, 8) , (const, 0x1, 8), (unique, 0x10001ca6, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10003f6c, 2), (unique, 0x10003f6c, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x100010f6, 2) , (const, 0x7b, 2), (unique, 0x100010f6, 2) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dd80e, 8), (register, 0x20, 8) CAST (unique, 0x10003fae, 8), (unique, 0x10003fae, 8) INT_ADD (unique, 0x10003fa6, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003fa6, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x23aa, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x23aa, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x23aa, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x23a9, 4), (stack, 0xfffffffffffffec8, 8) CAST (unique, 0x10003f8e, 8), (unique, 0x10003f8e, 8) INT_OR (unique, 0x100015a6, 8) , (unique, 0x100015ae, 8), (unique, 0x100015ae, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x100015a6, 8) INT_AND (unique, 0x10003f86, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003f86, 8) CAST (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x23aa, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x23a9, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x10003f9e, 8), (unique, 0x10003f9e, 8) INT_OR (unique, 0x100015b6, 8) , (register, 0x90, 8), (unique, 0x100015b6, 8) INT_AND (unique, 0x10003f96, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003f96, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x23aa, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x23a9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x23aa, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x23a9, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x23aa, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x23a9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x23aa, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x23aa, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x23aa, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x23aa, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x23aa, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x23aa, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x23aa, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x23aa, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x23aa, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x23a9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x23aa, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x23a9, 4)]
[(unique, 0x10002400, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dd824, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xfffffffffffffed8, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffed8, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121090, 8) , (register, 0x38, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x23aa, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x23a9, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x10003f7e, 8), (unique, 0x10003f7e, 8) INT_OR (unique, 0x10001596, 8) , (unique, 0x1000159e, 8), (unique, 0x1000159e, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x10001596, 8) INT_AND (unique, 0x10003f76, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003f76, 8) CAST (stack, 0xfffffffffffffed8, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10002404, 4) COPY (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003fb6, 8), (unique, 0x10003fb6, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10002400, 4) , (unique, 0x10002404, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003fb6, 8), (unique, 0x10003fb6, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10002400, 4) , (unique, 0x10002404, 4)]
[(unique, 0x10002298, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1dc5ca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffec8, 4) SUBPIECE (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 8)]
[(unique, 0x10002318, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dd883, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(unique, 0x3400, 8) CAST (unique, 0x10003fc6, 8), (unique, 0x10003fc6, 8) INT_ADD (unique, 0x10003fbe, 8) , (unique, 0x3300, 8), (unique, 0x10003fbe, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1ded1c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed0, 4) , (const, 0x30, 4), (stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ded29, 8), (register, 0x20, 8) CAST (unique, 0x10003fd6, 8), (unique, 0x10003fd6, 8) INT_ADD (unique, 0x10003fce, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003fce, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x249d, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x249d, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x249d, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x249c, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x249d, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x249c, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x249d, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x249c, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x249d, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x249c, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x249d, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x249c, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x249d, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x249c, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x249d, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x249d, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x249d, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x249d, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x249d, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x249d, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x249d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x249d, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x249c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x249d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x249c, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003fde, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x10003fde, 8) CAST (register, 0x18, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003fe6, 8), (unique, 0x10003fe6, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x249d, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x249c, 4)]
[ ---  BRANCH (ram, 0x1dd883, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dd879, 8), (register, 0x20, 8) CAST (unique, 0x10003ff6, 8), (unique, 0x10003ff6, 8) INT_ADD (unique, 0x10003fee, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10003fee, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x240e, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x240e, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x240e, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x240d, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x240e, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x240d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x240e, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x240d, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x240e, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x240d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x240e, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x240d, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x240e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x240d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x240e, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x240e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x240e, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x240e, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x240e, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x240e, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x240e, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x240e, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x240e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x240d, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10003ffe, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x10003ffe, 8) CAST (register, 0x18, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004006, 8), (unique, 0x10004006, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x240e, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x240d, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10002318, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(register, 0xb8, 8) INT_SEXT (register, 0x0, 4)]
[(unique, 0x100010fa, 2) SUBPIECE (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1dec8b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(register, 0x8, 8) CAST (unique, 0x1000400e, 8), (unique, 0x1000400e, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1decac, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10004018, 8), (unique, 0x10004018, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001d2e, 8) , (const, 0x1, 8), (unique, 0x10001d2e, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10004016, 2), (unique, 0x10004016, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x100010fa, 2) , (const, 0x7b, 2)]
[(unique, 0x3100, 8) INT_SUB (register, 0xb8, 8) , (const, 0x1, 8)]
[(unique, 0x10001e18, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1dd8c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1deccf, 8), (register, 0x20, 8) CAST (unique, 0x10004038, 8), (unique, 0x10004038, 8) INT_ADD (unique, 0x10004030, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10004030, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x247c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x247c, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x247b, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x247c, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x247b, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x247c, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x247b, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x247c, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x247b, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x247c, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x247b, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x247c, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x247b, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x247c, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x247b, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x247c, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x247b, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x247c, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x247b, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x247c, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x247b, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x247c, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x247b, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x247c, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x247b, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x247c, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x247b, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x247c, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x247b, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x247c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x247b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2480, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x247c, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (register, 0x0, 4), (unique, 0x3b80, 8) CAST (unique, 0x10004048, 8), (unique, 0x10004048, 8) INT_ADD (unique, 0x10004040, 8) , (unique, 0x3a80, 8), (unique, 0x10004040, 8) CAST (register, 0xa8, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001dd8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10004028, 8), (unique, 0x10004028, 8) INT_ADD (unique, 0x10004020, 8) , (unique, 0x3300, 8), (unique, 0x10004020, 8) CAST (register, 0x8, 8), (unique, 0x3300, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8), (unique, 0x10001dd8, 8) COPY (stack, 0xffffffffffffff00, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10001e18, 8) , (unique, 0x10001e20, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x18, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10001e20, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x247c, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x247b, 4), (stack, 0xffffffffffffff08, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10001e18, 8) , (unique, 0x10001e20, 8)]
[ ---  CBRANCH (ram, 0x1decb9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0xffffffffffffffff, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0xffffffffffffffff, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x18, 8)]
[(register, 0x30, 8) CAST (unique, 0x10004050, 8), (unique, 0x10004050, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1dd8b5, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0xc, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000405a, 8), (unique, 0x1000405a, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cae, 8) , (const, 0x1, 8), (unique, 0x10001cae, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10004058, 2), (unique, 0x10004058, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x100010fa, 2) , (const, 0x7b, 2)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dd8c0, 8), (register, 0x20, 8) CAST (unique, 0x1000406a, 8), (unique, 0x1000406a, 8) INT_ADD (unique, 0x10004062, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10004062, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2444, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2444, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2444, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2443, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2444, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2443, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2444, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2443, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2444, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2443, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2444, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2443, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2444, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2443, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2444, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2444, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2444, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2444, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2444, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2444, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2444, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2444, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2444, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2443, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2444, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2443, 4)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x10004072, 8) , (register, 0x30, 8) , (register, 0xb8, 8), (unique, 0x10004072, 8) CAST (register, 0xa8, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3b80, 8) CAST (unique, 0x10004082, 8), (unique, 0x10004082, 8) INT_ADD (unique, 0x1000407a, 8) , (unique, 0x3a80, 8), (unique, 0x1000407a, 8) CAST (register, 0xa8, 8), (unique, 0x3a80, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x1dc5ca, 1)]
[(register, 0x38, 8) CAST (unique, 0x1000408a, 8), (unique, 0x1000408a, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004092, 8), (unique, 0x10004092, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0xa8, 8) CAST (unique, 0x100040a2, 8), (unique, 0x100040a2, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x1000409a, 8), (unique, 0x1000409a, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10002574, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x1ddb1f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4)]
[(unique, 0x10002578, 4) COPY (stack, 0xffffffffffffff08, 4)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x10002574, 4) , (unique, 0x10002578, 4)]
[ ---  CBRANCH (ram, 0x1ddb39, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x7, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100040ac, 8), (unique, 0x100040ac, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cb6, 8) , (const, 0x1, 8), (unique, 0x10001cb6, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x100040aa, 2), (unique, 0x100040aa, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x100010fe, 2) , (const, 0x3b, 2), (unique, 0x100010fe, 2) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ddb5f, 8), (register, 0x20, 8) CAST (unique, 0x100040fc, 8), (unique, 0x100040fc, 8) INT_ADD (unique, 0x100040f4, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100040f4, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a0d, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2a0d, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2a0d, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2a0c, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2a0d, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2a0c, 4), (stack, 0xfffffffffffffed0, 8) CAST (unique, 0x100040dc, 8), (unique, 0x100040dc, 8) INT_OR (unique, 0x1000161e, 8) , (register, 0x90, 8), (unique, 0x1000161e, 8) INT_AND (unique, 0x100040d4, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100040d4, 8) CAST (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2a0d, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2a0c, 4), (stack, 0xfffffffffffffed8, 8) CAST (unique, 0x100040cc, 8), (unique, 0x100040cc, 8) INT_OR (unique, 0x1000160e, 8) , (unique, 0x10001616, 8), (unique, 0x10001616, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x1000160e, 8) INT_AND (unique, 0x100040c4, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100040c4, 8) CAST (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2a0d, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2a0c, 4), (stack, 0xfffffffffffffee0, 8) CAST (unique, 0x100040ec, 8), (unique, 0x100040ec, 8) INT_OR (unique, 0x1000162e, 8) , (unique, 0x10001636, 8), (unique, 0x10001636, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x1000162e, 8) INT_AND (unique, 0x100040e4, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100040e4, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2a0d, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2a0c, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2a0d, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2a0c, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2a0d, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2a0c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a0d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a0c, 4)]
[(unique, 0x10002408, 4) COPY (register, 0xa0, 4), (register, 0xa0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1ddb70, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (stack, 0xffffffffffffff08, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121090, 8) , (register, 0x38, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2a0d, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2a0c, 4), (stack, 0xffffffffffffff08, 8) CAST (unique, 0x100040bc, 8), (unique, 0x100040bc, 8) INT_OR (unique, 0x100015fe, 8) , (unique, 0x10001606, 8), (unique, 0x10001606, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x100015fe, 8) INT_AND (unique, 0x100040b4, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100040b4, 8) CAST (stack, 0xffffffffffffff08, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(unique, 0x1000240c, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0xa8, 8) , (register, 0xa0, 8), (register, 0xa0, 8) CAST (unique, 0x10004104, 8), (unique, 0x10004104, 8) INT_SEXT (register, 0xa0, 4), (register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (register, 0x8, 4), (register, 0xa0, 4) MULTIEQUAL (unique, 0x10002408, 4) , (unique, 0x1000240c, 4)]
[ ---  CBRANCH (ram, 0x1ddc36, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 8)]
[(unique, 0x1000195c, 4) SUBPIECE (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1ddbe8, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffee0, 8) CAST (unique, 0x1000411c, 8), (unique, 0x1000411c, 8) INT_OR (unique, 0x10001641, 8) , (unique, 0x10001649, 8), (unique, 0x10001649, 8) INT_AND (unique, 0x10004114, 8) , (const, 0xffffffff, 8), (unique, 0x10004114, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0x10001641, 8) INT_AND (unique, 0x1000410c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000410c, 8) CAST (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x1000412c, 8), (unique, 0x1000412c, 8) INT_ADD (unique, 0x10004124, 8) , (unique, 0x3300, 8), (unique, 0x10004124, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[(stack, 0xffffffffffffff08, 8) COPY (unique, 0x10004134, 8), (unique, 0x10004134, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1deb78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed0, 4) , (const, 0x30, 4), (stack, 0xfffffffffffffed0, 4) SUBPIECE (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1deb88, 8), (register, 0x20, 8) CAST (unique, 0x10004144, 8), (unique, 0x10004144, 8) INT_ADD (unique, 0x1000413c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000413c, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b01, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2b01, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2b01, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2b00, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2b01, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2b00, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2b01, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2b00, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b01, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b00, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b01, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b00, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b01, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b01, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b01, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b01, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2b01, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b01, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b01, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b00, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b01, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b00, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x1000414c, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x1000414c, 8) CAST (register, 0x18, 8)]
[(register, 0x8, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b01, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b00, 4)]
[(unique, 0x1000193c, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2b01, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2b00, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004154, 8), (unique, 0x10004154, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b01, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b00, 4)]
[ ---  BRANCH (ram, 0x1ddbe8, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ddbd0, 8), (register, 0x20, 8) CAST (unique, 0x10004164, 8), (unique, 0x10004164, 8) INT_ADD (unique, 0x1000415c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000415c, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a73, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2a73, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2a73, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2a72, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2a73, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2a72, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2a73, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2a72, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2a73, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2a72, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2a73, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2a72, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2a73, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2a73, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2a73, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2a73, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2a73, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2a73, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2a73, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a73, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a72, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x1000416c, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x1000416c, 8) CAST (register, 0x18, 8)]
[(unique, 0x10001964, 4) SUBPIECE (stack, 0xfffffffffffffee0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2a73, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2a72, 4)]
[(register, 0x8, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2a73, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2a72, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004174, 8), (unique, 0x10004174, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff10, 8) , (const, 0x3, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2a73, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2a72, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10002584, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000417c, 8), (unique, 0x1000417c, 8) INT_SEXT (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x10001102, 2) SUBPIECE (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1de9f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4), (register, 0x88, 4) MULTIEQUAL (unique, 0x1000195c, 4) , (unique, 0x10001964, 4) , (unique, 0x1000193c, 4)]
[(register, 0x8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1dea1a, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0x7, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10004186, 8), (unique, 0x10004186, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001d0e, 8) , (const, 0x1, 8), (unique, 0x10001d0e, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10004184, 2), (unique, 0x10004184, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x10001102, 2) , (const, 0x3b, 2)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0xbd80, 8)]
[(unique, 0x3100, 8) INT_ADD (unique, 0x1000418e, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x1000418e, 8) CAST (register, 0x0, 8)]
[(unique, 0x10002188, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1ddc32, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x10004196, 8), (unique, 0x10004196, 8) CAST (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dea41, 8), (register, 0x20, 8) CAST (unique, 0x100041ae, 8), (unique, 0x100041ae, 8) INT_ADD (unique, 0x100041a6, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100041a6, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2ae2, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2ae2, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2ae1, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2ae2, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2ae1, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2ae2, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2ae1, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2ae2, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2ae1, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2ae2, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2ae1, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2ae2, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2ae1, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2ae2, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2ae1, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ae2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ae1, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2ae6, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2ae2, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x100041be, 8), (unique, 0x100041be, 8) INT_ADD (unique, 0x100041b6, 8) , (unique, 0x3300, 8), (unique, 0x100041b6, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001db0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000419e, 8), (unique, 0x1000419e, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x8, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (unique, 0x10001db0, 8) COPY (stack, 0xffffffffffffff00, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10002198, 8) COPY (unique, 0x100041c6, 8), (unique, 0x100041c6, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2ae2, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2ae1, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x1dea31, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[(register, 0x30, 8) CAST (unique, 0x100041ce, 8), (unique, 0x100041ce, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b51d3, 8)]
[ ---  CBRANCH (ram, 0x1ddc1c, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0x7, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100041d8, 8), (unique, 0x100041d8, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001cbe, 8) , (const, 0x1, 8), (unique, 0x10001cbe, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x40, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x100041d6, 2), (unique, 0x100041d6, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0x10001102, 2) , (const, 0x3b, 2)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ddc2b, 8), (register, 0x20, 8) CAST (unique, 0x100041e8, 8), (unique, 0x100041e8, 8) INT_ADD (unique, 0x100041e0, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100041e0, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x27f9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x27f9, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x27f9, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x27f8, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x27f9, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x27f8, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x27f9, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x27f8, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x27f9, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x27f8, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x27f9, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x27f8, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x27f9, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x27f8, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x27f9, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x27f8, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x27f9, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x27f8, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x27f9, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x27f8, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x27f9, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x27f8, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x27f9, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x27f8, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x27f9, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x27f8, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x27f9, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x27f8, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x27f9, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x27f8, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x27f9, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x27f8, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x27f9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x27f8, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x100041f0, 8) , (register, 0x30, 8) , (unique, 0x100041f8, 8), (unique, 0x100041f8, 8) CAST (unique, 0x10001de0, 8), (unique, 0x100041f0, 8) CAST (register, 0x18, 8), (unique, 0x10001de0, 8) COPY (stack, 0xffffffffffffff08, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0xbd80, 8) , (register, 0x30, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10002178, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10002178, 8) , (unique, 0x10002180, 8) , (unique, 0x10002188, 8) , (unique, 0x10002190, 8) , (unique, 0x10002198, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10004210, 8), (unique, 0x10004210, 8) INT_ADD (unique, 0x10004208, 8) , (unique, 0x3300, 8), (unique, 0x10004208, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10004200, 8) , (const, 0x4, 8), (unique, 0x10004200, 8) CAST (stack, 0xffffffffffffff08, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) CAST (unique, 0x10004228, 8), (unique, 0x10004228, 8) INT_ADD (unique, 0x10004218, 8) , (unique, 0x10004220, 8), (unique, 0x10004220, 8) CAST (register, 0xa0, 8), (unique, 0x10004218, 8) CAST (register, 0xb0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0x10001f28, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0x3400, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x1dc331, 1)]
[(unique, 0x10002390, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dc5eb, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (register, 0x98, 4) , (const, 0x1, 4)]
[(unique, 0x10002394, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x10004238, 8) , (unique, 0x10004240, 8), (unique, 0x10004240, 8) CAST (register, 0xa8, 8), (unique, 0x10004238, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10004230, 8), (unique, 0x10004230, 8) CAST (register, 0xb0, 8), (register, 0xa8, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (const, 0x1, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x10002390, 4) , (unique, 0x10002394, 4)]
[ ---  CBRANCH (ram, 0x1dc632, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x10001eb0, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dc62c, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(unique, 0x3400, 8) CAST (unique, 0x10004250, 8), (unique, 0x10004250, 8) INT_ADD (unique, 0x10004248, 8) , (unique, 0x3300, 8), (unique, 0x10004248, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x1deba5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1debb5, 8), (register, 0x20, 8) CAST (unique, 0x10004260, 8), (unique, 0x10004260, 8) INT_ADD (unique, 0x10004258, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10004258, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b8b, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2b8b, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2b8b, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2b8a, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2b8b, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2b8a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2b8b, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2b8a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2b8b, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2b8a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b8b, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b8a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b8b, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b8a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b8b, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b8b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b8a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b8b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b8a, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10004268, 8) , (const, 0x30, 4) , (register, 0x10, 8), (unique, 0x10004268, 8) CAST (register, 0x18, 8)]
[(register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004270, 8), (unique, 0x10004270, 8) CAST (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x1dc62c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc629, 8), (register, 0x20, 8) CAST (unique, 0x10004280, 8), (unique, 0x10004280, 8) INT_ADD (unique, 0x10004278, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10004278, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b6c, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2b6c, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2b6c, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2b6b, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2b6c, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2b6b, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2b6c, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2b6b, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2b6c, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2b6b, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b6c, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b6b, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b6c, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b6b, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b6c, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b6c, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b6b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b6c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b6b, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10004288, 8) , (const, 0x20, 4) , (register, 0x10, 8), (unique, 0x10004288, 8) CAST (register, 0x18, 8)]
[(register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004290, 8), (unique, 0x10004290, 8) CAST (register, 0xb8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2b71, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004298, 8) , (register, 0x8, 4), (unique, 0x10004298, 8) CAST (register, 0x18, 8), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001eb0, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(register, 0x18, 8) CAST (unique, 0x100042a8, 8), (unique, 0x100042a8, 8) INT_ADD (unique, 0x100042a0, 8) , (const, 0x4, 8), (unique, 0x100042a0, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001eb0, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) CAST (unique, 0x100042b8, 8), (unique, 0x100042b8, 8) INT_ADD (unique, 0x100042b0, 8) , (register, 0xa8, 8), (unique, 0x100042b0, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10001f30, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x1dc331, 1)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100042c8, 8), (unique, 0x100042c8, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100042c0, 8), (unique, 0x100042c0, 8) CAST (register, 0xb0, 8)]
[(unique, 0x100021a0, 8) COPY (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x1dc508, 1)]
[(register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100042d8, 8), (unique, 0x100042d8, 8) INT_ADD (unique, 0x100042d0, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x100042d0, 8) CAST (register, 0xb8, 8)]
[(register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x100042e8, 8), (unique, 0x100042e8, 8) INT_ADD (unique, 0x100042e0, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x100042e0, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100042f8, 8), (unique, 0x100042f8, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x100042f0, 8), (unique, 0x100042f0, 8) CAST (register, 0xb0, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x100021a8, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x1dc508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x25, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x8, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xb8, 4) COPY (const, 0x1, 4)]
[(unique, 0x10002434, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100021a0, 8) , (unique, 0x100021a8, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100021e0, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8)]
[(register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x8, 8) CAST (unique, 0x10004320, 8), (unique, 0x10004320, 8) INT_SUB (unique, 0x10004310, 8) , (unique, 0x10004318, 8), (unique, 0x10004318, 8) CAST (register, 0xa0, 8), (unique, 0x10004310, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004308, 8), (unique, 0x10004308, 8) INT_ADD (unique, 0x10004300, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x10004300, 8) CAST (unique, 0x10001162, 8), (unique, 0x10001162, 8) MULTIEQUAL (unique, 0x10002434, 8) , (register, 0x0, 8)]
[(unique, 0x10002268, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1dc513, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x25, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004328, 8), (unique, 0x10004328, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004308, 8), (unique, 0x10004308, 8) INT_ADD (unique, 0x10004300, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x10004300, 8) CAST (unique, 0x10001162, 8), (unique, 0x10001162, 8) MULTIEQUAL (unique, 0x10002434, 8) , (register, 0x0, 8)]
[(register, 0xb8, 4) COPY (const, 0x1, 4)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1dc52a, 1)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10002268, 8) , (unique, 0x100021a8, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x80, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10002388, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1dc537, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_SUB (register, 0x98, 4) , (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(unique, 0x1000238c, 4) COPY (register, 0x98, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004330, 8), (unique, 0x10004330, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (register, 0xb8, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x10002388, 4) , (unique, 0x1000238c, 4)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffee0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004330, 8), (unique, 0x10004330, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (register, 0xb8, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x10002388, 4) , (unique, 0x1000238c, 4)]
[(unique, 0x10002278, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1dc5ca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x10001e80, 8) COPY (register, 0x8, 8)]
[(unique, 0x100020d8, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x1dc599, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x98, 4)]
[(stack, 0xfffffffffffffed0, 8) COPY (register, 0x8, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10004340, 8), (unique, 0x10004340, 8) INT_ADD (unique, 0x10004338, 8) , (unique, 0x3300, 8), (unique, 0x10004338, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x98, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x10004348, 8), (unique, 0x10004348, 8) CAST (register, 0x80, 8)]
[(register, 0x30, 4) COPY (const, 0x30, 4)]
[ ---  CBRANCH (ram, 0x1dc580, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 4) , (const, 0x30, 4)]
[(register, 0x30, 4) COPY (const, 0x20, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc58b, 8), (register, 0x20, 8) CAST (unique, 0x10004358, 8), (unique, 0x10004358, 8) INT_ADD (unique, 0x10004350, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10004350, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x295, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x295, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x294, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x294, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x294, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x294, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x295, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x294, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x295, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x294, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x295, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x294, 4)]
[ ---  CALL (ram, 0x121130, 8) , (unique, 0x10004360, 8) , (register, 0x30, 4) , (register, 0x10, 8), (unique, 0x10004360, 8) CAST (register, 0x18, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(unique, 0x10001e88, 8) COPY (stack, 0xfffffffffffffed0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x294, 4)]
[(unique, 0x100020e0, 8) COPY (unique, 0x10004368, 8), (unique, 0x10004368, 8) CAST (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x295, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x294, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x100020d8, 8) , (unique, 0x100020e0, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10002594, 8) , (unique, 0x3400, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10001e80, 8) , (unique, 0x10001e88, 8)]
[(unique, 0x10001d70, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (unique, 0x10004378, 8), (unique, 0x10004378, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004370, 8), (unique, 0x10004370, 8) INT_SEXT (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1de190, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff08, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x3400, 8) INT_ADD (unique, 0x10004380, 8) , (unique, 0x10004388, 8), (unique, 0x10004388, 8) CAST (register, 0x8, 8), (unique, 0x10004380, 8) CAST (register, 0xa0, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0xa0, 8)]
[(unique, 0x3100, 8) INT_ADD (unique, 0x10004390, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10004390, 8) CAST (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1de1bc, 8), (register, 0x20, 8) CAST (unique, 0x100043a8, 8), (unique, 0x100043a8, 8) INT_ADD (unique, 0x100043a0, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100043a0, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2dd, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2dc, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2dc, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2dc, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2dc, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2dc, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2dc, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2dd, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2dc, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2dc, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2dc, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2dc, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2dc, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2dd, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2dc, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2dc, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2dc, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2dc, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2e1, 4), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2dd, 4), (ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x100043b8, 8), (unique, 0x100043b8, 8) INT_ADD (unique, 0x100043b0, 8) , (unique, 0x3300, 8), (unique, 0x100043b0, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0x0, 4) CALL (ram, 0x225ea0, 8) , (unique, 0xbc80, 4) , (unique, 0x10001d70, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10004398, 8), (unique, 0x10004398, 8) INT_ADD (unique, 0x3400, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x4, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[(unique, 0x10002300, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2dd, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2dc, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  CBRANCH (ram, 0x1de1b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1dc5bf, 8), (register, 0x20, 8) CAST (unique, 0x100043c8, 8), (unique, 0x100043c8, 8) INT_ADD (unique, 0x100043c0, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100043c0, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b4, 4)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x2b4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2b4, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2b3, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2b4, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2b3, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2b4, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2b3, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2b4, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2b3, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b4, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b3, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b4, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b3, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b4, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b3, 4)]
[ ---  CALL (ram, 0x1bd4a0, 8) , (unique, 0x100043d0, 8) , (unique, 0x100043d8, 8) , (unique, 0x100043e0, 8), (unique, 0x100043e0, 8) CAST (register, 0x0, 8), (unique, 0x100043d8, 8) CAST (register, 0x80, 8), (unique, 0x100043d0, 8) CAST (register, 0x18, 8)]
[(unique, 0x100022e8, 8) COPY (register, 0xa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100043f8, 8), (unique, 0x100043f8, 8) INT_ADD (unique, 0x100043f0, 8) , (unique, 0x3300, 8), (unique, 0x100043f0, 8) CAST (register, 0x18, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x100043e8, 8) , (const, 0x4, 8), (unique, 0x100043e8, 8) CAST (stack, 0xfffffffffffffee0, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10002280, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100022e0, 8) , (unique, 0x100022e8, 8) , (unique, 0x100022f0, 8) , (unique, 0x100022f8, 8) , (unique, 0x10002300, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) COPY (unique, 0x100022b0, 8), (unique, 0x100022b0, 8) MULTIEQUAL (unique, 0x10002278, 8) , (unique, 0x10002280, 8) , (unique, 0x100025a4, 8) , (unique, 0x100025a4, 8) , (unique, 0x10002298, 8) , (unique, 0x10002298, 8) , (unique, 0x100022a8, 8)]
[(register, 0xb0, 8) CAST (unique, 0x10004410, 8), (unique, 0x10004410, 8) INT_ADD (unique, 0x10004400, 8) , (unique, 0x10004408, 8), (unique, 0x10004408, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0x10004400, 8) CAST (register, 0xb0, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x10001ef8, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0x3400, 8) , (register, 0x18, 8) , (unique, 0x3b80, 8) , (register, 0x18, 8) , (unique, 0x3b80, 8) , (register, 0x18, 8)]
[(unique, 0x10001fc0, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x1dc331, 1)]
[(register, 0x88, 8) COPY (const, 0x1, 8)]
[(register, 0x206, 1) INT_EQUAL (unique, 0x28200, 4) , (const, 0x0, 4), (unique, 0x28200, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004428, 8), (unique, 0x10004428, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x10004420, 8), (unique, 0x10004420, 8) INT_ADD (unique, 0x10004418, 8) , (const, 0x4, 8), (unique, 0x10004418, 8) CAST (unique, 0x100019c4, 8)]
[ ---  CBRANCH (ram, 0x1dc360, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x10004438, 8) , (const, 0x2, 8), (unique, 0x10004438, 8) CAST (register, 0x10, 8), (register, 0x10, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (unique, 0x10004430, 8), (unique, 0x10004430, 8) CAST (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x10002058, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8) , (unique, 0x1000259c, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1dc32a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xab, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004440, 8) , (register, 0x0, 4), (unique, 0x10004440, 8) CAST (register, 0x18, 8)]
[(register, 0x18, 8) CAST (unique, 0x10004450, 8), (unique, 0x10004450, 8) INT_ADD (unique, 0x10004448, 8) , (const, 0x4, 8), (unique, 0x10004448, 8) CAST (register, 0x18, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0xb0, 8) CAST (unique, 0x10004460, 8), (unique, 0x10004460, 8) INT_ADD (unique, 0x10004458, 8) , (const, 0x1, 8), (unique, 0x10004458, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10001ef0, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x10001fb8, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x10001c6c, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (unique, 0x10001c64, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (unique, 0x10001c5c, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (unique, 0x10001c58, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (unique, 0x10001c54, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (unique, 0x10001c50, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (unique, 0x10001c4c, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (unique, 0x10001c48, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (unique, 0x10001c44, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (unique, 0x10001c40, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (unique, 0x10001c3c, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (unique, 0x10001c38, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (unique, 0x10001c34, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (unique, 0x10001c2c, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (unique, 0x10001c20, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (unique, 0x10001c1c, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (unique, 0x10001c14, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (unique, 0x10001c0c, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (unique, 0x10001c04, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001bfc, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (unique, 0x10001bf4, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (unique, 0x10001bec, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (unique, 0x10001be4, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (unique, 0x10001bdc, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (unique, 0x10001bd4, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001bcc, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (unique, 0x10001bc4, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x10001bbc, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x10004480, 8), (unique, 0x10004480, 8) INT_ADD (unique, 0x10004478, 8) , (const, 0x4, 8), (unique, 0x10004478, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0x10001f90, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001ef0, 8) , (unique, 0x10001ef8, 8) , (unique, 0x1000258c, 8) , (unique, 0x10001f08, 8) , (unique, 0x1000258c, 8) , (unique, 0x10001f18, 8) , (unique, 0x10001f20, 8) , (unique, 0x10001f28, 8) , (unique, 0x10001f30, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(unique, 0x10002098, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001fb8, 8) , (unique, 0x10001fc0, 8) , (unique, 0x10001fc8, 8) , (unique, 0x10001fd0, 8) , (unique, 0x10001fd8, 8) , (unique, 0x10001fe0, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x10002120, 8) COPY (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (unique, 0x10001c24, 8)]
[ ---  CBRANCH (ram, 0x1dc306, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10004470, 8), (unique, 0x10004470, 8) INT_ADD (unique, 0x10004468, 8) , (const, 0x4, 8), (unique, 0x10004468, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x10002120, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10002090, 8) , (unique, 0x10002098, 8)]
[ ---  CBRANCH (ram, 0x1dc363, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 8) , (const, 0x0, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1dc363, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x0, 8)]
[(ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0xe9, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004488, 8) , (const, 0x0, 4), (unique, 0x10004488, 8) CAST (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x1dc363, 1)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae40, 8) MULTIEQUAL (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8) , (ram, 0x4eae40, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1ded17, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10004490, 8), (unique, 0x10004490, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1ded1c, 8), (register, 0x20, 8) CAST (unique, 0x100044a0, 8), (unique, 0x100044a0, 8) INT_ADD (unique, 0x10004498, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10004498, 8) CAST (register, 0x20, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x10f, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x10e, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x10f, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x10e, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x10f, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x10e, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x10f, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x10e, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x10f, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x10e, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x10f, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x10e, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x10f, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x10f, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10e, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae40, 8) COPY (ram, 0x4eae40, 8), (ram, 0x4eae40, 8) INDIRECT (ram, 0x4eae40, 8) , (const, 0x10f, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae40, 8) COPY (ram, 0x4eae40, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
