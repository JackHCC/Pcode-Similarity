[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) CAST (unique, 0x1000043e, 8), (unique, 0x1000043e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[ ---  CBRANCH (ram, 0x1e8000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x45c, 4)]
[ ---  CBRANCH (ram, 0x1e7f40, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x38, 4) , (const, 0x45d, 4)]
[ ---  CBRANCH (ram, 0x1e8000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x46d, 4)]
[ ---  CBRANCH (ram, 0x1e8020, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x38, 4) , (const, 0x46e, 4)]
[ ---  CBRANCH (ram, 0x1e81d0, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x38, 4) , (const, 0x464, 4)]
[ ---  CBRANCH (ram, 0x1e8000, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x46b, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x1e8070, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (register, 0x38, 4) , (const, 0x466, 4)]
[ ---  CBRANCH (ram, 0x1e8070, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (register, 0x38, 4) , (const, 0x462, 4)]
[ ---  CBRANCH (ram, 0x1e83f0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x45f, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x1e8268, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 4) , (const, 0x460, 4)]
[ ---  CBRANCH (ram, 0x1e8236, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 4) , (const, 0x461, 4)]
[ ---  CBRANCH (ram, 0x1e8000, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (register, 0x38, 4) , (const, 0x45e, 4)]
[ ---  CBRANCH (ram, 0x1e8250, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x38, 4) , (const, 0x474, 4)]
[ ---  CBRANCH (ram, 0x1e8070, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (register, 0x38, 4) , (const, 0x472, 4)]
[ ---  CBRANCH (ram, 0x1e83e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x470, 4)]
[ ---  CBRANCH (ram, 0x1e8058, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x470, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x1e83c8, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x47b, 4) , (register, 0x38, 4)]
[(register, 0x18, 8) COPY (const, 0x12, 8)]
[(register, 0x30, 8) COPY (const, 0x28dd68, 8)]
[ ---  CBRANCH (ram, 0x1e8236, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x38, 4) , (const, 0x47e, 4)]
[ ---  CBRANCH (ram, 0x1e81e8, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (register, 0x38, 4) , (const, 0x476, 4)]
[ ---  CBRANCH (ram, 0x1e8390, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x3ef, 4)]
[ ---  CBRANCH (ram, 0x1e7fc0, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x38, 4) , (const, 0x3f0, 4)]
[ ---  CBRANCH (ram, 0x1e8058, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x451, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x3a0, 4)]
[(register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0xee, 4)]
[ ---  CBRANCH (ram, 0x1e83a8, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x38, 4) , (const, 0x452, 4)]
[ ---  CBRANCH (ram, 0x1e8070, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x38, 4) , (const, 0x456, 4)]
[ ---  CBRANCH (ram, 0x1e81e8, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x453, 4) , (register, 0x38, 4)]
[(register, 0x18, 8) COPY (const, 0x5, 8)]
[(register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x28dd63, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[ ---  CBRANCH (ram, 0x1e8268, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x44f, 4) , (register, 0x38, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x373, 4)]
[ ---  CBRANCH (ram, 0x1e8070, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0xee, 4)]
[(register, 0x18, 8) COPY (const, 0x30, 8)]
[(register, 0x30, 8) COPY (const, 0x291988, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[ ---  CBRANCH (ram, 0x1e8070, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (register, 0x38, 4) , (const, 0x44e, 4)]
[ ---  CBRANCH (ram, 0x1e8000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 4) , (const, 0x44c, 4)]
[ ---  CBRANCH (ram, 0x1e8236, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 4) , (const, 0x44d, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x362, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x362, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x362, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x362, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x362, 4)]
[(register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0xed, 4)]
[(unique, 0x100003ea, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(unique, 0x100003f2, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x100003fa, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000402, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(unique, 0x10000406, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[ ---  CBRANCH (ram, 0x1e800f, 1) , (unique, 0x100003e9, 1), (unique, 0x100003e9, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x18, 8) COPY (const, 0x5, 8)]
[(register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x28dd48, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[ ---  CBRANCH (ram, 0x1e82c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x5, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2b7, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2b7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2b7, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2b7, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x2b7, 4)]
[ ---  CBRANCH (ram, 0x1e8408, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0xed, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x30b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x30b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x30b, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x30b, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x30b, 4)]
[ ---  CBRANCH (ram, 0x1e8539, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0xee, 4)]
[(register, 0x18, 8) COPY (const, 0x2a, 8)]
[(register, 0x30, 8) COPY (const, 0x29, 8)]
[(register, 0x10, 8) COPY (const, 0x16, 8)]
[(register, 0x0, 8) COPY (const, 0x15, 8)]
[ ---  BRANCH (ram, 0x1e832c, 1)]
[(register, 0x18, 8) COPY (const, 0x14, 8)]
[(register, 0x30, 8) COPY (const, 0x13, 8)]
[(unique, 0x1000042e, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x1e8359, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2d2, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2d2, 4), (stack, 0xffffffffffffff78, 8) COPY (const, 0x37565f5849534f50, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2d2, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x4f5f3233504c495f, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2d2, 4), (stack, 0xffffffffffffff88, 4) COPY (const, 0x32334646, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x2d2, 4)]
[ ---  CBRANCH (ram, 0x1e84f6, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0xee, 4)]
[(register, 0x18, 8) COPY (const, 0x29, 8)]
[(register, 0x30, 8) COPY (const, 0x28, 8)]
[(register, 0x10, 8) COPY (const, 0x15, 8)]
[(register, 0x0, 8) COPY (const, 0x14, 8)]
[ ---  BRANCH (ram, 0x1e8352, 1)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff8d, 8)]
[(stack, 0xffffffffffffff8c, 1) COPY (const, 0xa, 1)]
[(register, 0x18, 8) COPY (const, 0x3f, 8)]
[(register, 0x30, 8) COPY (const, 0x3e, 8)]
[(register, 0x10, 8) COPY (const, 0x2b, 8)]
[(register, 0x0, 8) COPY (const, 0x2a, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000446, 8) , (const, 0x49424646, 4), (unique, 0x10000446, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x47, 1), (unique, 0x3100, 8) CAST (unique, 0x10000456, 8), (unique, 0x10000456, 8) INT_ADD (unique, 0x1000044e, 8) , (const, 0x14, 8), (unique, 0x1000044e, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2f0, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0x37565f5849534f50, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2f4, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2f0, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2f4, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2f0, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2eb, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x2f4, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x2f0, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x2ee, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x2eb, 4), (stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x4f5f3233504c495f, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x2f8, 4), (stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0xa, 1), (unique, 0x3400, 8) CAST (unique, 0x10000466, 8), (unique, 0x10000466, 8) INT_ADD (unique, 0x1000045e, 8) , (register, 0x0, 8), (unique, 0x1000045e, 8) CAST (unique, 0x10000389, 8), (unique, 0x10000389, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10000426, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10000476, 8), (unique, 0x10000476, 8) INT_ADD (unique, 0x1000046e, 8) , (register, 0x10, 8), (unique, 0x1000046e, 8) CAST (unique, 0x100003a1, 8), (unique, 0x100003a1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x10000426, 8) , (unique, 0x1000042e, 8)]
[(register, 0x0, 8) COPY (const, 0x37565f5849534f50, 8)]
[ ---  CBRANCH (ram, 0x1e8218, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x5, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x1e8390, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x3ec, 4)]
[(register, 0x18, 8) COPY (const, 0x16, 8)]
[(register, 0x30, 8) COPY (const, 0x28dd4d, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[ ---  CBRANCH (ram, 0x1e8070, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x38, 4) , (const, 0x3ed, 4)]
[ ---  CBRANCH (ram, 0x1e8070, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (register, 0x38, 4) , (const, 0x3e8, 4)]
[(stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (unique, 0x10000406, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (unique, 0x10000402, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x100003fa, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x100003f2, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (unique, 0x100003ea, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x18, 8) COPY (const, 0x1, 8)]
[(register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c365, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[ ---  CBRANCH (ram, 0x1e82a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x2, 4)]
[(register, 0x18, 8) COPY (const, 0xb, 8)]
[(register, 0x30, 8) COPY (const, 0x28dd7a, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[ ---  CBRANCH (ram, 0x1e8088, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x2, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x1e8290, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1e8236, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 4) , (const, 0x1, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x20e, 4)]
[ ---  CBRANCH (ram, 0x1e8478, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0xb0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x276, 4)]
[ ---  CBRANCH (ram, 0x1e8524, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0xb1, 4)]
[(register, 0x18, 8) COPY (const, 0x2a, 8)]
[(register, 0x30, 8) COPY (const, 0x29, 8)]
[(register, 0x10, 8) COPY (const, 0x16, 8)]
[(register, 0x0, 8) COPY (const, 0x15, 8)]
[ ---  BRANCH (ram, 0x1e8105, 1)]
[(register, 0x18, 8) COPY (const, 0x14, 8)]
[(register, 0x30, 8) COPY (const, 0x13, 8)]
[ ---  BRANCH (ram, 0x1e8132, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x229, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x229, 4), (stack, 0xffffffffffffff78, 8) COPY (const, 0x36565f5849534f50, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x229, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x4f5f3233504c495f, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x229, 4), (stack, 0xffffffffffffff88, 4) COPY (const, 0x32334646, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x229, 4)]
[ ---  CBRANCH (ram, 0x1e84dd, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0xb1, 4)]
[(register, 0x18, 8) COPY (const, 0x29, 8)]
[(register, 0x30, 8) COPY (const, 0x28, 8)]
[(register, 0x10, 8) COPY (const, 0x15, 8)]
[(register, 0x0, 8) COPY (const, 0x14, 8)]
[ ---  BRANCH (ram, 0x1e812b, 1)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff8d, 8)]
[(stack, 0xffffffffffffff8c, 1) COPY (const, 0xa, 1)]
[(register, 0x18, 8) COPY (const, 0x3f, 8)]
[(register, 0x30, 8) COPY (const, 0x3e, 8)]
[(register, 0x10, 8) COPY (const, 0x2b, 8)]
[(register, 0x0, 8) COPY (const, 0x2a, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000047e, 8) , (const, 0x49424646, 4), (unique, 0x1000047e, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x47, 1), (unique, 0x3100, 8) CAST (unique, 0x1000048e, 8), (unique, 0x1000048e, 8) INT_ADD (unique, 0x10000486, 8) , (const, 0x14, 8), (unique, 0x10000486, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x247, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0x36565f5849534f50, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x24b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x247, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x24b, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x247, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x242, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x24b, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x247, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x245, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x242, 4), (stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x4f5f3233504c495f, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x24f, 4), (stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0xa, 1), (unique, 0x3400, 8) CAST (unique, 0x1000049e, 8), (unique, 0x1000049e, 8) INT_ADD (unique, 0x10000496, 8) , (register, 0x0, 8), (unique, 0x10000496, 8) CAST (unique, 0x10000309, 8), (unique, 0x10000309, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x10, 8) CAST (unique, 0x100004ae, 8), (unique, 0x100004ae, 8) INT_ADD (unique, 0x100004a6, 8) , (register, 0x10, 8), (unique, 0x100004a6, 8) CAST (unique, 0x10000321, 8), (unique, 0x10000321, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) COPY (const, 0x36565f5849534f50, 8)]
[ ---  BRANCH (ram, 0x1e8363, 1)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x25c, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x261, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x25c, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x464f5f3436504c5f, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x264, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x261, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x25c, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004b6, 8) , (const, 0x3646, 2), (unique, 0x100004b6, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x34, 1), (unique, 0x3100, 8) CAST (unique, 0x100004c6, 8), (unique, 0x100004c6, 8) INT_ADD (unique, 0x100004be, 8) , (const, 0x12, 8), (unique, 0x100004be, 8) CAST (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x26b, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x267, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x264, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x261, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x25c, 4), (stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 1), (unique, 0x3400, 8) CAST (unique, 0x100004d6, 8), (unique, 0x100004d6, 8) INT_ADD (unique, 0x100004ce, 8) , (register, 0x30, 8), (unique, 0x100004ce, 8) CAST (unique, 0x100003c9, 8), (unique, 0x100003c9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[(register, 0x18, 8) COPY (const, 0xe, 8)]
[(register, 0x30, 8) COPY (const, 0x2919b8, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[ ---  CBRANCH (ram, 0x1e8200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x3, 4)]
[(register, 0x18, 8) COPY (const, 0xa, 8)]
[(register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x28dd85, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[ ---  CBRANCH (ram, 0x1e8236, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 4) , (const, 0x4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004de, 8) , (const, 0x16, 4), (unique, 0x100004de, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1e7, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x66, 4)]
[ ---  CBRANCH (ram, 0x1e8440, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0x7d, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1cb, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1cb, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1cb, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1cb, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x1cb, 4)]
[ ---  CBRANCH (ram, 0x1e850f, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0x7e, 4)]
[(register, 0x18, 8) COPY (const, 0x22, 8)]
[(register, 0x30, 8) COPY (const, 0x21, 8)]
[(register, 0x10, 8) COPY (const, 0x12, 8)]
[(register, 0x0, 8) COPY (const, 0x11, 8)]
[ ---  BRANCH (ram, 0x1e7ee8, 1)]
[(register, 0x18, 8) COPY (const, 0x10, 8)]
[(register, 0x30, 8) COPY (const, 0xf, 8)]
[ ---  BRANCH (ram, 0x1e7f0e, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7e, 4), (stack, 0xffffffffffffff78, 8) COPY (const, 0x504c495f35534258, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7e, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x323346464f5f3233, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x7e, 4)]
[ ---  CBRANCH (ram, 0x1e84c4, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1cd4f0, 8) , (const, 0x7e, 4)]
[(register, 0x18, 8) COPY (const, 0x21, 8)]
[(register, 0x30, 8) COPY (const, 0x20, 8)]
[(register, 0x10, 8) COPY (const, 0x11, 8)]
[(register, 0x0, 8) COPY (const, 0x10, 8)]
[ ---  BRANCH (ram, 0x1e7f07, 1)]
[(unique, 0x3800, 8) CAST (unique, 0x100004e6, 8), (unique, 0x100004e6, 8) PTRADD (unique, 0x10000261, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x10000261, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff88, 4) INT_ADD (unique, 0x10000422, 4) , (const, 0xa, 1), (unique, 0x10000422, 4) INT_LEFT (unique, 0x1000041e, 4) , (const, 0x8, 4), (unique, 0x1000041e, 4) INT_SEXT (unique, 0x100004ee, 3), (unique, 0x100004ee, 3) CAST (stack, 0xffffffffffffff89, 3), (stack, 0xffffffffffffff89, 3) SUBPIECE (stack, 0xffffffffffffff88, 4) , (const, 0x1, 8)]
[(register, 0x18, 8) COPY (const, 0x33, 8)]
[(register, 0x30, 8) COPY (const, 0x32, 8)]
[(register, 0x10, 8) COPY (const, 0x23, 8)]
[(register, 0x0, 8) COPY (const, 0x22, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004f1, 8) , (const, 0x47, 1), (unique, 0x100004f1, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x99, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0x504c495f35534258, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x99, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x9d, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x99, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x97, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x9d, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0x97, 4), (stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x494246464f5f3233, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xa1, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0xa1, 4), (stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0xa, 1), (unique, 0x3400, 8) CAST (unique, 0x10000501, 8), (unique, 0x10000501, 8) INT_ADD (unique, 0x100004f9, 8) , (register, 0x0, 8), (unique, 0x100004f9, 8) CAST (unique, 0x10000289, 8), (unique, 0x10000289, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x10, 8) CAST (unique, 0x10000511, 8), (unique, 0x10000511, 8) INT_ADD (unique, 0x10000509, 8) , (register, 0x10, 8), (unique, 0x10000509, 8) CAST (unique, 0x100002a1, 8), (unique, 0x100002a1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000519, 8) , (const, 0x464f5f34, 4), (unique, 0x10000519, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x34, 1), (unique, 0x3100, 8) CAST (unique, 0x10000529, 8), (unique, 0x10000529, 8) INT_ADD (unique, 0x10000521, 8) , (const, 0xe, 8), (unique, 0x10000521, 8) CAST (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (const, 0x36504c5f35534258, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x3646, 2), (unique, 0x3100, 8) CAST (unique, 0x10000539, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x10000531, 8) , (const, 0xc, 8), (unique, 0x10000531, 8) CAST (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xbb, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb1, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xae, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0xbb, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0xb7, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0xb3, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0xb1, 4), (stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0xae, 4), (stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 1), (unique, 0x3400, 8) CAST (unique, 0x10000549, 8), (unique, 0x10000549, 8) INT_ADD (unique, 0x10000541, 8) , (register, 0x30, 8), (unique, 0x10000541, 8) CAST (unique, 0x100002c1, 8), (unique, 0x100002c1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0x10000436, 8) COPY (unique, 0x10000551, 8), (unique, 0x10000551, 8) CAST (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x1e7f88, 1)]
[(stack, 0xffffffffffffff8c, 1) MULTIEQUAL (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (unique, 0x10000406, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1) , (stack, 0xffffffffffffff8c, 1)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (unique, 0x10000402, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x100003fa, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x100003f2, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (unique, 0x100003ea, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000436, 8) , (register, 0x30, 8) , (register, 0x20, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1e7fad, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1e7fad, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1e8148, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x10, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1e8180, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x18, 4) , (const, 0x8, 4), (register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000561, 8) , (unique, 0xbd80, 8), (unique, 0x10000561, 8) CAST (register, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000559, 8), (unique, 0x10000559, 8) CAST (register, 0x30, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x15a, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x14e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000579, 8) , (unique, 0xbd80, 8), (unique, 0x10000579, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000349, 8) , (const, 0x1, 8), (unique, 0x10000349, 8) INT_SUB (register, 0x18, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000571, 8), (unique, 0x10000571, 8) INT_ADD (unique, 0x10000569, 8) , (unique, 0x10000341, 8), (unique, 0x10000569, 8) CAST (register, 0x30, 8), (unique, 0x10000341, 8) INT_SUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1e7fad, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0x7, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff8, 4), (register, 0x0, 4) INT_ADD (register, 0x18, 4) , (unique, 0x1000014d, 4), (unique, 0x1000014d, 4) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4), (register, 0xa0, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000141, 8) , (const, 0x1, 8), (unique, 0x10000141, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x10000581, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000581, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[(register, 0x8, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1c0, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbd80, 8), (unique, 0x3400, 8) CAST (unique, 0x100005a1, 8), (unique, 0x100005a1, 8) INT_ADD (register, 0x10, 8) , (register, 0x38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000599, 8), (unique, 0x10000599, 8) INT_ADD (unique, 0x10000591, 8) , (unique, 0x10000351, 8), (unique, 0x10000591, 8) CAST (register, 0x30, 8), (unique, 0x10000351, 8) INT_SUB (register, 0x38, 8) , (unique, 0x10000589, 8), (unique, 0x10000589, 8) CAST (register, 0xa0, 8), (register, 0x38, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1e81b7, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 4) , (register, 0x0, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1e84b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000131, 8) , (const, 0x0, 8), (unique, 0x10000131, 8) INT_AND (register, 0x18, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005b1, 8) , (unique, 0xbc80, 4), (unique, 0x100005b1, 8) CAST (register, 0x30, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005a9, 8), (unique, 0x100005a9, 8) CAST (register, 0x30, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x149, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x13e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005c9, 8) , (unique, 0xbc80, 4), (unique, 0x100005c9, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x30, 8) , (unique, 0x100003e1, 8) , (const, 0x1, 8), (unique, 0x100003e1, 8) INT_SUB (register, 0x18, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100005c1, 8), (unique, 0x100005c1, 8) INT_ADD (unique, 0x100005b9, 8) , (unique, 0x100003d9, 8), (unique, 0x100005b9, 8) CAST (register, 0x30, 8), (unique, 0x100003d9, 8) INT_SUB (register, 0x18, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x1e7fad, 1)]
[ ---  CBRANCH (ram, 0x1e7fad, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 4) , (const, 0x0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x12c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1e7fad, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000139, 8) , (const, 0x0, 8), (unique, 0x10000139, 8) INT_AND (register, 0x18, 8) , (const, 0x2, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x138, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005e1, 8) , (unique, 0xbc00, 2), (unique, 0x100005e1, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000339, 8) , (const, 0x1, 8), (unique, 0x10000339, 8) INT_SUB (register, 0x18, 8) , (const, 0x2, 8), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100005d9, 8), (unique, 0x100005d9, 8) INT_ADD (unique, 0x100005d1, 8) , (unique, 0x10000331, 8), (unique, 0x100005d1, 8) CAST (register, 0x30, 8), (unique, 0x10000331, 8) INT_SUB (register, 0x18, 8) , (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x1e7fad, 1)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffff8c, 1) INDIRECT (stack, 0xffffffffffffff8c, 1) , (const, 0xe2, 4)]
[ ---  CALL (ram, 0x193a40, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_SUB (register, 0x10, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xe7, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xe2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1), (unique, 0x3a00, 8) PTRADD (register, 0x30, 8) , (unique, 0x100002d1, 8) , (const, 0x1, 8), (unique, 0x100002d1, 8) INT_SUB (register, 0x10, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x18, 8)]
