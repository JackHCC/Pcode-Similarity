[(unique, 0x100001b7, 8) COPY (ram, 0x4c2e78, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001cf, 8), (unique, 0x100001cf, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x23, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x23, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x23, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x23, 4)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x23, 4), (stack, 0xfffffffffffffe54, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x23, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x23, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x23, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x23, 4)]
[ ---  CBRANCH (ram, 0x1f7ce0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1fbdc0, 8) , (register, 0x38, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x35, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x35, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x35, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x35, 4)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x35, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x35, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x35, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x35, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x35, 4)]
[ ---  CBRANCH (ram, 0x1f7ce0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f6370, 8) , (const, 0x1, 4) , (register, 0x38, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe58, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x60, 4)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x60, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x60, 4), (stack, 0xfffffffffffffe58, 8) COPY (const, 0x65732f636f72702f, 8)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0x60, 4), (stack, 0xfffffffffffffe60, 4) COPY (const, 0x662f666c, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0x60, 4), (stack, 0xfffffffffffffe64, 2) COPY (const, 0x2f64, 2)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0x60, 4), (stack, 0xfffffffffffffe66, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x60, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x60, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x60, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x60, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x63, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x60, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x63, 4), (ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x60, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x63, 4), (ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x60, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x100001d7, 8), (unique, 0x100001d7, 8) CALL (ram, 0x14a740, 8) , (register, 0x38, 8) , (unique, 0x3100, 8) , (const, 0xa, 8) , (const, 0x0, 8), (register, 0x38, 8) INT_SEXT (register, 0x38, 4), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe66, 8)]
[ ---  CBRANCH (ram, 0x1f7ca8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001c7, 8) , (const, 0x0, 8), (unique, 0x100001c7, 8) COPY (ram, 0x4c5fa8, 8), (ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x60, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b9, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1b9, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x1b9, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x1b9, 4), (ram, 0x4c5fa8, 8) COPY (const, 0xfff, 8)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x1b9, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x1b9, 4)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0x1b9, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0x1b9, 4)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0x1b9, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1b9, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1b9, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1b9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1b9, 4)]
[ ---  CBRANCH (ram, 0x1f7db0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100001df, 8), (unique, 0x100001df, 8) CALL (ram, 0x11f8a0, 8) , (const, 0x1000, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c4790, 8) COPY (register, 0x0, 8)]
[(ram, 0x4c5fa8, 8) COPY (const, 0x0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x10, 8) COPY (const, 0xfff, 8)]
[ ---  BRANCH (ram, 0x1f7ba6, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x72, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x72, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x72, 4), (ram, 0x4c5fa8, 8) MULTIEQUAL (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x72, 4), (stack, 0xfffffffffffffe54, 4) MULTIEQUAL (stack, 0xfffffffffffffe54, 4) , (stack, 0xfffffffffffffe54, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x72, 4), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0x72, 4), (stack, 0xfffffffffffffe60, 4) MULTIEQUAL (stack, 0xfffffffffffffe60, 4) , (stack, 0xfffffffffffffe60, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0x72, 4), (stack, 0xfffffffffffffe64, 2) MULTIEQUAL (stack, 0xfffffffffffffe64, 2) , (stack, 0xfffffffffffffe64, 2)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0x72, 4), (stack, 0xfffffffffffffe66, 1) MULTIEQUAL (stack, 0xfffffffffffffe66, 1) , (stack, 0xfffffffffffffe66, 1)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x72, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x72, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x72, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x72, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x100001bf, 8) COPY (ram, 0x4c4790, 8), (ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x72, 4), (ram, 0x4c4790, 8) MULTIEQUAL (register, 0x0, 8) , (ram, 0x4c4790, 8)]
[ ---  CBRANCH (ram, 0x1f7d68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x1f8170, 8) , (unique, 0x100001e7, 8) , (ram, 0x4c4790, 8) , (register, 0x10, 8), (unique, 0x100001e7, 8) CAST (unique, 0x3800, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0x100001c7, 8), (ram, 0x4c4790, 8) MULTIEQUAL (register, 0x0, 8) , (ram, 0x4c4790, 8)]
[ ---  CBRANCH (ram, 0x1f7ce0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (ram, 0x4c5fa8, 8) , (register, 0x0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c4790, 8) COPY (ram, 0x4c4790, 8)]
[(ram, 0x4c5fa8, 8) COPY (ram, 0x4c5fa8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1f7bf1, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xd, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9a, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x9a, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x9a, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x9a, 4)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x9a, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x9a, 4)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0x9a, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0x9a, 4)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0x9a, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x9a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x9a, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x9a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x9a, 4)]
[ ---  CBRANCH (ram, 0x1f7cf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (ram, 0x4c4790, 8) , (unique, 0x1000014e, 8) , (const, 0xd, 8), (unique, 0x1000014e, 8) COPY (const, 0x28df35, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1b0, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x1b0, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1b0, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1b0, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1b0, 4)]
[ ---  CALL (ram, 0x18e5c0, 8) , (unique, 0x100001bf, 8) , (unique, 0x3100, 8) , (register, 0x18, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100001bf, 8) , (const, 0xd, 8) , (const, 0x1, 8), (register, 0x18, 8) INT_SUB (register, 0x0, 8) , (const, 0xd, 8)]
[ ---  BRANCH (ram, 0x1f7bf1, 1)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffe66, 1) MULTIEQUAL (stack, 0xfffffffffffffe66, 1) , (stack, 0xfffffffffffffe66, 1) , (stack, 0xfffffffffffffe66, 1)]
[(stack, 0xfffffffffffffe64, 2) MULTIEQUAL (stack, 0xfffffffffffffe64, 2) , (stack, 0xfffffffffffffe64, 2) , (stack, 0xfffffffffffffe64, 2)]
[(stack, 0xfffffffffffffe60, 4) MULTIEQUAL (stack, 0xfffffffffffffe60, 4) , (stack, 0xfffffffffffffe60, 4) , (stack, 0xfffffffffffffe60, 4)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe54, 4) MULTIEQUAL (stack, 0xfffffffffffffe54, 4) , (stack, 0xfffffffffffffe54, 4) , (stack, 0xfffffffffffffe54, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xa8, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0xa8, 4), (ram, 0x4c4790, 8) MULTIEQUAL (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0xa8, 4), (ram, 0x4c5fa8, 8) MULTIEQUAL (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (const, 0x0, 1), (unique, 0x3b80, 8) PTRADD (unique, 0x100001bf, 8) , (register, 0x18, 8) , (const, 0x1, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x18, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x1f7d10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100001bf, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x168, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x168, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x168, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x168, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x168, 4)]
[ ---  CBRANCH (ram, 0x1f7c0a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f6320, 8) , (const, 0x1, 4) , (unique, 0x100001bf, 8) , (unique, 0x3c80, 8)]
[ ---  CBRANCH (ram, 0x1f7c0a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff60, 4) , (const, 0xf000, 4)]
[ ---  CBRANCH (ram, 0x1f7c0a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xfffffffffffffee0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c4790, 8) COPY (ram, 0x4c4790, 8)]
[(ram, 0x4c5fa8, 8) COPY (ram, 0x4c5fa8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (ram, 0x4c4790, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbd, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xbd, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0xbd, 4), (ram, 0x4c4790, 8) MULTIEQUAL (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0xbd, 4), (ram, 0x4c5fa8, 8) MULTIEQUAL (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0xbd, 4), (stack, 0xfffffffffffffe54, 4) MULTIEQUAL (stack, 0xfffffffffffffe54, 4) , (stack, 0xfffffffffffffe54, 4) , (stack, 0xfffffffffffffe54, 4) , (stack, 0xfffffffffffffe54, 4) , (stack, 0xfffffffffffffe54, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0xbd, 4), (stack, 0xfffffffffffffe60, 4) MULTIEQUAL (stack, 0xfffffffffffffe60, 4) , (stack, 0xfffffffffffffe60, 4) , (stack, 0xfffffffffffffe60, 4) , (stack, 0xfffffffffffffe60, 4) , (stack, 0xfffffffffffffe60, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0xbd, 4), (stack, 0xfffffffffffffe64, 2) MULTIEQUAL (stack, 0xfffffffffffffe64, 2) , (stack, 0xfffffffffffffe64, 2) , (stack, 0xfffffffffffffe64, 2) , (stack, 0xfffffffffffffe64, 2) , (stack, 0xfffffffffffffe64, 2)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0xbd, 4), (stack, 0xfffffffffffffe66, 1) MULTIEQUAL (stack, 0xfffffffffffffe66, 1) , (stack, 0xfffffffffffffe66, 1) , (stack, 0xfffffffffffffe66, 1) , (stack, 0xfffffffffffffe66, 1) , (stack, 0xfffffffffffffe66, 1)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xbd, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[ ---  CBRANCH (ram, 0x1f7c39, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f6320, 8) , (const, 0x1, 4) , (unique, 0x10000156, 8) , (register, 0x18, 8), (unique, 0x10000156, 8) COPY (const, 0x28df43, 8), (register, 0x18, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x1f7d78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff60, 4) , (const, 0xf000, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xe3, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0xe3, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0xe3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001ef, 8) , (unique, 0xbc80, 4), (unique, 0x100001ef, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x100001b7, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x156, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x156, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x156, 4)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x156, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x156, 4)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0x156, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0x156, 4)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0x156, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x156, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x156, 4)]
[ ---  CBRANCH (ram, 0x1f7ce2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100001f7, 8), (unique, 0x100001f7, 8) CALL (ram, 0x243730, 8) , (unique, 0x1000015e, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffec0, 8) , (unique, 0xbc80, 4) , (unique, 0x3800, 8), (unique, 0x1000015e, 8) COPY (const, 0x28df43, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe54, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c4790, 8) COPY (ram, 0x4c4790, 8)]
[(ram, 0x4c5fa8, 8) COPY (ram, 0x4c5fa8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffe66, 1) MULTIEQUAL (stack, 0xfffffffffffffe66, 1) , (stack, 0xfffffffffffffe66, 1)]
[(stack, 0xfffffffffffffe64, 2) MULTIEQUAL (stack, 0xfffffffffffffe64, 2) , (stack, 0xfffffffffffffe64, 2)]
[(stack, 0xfffffffffffffe60, 4) MULTIEQUAL (stack, 0xfffffffffffffe60, 4) , (stack, 0xfffffffffffffe60, 4)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(ram, 0x4c5fa8, 8) MULTIEQUAL (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8)]
[(ram, 0x4c4790, 8) MULTIEQUAL (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x1f7ce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe54, 4) , (const, 0xffffffff, 4), (stack, 0xfffffffffffffe54, 4) MULTIEQUAL (stack, 0xfffffffffffffe54, 4) , (stack, 0xfffffffffffffe54, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x100, 4)]
[(ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x100, 4)]
[(ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x100, 4)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x100, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x100, 4)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0x100, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0x100, 4)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0x100, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x100, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x100, 4)]
[ ---  CBRANCH (ram, 0x1f7ce2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100001ff, 8), (unique, 0x100001ff, 8) CALL (ram, 0x243730, 8) , (unique, 0x10000166, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffec0, 8) , (unique, 0xbc80, 4) , (unique, 0x3800, 8), (unique, 0x10000166, 8) PTRSUB (const, 0x0, 8) , (const, 0x28df4c, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe54, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c4790, 8) COPY (ram, 0x4c4790, 8)]
[(ram, 0x4c5fa8, 8) COPY (ram, 0x4c5fa8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1f7ce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe54, 4) , (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffe54, 4) INDIRECT (stack, 0xfffffffffffffe54, 4) , (const, 0x129, 4), (stack, 0xfffffffffffffe54, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe60, 4) INDIRECT (stack, 0xfffffffffffffe60, 4) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe64, 2) INDIRECT (stack, 0xfffffffffffffe64, 2) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe66, 1) INDIRECT (stack, 0xfffffffffffffe66, 1) , (const, 0x129, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x129, 4)]
[(ram, 0x4c4790, 8) COPY (ram, 0x4c4790, 8), (ram, 0x4c4790, 8) INDIRECT (ram, 0x4c4790, 8) , (const, 0x129, 4)]
[(ram, 0x4c5fa8, 8) COPY (ram, 0x4c5fa8, 8), (ram, 0x4c5fa8, 8) INDIRECT (ram, 0x4c5fa8, 8) , (const, 0x129, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000207, 8), (unique, 0x10000207, 8) CALL (ram, 0x243730, 8) , (unique, 0x1000016e, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffec0, 8) , (unique, 0xbc80, 4) , (unique, 0x3800, 8), (unique, 0x1000016e, 8) PTRSUB (const, 0x0, 8) , (const, 0x28df4c, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4790, 8) COPY (ram, 0x4c4790, 8), (ram, 0x4c4790, 8) MULTIEQUAL (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8) , (ram, 0x4c4790, 8)]
[(ram, 0x4c5fa8, 8) COPY (ram, 0x4c5fa8, 8), (ram, 0x4c5fa8, 8) MULTIEQUAL (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8) , (ram, 0x4c5fa8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
