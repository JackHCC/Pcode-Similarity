[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff75, 1) COPY (register, 0x30, 1)]
[(stack, 0xffffffffffffff50, 8) COPY (unique, 0x3a00, 8), (unique, 0x3a00, 8) INT_ADD (register, 0x0, 8) , (const, 0x4c61a0, 8), (register, 0x0, 8) INT_MULT (unique, 0x10000fda, 8) , (const, 0x90, 8), (unique, 0x10000fda, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fd2, 8), (unique, 0x10000fd2, 8) INT_ADD (register, 0x38, 8) , (const, 0x30, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x10000fe2, 8), (unique, 0x10000fe2, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x10000a55, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000a55, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c6180, 8), (register, 0x0, 8) INT_MULT (unique, 0x10000fda, 8) , (const, 0x90, 8), (unique, 0x10000fda, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fd2, 8), (unique, 0x10000fd2, 8) INT_ADD (register, 0x38, 8) , (const, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xb8, 8)]
[(ram, 0x4c80e0, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffff68, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x10000665, 4) SUBPIECE (unique, 0x3800, 8) , (const, 0x0, 4), (unique, 0x3800, 8) INT_ADD (register, 0xa0, 8) , (const, 0xf, 8), (register, 0xa0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000fea, 8), (unique, 0x10000fea, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff90, 8) , (const, 0x1, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x18, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001d6, 8) , (const, 0x1, 8), (unique, 0x100001d6, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3800, 8) INT_ADD (register, 0xa0, 8) , (const, 0xf, 8), (register, 0xa0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000fea, 8), (unique, 0x10000fea, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff90, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000faa, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x1000082f, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x10000837, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(unique, 0x1000083f, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x10000847, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x1000084f, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(unique, 0x10000853, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(unique, 0x10000854, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(unique, 0x10000855, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(unique, 0x10000856, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(unique, 0x10000857, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x1000085f, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000867, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x1000086f, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000877, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x1000087f, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000887, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000088f, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10000897, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x1000089f, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x48dd2a, 1) , (unique, 0x1000081e, 1), (unique, 0x1000081e, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000faa, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x10000837, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x1000083f, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x10000847, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x1000082f, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (unique, 0x1000084f, 4) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (unique, 0x10000853, 1) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (unique, 0x10000854, 1) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (unique, 0x10000855, 1) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (unique, 0x10000856, 1) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10000857, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x1000085f, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x10000867, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x1000086f, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000877, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000087f, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000887, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x1000088f, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x10000897, 8) , (const, 0xe4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000089f, 8) , (const, 0xe4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ffa, 8) , (unique, 0xbe00, 8), (unique, 0x10000ffa, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000ff2, 8), (unique, 0x10000ff2, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001f6, 8) , (const, 0x1, 8), (unique, 0x100001f6, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000665, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001f6, 8) , (const, 0x1, 8), (unique, 0x100001f6, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000665, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001f6, 8) , (const, 0x1, 8), (unique, 0x100001f6, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000665, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) CAST (unique, 0x10001002, 8), (unique, 0x10001002, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001f6, 8) , (const, 0x1, 8), (unique, 0x100001f6, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000665, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001f6, 8) , (const, 0x1, 8), (unique, 0x100001f6, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000665, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x48ddc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000665, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001012, 8) , (unique, 0xbe00, 8), (unique, 0x10001012, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000100a, 8), (unique, 0x1000100a, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x48dd3b, 1)]
[(register, 0x8, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000a6d, 8) , (const, 0x1, 8), (unique, 0x10000a6d, 8) INT_SUB (unique, 0x100001f6, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffff000, 8)]
[(unique, 0x10000f9a, 8) COPY (register, 0x20, 8)]
[(unique, 0x100008a8, 8) MULTIEQUAL (unique, 0x10000f9a, 8) , (unique, 0x10000fa2, 8)]
[(unique, 0x100008b0, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x48dd76, 1) , (unique, 0x100008a7, 1), (unique, 0x100008a7, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x8, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100008a8, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001022, 8) , (unique, 0xbe00, 8), (unique, 0x10001022, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000101a, 8), (unique, 0x1000101a, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100008a8, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100008a8, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10000fa2, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100008a8, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100008b0, 8) , (unique, 0x1000021e, 8) , (const, 0x1, 8), (unique, 0x1000021e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000665, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x100008b0, 8) , (unique, 0x1000021e, 8) , (const, 0x1, 8), (unique, 0x1000021e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000665, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x48ddcb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000665, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001032, 8) , (unique, 0xbe00, 8), (unique, 0x10001032, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000102a, 8), (unique, 0x1000102a, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x100008b0, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x48dd83, 1)]
[(unique, 0x10000675, 4) SUBPIECE (unique, 0x3580, 8) , (const, 0x0, 4), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0xf, 8), (unique, 0x3480, 8) INT_MULT (register, 0xa0, 8) , (const, 0x8, 8)]
[(register, 0x8, 8) PTRADD (unique, 0x100008b0, 8) , (unique, 0x10000ab5, 8) , (const, 0x1, 8), (unique, 0x10000ab5, 8) INT_SUB (unique, 0x1000021e, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0xf, 8), (unique, 0x3480, 8) INT_MULT (register, 0xa0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48ddd3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x8, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001042, 8) , (unique, 0xbe00, 8), (unique, 0x10001042, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000103a, 8), (unique, 0x1000103a, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x48dda9, 1)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000023e, 8) , (const, 0x1, 8), (unique, 0x1000023e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000675, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000023e, 8) , (const, 0x1, 8), (unique, 0x1000023e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000675, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x48ea90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000675, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001052, 8) , (unique, 0xbe00, 8), (unique, 0x10001052, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000104a, 8), (unique, 0x1000104a, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x48dde4, 1)]
[ ---  CBRANCH (ram, 0x48e900, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000086f, 8)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x48de1a, 1)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000e28, 8) COPY (unique, 0x1000105a, 8), (unique, 0x1000105a, 8) CAST (register, 0x20, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x284, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x284, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x284, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x284, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x284, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x284, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x284, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x284, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x284, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x284, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x284, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x284, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x284, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x284, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (register, 0x10, 4), (unique, 0x3200, 8) CAST (unique, 0x10001062, 8), (unique, 0x10001062, 8) INT_ADD (register, 0x0, 8) , (const, 0x3ec, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000e28, 8) , (unique, 0x10000e30, 8)]
[(unique, 0x10000e30, 8) COPY (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000e28, 8) , (unique, 0x10000e30, 8)]
[ ---  CBRANCH (ram, 0x48de00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000106a, 8), (unique, 0x1000106a, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x48eb11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001072, 8) , (const, 0x48eb30, 8), (unique, 0x10001072, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000acd, 8) , (const, 0x1, 8), (unique, 0x10000acd, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x10000837, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x1000083f, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x10000847, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x1000082f, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (unique, 0x1000084f, 4) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (unique, 0x10000853, 1) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (unique, 0x10000854, 1) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (unique, 0x10000855, 1) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (unique, 0x10000856, 1) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10000857, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x1000085f, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x10000867, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x1000086f, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000877, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000087f, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000887, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x1000088f, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x10000897, 8) , (const, 0xf9d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000089f, 8) , (const, 0xf9d, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10000995, 8) , (unique, 0x1000096d, 8) , (const, 0xb5, 4) , (unique, 0x10000a15, 8), (unique, 0x10000a15, 8) COPY (const, 0x4b5750, 8), (unique, 0x10000995, 8) COPY (const, 0x4b5531, 8), (unique, 0x1000096d, 8) COPY (const, 0x4b54f8, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xf9d, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xf9d, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xf9d, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xf9d, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xf9d, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000108a, 8) , (const, 0x48de38, 8), (unique, 0x1000108a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000ad5, 8) , (const, 0x1, 8), (unique, 0x10000ad5, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x401120, 8) , (register, 0x20, 8) , (const, 0x0, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001092, 8) , (const, 0x48de45, 8), (unique, 0x10001092, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000add, 8) , (const, 0x1, 8), (unique, 0x10000add, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2d7, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x2d7, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x2d7, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x2d7, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x2d7, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x2c8, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x2d7, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x2c8, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x2d7, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x2d7, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x2d7, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x2d7, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x2d7, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x2d7, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x2c8, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x2d7, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x2d7, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x2c8, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x2d7, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x10000837, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x1000083f, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x10000847, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x1000082f, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x2d7, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (unique, 0x1000084f, 4) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x2d7, 4), (stack, 0xffffffffffffff74, 1) INDIRECT (unique, 0x10000853, 1) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x2d7, 4), (stack, 0xffffffffffffff75, 1) INDIRECT (unique, 0x10000854, 1) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x2d7, 4), (stack, 0xffffffffffffff76, 1) INDIRECT (unique, 0x10000855, 1) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x2d7, 4), (stack, 0xffffffffffffff77, 1) INDIRECT (unique, 0x10000856, 1) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10000857, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x1000085f, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x10000867, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x1000086f, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000877, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000087f, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000887, 8) , (const, 0x2c8, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x1000088f, 8) , (const, 0x2c8, 4)]
[ ---  CALL (ram, 0x401120, 8) , (register, 0x20, 8) , (const, 0x0, 8) , (register, 0xa0, 8)]
[(unique, 0x10000de8, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2c8, 4), (stack, 0xffffffffffffffb8, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x48e9a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 4) , (const, 0x0, 4), (stack, 0xffffffffffffffc0, 4) SUBPIECE (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c8, 4), (stack, 0xffffffffffffffc0, 8) CAST (unique, 0x10001082, 8), (unique, 0x10001082, 8) INT_OR (unique, 0x10000697, 8) , (unique, 0x1000069f, 8), (unique, 0x1000069f, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10000697, 8) INT_AND (unique, 0x1000107a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000107a, 8) CAST (unique, 0x1000089f, 8)]
[(register, 0x10, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000aad, 8) , (const, 0x1, 8), (unique, 0x10000aad, 8) INT_ADD (register, 0x10, 8) , (unique, 0x100001f6, 8), (register, 0x10, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(register, 0x30, 4) INT_2COMP (register, 0x30, 4), (register, 0x30, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48eb43, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000109a, 8) , (const, 0x48eb50, 8), (unique, 0x1000109a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b0d, 8) , (const, 0x1, 8), (unique, 0x10000b0d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf95, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xf95, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xf95, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xf95, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xf95, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xf95, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xf95, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xf95, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xf95, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xf95, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xf95, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xf95, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xf95, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xf95, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xf95, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf95, 4)]
[ ---  CALL (ram, 0x48eda0, 8) , (stack, 0xffffffffffffffb8, 8) , (register, 0x30, 4) , (register, 0x10, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x48e303, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010a2, 8) , (const, 0x48e9d5, 8), (unique, 0x100010a2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b05, 8) , (const, 0x1, 8), (unique, 0x10000b05, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xf8f, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xf8f, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xf8f, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xf8f, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xf8f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf8f, 4)]
[ ---  CALL (ram, 0x48eda0, 8) , (unique, 0x3100, 8) , (register, 0x30, 4) , (register, 0x10, 8) , (const, 0x1, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffffb8, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x48e303, 1)]
[(register, 0x30, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x48de84, 1)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x48de78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100008b0, 8) , (unique, 0x10000abd, 8) , (const, 0x1, 8), (unique, 0x10000abd, 8) INT_ADD (register, 0x0, 8) , (unique, 0x1000021e, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100010aa, 4), (unique, 0x100010aa, 4) CAST (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x48dfd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x200000000, 8), (register, 0x10, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x3ffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100010b6, 8), (unique, 0x100010b6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x318, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100010ae, 8), (unique, 0x100010ae, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffb8, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48deab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100010be, 8), (unique, 0x100010be, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31f, 8)]
[ ---  CBRANCH (ram, 0x48deab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100010c6, 8), (unique, 0x100010c6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x460, 8)]
[ ---  CBRANCH (ram, 0x48deab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000a9d, 8) , (const, 0x1, 8), (unique, 0x10000a9d, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100001f6, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (const, 0x1, 1), (unique, 0x3b80, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000a75, 8) , (const, 0x1, 8), (unique, 0x10000a75, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100001f6, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x1, 1), (unique, 0x3400, 8) PTRADD (unique, 0x100008b0, 8) , (unique, 0x10000ac5, 8) , (const, 0x1, 8), (unique, 0x10000ac5, 8) INT_ADD (register, 0x0, 8) , (unique, 0x1000021e, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x32d, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x32d, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x32d, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x32d, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x32d, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x32d, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x32d, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x32d, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x32d, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x32d, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x32d, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x32d, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x32d, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x32d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (const, 0xffffffff, 4), (unique, 0x3200, 8) CAST (unique, 0x100010d6, 8), (unique, 0x100010d6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3ec, 8)]
[ ---  CBRANCH (ram, 0x48de68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100010ce, 8), (unique, 0x100010ce, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3c8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000fb2, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000d85, 8) MULTIEQUAL (unique, 0x10000fb2, 8) , (unique, 0x10000fba, 8)]
[(unique, 0x10000d96, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x48df15, 1) , (unique, 0x10000d95, 1), (unique, 0x10000d95, 1) INT_NOTEQUAL (unique, 0x10000d8d, 8) , (const, 0x0, 8), (unique, 0x10000d8d, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x10, 8) PTRADD (unique, 0x10000d85, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) INT_SEXT (unique, 0x100010e6, 4), (unique, 0x100010e6, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100010de, 8), (unique, 0x100010de, 8) INT_ADD (unique, 0x10000d8d, 8) , (const, 0x3ec, 8)]
[(unique, 0x10000f40, 4) COPY (unique, 0x10000d96, 4)]
[ ---  CBRANCH (ram, 0x48df04, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100010de, 8), (unique, 0x100010de, 8) INT_ADD (unique, 0x10000d8d, 8) , (const, 0x3ec, 8)]
[ ---  CBRANCH (ram, 0x48dee0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100010ea, 4) , (const, 0x0, 4), (unique, 0x100010ea, 4) CAST (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x48df25, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (stack, 0xffffffffffffffc0, 4) , (unique, 0xbc80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010ee, 8) , (unique, 0x10000925, 8), (unique, 0x100010ee, 8) CAST (register, 0x20, 8), (unique, 0x10000925, 8) PTRSUB (const, 0x0, 8) , (const, 0x48df44, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000ae5, 8) , (const, 0x1, 8), (unique, 0x10000ae5, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xeca, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xeca, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100009cd, 8) , (unique, 0x1000094d, 8) , (const, 0xdf, 4) , (unique, 0x100009f5, 8), (unique, 0x100009f5, 8) COPY (const, 0x4b5750, 8), (unique, 0x100009cd, 8) COPY (const, 0x4b55d0, 8), (unique, 0x1000094d, 8) COPY (const, 0x4b54f8, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xeca, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xeca, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xeca, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xeca, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xeca, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xeca, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xeca, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xeca, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xeca, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xeca, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xeca, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xeca, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xeca, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xeca, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x10000f44, 4) COPY (unique, 0x10000d96, 4)]
[ ---  CBRANCH (ram, 0x48df04, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000a7d, 8) , (const, 0x1, 8), (unique, 0x10000a7d, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100001f6, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (const, 0x1, 1), (unique, 0x3b80, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000a85, 8) , (const, 0x1, 8), (unique, 0x10000a85, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100001f6, 8)]
[(unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100010f6, 8), (unique, 0x100010f6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3ec, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0x10000f48, 4) COPY (unique, 0x10000d96, 4)]
[ ---  CBRANCH (ram, 0x48df04, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESSEQUAL (unique, 0xbc80, 4) , (unique, 0x100010fe, 4), (unique, 0x100010fe, 4) CAST (unique, 0x10000d96, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100010f6, 8), (unique, 0x100010f6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3ec, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0x10000f4c, 4) COPY (unique, 0x3100, 4)]
[(register, 0x30, 4) MULTIEQUAL (unique, 0x10000f40, 4) , (unique, 0x10000f44, 4) , (unique, 0x10000f48, 4) , (unique, 0x10000f4c, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000d85, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000fba, 8) COPY (register, 0x10, 8)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (unique, 0x10000d96, 4)]
[ ---  CBRANCH (ram, 0x48df48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001102, 8), (unique, 0x10001102, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3d0, 8)]
[ ---  CBRANCH (ram, 0x48de78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x48df96, 1)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x88, 4)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(register, 0x0, 8) INT_SEXT (unique, 0x1000111a, 4), (unique, 0x1000111a, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001112, 8), (unique, 0x10001112, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3ec, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000110a, 8), (unique, 0x1000110a, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x80, 8) , (unique, 0x10000c6d, 8) , (const, 0x4, 8), (unique, 0x10000c6d, 8) INT_ADD (unique, 0x10000c65, 8) , (const, 0x2, 8), (unique, 0x10000c65, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4), (register, 0x80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x48df8a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001112, 8), (unique, 0x10001112, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3ec, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000110a, 8), (unique, 0x1000110a, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x80, 8) , (unique, 0x10000c6d, 8) , (const, 0x4, 8), (unique, 0x10000c6d, 8) INT_ADD (unique, 0x10000c65, 8) , (const, 0x2, 8), (unique, 0x10000c65, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4), (register, 0x80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x48df60, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x1000111e, 4) , (const, 0x0, 4), (unique, 0x1000111e, 4) CAST (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x48dfad, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (stack, 0xffffffffffffffc0, 4) , (unique, 0xbc80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001122, 8) , (unique, 0x1000092d, 8), (unique, 0x10001122, 8) CAST (register, 0x20, 8), (unique, 0x1000092d, 8) PTRSUB (const, 0x0, 8) , (const, 0x48dfcc, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000aed, 8) , (const, 0x1, 8), (unique, 0x10000aed, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xe5b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe5b, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100009d5, 8) , (unique, 0x10000955, 8) , (const, 0xf8, 4) , (unique, 0x100009fd, 8), (unique, 0x100009fd, 8) COPY (const, 0x4b5750, 8), (unique, 0x100009d5, 8) COPY (const, 0x4b5600, 8), (unique, 0x10000955, 8) COPY (const, 0x4b54f8, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xe5b, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xe5b, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xe5b, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xe5b, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xe5b, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48df8a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000a8d, 8) , (const, 0x1, 8), (unique, 0x10000a8d, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100001f6, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (const, 0x1, 1), (unique, 0x3b80, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000a95, 8) , (const, 0x1, 8), (unique, 0x10000a95, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100001f6, 8)]
[ ---  CBRANCH (ram, 0x48df80, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESSEQUAL (unique, 0xbc80, 4) , (unique, 0x10001132, 4), (unique, 0x10001132, 4) CAST (register, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000112a, 8), (unique, 0x1000112a, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3ec, 8)]
[(unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (unique, 0x3100, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001136, 8), (unique, 0x10001136, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3d0, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (unique, 0xbd80, 8)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x48de78, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 4) , (register, 0x88, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (unique, 0xbc80, 4)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x48e005, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x30, 4) , (stack, 0xffffffffffffffc0, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x1, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x48de84, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (stack, 0xffffffffffffffc0, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x1, 4)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x10, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000aa5, 8) , (const, 0x1, 8), (unique, 0x10000aa5, 8) INT_ADD (register, 0x10, 8) , (unique, 0x100001f6, 8), (register, 0x10, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(register, 0x30, 4) INT_SUB (stack, 0xffffffffffffffc0, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48e4c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001156, 8) , (const, 0x48e4dd, 8), (unique, 0x10001156, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000afd, 8) , (const, 0x1, 8), (unique, 0x10000afd, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe12, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xe12, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xe12, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xe12, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xe12, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xe12, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xe12, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xe12, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xe12, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xe12, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xe12, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xe12, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xe12, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xe12, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe12, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe12, 4), (stack, 0xffffffffffffffc0, 8) COPY (unique, 0x10000de8, 8)]
[ ---  CALL (ram, 0x48eda0, 8) , (unique, 0x10000de8, 8) , (register, 0x30, 4) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff76, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffb8, 4) SUBPIECE (stack, 0xffffffffffffffb8, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xe12, 4), (stack, 0xffffffffffffffb8, 8) CAST (unique, 0x1000114e, 8), (unique, 0x1000114e, 8) INT_OR (unique, 0x1000074a, 8) , (unique, 0x10000752, 8), (unique, 0x10000752, 8) INT_AND (unique, 0x10001146, 8) , (const, 0xffffffff, 8), (unique, 0x10001146, 8) CAST (stack, 0xffffffffffffffc0, 8), (unique, 0x1000074a, 8) INT_AND (unique, 0x1000113e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000113e, 8) CAST (stack, 0xffffffffffffffb8, 8)]
[ ---  BRANCH (ram, 0x48e04a, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001176, 8) , (const, 0x48e03b, 8), (unique, 0x10001176, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000af5, 8) , (const, 0x1, 8), (unique, 0x10000af5, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x3a6, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x3a6, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x3a6, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a6, 4), (stack, 0xffffffffffffffc0, 8) COPY (unique, 0x10000de8, 8)]
[ ---  CALL (ram, 0x48eda0, 8) , (unique, 0x3100, 8) , (register, 0x30, 4) , (register, 0x10, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffffb8, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff76, 1) COPY (const, 0x1, 1)]
[(stack, 0xffffffffffffffb8, 4) SUBPIECE (stack, 0xffffffffffffffb8, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3a6, 4), (stack, 0xffffffffffffffb8, 8) CAST (unique, 0x1000116e, 8), (unique, 0x1000116e, 8) INT_OR (unique, 0x100006b4, 8) , (unique, 0x100006bc, 8), (unique, 0x100006bc, 8) INT_AND (unique, 0x10001166, 8) , (const, 0xffffffff, 8), (unique, 0x10001166, 8) CAST (stack, 0xffffffffffffffc0, 8), (unique, 0x100006b4, 8) INT_AND (unique, 0x1000115e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000115e, 8) CAST (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff76, 1) BOOL_NEGATE (register, 0x206, 1)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) CAST (unique, 0x10001186, 8), (unique, 0x10001186, 8) INT_AND (unique, 0x1000117e, 8) , (const, 0xffffffffffffff00, 8), (unique, 0x1000117e, 8) CAST (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0x88, 8) COPY (const, 0xffffffff, 8)]
[(stack, 0xffffffffffffff77, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffa8, 8) CAST (unique, 0x10001196, 8), (unique, 0x10001196, 8) INT_AND (unique, 0x1000118e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000118e, 8) CAST (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) CAST (unique, 0x100011a6, 8), (unique, 0x100011a6, 8) INT_OR (unique, 0x100006e4, 8) , (unique, 0x100006ec, 8), (unique, 0x100006ec, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x100006e4, 8) INT_AND (unique, 0x1000119e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000119e, 8) CAST (stack, 0xffffffffffffffc0, 8), (register, 0x98, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (unique, 0x10000df8, 8), (unique, 0x10000df8, 8) COPY (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  BRANCH (ram, 0x48e10c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (register, 0x18, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0xb0, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x48ead3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100011b6, 8), (unique, 0x100011b6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100011ae, 8), (unique, 0x100011ae, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffb8, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x18, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x18, 8) , (register, 0x18, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011be, 8) , (const, 0x48eaf2, 8), (unique, 0x100011be, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b15, 8) , (const, 0x1, 8), (unique, 0x10000b15, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xe05, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe05, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x1000099d, 8) , (unique, 0x10000965, 8) , (const, 0x116, 4) , (unique, 0x10000a0d, 8), (unique, 0x10000a0d, 8) COPY (const, 0x4b5750, 8), (unique, 0x1000099d, 8) COPY (const, 0x4b5540, 8), (unique, 0x10000965, 8) COPY (const, 0x4b54f8, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xe05, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xe05, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xe05, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xe05, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xe05, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xe05, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xe05, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xe05, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xe05, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xe05, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xe05, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xe05, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xe05, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xe05, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x3, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100011c6, 8), (unique, 0x100011c6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8)]
[(register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48e080, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100011d6, 8), (unique, 0x100011d6, 8) INT_ADD (unique, 0x100011ce, 8) , (register, 0x18, 8), (unique, 0x100011ce, 8) CAST (register, 0x80, 8)]
[(unique, 0x10000eb8, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x48e0ff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x2, 1)]
[ ---  CBRANCH (ram, 0x48e390, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100011de, 8), (unique, 0x100011de, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2c0, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100011e6, 8), (unique, 0x100011e6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3c8, 8)]
[ ---  CBRANCH (ram, 0x48e45c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100011e6, 8), (unique, 0x100011e6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3c8, 8)]
[ ---  CBRANCH (ram, 0x48e965, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100011ee, 8), (unique, 0x100011ee, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) COPY (const, 0x10, 8)]
[(register, 0x0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x48e486, 1)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x48e470, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100011f6, 8), (unique, 0x100011f6, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_ADD (unique, 0x100003de, 4) , (const, 0x1, 4), (unique, 0x100003de, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x10, 8)]
[(register, 0x10, 8) INT_LEFT (register, 0x10, 8) , (const, 0x3, 4), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_ADD (unique, 0x100003de, 4) , (const, 0x2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (register, 0x0, 4), (unique, 0x3c80, 8) CAST (unique, 0x100011fe, 8), (unique, 0x100011fe, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2c8, 8), (register, 0x0, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffff98, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001206, 8), (unique, 0x10001206, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2c0, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xced, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xced, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xced, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xced, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xcd5, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xced, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xcd5, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xced, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xced, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xced, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xced, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xced, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xced, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xcd5, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xced, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xced, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xcd5, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xced, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xcd5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (register, 0x10, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001216, 8), (unique, 0x10001216, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2c0, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000120e, 8), (unique, 0x1000120e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[ ---  CBRANCH (ram, 0x48e348, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000120e, 8), (unique, 0x1000120e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[(register, 0x30, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x48e174, 1)]
[(register, 0x30, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000121e, 8), (unique, 0x1000121e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[ ---  CBRANCH (ram, 0x48e174, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000121e, 8), (unique, 0x1000121e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[(register, 0x30, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001226, 8), (unique, 0x10001226, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[ ---  CBRANCH (ram, 0x48e2bc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001226, 8), (unique, 0x10001226, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0x3c80, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2d0, 8)]
[(register, 0x90, 1) COPY (const, 0x0, 1)]
[(unique, 0x10000e00, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000e68, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffffa0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  BRANCH (ram, 0x48e1b8, 1)]
[(register, 0x90, 1) MULTIEQUAL (register, 0x90, 1) , (register, 0x90, 1) , (register, 0x90, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000e68, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x48e190, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (unique, 0x3c80, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000e00, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48eb55, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000122e, 8), (unique, 0x1000122e, 8) INT_ADD (register, 0x0, 8) , (const, 0xfffffffffffffd70, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001236, 8) , (const, 0x48eb74, 8), (unique, 0x10001236, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b2d, 8) , (const, 0x1, 8), (unique, 0x10000b2d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xc5c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc5c, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100009ad, 8) , (unique, 0x10000975, 8) , (const, 0x174, 4) , (unique, 0x10000a1d, 8), (unique, 0x10000a1d, 8) COPY (const, 0x4b5750, 8), (unique, 0x100009ad, 8) COPY (const, 0x4b556d, 8), (unique, 0x10000975, 8) COPY (const, 0x4b54f8, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xc5c, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xc5c, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xc5c, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xc5c, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xc5c, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48e1bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000123e, 8), (unique, 0x1000123e, 8) INT_ADD (register, 0x0, 8) , (const, 0x12c, 8)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x48e1b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x90, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x48e1cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x48e33d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 1) , (const, 0x0, 1), (register, 0x90, 1) MULTIEQUAL (register, 0x90, 1) , (register, 0x90, 1)]
[ ---  CBRANCH (ram, 0x48e2bc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff98, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (const, 0x0, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001246, 8), (unique, 0x10001246, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2c0, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xc21, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xc1e, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xc21, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xc1e, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xc21, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xc1e, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xc21, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xc1e, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xc21, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xc1e, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xc21, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xc1e, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xc21, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xc1e, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xc21, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xc1e, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xc21, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xc1e, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xc21, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xc1e, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xc21, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xc1e, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xc21, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xc1e, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xc21, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xc1e, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xc21, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xc1e, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (const, 0x0, 4), (unique, 0x3c80, 8) CAST (unique, 0x1000124e, 8), (unique, 0x1000124e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2c8, 8)]
[ ---  BRANCH (ram, 0x48e2bc, 1)]
[(stack, 0xffffffffffffff88, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001256, 8), (unique, 0x10001256, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x368, 8)]
[ ---  CBRANCH (ram, 0x48e3d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3c80, 8) , (stack, 0xffffffffffffffa0, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001256, 8), (unique, 0x10001256, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x368, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (const, 0x4, 8)]
[(unique, 0x10000e18, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10000e38, 8) COPY (register, 0x10, 8)]
[(unique, 0x10000e78, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000f98, 1) COPY (register, 0x90, 1)]
[ ---  CBRANCH (ram, 0x48e3d0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x3, 8) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000126e, 8) , (const, 0x48e409, 8), (unique, 0x1000126e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b35, 8) , (const, 0x1, 8), (unique, 0x10000b35, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbde, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xbde, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xbde, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xbde, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xbde, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xbde, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xbde, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xbde, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xbde, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xbde, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xbde, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xbde, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xbde, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xbde, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xbde, 4), (stack, 0xffffffffffffff80, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000125e, 8), (unique, 0x1000125e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x388, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xbde, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbde, 4)]
[(register, 0x88, 8) INT_ZEXT (stack, 0xffffffffffffff70, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xbde, 4), (stack, 0xffffffffffffff70, 4) COPY (register, 0x88, 4)]
[(unique, 0x10000e20, 8) COPY (stack, 0xffffffffffffff60, 8), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xbde, 4), (stack, 0xffffffffffffff60, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10000e40, 8) COPY (unique, 0x1000127e, 8), (unique, 0x1000127e, 8) CAST (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xbde, 4), (stack, 0xffffffffffffff78, 8) COPY (unique, 0x10001266, 8), (unique, 0x10001266, 8) CAST (register, 0x10, 8)]
[(unique, 0x10000e80, 8) COPY (stack, 0xffffffffffffff58, 8), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xbde, 4), (stack, 0xffffffffffffff58, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000f99, 1) COPY (stack, 0xffffffffffffff74, 1), (stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xbde, 4), (stack, 0xffffffffffffff74, 1) COPY (register, 0x90, 1)]
[ ---  CBRANCH (ram, 0x48e201, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001276, 8), (unique, 0x10001276, 8) CALL (ram, 0x426550, 8) , (unique, 0x3680, 8), (unique, 0x3680, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000125e, 8), (unique, 0x1000125e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x388, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001286, 8) , (const, 0x48e450, 8), (unique, 0x10001286, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b3d, 8) , (const, 0x1, 8), (unique, 0x10000b3d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xc0b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc0b, 4)]
[ ---  CALL (ram, 0x489410, 8) , (const, 0xc, 8) , (unique, 0x100009b5, 8) , (const, 0x0, 8) , (unique, 0x10000945, 8), (unique, 0x100009b5, 8) COPY (const, 0x4b5580, 8), (unique, 0x10000945, 8) COPY (const, 0x4b5219, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xc0b, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xc0b, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xc0b, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xc0b, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xc0b, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x3c80, 8) , (register, 0x0, 8)]
[(register, 0x90, 1) MULTIEQUAL (unique, 0x10000f98, 1) , (unique, 0x10000f99, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000e78, 8) , (unique, 0x10000e80, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x10000e38, 8) , (unique, 0x10000e40, 8)]
[(stack, 0xffffffffffffff78, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10000e08, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000e18, 8) , (unique, 0x10000e20, 8)]
[(unique, 0x10000e50, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000f38, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  BRANCH (ram, 0x48e230, 1)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000f38, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10000e08, 8) , (unique, 0x10000e10, 8) , (register, 0x8, 8)]
[(unique, 0x3400, 8) PTRADD (register, 0x98, 8) , (register, 0x30, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000e50, 8) , (unique, 0x10000e58, 8) , (unique, 0x10000e60, 8)]
[ ---  CBRANCH (ram, 0x48e24a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (unique, 0x3c80, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e210, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000128e, 8), (unique, 0x1000128e, 8) INT_ADD (register, 0x10, 8) , (const, 0x12c, 8)]
[(unique, 0x10000e48, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x48e224, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xb98, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xb98, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xb98, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xb98, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xb98, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xb98, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xb98, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xb98, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xb98, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xb98, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xb98, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xb98, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xb98, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xb98, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0x10001296, 8), (unique, 0x10001296, 8) CAST (register, 0xb8, 8)]
[(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[(unique, 0x3a00, 8) PTRADD (register, 0x98, 8) , (unique, 0x10000c9d, 8) , (const, 0x8, 8), (unique, 0x10000c9d, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3a00, 8)]
[(register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000e60, 8) COPY (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000e48, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x48e263, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x4d8, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x4d8, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x4d8, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x4d8, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x4d8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x10, 8)]
[(unique, 0x3a00, 8) PTRADD (register, 0x98, 8) , (unique, 0x10000ccd, 8) , (const, 0x8, 8), (unique, 0x10000ccd, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[(unique, 0x10000e10, 8) COPY (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000e58, 8) COPY (register, 0x30, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x48e230, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3a00, 8) , (register, 0x0, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x4fe, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x4fb, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x4fe, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x4fb, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x4fe, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x4fb, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x4fe, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x4fb, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x4fe, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x4fb, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x4fe, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x4fb, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x4fe, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x4fb, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x4fe, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x4fb, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x4fe, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x4fb, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x4fe, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x4fb, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x4fe, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x4fb, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x4fe, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x4fb, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x4fe, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x4fb, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x4fe, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x4fb, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (register, 0x98, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000129e, 8), (unique, 0x1000129e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[ ---  CBRANCH (ram, 0x48e450, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff77, 1) COPY (register, 0x90, 1)]
[ ---  BRANCH (ram, 0x48e2b0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012b6, 8) , (const, 0x48e291, 8), (unique, 0x100012b6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b4d, 8) , (const, 0x1, 8), (unique, 0x10000b4d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x515, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x515, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x515, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x515, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x515, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x515, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x515, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x515, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x515, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x515, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x515, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x515, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x515, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x515, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x515, 4), (stack, 0xffffffffffffffa0, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x515, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x515, 4)]
[(register, 0x88, 8) INT_AND (unique, 0x100012be, 8) , (const, 0xffffffff, 8), (unique, 0x100012be, 8) CAST (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x515, 4), (stack, 0xffffffffffffff98, 8) CAST (unique, 0x100012ae, 8), (unique, 0x100012ae, 8) INT_OR (unique, 0x10000721, 8) , (register, 0x88, 8), (unique, 0x10000721, 8) INT_AND (unique, 0x100012a6, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100012a6, 8) CAST (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x48e2aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x486b50, 8)]
[(register, 0x0, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffff77, 1) COPY (register, 0x0, 1), (register, 0x0, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (register, 0x0, 1)]
[(unique, 0x10000e70, 8) COPY (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000e70, 8) , (register, 0x80, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x538, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x538, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x538, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x538, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x538, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x538, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x538, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x538, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x538, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x538, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x538, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x538, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x538, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x538, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (stack, 0xffffffffffffff80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100012c6, 8), (unique, 0x100012c6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x388, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x48e2de, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100012ce, 8), (unique, 0x100012ce, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2e0, 8)]
[ ---  CBRANCH (ram, 0x48e2de, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100012d6, 8), (unique, 0x100012d6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3ec, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x556, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x556, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x556, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x556, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x556, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x556, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x556, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x556, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x556, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x556, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x556, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x556, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x556, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x556, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (const, 0x0, 8), (unique, 0x3c80, 8) CAST (unique, 0x100012de, 8), (unique, 0x100012de, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2e0, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(unique, 0x10000ea8, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x48e2e5, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xb0, 4) , (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4)]
[(unique, 0x10000eb0, 8) COPY (register, 0xb0, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000ea8, 8) , (unique, 0x10000eb0, 8)]
[ ---  CBRANCH (ram, 0x48e10c, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x18, 4) , (stack, 0xffffffffffffffc0, 4), (register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (stack, 0xffffffffffffffc0, 4) SUBPIECE (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x48eab4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x2, 1)]
[ ---  CBRANCH (ram, 0x48eab4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100012e6, 8), (unique, 0x100012e6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31f, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012ee, 8) , (const, 0x48ead3, 8), (unique, 0x100012ee, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b25, 8) , (const, 0x1, 8), (unique, 0x10000b25, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xdfc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdfc, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100009dd, 8) , (unique, 0x1000095d, 8) , (const, 0x11a, 4) , (unique, 0x10000a05, 8), (unique, 0x10000a05, 8) COPY (const, 0x4b5750, 8), (unique, 0x100009dd, 8) COPY (const, 0x4b5630, 8), (unique, 0x1000095d, 8) COPY (const, 0x4b54f8, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xdfc, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xdfc, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xdfc, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xdfc, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xdfc, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x10000e88, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x48e0e2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000068b, 1) , (const, 0x0, 1), (unique, 0x1000068b, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1)]
[(unique, 0x10000e98, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x48e365, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c0, 1) , (const, 0x2, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000130e, 8) , (const, 0x48e383, 8), (unique, 0x1000130e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b1d, 8) , (const, 0x1, 8), (unique, 0x10000b1d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xded, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xded, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xded, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xded, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xded, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xded, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xded, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xded, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xded, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xded, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xded, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xded, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xded, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xded, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xded, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x100009a5, 8) , (unique, 0xbd80, 8) , (register, 0xb8, 8), (unique, 0x100009a5, 8) COPY (const, 0x4b5553, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100012f6, 8), (unique, 0x100012f6, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(register, 0x88, 8) INT_AND (unique, 0x10001316, 8) , (const, 0xffffffff, 8), (unique, 0x10001316, 8) CAST (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xded, 4), (stack, 0xffffffffffffffa0, 8) CAST (unique, 0x10001306, 8), (unique, 0x10001306, 8) INT_OR (unique, 0x10000737, 8) , (register, 0x88, 8), (unique, 0x10000737, 8) INT_AND (unique, 0x100012fe, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100012fe, 8) CAST (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000ea0, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xded, 4), (stack, 0xffffffffffffffb0, 8) COPY (register, 0x80, 8)]
[ ---  BRANCH (ram, 0x48e0a9, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000e98, 8) , (unique, 0x10000ea0, 8)]
[ ---  CBRANCH (ram, 0x48e320, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000131e, 8), (unique, 0x1000131e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x110, 8)]
[ ---  CBRANCH (ram, 0x48e0b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001326, 8), (unique, 0x10001326, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000133e, 8) , (const, 0x48e0d1, 8), (unique, 0x1000133e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b45, 8) , (const, 0x1, 8), (unique, 0x10000b45, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xd6b, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xd6b, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xd6b, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xd6b, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd6b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd6b, 4)]
[ ---  CALL (ram, 0x489470, 8) , (const, 0x0, 8) , (unique, 0x1000091d, 8) , (unique, 0xbd80, 8), (unique, 0x1000091d, 8) PTRSUB (const, 0x0, 8) , (const, 0x48dae0, 8)]
[(register, 0x88, 8) INT_AND (unique, 0x10001346, 8) , (const, 0xffffffff, 8), (unique, 0x10001346, 8) CAST (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xd6b, 4), (stack, 0xffffffffffffffa0, 8) CAST (unique, 0x10001336, 8), (unique, 0x10001336, 8) INT_OR (unique, 0x100006f6, 8) , (register, 0x88, 8), (unique, 0x100006f6, 8) INT_AND (unique, 0x1000132e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000132e, 8) CAST (stack, 0xffffffffffffffa0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000134e, 8), (unique, 0x1000134e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8)]
[(unique, 0x10000e90, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd6b, 4), (stack, 0xffffffffffffffb0, 8) COPY (register, 0x80, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001356, 8), (unique, 0x10001356, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8)]
[ ---  BRANCH (ram, 0x48e0e2, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000e88, 8) , (unique, 0x10000e90, 8) , (register, 0x80, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xd7c, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xd7c, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xd7c, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xd7c, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xd7c, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xd7c, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xd7c, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xd7c, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xd7c, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xd7c, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xd7c, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xd7c, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xd7c, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xd7c, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) INT_OR (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x1000135e, 8), (unique, 0x1000135e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31d, 8)]
[(stack, 0xffffffffffffffb0, 8) CAST (unique, 0x1000136d, 8), (unique, 0x1000136d, 8) INT_ADD (unique, 0x10000dc8, 8) , (const, 0x1, 1), (unique, 0x10000dc8, 8) INT_LEFT (unique, 0x10000dc0, 8) , (const, 0x8, 8), (unique, 0x10000dc0, 8) INT_SEXT (unique, 0x10001366, 7), (unique, 0x10001366, 7) CAST (stack, 0xffffffffffffffb1, 7), (stack, 0xffffffffffffffb1, 7) SUBPIECE (stack, 0xffffffffffffffb0, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) CAST (unique, 0x1000137d, 8), (unique, 0x1000137d, 8) INT_OR (unique, 0x10000706, 8) , (unique, 0x1000070e, 8), (unique, 0x1000070e, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10000706, 8) INT_AND (unique, 0x10001375, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001375, 8) CAST (stack, 0xffffffffffffffa8, 8), (unique, 0xbc80, 4) INT_SUB (unique, 0x12800, 4) , (unique, 0x12600, 4), (unique, 0x12800, 4) INT_ADD (stack, 0xffffffffffffffa8, 4) , (const, 0x1, 4), (stack, 0xffffffffffffffa8, 4) SUBPIECE (stack, 0xffffffffffffffa8, 8) , (const, 0x0, 8), (unique, 0x12600, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) INT_AND (register, 0x0, 1) , (const, 0x10, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000ec0, 8) COPY (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x48e0ff, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x18, 4) , (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x10000ec8, 8) COPY (register, 0xb0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000eb8, 8) , (unique, 0x10000ec0, 8) , (unique, 0x10000ec8, 8)]
[ ---  CBRANCH (ram, 0x48e2f2, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (stack, 0xffffffffffffffc0, 4) , (register, 0x18, 4), (register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (stack, 0xffffffffffffffc0, 4) SUBPIECE (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x48e4f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb0, 1) , (const, 0x0, 1), (stack, 0xffffffffffffffb0, 1) SUBPIECE (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001395, 8) , (const, 0x48e503, 8), (unique, 0x10001395, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b55, 8) , (const, 0x1, 8), (unique, 0x10000b55, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x5c6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013a5, 8) , (const, 0x2, 4), (unique, 0x100013a5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x1000139d, 8), (unique, 0x1000139d, 8) CALL (ram, 0x458e30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013ad, 8) , (const, 0x48e516, 8), (unique, 0x100013ad, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b5d, 8) , (const, 0x1, 8), (unique, 0x10000b5d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5d0, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x5d0, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x5c9, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x5d0, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x5c9, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x5d0, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x5c9, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x5d0, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x5c9, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x5c6, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x5d0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x5c9, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x5c6, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x5d0, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x5c9, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x5d0, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x5c9, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x5d0, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x5c9, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5d0, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5c9, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x5d0, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x5c9, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x5d0, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x5c9, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x5c6, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x5d0, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x5c9, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x5d0, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x5c9, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x5c6, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x5d0, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x5c9, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x5d0, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x5d0, 4), (stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x5d0, 4), (stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x5d0, 4), (stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x5d0, 4), (stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5c6, 4), (stack, 0xffffffffffffff98, 8) COPY (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffffa0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000139d, 8), (unique, 0x1000139d, 8) CALL (ram, 0x458e30, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x5c6, 4)]
[ ---  CALL (ram, 0x458e20, 8)]
[(stack, 0xffffffffffffffc0, 4) SUBPIECE (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5c6, 4)]
[(register, 0x88, 8) INT_AND (unique, 0x100013b5, 8) , (const, 0xffffffff, 8), (unique, 0x100013b5, 8) CAST (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x5c6, 4), (stack, 0xffffffffffffffb8, 8) CAST (unique, 0x1000138d, 8), (unique, 0x1000138d, 8) INT_OR (unique, 0x1000075a, 8) , (unique, 0x10000762, 8), (unique, 0x10000762, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x1000075a, 8) INT_AND (unique, 0x10001385, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001385, 8) CAST (stack, 0xffffffffffffffb8, 8)]
[ ---  CBRANCH (ram, 0x48e930, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffa8, 4) , (const, 0x0, 4), (stack, 0xffffffffffffffa8, 4) SUBPIECE (stack, 0xffffffffffffffa8, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x5c6, 4)]
[(register, 0x30, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100013c5, 8), (unique, 0x100013c5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100013bd, 8), (unique, 0x100013bd, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff90, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x48e958, 1)]
[(unique, 0x10000f50, 4) COPY (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48e940, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48e974, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100013d5, 8), (unique, 0x100013d5, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31d, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100013cd, 8), (unique, 0x100013cd, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x8, 8) , (const, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x0, 4) , (const, 0x1, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e95c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_ADD (register, 0x0, 4) , (stack, 0xffffffffffffffa8, 4)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x48e99c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100013e5, 8), (unique, 0x100013e5, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31d, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100013dd, 8), (unique, 0x100013dd, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x48e999, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 4) , (register, 0x10, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xb66, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xb66, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xb66, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xb66, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xb66, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xb66, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xb66, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xb66, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xb66, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xb66, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xb66, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xb66, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xb66, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xb66, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbd80, 8), (unique, 0x3400, 8) CAST (unique, 0x100013ed, 8), (unique, 0x100013ed, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x30, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_ZEXT (register, 0x38, 4)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x38, 4) INT_ADD (register, 0x38, 4) , (const, 0x1, 4)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x48e982, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (register, 0x0, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xb06, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xb06, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xb06, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xb06, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xb06, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xb06, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xb06, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xb06, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xb06, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xb06, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xb06, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xb06, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xb06, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xb06, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013f5, 8) , (register, 0x0, 4), (unique, 0x100013f5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 4) MULTIEQUAL (unique, 0x10000f50, 4) , (unique, 0x10000f50, 4) , (register, 0x38, 4)]
[ ---  BRANCH (ram, 0x48e52e, 1)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(unique, 0x10000ef8, 8) COPY (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x48e9da, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100013fd, 8), (unique, 0x100013fd, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x48ea04, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffa8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48ea04, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff77, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x48e53e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8818, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48e53e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (ram, 0x4c8818, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001405, 8) , (const, 0x48ea16, 8), (unique, 0x10001405, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b65, 8) , (const, 0x1, 8), (unique, 0x10000b65, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xa9a, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xa9a, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa9a, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xa9a, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa9a, 4)]
[ ---  CALLIND (ram, 0x4c87c8, 8)]
[(unique, 0x10000df0, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa9a, 4), (stack, 0xffffffffffffffb8, 8) COPY (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x10000dd0, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xa9a, 4)]
[(stack, 0xffffffffffffffc0, 4) SUBPIECE (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa9a, 4), (stack, 0xffffffffffffffc0, 8) COPY (stack, 0xffffffffffffffc0, 8)]
[(register, 0x88, 8) INT_AND (unique, 0x1000140d, 8) , (const, 0xffffffff, 8), (unique, 0x1000140d, 8) CAST (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa9a, 4), (stack, 0xffffffffffffffb8, 8) COPY (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x10000ee0, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa9a, 4), (stack, 0xffffffffffffffa8, 8) COPY (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x48e53e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8818, 8) , (const, 0x0, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xa9a, 4)]
[(unique, 0x10000ed0, 8) COPY (unique, 0x10000ee0, 8)]
[ ---  CBRANCH (ram, 0x48e53e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (ram, 0x4c8818, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000dd0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000141d, 8) , (const, 0x48ea59, 8), (unique, 0x1000141d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b6d, 8) , (const, 0x1, 8), (unique, 0x10000b6d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xad6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xad6, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xace, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xad6, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xace, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xad6, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xace, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xad6, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xace, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xad6, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xace, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xad6, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xace, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xad6, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xace, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xad6, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xace, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xad6, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xace, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xad6, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xace, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xad6, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xace, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xad6, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xace, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xad6, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xace, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xad6, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xace, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xad6, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xad6, 4), (stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xad6, 4), (stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xad6, 4), (stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xad6, 4), (stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001415, 8), (unique, 0x10001415, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000dd0, 8) , (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000ed8, 8) COPY (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xad6, 4), (stack, 0xffffffffffffffc0, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x10000ed8, 8) , (unique, 0x10000ed0, 8)]
[ ---  CBRANCH (ram, 0x48ea44, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000dd0, 8)]
[(register, 0x88, 8) INT_AND (unique, 0x10001425, 8) , (const, 0xffffffff, 8), (unique, 0x10001425, 8) CAST (unique, 0x10000df0, 8)]
[(unique, 0x10000ef0, 8) COPY (stack, 0xffffffffffffffc0, 8)]
[ ---  BRANCH (ram, 0x48e53e, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x10000f10, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x10000ef8, 8) , (unique, 0x10000ef8, 8) , (unique, 0x10000ef8, 8) , (unique, 0x10000ee0, 8) , (unique, 0x10000ee0, 8) , (unique, 0x10000ef0, 8)]
[ ---  CBRANCH (ram, 0x48e56c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f08, 8) , (const, 0x0, 8), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000144d, 8) , (const, 0x48e560, 8), (unique, 0x1000144d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b75, 8) , (const, 0x1, 8), (unique, 0x10000b75, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x610, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x610, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x610, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x610, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x610, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x610, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x610, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x610, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x610, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x610, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x610, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x610, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x610, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x610, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x610, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x610, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000a3d, 8), (unique, 0x10000a3d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60a0, 8)]
[(register, 0x88, 8) INT_AND (unique, 0x10001455, 8) , (const, 0xffffffff, 8), (unique, 0x10001455, 8) CAST (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x610, 4), (stack, 0xffffffffffffffb8, 8) CAST (unique, 0x10001435, 8), (unique, 0x10001435, 8) INT_OR (unique, 0x1000076b, 8) , (register, 0x88, 8), (unique, 0x1000076b, 8) INT_AND (unique, 0x1000142d, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000142d, 8) CAST (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 4) SUBPIECE (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x610, 4), (stack, 0xffffffffffffffc0, 8) CAST (unique, 0x10001445, 8), (unique, 0x10001445, 8) INT_OR (unique, 0x1000077b, 8) , (unique, 0x10000783, 8), (unique, 0x10000783, 8) INT_ZEXT (register, 0x98, 4), (unique, 0x1000077b, 8) INT_AND (unique, 0x1000143d, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000143d, 8) CAST (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000f18, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x610, 4), (stack, 0xffffffffffffffa8, 8) COPY (register, 0x90, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x10000f10, 8) , (unique, 0x10000f18, 8)]
[ ---  CBRANCH (ram, 0x48eaf2, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x88, 4) , (register, 0x98, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (stack, 0xffffffffffffffc0, 4)]
[ ---  CBRANCH (ram, 0x48e7a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f70, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000145d, 8) , (const, 0x48eb0c, 8), (unique, 0x1000145d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b7d, 8) , (const, 0x1, 8), (unique, 0x10000b7d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa57, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xa57, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xa57, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa57, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xa57, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xa57, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xa57, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xa57, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xa57, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa57, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xa57, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa57, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xa57, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xa57, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa57, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa57, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000a4d, 8), (unique, 0x10000a4d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60a0, 8)]
[ ---  BRANCH (ram, 0x48e7a1, 1)]
[(stack, 0xffffffffffffffc0, 8) CAST (unique, 0x1000146d, 8), (unique, 0x1000146d, 8) INT_AND (unique, 0x10001465, 8) , (const, 0xffffffffffffff00, 8), (unique, 0x10001465, 8) CAST (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x3b80, 8) CAST (unique, 0x1000147d, 8), (unique, 0x1000147d, 8) INT_ADD (unique, 0x10001475, 8) , (register, 0x88, 8), (unique, 0x10001475, 8) CAST (register, 0x80, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10001485, 8), (unique, 0x10001485, 8) PTRADD (register, 0x90, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x88, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (register, 0xb8, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (const, 0x0, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10001495, 8), (unique, 0x10001495, 8) INT_ADD (unique, 0x1000148d, 8) , (unique, 0x10000ced, 8), (unique, 0x1000148d, 8) CAST (register, 0x80, 8), (unique, 0x10000ced, 8) INT_ADD (register, 0x10, 8) , (unique, 0x10000ce5, 8), (unique, 0x10000ce5, 8) INT_ADD (register, 0x88, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0x3100, 4) , (register, 0x88, 4), (unique, 0x3100, 4) INT_SUB (register, 0x98, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x48e5c1, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x48e5b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3b80, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x48ebcd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x2, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x3, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100014a5, 8), (unique, 0x100014a5, 8) INT_ADD (unique, 0x1000149d, 8) , (const, 0x31c, 8), (unique, 0x1000149d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100014ad, 8) , (unique, 0x10000935, 8), (unique, 0x100014ad, 8) CAST (register, 0x20, 8), (unique, 0x10000935, 8) PTRSUB (const, 0x0, 8) , (const, 0x48ebec, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b85, 8) , (const, 0x1, 8), (unique, 0x10000b85, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa2b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa2b, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100009bd, 8) , (unique, 0x1000098d, 8) , (const, 0x22f, 4) , (unique, 0x10000a35, 8), (unique, 0x10000a35, 8) COPY (const, 0x4b5750, 8), (unique, 0x100009bd, 8) COPY (const, 0x4b5588, 8), (unique, 0x1000098d, 8) COPY (const, 0x4b54f8, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xa2b, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0xa2b, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa2b, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0xa2b, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0xa2b, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x10000f70, 8) COPY (ram, 0x4c8300, 8)]
[ ---  CBRANCH (ram, 0x48e84a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100014bd, 8), (unique, 0x100014bd, 8) INT_ADD (unique, 0x100014b5, 8) , (const, 0x438, 8), (unique, 0x100014b5, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e87e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8720, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100014d5, 8) , (const, 0x48e86c, 8), (unique, 0x100014d5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b8d, 8) , (const, 0x1, 8), (unique, 0x10000b8d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x94b, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x94b, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x94b, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x94b, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x94b, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x94b, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x94b, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x94b, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x94b, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x94b, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x94b, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x94b, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x94b, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x94b, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x94b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x94b, 4)]
[ ---  CBRANCH (ram, 0x48e87e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x48db60, 8) , (unique, 0xbd80, 8) , (ram, 0x4c8720, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100014cd, 8), (unique, 0x100014cd, 8) INT_ADD (unique, 0x100014c5, 8) , (const, 0x458, 8), (unique, 0x100014c5, 8) CAST (unique, 0xbd80, 8)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8738, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000de0, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) CAST (unique, 0x100014fd, 8), (unique, 0x100014fd, 8) INT_OR (unique, 0x100007b2, 8) , (unique, 0x100007ba, 8), (unique, 0x100007ba, 8) INT_AND (unique, 0x100014f5, 8) , (const, 0xff, 8), (unique, 0x100014f5, 8) CAST (stack, 0xffffffffffffffb0, 8), (unique, 0x100007b2, 8) INT_AND (unique, 0x100014ed, 8) , (const, 0xffffffffffffff00, 8), (unique, 0x100014ed, 8) CAST (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000f78, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[ ---  CBRANCH (ram, 0x48e5ee, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100014e5, 8), (unique, 0x100014e5, 8) INT_ADD (unique, 0x100014dd, 8) , (const, 0x450, 8), (unique, 0x100014dd, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e907, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffa8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48e907, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x8, 8), (register, 0x8, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10000590, 8) , (const, 0x1, 8), (unique, 0x10000590, 8) INT_2COMP (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000150d, 8), (unique, 0x1000150d, 8) INT_ADD (unique, 0x10001505, 8) , (const, 0x438, 8), (unique, 0x10001505, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) CAST (unique, 0x1000151d, 8), (unique, 0x1000151d, 8) INT_OR (unique, 0x100007b2, 8) , (unique, 0x100007dc, 8), (unique, 0x100007dc, 8) INT_AND (unique, 0x10001515, 8) , (const, 0xff, 8), (unique, 0x10001515, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x48e5ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x48e5ee, 1)]
[ ---  CBRANCH (ram, 0x48ec0f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (stack, 0xffffffffffffffb8, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10000568, 8) , (const, 0x1, 8), (unique, 0x10000568, 8) INT_2COMP (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000152d, 8), (unique, 0x1000152d, 8) INT_ADD (unique, 0x10001525, 8) , (const, 0x438, 8), (unique, 0x10001525, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) CAST (unique, 0x1000153d, 8), (unique, 0x1000153d, 8) INT_OR (unique, 0x100007b2, 8) , (unique, 0x10000816, 8), (unique, 0x10000816, 8) INT_AND (unique, 0x10001535, 8) , (const, 0xff, 8), (unique, 0x10001535, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[ ---  BRANCH (ram, 0x48e5ee, 1)]
[ ---  CBRANCH (ram, 0x48ebf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8300, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x10, 8)]
[(ram, 0x4c8300, 8) COPY (unique, 0x10000de0, 8)]
[(stack, 0xffffffffffffffc0, 8) CAST (unique, 0x1000154d, 8), (unique, 0x1000154d, 8) INT_OR (unique, 0x100007b2, 8) , (unique, 0x10000806, 8), (unique, 0x10000806, 8) INT_AND (unique, 0x10001545, 8) , (const, 0xff, 8), (unique, 0x10001545, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[ ---  BRANCH (ram, 0x48e5ee, 1)]
[ ---  CBRANCH (ram, 0x48eb30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (ram, 0x4c8300, 8)]
[(stack, 0xffffffffffffffc0, 8) CAST (unique, 0x1000155d, 8), (unique, 0x1000155d, 8) INT_OR (unique, 0x100007b2, 8) , (unique, 0x100007f6, 8), (unique, 0x100007f6, 8) INT_AND (unique, 0x10001555, 8) , (const, 0xff, 8), (unique, 0x10001555, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10000f90, 8) COPY (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x48e5ee, 1)]
[(stack, 0xffffffffffffffc0, 8) CAST (unique, 0x1000156d, 8), (unique, 0x1000156d, 8) INT_OR (unique, 0x100007b2, 8) , (unique, 0x100007cb, 8), (unique, 0x100007cb, 8) INT_AND (unique, 0x10001565, 8) , (const, 0xff, 8), (unique, 0x10001565, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10000f80, 8) COPY (ram, 0x4c8300, 8)]
[ ---  CBRANCH (ram, 0x48e5ee, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xffffffffffffffb8, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x10, 8)]
[(unique, 0x10000f88, 8) COPY (ram, 0x4c8300, 8)]
[ ---  BRANCH (ram, 0x48e5ee, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (unique, 0x10000f70, 8) , (unique, 0x10000f78, 8) , (unique, 0x10000f80, 8) , (unique, 0x10000f88, 8) , (unique, 0x10000f90, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x48e634, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff75, 1) , (const, 0x0, 1), (stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[ ---  CBRANCH (ram, 0x48e60d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f08, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001575, 8) , (const, 0x48e60d, 8), (unique, 0x10001575, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bd5, 8) , (const, 0x1, 8), (unique, 0x10000bd5, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x6a7, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x6a7, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x6a7, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x6a7, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6a7, 4)]
[ ---  CALL (ram, 0x0, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x48e7e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000157d, 8), (unique, 0x1000157d, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff90, 8) , (const, 0x9, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x48e61e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff90, 8) , (const, 0xa, 8) , (const, 0x8, 8)]
[(register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10000d1d, 8) , (const, 0x4, 8), (unique, 0x10000d1d, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x48e80d, 1)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x48e800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001585, 8), (unique, 0x10001585, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48e800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000158d, 8), (unique, 0x1000158d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001595, 8) , (const, 0x0, 8), (unique, 0x10001595, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x8e2, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x8da, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x8e2, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x8da, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x8e2, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x8da, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x8e2, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x8da, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x8d8, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x8e2, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x8da, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x8d8, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x8e2, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x8da, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x8e2, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x8da, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x8e2, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x8da, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x8e2, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x8da, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x8e2, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x8da, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x8e2, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x8da, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x8d8, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x8e2, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x8da, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x8e2, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x8da, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x8d8, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x8e2, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x8da, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x8d8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff90, 8) , (const, 0xb, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x48e800, 1)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x48e61e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x48e634, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f70, 8) , (const, 0x0, 8), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000159d, 8) , (const, 0x48e634, 8), (unique, 0x1000159d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bdd, 8) , (const, 0x1, 8), (unique, 0x10000bdd, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x6c8, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x6c8, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x6c8, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x6c8, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x6c8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c8, 4)]
[ ---  CALL (ram, 0x0, 8) , (stack, 0xffffffffffffff50, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100015a5, 8) , (const, 0x48e63c, 8), (unique, 0x100015a5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000be5, 8) , (const, 0x1, 8), (unique, 0x10000be5, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6cc, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x6cc, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x6cc, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x6cc, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x6cc, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x6cc, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x6cc, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x6cc, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x6cc, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x6cc, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x6cc, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x6cc, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x6cc, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x6cc, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x6cc, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x6cc, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x6cc, 4), (stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x6cc, 4), (stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x6cc, 4), (stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6cc, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x48f2c0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48ebae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff76, 1) , (const, 0x0, 1), (stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x6cc, 4), (stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100015ad, 8) , (const, 0x48ebcd, 8), (unique, 0x100015ad, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000c15, 8) , (const, 0x1, 8), (unique, 0x10000c15, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x877, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x877, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x1000093d, 8) , (unique, 0x10000985, 8) , (const, 0x2bb, 4) , (unique, 0x10000a2d, 8), (unique, 0x10000a2d, 8) COPY (const, 0x4b5750, 8), (unique, 0x10000985, 8) COPY (const, 0x4b54f8, 8), (unique, 0x1000093d, 8) COPY (const, 0x4af5e9, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x877, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x877, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x877, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x877, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x877, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x877, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x877, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x877, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x877, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x877, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x877, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x877, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x877, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x877, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48eb8f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100015bd, 8), (unique, 0x100015bd, 8) INT_ADD (unique, 0x100015b5, 8) , (const, 0x20, 8), (unique, 0x100015b5, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100015c5, 8) , (const, 0x48ebae, 8), (unique, 0x100015c5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000c0d, 8) , (const, 0x1, 8), (unique, 0x10000c0d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x86e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x86e, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100009c5, 8) , (unique, 0x1000097d, 8) , (const, 0x2bc, 4) , (unique, 0x10000a25, 8), (unique, 0x10000a25, 8) COPY (const, 0x4b5750, 8), (unique, 0x100009c5, 8) COPY (const, 0x4b55a2, 8), (unique, 0x1000097d, 8) COPY (const, 0x4b54f8, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x86e, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x86e, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x86e, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x86e, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x86e, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x86e, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x86e, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x86e, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x86e, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x86e, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x86e, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x86e, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x86e, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x86e, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x6f6, 4), (ram, 0x4c6188, 4) INT_ADD (ram, 0x4c6188, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x6f6, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x6f6, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x6f6, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x6f6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) CAST (unique, 0x100015dd, 8), (unique, 0x100015dd, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100015d5, 8), (unique, 0x100015d5, 8) INT_ADD (unique, 0x100015cd, 8) , (const, 0x18, 8), (unique, 0x100015cd, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e66e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100015d5, 8), (unique, 0x100015d5, 8) INT_ADD (unique, 0x100015cd, 8) , (const, 0x18, 8), (unique, 0x100015cd, 8) CAST (unique, 0xbd80, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x703, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x703, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x703, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x703, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x703, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x703, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x703, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x703, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x703, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x703, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x703, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x703, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x703, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x703, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) CAST (unique, 0x100015e5, 8), (unique, 0x100015e5, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100015fd, 8) , (const, 0x48e67a, 8), (unique, 0x100015fd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bed, 8) , (const, 0x1, 8), (unique, 0x10000bed, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x709, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x709, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x709, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x709, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x709, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x709, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x709, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x709, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x709, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x709, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x709, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x709, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x709, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x709, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x709, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x709, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x709, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100015f5, 8), (unique, 0x100015f5, 8) INT_ADD (unique, 0x100015ed, 8) , (const, 0x2e8, 8), (unique, 0x100015ed, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e68c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000160d, 8), (unique, 0x1000160d, 8) INT_ADD (unique, 0x10001605, 8) , (const, 0x348, 8), (unique, 0x10001605, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001615, 8) , (const, 0x48e68c, 8), (unique, 0x10001615, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bf5, 8) , (const, 0x1, 8), (unique, 0x10000bf5, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x719, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x719, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x719, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x719, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x719, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x719, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x719, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x719, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x719, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x719, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x719, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x719, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x719, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x719, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x719, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000162d, 8) , (const, 0x48e698, 8), (unique, 0x1000162d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bfd, 8) , (const, 0x1, 8), (unique, 0x10000bfd, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x71f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x71f, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x71f, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x71f, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x71f, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x71f, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x71f, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x71f, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x71f, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x71f, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x71f, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x71f, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x71f, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x71f, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x71f, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x71f, 4), (stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x71f, 4), (stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x71f, 4), (stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x71f, 4), (stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x71f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001625, 8), (unique, 0x10001625, 8) INT_ADD (unique, 0x1000161d, 8) , (const, 0x3d0, 8), (unique, 0x1000161d, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e82f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c0, 1) , (const, 0x40, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x71f, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001655, 8) , (const, 0x48e845, 8), (unique, 0x10001655, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000c05, 8) , (const, 0x1, 8), (unique, 0x10000c05, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x866, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x866, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x866, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x866, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x866, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x866, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x866, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x866, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x866, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x866, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x866, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x866, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x866, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x866, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x866, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x100009e5, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0x100009e5, 8) COPY (const, 0x4b5668, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000164d, 8), (unique, 0x1000164d, 8) INT_ADD (unique, 0x10001645, 8) , (const, 0x8, 8), (unique, 0x10001645, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000163d, 8), (unique, 0x1000163d, 8) INT_ADD (unique, 0x10001635, 8) , (const, 0x30, 8), (unique, 0x10001635, 8) CAST (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x48e6a5, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000166d, 8) , (const, 0x48e6ae, 8), (unique, 0x1000166d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bcd, 8) , (const, 0x1, 8), (unique, 0x10000bcd, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x730, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x730, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x730, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x730, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x730, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x730, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x730, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x730, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x730, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x730, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x730, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x730, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x730, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x730, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x730, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x730, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x730, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x730, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x730, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x730, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x730, 4), (stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x730, 4), (stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x730, 4), (stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x730, 4), (stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x730, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x730, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x730, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x730, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x730, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x730, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x730, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x730, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x730, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x730, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001665, 8), (unique, 0x10001665, 8) INT_ADD (unique, 0x1000165d, 8) , (const, 0x8, 8), (unique, 0x1000165d, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x10000f20, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000167d, 8), (unique, 0x1000167d, 8) INT_ADD (unique, 0x10001675, 8) , (const, 0x38, 8), (unique, 0x10001675, 8) CAST (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x48e6bd, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000168d, 8), (unique, 0x1000168d, 8) INT_ADD (unique, 0x10001685, 8) , (const, 0x8, 8), (unique, 0x10001685, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000f20, 8) , (unique, 0x10000f28, 8) , (unique, 0x10000f30, 8)]
[ ---  CBRANCH (ram, 0x48e6b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000169d, 8), (unique, 0x1000169d, 8) INT_ADD (unique, 0x10001695, 8) , (const, 0x10, 8), (unique, 0x10001695, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000f20, 8) , (unique, 0x10000f28, 8) , (unique, 0x10000f30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100016a5, 8) , (const, 0x48e6d0, 8), (unique, 0x100016a5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bad, 8) , (const, 0x1, 8), (unique, 0x10000bad, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x74a, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x74a, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x74a, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x74a, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x74a, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x74a, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x74a, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x74a, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x74a, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x74a, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x74a, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x74a, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x74a, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x74a, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x74a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x74a, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0xb8, 8)]
[(unique, 0x10000f28, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e6bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(unique, 0x10000f30, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e6d5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100016bd, 8) , (const, 0x48e6e1, 8), (unique, 0x100016bd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bb5, 8) , (const, 0x1, 8), (unique, 0x10000bb5, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x75b, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x75b, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x75b, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x75b, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x75b, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x75b, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x75b, 4), (ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x75b, 4), (ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x75b, 4), (ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x75b, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x75b, 4), (ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x75b, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x75b, 4), (ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x75b, 4), (ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x75b, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x75b, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x75b, 4), (stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x75b, 4), (stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x75b, 4), (stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x75b, 4), (stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100016b5, 8), (unique, 0x100016b5, 8) INT_ADD (unique, 0x100016ad, 8) , (const, 0x3c8, 8), (unique, 0x100016ad, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e6f9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100016dd, 8), (unique, 0x100016dd, 8) INT_ADD (unique, 0x100016d5, 8) , (const, 0x368, 8), (unique, 0x100016d5, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100016cd, 8), (unique, 0x100016cd, 8) INT_ADD (unique, 0x100016c5, 8) , (const, 0x390, 8), (unique, 0x100016c5, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100016e5, 8) , (const, 0x48e6f9, 8), (unique, 0x100016e5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bbd, 8) , (const, 0x1, 8), (unique, 0x10000bbd, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x76d, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x76d, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x76d, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x76d, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x76d, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x76d, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x76d, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x76d, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x76d, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x76d, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x76d, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x76d, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x76d, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x76d, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x76d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x76d, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x48e7d5, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100016f5, 8), (unique, 0x100016f5, 8) INT_ADD (unique, 0x100016ed, 8) , (const, 0x31c, 8), (unique, 0x100016ed, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000170d, 8) , (const, 0x48e7e1, 8), (unique, 0x1000170d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000bc5, 8) , (const, 0x1, 8), (unique, 0x10000bc5, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x847, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x847, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x847, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x847, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x847, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x847, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x847, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x847, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x847, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x847, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x847, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x847, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x847, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x847, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x847, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x847, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001705, 8), (unique, 0x10001705, 8) INT_ADD (unique, 0x100016fd, 8) , (const, 0x2a8, 8), (unique, 0x100016fd, 8) CAST (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x48e707, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x48e719, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000171d, 8), (unique, 0x1000171d, 8) INT_ADD (unique, 0x10001715, 8) , (const, 0x328, 8), (unique, 0x10001715, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001725, 8) , (const, 0x48e719, 8), (unique, 0x10001725, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b95, 8) , (const, 0x1, 8), (unique, 0x10000b95, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x78b, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x78b, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x78b, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x78b, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x78b, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x78b, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x78b, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x78b, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x78b, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x78b, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x78b, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x78b, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x78b, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x78b, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x78b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x78b, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x48e72b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001735, 8), (unique, 0x10001735, 8) INT_ADD (unique, 0x1000172d, 8) , (const, 0x3b8, 8), (unique, 0x1000172d, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000173d, 8) , (const, 0x48e72b, 8), (unique, 0x1000173d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b9d, 8) , (const, 0x1, 8), (unique, 0x10000b9d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x79b, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x79b, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x79b, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x79b, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x79b, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x79b, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x79b, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x79b, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x79b, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x79b, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x79b, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x79b, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x79b, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x79b, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x79b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x79b, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x48e7c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8858, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x48e738, 1)]
[(register, 0xa0, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001745, 8) , (const, 0x48e748, 8), (unique, 0x10001745, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000ba5, 8) , (const, 0x1, 8), (unique, 0x10000ba5, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x7bb, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x7bb, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x7bb, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x7bb, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x7bb, 4), (ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x7bb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7bb, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48e5c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3400, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0xa0, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48e751, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000dd8, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x48e76b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f70, 8) , (const, 0x0, 8), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000174d, 8) , (const, 0x48e76b, 8), (unique, 0x1000174d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000c1d, 8) , (const, 0x1, 8), (unique, 0x10000c1d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x7d7, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x7d7, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x7d7, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x7d7, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x7d7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7d7, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000a45, 8), (unique, 0x10000a45, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60a0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x48e7a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 1) , (const, 0x0, 1), (stack, 0xffffffffffffffc0, 1) SUBPIECE (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x48eb74, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ADD (ram, 0x4c8730, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001755, 8) , (const, 0x48eb85, 8), (unique, 0x10001755, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000c25, 8) , (const, 0x1, 8), (unique, 0x10000c25, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x485480, 8) , (const, 0x2, 8) , (unique, 0x100009ed, 8), (unique, 0x100009ed, 8) COPY (const, 0x4b5690, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000175d, 8) , (const, 0x48eb8f, 8), (unique, 0x1000175d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000c2d, 8) , (const, 0x1, 8), (unique, 0x10000c2d, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x83d, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x83d, 4), (stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x83d, 4), (stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x83d, 4), (stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x83d, 4), (stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x839, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x83d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x839, 4)]
[ ---  CALL (ram, 0x454cb0, 8) , (const, 0x7f, 4)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x83d, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x839, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x83d, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x839, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x83d, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x839, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x83d, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x839, 4)]
[(ram, 0x4c80e0, 4) COPY (ram, 0x4c80e0, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x83d, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x839, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x83d, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x839, 4)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x83d, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x839, 4)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x83d, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x839, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x83d, 4), (ram, 0x4c8730, 8) INDIRECT (register, 0x0, 8) , (const, 0x839, 4)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x83d, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x839, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x83d, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x839, 4)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x83d, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x839, 4)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x83d, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x839, 4)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x83d, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x839, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48e7a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8300, 8) , (stack, 0xffffffffffffffb8, 8)]
[(ram, 0x4c8300, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000dd8, 8) , (unique, 0x10000dd8, 8) , (unique, 0x10000dd8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000f58, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48ea70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000f60, 8) COPY (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48e7af, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0xb8, 8), (register, 0x0, 8) PTRADD (ram, 0x4c6128, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(unique, 0x10000f68, 8) COPY (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x48e7af, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001765, 8) , (const, 0x0, 4), (unique, 0x10001765, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffffa0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000176d, 8) , (const, 0x48e7bf, 8), (unique, 0x1000176d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000c35, 8) , (const, 0x1, 8), (unique, 0x10000c35, 8) INT_ADD (unique, 0x1000023e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x81c, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x81c, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x819, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x81c, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x819, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x81c, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x819, 4), (ram, 0x4c6128, 8) MULTIEQUAL (unique, 0x10000f58, 8) , (unique, 0x10000f60, 8) , (unique, 0x10000f68, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x81c, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x819, 4)]
[(ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x81c, 4), (ram, 0x4c80e0, 4) INDIRECT (ram, 0x4c80e0, 4) , (const, 0x819, 4)]
[(ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x81c, 4), (ram, 0x4c8300, 8) INDIRECT (ram, 0x4c8300, 8) , (const, 0x819, 4)]
[(ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x81c, 4), (ram, 0x4c8310, 8) INDIRECT (ram, 0x4c8310, 8) , (const, 0x819, 4)]
[(ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x81c, 4), (ram, 0x4c8720, 8) INDIRECT (ram, 0x4c8720, 8) , (const, 0x819, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x81c, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x819, 4)]
[(ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x81c, 4), (ram, 0x4c8738, 8) INDIRECT (ram, 0x4c8738, 8) , (const, 0x819, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x81c, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x819, 4)]
[(ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x81c, 4), (ram, 0x4c87c8, 8) INDIRECT (ram, 0x4c87c8, 8) , (const, 0x819, 4)]
[(ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x81c, 4), (ram, 0x4c8818, 8) INDIRECT (ram, 0x4c8818, 8) , (const, 0x819, 4)]
[(ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x81c, 4), (ram, 0x4c8858, 8) INDIRECT (ram, 0x4c8858, 8) , (const, 0x819, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff74, 1) INDIRECT (stack, 0xffffffffffffff74, 1) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff75, 1) INDIRECT (stack, 0xffffffffffffff75, 1) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff76, 1) INDIRECT (stack, 0xffffffffffffff76, 1) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff77, 1) INDIRECT (stack, 0xffffffffffffff77, 1) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x81c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x81c, 4)]
[ ---  CALL (ram, 0x458e20, 8)]
[ ---  BRANCH (ram, 0x48e303, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff77, 1) MULTIEQUAL (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1) , (stack, 0xffffffffffffff77, 1)]
[(stack, 0xffffffffffffff76, 1) MULTIEQUAL (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1) , (stack, 0xffffffffffffff76, 1)]
[(stack, 0xffffffffffffff75, 1) MULTIEQUAL (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1) , (stack, 0xffffffffffffff75, 1)]
[(stack, 0xffffffffffffff74, 1) MULTIEQUAL (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1) , (stack, 0xffffffffffffff74, 1)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8858, 8) MULTIEQUAL (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8) , (ram, 0x4c8858, 8)]
[(ram, 0x4c8818, 8) MULTIEQUAL (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8) , (ram, 0x4c8818, 8)]
[(ram, 0x4c87c8, 8) MULTIEQUAL (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8) , (ram, 0x4c87c8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8738, 8) MULTIEQUAL (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8) , (ram, 0x4c8738, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8720, 8) MULTIEQUAL (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8) , (ram, 0x4c8720, 8)]
[(ram, 0x4c8310, 8) MULTIEQUAL (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8) , (ram, 0x4c8310, 8)]
[(ram, 0x4c8300, 8) MULTIEQUAL (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8) , (ram, 0x4c8300, 8)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x48ea9b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c80e0, 4) , (const, 0x2, 4), (ram, 0x4c80e0, 4) MULTIEQUAL (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4) , (ram, 0x4c80e0, 4)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4)]
[(ram, 0x4c80e0, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c8300, 8) COPY (ram, 0x4c8300, 8)]
[(ram, 0x4c8310, 8) COPY (ram, 0x4c8310, 8)]
[(ram, 0x4c8720, 8) COPY (ram, 0x4c8720, 8)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8)]
[(ram, 0x4c8738, 8) COPY (ram, 0x4c8738, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c8, 8) COPY (ram, 0x4c87c8, 8)]
[(ram, 0x4c8818, 8) COPY (ram, 0x4c8818, 8)]
[(ram, 0x4c8858, 8) COPY (ram, 0x4c8858, 8)]
[ ---  RETURN (const, 0x0, 8)]
