[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffba8, 4) INDIRECT (stack, 0xfffffffffffffba8, 4) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000196, 8), (unique, 0x10000196, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x38, 8) , (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x10, 8), (unique, 0x3800, 8) CAST (unique, 0x1000019e, 8), (unique, 0x1000019e, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x25586e, 1)]
[ ---  CBRANCH (ram, 0x255860, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffba8, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x1000011e, 8) , (unique, 0x1000016e, 8) , (const, 0x4, 8), (unique, 0x1000016e, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x1000011e, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3480, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x64, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x64, 4)]
[(stack, 0xfffffffffffffba8, 4) INDIRECT (stack, 0xfffffffffffffba8, 4) , (const, 0x64, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x64, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x64, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x64, 4)]
[(register, 0x0, 8) CALL (ram, 0x130d70, 8) , (unique, 0x10000136, 8) , (register, 0x30, 8) , (const, 0x5, 8), (unique, 0x10000136, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8), (register, 0x30, 8) PTRADD (unique, 0x1000012e, 8) , (register, 0x30, 8) , (const, 0x1, 8), (unique, 0x1000012e, 8) COPY (const, 0x2b3520, 8), (register, 0x30, 8) INT_ZEXT (unique, 0x100001a6, 4), (unique, 0x100001a6, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000126, 8) , (unique, 0x1000017e, 8) , (const, 0x4, 8), (unique, 0x1000017e, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x10000126, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3484, 8)]
[ ---  CBRANCH (ram, 0x255948, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x12, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10a, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x10a, 4)]
[(stack, 0xfffffffffffffba8, 4) INDIRECT (stack, 0xfffffffffffffba8, 4) , (const, 0x10a, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10a, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x10a, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x10a, 4)]
[(register, 0x0, 8) CALL (ram, 0x130d70, 8) , (unique, 0x1000013e, 8) , (unique, 0x10000146, 8) , (const, 0x5, 8), (unique, 0x10000146, 8) COPY (const, 0x2b7213, 8), (unique, 0x1000013e, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[(unique, 0x100000d9, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100000e1, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100000e9, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(unique, 0x100000f5, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(unique, 0x100000fd, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(unique, 0x10000105, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CBRANCH (ram, 0x2558a0, 1) , (unique, 0x100000d8, 1), (unique, 0x100000d8, 1) INT_LESS (unique, 0x100000f1, 4) , (const, 0x12, 4), (unique, 0x100000f1, 4) MULTIEQUAL (stack, 0xfffffffffffffba8, 4) , (stack, 0xfffffffffffffba8, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x10000105, 8) , (const, 0x88, 4)]
[ ---  RETURN (const, 0x1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100001ba, 8), (unique, 0x100001ba, 8) CALLIND (unique, 0x100001b2, 8), (unique, 0x100001b2, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x10000116, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000116, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3300, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001aa, 8), (unique, 0x100001aa, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x1000010e, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x1000010e, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x100000f1, 4)]
[(register, 0x110, 8) INDIRECT (unique, 0x100000e1, 8) , (const, 0xa0, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (unique, 0x100000e9, 8) , (const, 0xa0, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x10000105, 8) , (const, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x2558fd, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1650c0, 8) , (unique, 0x3800, 8) , (unique, 0x1000014e, 8) , (register, 0x30, 8) , (unique, 0x100000d9, 8) , (unique, 0x100000f5, 8) , (unique, 0x100000fd, 8), (unique, 0x1000014e, 8) COPY (const, 0x2b7253, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (stack, 0xfffffffffffffba0, 8), (unique, 0x3200, 8) CAST (unique, 0x100001ca, 8), (unique, 0x100001ca, 8) INT_ADD (register, 0x0, 8) , (const, 0xb0, 8), (register, 0x0, 8) CALL (ram, 0x259600, 8), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0xe2, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xee, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0xee, 4), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xee, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xe2, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100001c2, 8), (unique, 0x100001c2, 8) INT_ADD (register, 0x0, 8) , (const, 0xb0, 8), (register, 0x0, 8) CALL (ram, 0x259600, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x25591f, 1)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffba0, 8)]
[ ---  CBRANCH (ram, 0x255b28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100001d2, 8), (unique, 0x100001d2, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xdd, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
