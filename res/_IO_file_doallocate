[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x16d178, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x100000ae, 4), (unique, 0x100000ae, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1c, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x29, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x29, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x29, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x29, 4)]
[(unique, 0x100000a6, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x29, 4)]
[ ---  CBRANCH (ram, 0x16d178, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x38, 8) , (register, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100000ba, 8), (unique, 0x100000ba, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x90, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100000b2, 8), (unique, 0x100000b2, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x36, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x16d1b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff70, 4) , (const, 0xf000, 4)]
[ ---  CBRANCH (ram, 0x16d1f0, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x88, 4), (register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0xfff, 4), (register, 0x10, 4) SUBPIECE (unique, 0x1000009e, 8) , (const, 0x0, 4), (unique, 0x1000009e, 8) INT_RIGHT (unique, 0x100000ca, 8) , (const, 0x8, 4), (unique, 0x100000ca, 8) CAST (stack, 0xffffffffffffff80, 8), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffff000, 4), (register, 0x0, 4) SUBPIECE (unique, 0x10000096, 8) , (const, 0x0, 4), (unique, 0x10000096, 8) INT_RIGHT (unique, 0x100000c2, 8) , (const, 0x20, 4), (unique, 0x100000c2, 8) CAST (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x126, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x132, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x126, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100000da, 8) , (unique, 0xbc80, 4), (unique, 0x100000da, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x100000a6, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x126, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000d2, 8), (unique, 0x100000d2, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x16d1df, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f8090, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1c, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x110, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x200, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x16d169, 1)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x16d17d, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x0, 8) , (unique, 0x100000e2, 8), (unique, 0x100000e2, 8) CAST (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x18, 8) COPY (const, 0x2000, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x62, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  CBRANCH (ram, 0x16d1a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x11f8a0, 8) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (register, 0x18, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x76, 4)]
[ ---  CALL (ram, 0x17b430, 8) , (register, 0x38, 8) , (register, 0x0, 8) , (unique, 0x3400, 8) , (const, 0x1, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x100000ea, 8) , (register, 0x18, 8), (unique, 0x100000ea, 8) CAST (register, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
