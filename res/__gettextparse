[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(register, 0xa8, 8) COPY (const, 0xc8, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000047f, 8), (unique, 0x1000047f, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffef8, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0xfffffffe, 4)]
[(stack, 0xfffffffffffff87c, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000423, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x1000030b, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x1000030b, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef7, 8)]
[(unique, 0x10000433, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x1000030b, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x1000030b, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef7, 8)]
[(unique, 0x1000046b, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff8b8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffef8, 1) MULTIEQUAL (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1)]
[(stack, 0xfffffffffffff8a8, 8) MULTIEQUAL (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8)]
[(stack, 0xfffffffffffff8a0, 8) MULTIEQUAL (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8)]
[(stack, 0xfffffffffffff898, 8) MULTIEQUAL (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8)]
[(stack, 0xfffffffffffff890, 8) MULTIEQUAL (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8)]
[(stack, 0xfffffffffffff87c, 4) MULTIEQUAL (stack, 0xfffffffffffff87c, 4) , (stack, 0xfffffffffffff87c, 4)]
[(stack, 0xfffffffffffff878, 4) MULTIEQUAL (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4)]
[(stack, 0xfffffffffffff868, 8) MULTIEQUAL (unique, 0x1000046b, 8) , (stack, 0xfffffffffffff868, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000423, 8) , (register, 0x18, 8)]
[(unique, 0x10000473, 8) COPY (register, 0x28, 8), (register, 0x28, 8) MULTIEQUAL (unique, 0x10000433, 8) , (unique, 0x1000043b, 8)]
[ ---  CBRANCH (ram, 0x40ed98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xfffffff6, 4), (register, 0x0, 4) INT_SEXT (unique, 0x10000487, 1), (unique, 0x10000487, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002eb, 8) , (register, 0xb8, 8) , (const, 0x1, 8), (unique, 0x100002eb, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a8b0, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x1000047b, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x40f048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffff878, 4) , (const, 0xfffffffe, 4)]
[(unique, 0x10000403, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x40f0a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) COPY (unique, 0x1000041b, 8), (unique, 0x1000041b, 8) MULTIEQUAL (unique, 0x10000403, 8) , (unique, 0x1000040b, 8) , (unique, 0x10000413, 8)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x10, 8)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x40ecf1, 1)]
[(unique, 0x1000040b, 8) COPY (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x40f050, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x20, 1)]
[(unique, 0x10000413, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x40f050, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x9, 1)]
[(register, 0x8, 4) INT_SEXT (unique, 0xbb00, 1)]
[ ---  BRANCHIND (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x40f3f3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x3d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) CAST (unique, 0x10000490, 8), (unique, 0x10000490, 8) INT_OR (register, 0x10, 8) , (const, 0xb, 8), (register, 0x10, 8) INT_AND (unique, 0x10000488, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000488, 8) CAST (stack, 0xfffffffffffff890, 8)]
[(register, 0x30, 8) CAST (unique, 0x100004a0, 8), (unique, 0x100004a0, 8) INT_OR (register, 0x30, 8) , (const, 0x9, 8), (register, 0x30, 8) INT_AND (unique, 0x10000498, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000498, 8) CAST (stack, 0xfffffffffffff890, 8)]
[ ---  BRANCH (ram, 0x40f31e, 1)]
[ ---  CBRANCH (ram, 0x40f1d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x3d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) CAST (unique, 0x100004b0, 8), (unique, 0x100004b0, 8) INT_OR (register, 0x10, 8) , (const, 0xc, 8), (register, 0x10, 8) INT_AND (unique, 0x100004a8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100004a8, 8) CAST (stack, 0xfffffffffffff890, 8)]
[ ---  CBRANCH (ram, 0x40f441, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x3d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x30, 8) CAST (unique, 0x100004c0, 8), (unique, 0x100004c0, 8) INT_OR (register, 0x30, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_AND (unique, 0x100004b8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100004b8, 8) CAST (stack, 0xfffffffffffff890, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x103, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x10, 8)]
[(register, 0x10, 4) COPY (const, 0x7, 4)]
[ ---  BRANCH (ram, 0x40ecee, 1)]
[(register, 0x10, 8) CAST (unique, 0x100004d0, 8), (unique, 0x100004d0, 8) INT_OR (register, 0x10, 8) , (const, 0xa, 8), (register, 0x10, 8) INT_AND (unique, 0x100004c8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100004c8, 8) CAST (stack, 0xfffffffffffff890, 8)]
[ ---  BRANCH (ram, 0x40f406, 1)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x10, 4) COPY (const, 0x7, 4)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x103, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x88, 8), (register, 0x88, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x40ecee, 1)]
[(register, 0x30, 8) CAST (unique, 0x100004d8, 8), (unique, 0x100004d8, 8) INT_SEXT (register, 0x30, 4), (register, 0x30, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffffd0, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000274, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x1000027d, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x40f225, 1) , (unique, 0x10000285, 1), (unique, 0x10000285, 1) INT_LESS (unique, 0x100004e0, 1) , (const, 0xa, 1), (unique, 0x100004e0, 1) CAST (unique, 0x3100, 1), (unique, 0x3100, 1) INT_SUB (unique, 0x1000027c, 1) , (const, 0x30, 1), (unique, 0x1000027c, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x10, 8) PTRADD (unique, 0x10000274, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100004e9, 8), (unique, 0x100004e9, 8) INT_ADD (register, 0x8, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x100004e1, 8) , (const, 0xa, 8), (unique, 0x100004e1, 8) CAST (unique, 0x1000027d, 8), (register, 0x8, 8) INT_SEXT (register, 0x8, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffffd0, 4), (register, 0x8, 4) INT_SEXT (unique, 0x1000027c, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000274, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x106, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (unique, 0x10000274, 8)]
[(register, 0x10, 4) COPY (const, 0xb, 4)]
[ ---  BRANCH (ram, 0x40ecee, 1)]
[(register, 0x30, 8) CAST (unique, 0x100004f9, 8), (unique, 0x100004f9, 8) INT_OR (register, 0x30, 8) , (const, 0x4, 8), (register, 0x30, 8) INT_AND (unique, 0x100004f1, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100004f1, 8) CAST (stack, 0xfffffffffffff890, 8)]
[(register, 0x30, 8) CAST (unique, 0x10000509, 8), (unique, 0x10000509, 8) INT_OR (register, 0x30, 8) , (const, 0x7, 8), (register, 0x30, 8) INT_AND (unique, 0x10000501, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000501, 8) CAST (stack, 0xfffffffffffff890, 8)]
[(register, 0x30, 8) CAST (unique, 0x10000519, 8), (unique, 0x10000519, 8) INT_OR (register, 0x30, 8) , (const, 0x6, 8), (register, 0x30, 8) INT_AND (unique, 0x10000511, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000511, 8) CAST (stack, 0xfffffffffffff890, 8)]
[ ---  BRANCH (ram, 0x40f2b7, 1)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x104, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x10, 8)]
[(register, 0x10, 4) COPY (const, 0x8, 4)]
[ ---  BRANCH (ram, 0x40ecee, 1)]
[(register, 0x30, 8) CAST (unique, 0x10000529, 8), (unique, 0x10000529, 8) INT_OR (register, 0x30, 8) , (const, 0x3, 8), (register, 0x30, 8) INT_AND (unique, 0x10000521, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000521, 8) CAST (stack, 0xfffffffffffff890, 8)]
[ ---  BRANCH (ram, 0x40f285, 1)]
[ ---  CBRANCH (ram, 0x40f1d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (unique, 0xba80, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x40ecd2, 1)]
[ ---  CBRANCH (ram, 0x40efd8, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (stack, 0xfffffffffffff878, 4), (stack, 0xfffffffffffff878, 4) MULTIEQUAL (stack, 0xfffffffffffff878, 4) , (register, 0x8, 4)]
[(register, 0x10, 4) INT_SEXT (unique, 0x10000531, 1), (unique, 0x10000531, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002d3, 8) , (register, 0x10, 8) , (const, 0x1, 8), (unique, 0x100002d3, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a7a0, 8), (register, 0x10, 8) INT_SEXT (stack, 0xfffffffffffff878, 4)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x0, 4)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x40ecf1, 1)]
[(register, 0x30, 8) CAST (unique, 0x1000053a, 8), (unique, 0x1000053a, 8) INT_OR (register, 0x30, 8) , (const, 0x5, 8), (register, 0x30, 8) INT_AND (unique, 0x10000532, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000532, 8) CAST (stack, 0xfffffffffffff890, 8)]
[ ---  BRANCH (ram, 0x40f285, 1)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x105, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x10, 8)]
[(register, 0x10, 4) COPY (const, 0x9, 4)]
[ ---  BRANCH (ram, 0x40ecee, 1)]
[ ---  CBRANCH (ram, 0x40f429, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x3d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) CAST (unique, 0x1000054a, 8), (unique, 0x1000054a, 8) INT_OR (register, 0x10, 8) , (const, 0xd, 8), (register, 0x10, 8) INT_AND (unique, 0x10000542, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000542, 8) CAST (stack, 0xfffffffffffff890, 8)]
[ ---  BRANCH (ram, 0x40f393, 1)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x10, 4) COPY (const, 0x6, 4)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x102, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x88, 8), (register, 0x88, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x40ecee, 1)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x21, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x10, 8)]
[(register, 0x10, 4) COPY (const, 0xa, 4)]
[ ---  BRANCH (ram, 0x40ecee, 1)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x100, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x10, 8)]
[(register, 0x10, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x40ecee, 1)]
[(stack, 0xfffffffffffff890, 8) MULTIEQUAL (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (unique, 0x1000027d, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (stack, 0xfffffffffffff890, 8)]
[(stack, 0xfffffffffffff878, 4) MULTIEQUAL (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4)]
[(unique, 0x1000045b, 4) COPY (unique, 0x3400, 4), (unique, 0x3400, 4) INT_ADD (register, 0x0, 4) , (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0x0, 4)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x40ecf1, 1)]
[(stack, 0xfffffffffffff890, 8) MULTIEQUAL (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8)]
[(stack, 0xfffffffffffff878, 4) MULTIEQUAL (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x40ed98, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x38, 4) , (const, 0x37, 4), (register, 0x38, 4) MULTIEQUAL (unique, 0x1000045b, 4) , (unique, 0x1000047b, 4) , (unique, 0x1000047b, 4) , (unique, 0x1000047b, 4)]
[ ---  CBRANCH (ram, 0x40ed98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (register, 0x10, 4), (register, 0x30, 4) INT_SEXT (unique, 0x10000556, 1), (unique, 0x10000556, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x1000029b, 8) , (register, 0x38, 8) , (const, 0x1, 8), (unique, 0x1000029b, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a700, 8), (register, 0x38, 8) INT_SEXT (unique, 0x10000552, 4), (unique, 0x10000552, 4) CAST (register, 0x38, 4)]
[(register, 0xb8, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002b3, 8) , (register, 0x38, 8) , (const, 0x1, 8), (unique, 0x100002b3, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a740, 8)]
[(register, 0x10, 4) INT_2COMP (unique, 0x10000213, 4), (unique, 0x10000213, 4) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002b3, 8) , (register, 0x38, 8) , (const, 0x1, 8), (unique, 0x100002b3, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a740, 8)]
[ ---  CBRANCH (ram, 0x40ed58, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002b3, 8) , (register, 0x38, 8) , (const, 0x1, 8), (unique, 0x100002b3, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a740, 8)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0xfffffffe, 4)]
[(register, 0x38, 4) INT_ADD (unique, 0x12280, 4) , (unique, 0x12080, 4), (unique, 0x12280, 4) INT_ADD (stack, 0xfffffffffffff87c, 4) , (const, 0xffffffff, 4), (unique, 0x12080, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (stack, 0xfffffffffffff87c, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfa, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (stack, 0xfffffffffffff890, 8), (register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x40eeaf, 1)]
[(stack, 0xfffffffffffff890, 8) MULTIEQUAL (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8)]
[(stack, 0xfffffffffffff878, 4) MULTIEQUAL (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4)]
[(register, 0x10, 4) INT_SEXT (unique, 0x10000557, 1), (unique, 0x10000557, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002cb, 8) , (register, 0xb8, 8) , (const, 0x1, 8), (unique, 0x100002cb, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a780, 8)]
[ ---  CBRANCH (ram, 0x40ed58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002cb, 8) , (register, 0xb8, 8) , (const, 0x1, 8), (unique, 0x100002cb, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a780, 8)]
[ ---  CBRANCH (ram, 0x40edc1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffff87c, 4) , (const, 0x3, 4)]
[(register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffff878, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x40f020, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (stack, 0xfffffffffffff878, 4)]
[(stack, 0xfffffffffffff878, 4) COPY (const, 0xfffffffe, 4)]
[ ---  BRANCH (ram, 0x40edc1, 1)]
[ ---  CBRANCH (ram, 0x40ef90, 1) , (register, 0x206, 1)]
[(stack, 0xfffffffffffff878, 4) MULTIEQUAL (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x40edd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xfffffff6, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x40edd0, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x0, 4) , (const, 0x37, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x40edd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002a3, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x100002a3, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a700, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10000558, 4), (unique, 0x10000558, 4) CAST (register, 0x0, 4)]
[(register, 0xb8, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002bb, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x100002bb, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a740, 8)]
[ ---  CBRANCH (ram, 0x40edd0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 1) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002bb, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x100002bb, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a740, 8)]
[(stack, 0xfffffffffffff87c, 4) COPY (const, 0x3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (stack, 0xfffffffffffff890, 8), (register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x40eeaf, 1)]
[ ---  CBRANCH (ram, 0x40ef90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (register, 0x28, 8)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[(register, 0x0, 4) INT_SEXT (unique, 0x1000055c, 1), (unique, 0x1000055c, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002f3, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x100002f3, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a8b0, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffff890, 8) MULTIEQUAL (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8)]
[(stack, 0xfffffffffffff878, 4) MULTIEQUAL (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4)]
[(register, 0x30, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x1000028b, 8) , (register, 0x88, 8) , (const, 0x1, 8), (unique, 0x1000028b, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a6c8, 8), (register, 0x88, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (const, 0x1, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x1000028b, 8) , (register, 0x88, 8) , (const, 0x1, 8), (unique, 0x1000028b, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a6c8, 8), (register, 0x88, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  BRANCHIND (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x40ee48, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x62a, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (stack, 0xfffffffffffff898, 8) , (const, 0x62a, 4)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (stack, 0xfffffffffffff8a0, 8) , (const, 0x62a, 4)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x62a, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x62a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x62a, 4)]
[ ---  CBRANCH (ram, 0x40ee48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000055d, 8), (unique, 0x1000055d, 8) CALL (ram, 0x40b020, 8) , (const, 0x0, 8) , (const, 0x1, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000565, 8) , (unique, 0xbd80, 8), (unique, 0x10000565, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x40ee48, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x661, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (stack, 0xfffffffffffff898, 8) , (const, 0x661, 4)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (stack, 0xfffffffffffff8a0, 8) , (const, 0x661, 4)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x661, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x661, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x661, 4)]
[(register, 0x0, 8) CAST (unique, 0x1000056d, 8), (unique, 0x1000056d, 8) CALL (ram, 0x40b020, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x40ee48, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x674, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x674, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (stack, 0xfffffffffffff8a0, 8) , (const, 0x674, 4)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x674, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x674, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x674, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000575, 8), (unique, 0x10000575, 8) CALL (ram, 0x40b020, 8) , (const, 0x1, 8) , (const, 0x2, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff898, 8)]
[ ---  BRANCH (ram, 0x40ee48, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x68f, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x68f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x68f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x68f, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x68f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x68f, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000585, 8), (unique, 0x10000585, 8) CALL (ram, 0x407540, 8) , (unique, 0xbc80, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff898, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000057d, 8), (unique, 0x1000057d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x40ee48, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6a7, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x6a7, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x6a7, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x6a7, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x6a7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6a7, 4)]
[(register, 0x0, 8) CAST (unique, 0x1000058d, 8), (unique, 0x1000058d, 8) CALL (ram, 0x407540, 8) , (const, 0xe, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff898, 8)]
[ ---  BRANCH (ram, 0x40ee48, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6bf, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x6bf, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x6bf, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x6bf, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x6bf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6bf, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000595, 8), (unique, 0x10000595, 8) CALL (ram, 0x407540, 8) , (const, 0xf, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff898, 8)]
[ ---  BRANCH (ram, 0x40ee48, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6dc, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (unique, 0x10000224, 8) , (const, 0x6dc, 4), (unique, 0x10000224, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0xfffffffffffffffc, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (unique, 0x1000023c, 8) , (const, 0x6dc, 4), (unique, 0x1000023c, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x6dc, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x6dc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6dc, 4)]
[(register, 0x0, 8) CAST (unique, 0x1000059d, 8), (unique, 0x1000059d, 8) CALL (ram, 0x40b020, 8) , (const, 0x3, 8) , (const, 0x10, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffff898, 8)]
[ ---  BRANCH (ram, 0x40ee48, 1)]
[ ---  CBRANCH (ram, 0x40ef90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(register, 0xa0, 8) COPY (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffff8a8, 8) MULTIEQUAL (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8)]
[(stack, 0xfffffffffffff8a0, 8) MULTIEQUAL (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8)]
[(stack, 0xfffffffffffff898, 8) MULTIEQUAL (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x271, 4), (stack, 0xfffffffffffffef8, 1) MULTIEQUAL (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x271, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x30, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000343, 8) , (const, 0x8, 8), (unique, 0x10000343, 8) INT_2COMP (register, 0x30, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x30, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000343, 8) , (const, 0x8, 8), (unique, 0x10000343, 8) INT_2COMP (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x40eea0, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x30, 4) , (const, 0x37, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (register, 0x88, 4), (register, 0x30, 4) INT_SEXT (unique, 0x100005a6, 1), (unique, 0x100005a6, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002e3, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x100002e3, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a8ab, 8), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x88, 4) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x0, 4) INT_SEXT (unique, 0x100005a5, 1), (unique, 0x100005a5, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000293, 8) , (register, 0x88, 8) , (const, 0x1, 8), (unique, 0x10000293, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a6d8, 8), (register, 0x10, 8) PTRADD (register, 0x18, 8) , (unique, 0x100000fc, 8) , (const, 0x1, 8), (unique, 0x100000fc, 8) INT_2COMP (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x40f030, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (unique, 0xba80, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002ab, 8) , (register, 0x30, 8) , (const, 0x1, 8), (unique, 0x100002ab, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a700, 8), (register, 0x30, 8) INT_SEXT (unique, 0x100005a7, 4), (unique, 0x100005a7, 4) CAST (register, 0x30, 4)]
[(register, 0xb8, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100005b3, 8), (unique, 0x100005b3, 8) INT_ADD (unique, 0x100005ab, 8) , (register, 0x0, 8), (unique, 0x100005ab, 8) CAST (unique, 0x100002db, 8), (unique, 0x100002db, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a8a7, 8)]
[(register, 0xb8, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100002c3, 8) , (register, 0x30, 8) , (const, 0x1, 8), (unique, 0x100002c3, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a740, 8)]
[ ---  BRANCH (ram, 0x40eeaf, 1)]
[(stack, 0xfffffffffffffef8, 1) MULTIEQUAL (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1)]
[(stack, 0xfffffffffffff8a8, 8) MULTIEQUAL (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8)]
[(stack, 0xfffffffffffff8a0, 8) MULTIEQUAL (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8)]
[(stack, 0xfffffffffffff898, 8) MULTIEQUAL (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8)]
[(stack, 0xfffffffffffff890, 8) MULTIEQUAL (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8) , (stack, 0xfffffffffffff890, 8)]
[(stack, 0xfffffffffffff87c, 4) MULTIEQUAL (register, 0x38, 4) , (stack, 0xfffffffffffff87c, 4) , (stack, 0xfffffffffffff87c, 4) , (stack, 0xfffffffffffff87c, 4)]
[(stack, 0xfffffffffffff878, 4) MULTIEQUAL (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4) , (stack, 0xfffffffffffff878, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfe, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 1), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1), (register, 0x10, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x40ef75, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3100, 8) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x28, 8) , (unique, 0x10000363, 8) , (const, 0x1, 8), (unique, 0x10000363, 8) INT_ADD (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x18, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x18, 8) PTRADD (unique, 0x3100, 8) , (unique, 0x1000010f, 8) , (const, 0x1, 8), (unique, 0x1000010f, 8) INT_2COMP (unique, 0x100005bb, 8), (unique, 0x100005bb, 8) CAST (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x40f3d7, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0xa8, 8) , (const, 0x2710, 8)]
[(unique, 0x100003f3, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x2710, 8)]
[ ---  CBRANCH (ram, 0x40eeed, 1) , (unique, 0x27800, 1), (unique, 0x27800, 1) INT_SLESS (unique, 0x1000021b, 8) , (const, 0x2711, 8), (unique, 0x1000021b, 8) INT_MULT (register, 0xa8, 8) , (const, 0x2, 8)]
[(unique, 0x100003fb, 8) COPY (unique, 0x1000021b, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (stack, 0xfffffffffffff898, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (stack, 0xfffffffffffff8a0, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x140, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x140, 4)]
[ ---  CBRANCH (ram, 0x40f3d7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x3880, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x10000129, 8) , (const, 0x7, 8), (unique, 0x10000129, 8) INT_MULT (register, 0x0, 8) , (const, 0x9, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100003f3, 8) , (unique, 0x100003fb, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x193, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x175, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (stack, 0xfffffffffffff898, 8) , (const, 0x193, 4), (stack, 0xfffffffffffff898, 8) INDIRECT (stack, 0xfffffffffffff898, 8) , (const, 0x175, 4)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (stack, 0xfffffffffffff8a0, 8) , (const, 0x193, 4), (stack, 0xfffffffffffff8a0, 8) INDIRECT (stack, 0xfffffffffffff8a0, 8) , (const, 0x175, 4)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x193, 4), (stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x175, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x193, 4), (stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x175, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x193, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x175, 4)]
[(register, 0x0, 8) CAST (unique, 0x100005d3, 8), (unique, 0x100005d3, 8) CALL (ram, 0x401060, 8) , (register, 0x90, 8) , (stack, 0xfffffffffffff868, 8) , (register, 0xb0, 8), (register, 0x90, 8) PTRADD (register, 0x0, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x100005cb, 8), (unique, 0x100005cb, 8) CALL (ram, 0x401060, 8) , (register, 0x0, 8) , (register, 0x28, 8) , (unique, 0x3100, 8), (register, 0xb0, 8) INT_MULT (unique, 0x100005c3, 8) , (const, 0x8, 8), (unique, 0x100005c3, 8) CAST (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x40ef58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 8) , (unique, 0x3c80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ab, 4)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (stack, 0xfffffffffffff898, 8) , (const, 0x1ab, 4)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (stack, 0xfffffffffffff8a0, 8) , (const, 0x1ab, 4)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x1ab, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x1ab, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ab, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0x28, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffef8, 1) MULTIEQUAL (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1)]
[(stack, 0xfffffffffffff8a8, 8) MULTIEQUAL (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8)]
[(stack, 0xfffffffffffff8a0, 8) MULTIEQUAL (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8)]
[(stack, 0xfffffffffffff898, 8) MULTIEQUAL (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3a00, 8) PTRADD (register, 0x0, 8) , (unique, 0x100005e3, 8) , (const, 0x8, 8), (unique, 0x100005e3, 8) CAST (unique, 0x1000037b, 8), (unique, 0x1000037b, 8) PTRADD (unique, 0x3100, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x40f3e5, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3a00, 8) , (register, 0x18, 8), (unique, 0x3a00, 8) PTRADD (register, 0x0, 8) , (unique, 0x1000036b, 8) , (const, 0x1, 8), (unique, 0x1000036b, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (unique, 0x100005db, 8) , (const, 0x1, 8), (unique, 0x100005db, 8) CAST (register, 0x0, 8)]
[(register, 0xa0, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x40efa0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffef8, 1) MULTIEQUAL (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1)]
[(stack, 0xfffffffffffff8a8, 8) MULTIEQUAL (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8)]
[(stack, 0xfffffffffffff8a0, 8) MULTIEQUAL (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8)]
[(stack, 0xfffffffffffff898, 8) MULTIEQUAL (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x40ef99, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffef8, 1) MULTIEQUAL (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1)]
[(stack, 0xfffffffffffff8a8, 8) MULTIEQUAL (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8)]
[(stack, 0xfffffffffffff8a0, 8) MULTIEQUAL (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8)]
[(stack, 0xfffffffffffff898, 8) MULTIEQUAL (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8)]
[(stack, 0xfffffffffffff868, 8) MULTIEQUAL (stack, 0xfffffffffffff868, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (unique, 0x3a00, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0x0, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x18, 8)]
[(unique, 0x1000043b, 8) COPY (register, 0x28, 8), (register, 0x28, 8) MULTIEQUAL (unique, 0x10000473, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x40ecb7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x9, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000443, 8) COPY (register, 0x28, 8)]
[ ---  BRANCH (ram, 0x40ef99, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffef8, 1) MULTIEQUAL (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1)]
[(stack, 0xfffffffffffff8a8, 8) MULTIEQUAL (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8)]
[(stack, 0xfffffffffffff8a0, 8) MULTIEQUAL (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8)]
[(stack, 0xfffffffffffff898, 8) MULTIEQUAL (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x40efa8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (unique, 0x3c80, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000443, 8) , (unique, 0x10000473, 8) , (unique, 0x10000473, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f8, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (stack, 0xfffffffffffff898, 8) , (const, 0x1f8, 4), (stack, 0xfffffffffffff898, 8) MULTIEQUAL (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (stack, 0xfffffffffffff8a0, 8) , (const, 0x1f8, 4), (stack, 0xfffffffffffff8a0, 8) MULTIEQUAL (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x1f8, 4), (stack, 0xfffffffffffff8a8, 8) MULTIEQUAL (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x1f8, 4), (stack, 0xfffffffffffffef8, 1) MULTIEQUAL (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f8, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffef8, 1) MULTIEQUAL (stack, 0xfffffffffffffef8, 1) , (stack, 0xfffffffffffffef8, 1)]
[(stack, 0xfffffffffffff8a8, 8) MULTIEQUAL (stack, 0xfffffffffffff8a8, 8) , (stack, 0xfffffffffffff8a8, 8)]
[(stack, 0xfffffffffffff8a0, 8) MULTIEQUAL (stack, 0xfffffffffffff8a0, 8) , (stack, 0xfffffffffffff8a0, 8)]
[(stack, 0xfffffffffffff898, 8) MULTIEQUAL (stack, 0xfffffffffffff898, 8) , (stack, 0xfffffffffffff898, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x40f456, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100005eb, 8), (unique, 0x100005eb, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0xa0, 8)]
[(stack, 0xfffffffffffff898, 8) INDIRECT (stack, 0xfffffffffffff898, 8) , (const, 0x225, 4)]
[(stack, 0xfffffffffffff8a0, 8) INDIRECT (stack, 0xfffffffffffff8a0, 8) , (const, 0x225, 4)]
[(stack, 0xfffffffffffff8a8, 8) INDIRECT (stack, 0xfffffffffffff8a8, 8) , (const, 0x225, 4)]
[(stack, 0xfffffffffffffef8, 1) INDIRECT (stack, 0xfffffffffffffef8, 1) , (const, 0x225, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x225, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[ ---  RETURN (const, 0x1, 4)]
