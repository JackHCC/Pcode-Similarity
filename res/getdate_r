[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000656, 8), (unique, 0x10000656, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x21, 4), (register, 0x20a, 1) COPY (const, 0x0, 1)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x21, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x21, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0x1beda6, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x21, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x21, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x21, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x21, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x21, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x21, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x21, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x21, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x21, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x21, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x21, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x21, 4)]
[ ---  CBRANCH (ram, 0x1bee20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x139760, 8) , (unique, 0x1000036b, 8), (unique, 0x1000036b, 8) COPY (const, 0x28d9b2, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1bedd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x53, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x53, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x53, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x53, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0x1bede4, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x53, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x53, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x53, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x53, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x53, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x53, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x53, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x53, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x53, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x53, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x53, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x53, 4)]
[ ---  CBRANCH (ram, 0x1bedba, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f6320, 8) , (const, 0x1, 4) , (register, 0x0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x1bedba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x8000, 4), (register, 0x10, 4) INT_AND (stack, 0xffffffffffffff50, 4) , (const, 0xf000, 4)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x4, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7f, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x7f, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x7f, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x7f, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0x1bee15, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x7f, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x7f, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x7f, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x7f, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x7f, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x7f, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x7f, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x7f, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x7f, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x7f, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x7f, 4)]
[ ---  CBRANCH (ram, 0x1bee34, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f6a60, 8) , (register, 0x0, 8) , (const, 0x4, 4)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x2, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x91, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x91, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x91, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0x1bee43, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x91, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x91, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x91, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x91, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x91, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x91, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x91, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x91, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x91, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x91, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x91, 4)]
[ ---  CBRANCH (ram, 0x1bee19, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x16dd20, 8) , (register, 0x0, 8) , (unique, 0x10000363, 8), (unique, 0x10000363, 8) COPY (const, 0x28bf73, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000039b, 8) , (unique, 0xbd00, 4), (unique, 0x1000039b, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000393, 8), (unique, 0x10000393, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000666, 8), (unique, 0x10000666, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000065e, 8), (unique, 0x1000065e, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e18, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0xa1, 4)]
[(unique, 0x100005d4, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1bee80, 1) , (unique, 0x100005d3, 1), (unique, 0x100005d3, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000067e, 8), (unique, 0x1000067e, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) CAST (unique, 0x10000676, 8), (unique, 0x10000676, 8) INT_ADD (unique, 0x1000066e, 8) , (const, 0x1, 8), (unique, 0x1000066e, 8) CAST (unique, 0x100005d4, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xde, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0xde, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xde, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0x1bee88, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0xde, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0xde, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0xde, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xde, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0xde, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0xde, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xde, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0xde, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0xde, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0xde, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0xde, 4)]
[ ---  CBRANCH (ram, 0x1bf070, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (unique, 0x100005d4, 8)]
[(unique, 0x1000063e, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1beec9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000696, 8), (unique, 0x10000696, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000068e, 8), (unique, 0x1000068e, 8) INT_ADD (unique, 0x10000686, 8) , (unique, 0x100003a3, 8), (unique, 0x10000686, 8) CAST (unique, 0x100005d4, 8), (unique, 0x100003a3, 8) INT_SUB (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1beeb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8), (register, 0xb8, 8) INT_SUB (unique, 0x10000339, 8) , (const, 0x1, 8), (unique, 0x10000339, 8) COPY (unique, 0x1000064e, 8), (unique, 0x1000064e, 8) MULTIEQUAL (unique, 0x1000063e, 8) , (unique, 0x10000646, 8)]
[(register, 0xa8, 8) COPY (const, 0x1, 8)]
[(unique, 0x10000646, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x1bf01a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100006ae, 8), (unique, 0x100006ae, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100006a6, 8), (unique, 0x100006a6, 8) INT_ADD (unique, 0x1000069e, 8) , (unique, 0x100003ab, 8), (unique, 0x1000069e, 8) CAST (unique, 0x100005d4, 8), (unique, 0x100003ab, 8) INT_SUB (unique, 0x10000339, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x1bf070, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x0, 8) , (register, 0xb8, 8)]
[(stack, 0xfffffffffffffe88, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000061e, 8) COPY (unique, 0x100006b6, 8), (unique, 0x100006b6, 8) CAST (register, 0x20, 8)]
[(unique, 0x10000636, 8) COPY (unique, 0x100006be, 8), (unique, 0x100006be, 8) CAST (unique, 0x100005d4, 8)]
[ ---  BRANCH (ram, 0x1bef07, 1)]
[ ---  CBRANCH (ram, 0x1beed4, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x10000339, 8) , (const, 0x1001, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x61a, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x61a, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x61a, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0x1bf038, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x61a, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x61a, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x61a, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x61a, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x61a, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x61a, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x61a, 4)]
[ ---  CBRANCH (ram, 0x1beed4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2141b0, 8) , (unique, 0x10000339, 8)]
[(register, 0x20, 8) CAST (unique, 0x100006ce, 8), (unique, 0x100006ce, 8) INT_ADD (unique, 0x100006c6, 8) , (unique, 0x10000134, 8), (unique, 0x100006c6, 8) CAST (unique, 0x100003bb, 8), (unique, 0x100003bb, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8), (unique, 0x10000134, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x10000339, 8) , (unique, 0x10000339, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1beef6, 8), (register, 0x20, 8) CAST (unique, 0x100006ee, 8), (unique, 0x100006ee, 8) INT_ADD (unique, 0x100006e6, 8) , (unique, 0x10000134, 8), (unique, 0x100006e6, 8) CAST (unique, 0x100005c3, 8), (unique, 0x100005c3, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe80, 8), (unique, 0x10000134, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x10000339, 8) , (unique, 0x10000339, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x5e1, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x5e1, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x5e0, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x5e1, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x5e0, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x5e1, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x5e0, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x5e1, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x5e0, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x5e1, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x5e0, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x5e1, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x5e0, 4), (stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x5e1, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x5e0, 4), (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x5e1, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x5e0, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x5e1, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x5e0, 4), (stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x5e1, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x5e0, 4), (stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x5e1, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x5e0, 4), (stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x5e1, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x5e0, 4), (stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[ ---  CALL (ram, 0x193a40, 8) , (unique, 0x3800, 8) , (unique, 0x100005d4, 8) , (register, 0xb8, 8), (unique, 0x3800, 8) CAST (unique, 0x100006de, 8), (unique, 0x100006de, 8) INT_ADD (unique, 0x100006d6, 8) , (unique, 0x10000134, 8), (unique, 0x100006d6, 8) CAST (unique, 0x100005ab, 8), (unique, 0x100005ab, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe90, 8), (unique, 0x10000134, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x10000339, 8) , (unique, 0x10000339, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x5e5, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x5e1, 4), (ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (const, 0x0, 1), (unique, 0x3b80, 8) CAST (unique, 0x100006fe, 8), (unique, 0x100006fe, 8) INT_ADD (unique, 0x100006f6, 8) , (register, 0xb8, 8), (unique, 0x100006f6, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100006de, 8), (unique, 0x100006de, 8) INT_ADD (unique, 0x100006d6, 8) , (unique, 0x10000134, 8), (unique, 0x100006d6, 8) CAST (unique, 0x100005ab, 8), (unique, 0x100005ab, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe90, 8), (unique, 0x10000134, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1e, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x10000339, 8) , (unique, 0x10000339, 8)]
[(stack, 0xfffffffffffffe88, 8) COPY (const, 0x0, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x629, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x629, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x629, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0x1bf048, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x629, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x629, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x629, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x629, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x629, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x629, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x629, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x629, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x629, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x629, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x629, 4)]
[ ---  CBRANCH (ram, 0x1bf0cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000706, 8), (unique, 0x10000706, 8) CALL (ram, 0x11f8a0, 8) , (unique, 0x10000339, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x646, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0x1bf0d5, 8)]
[ ---  CALL (ram, 0x16d210, 8) , (register, 0x0, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x646, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x6, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x63a, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x63a, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0x1bf05e, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x63a, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x63a, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x63a, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x63a, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x63a, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x63a, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x63a, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x63a, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x63a, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x63a, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x63a, 4)]
[ ---  CALL (ram, 0x193a40, 8) , (register, 0x0, 8) , (unique, 0x100005d4, 8) , (register, 0xb8, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x63e, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x63a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (const, 0x0, 1), (unique, 0x3b80, 8) CAST (unique, 0x10000716, 8), (unique, 0x10000716, 8) INT_ADD (unique, 0x1000070e, 8) , (register, 0xb8, 8), (unique, 0x1000070e, 8) CAST (register, 0x0, 8)]
[(stack, 0xfffffffffffffe88, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x1bef07, 1)]
[(stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000636, 8) , (unique, 0x3800, 8) , (register, 0x0, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x1000061e, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffea0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffea8, 8) COPY (const, 0x0, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffe90, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea0, 8)]
[ ---  BRANCH (ram, 0x1befaa, 1)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1befbc, 8), (register, 0x20, 8) CAST (unique, 0x10000726, 8), (unique, 0x10000726, 8) INT_ADD (unique, 0x1000071e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000071e, 8) CAST (register, 0x20, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x124, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x124, 4), (ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x124, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x123, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x124, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x123, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x124, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x123, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x124, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x123, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x124, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x123, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x124, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x123, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x124, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x123, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x124, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x123, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x124, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x123, 4), (stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x124, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x123, 4), (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x124, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x123, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x124, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x123, 4), (stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x124, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x123, 4), (stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x124, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x123, 4), (stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x124, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x123, 4), (stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(unique, 0x10000606, 8) COPY (stack, 0xfffffffffffffea0, 8), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x124, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x123, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[ ---  CBRANCH (ram, 0x1befe5, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x16b260, 8) , (unique, 0x100005fe, 8) , (unique, 0x3200, 8) , (register, 0x0, 8), (unique, 0x100005fe, 8) COPY (stack, 0xfffffffffffffe90, 8), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[ ---  CBRANCH (ram, 0x1bef40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xa, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffea0, 8) , (unique, 0x10000443, 8) , (const, 0x1, 8), (unique, 0x10000443, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x145, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x1bef40, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x80000000, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x80000000, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0xc, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x80000000, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x80000000, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x80000000, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000413, 8) , (const, 0x80000000, 4), (unique, 0x10000413, 8) PTRSUB (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x80000000, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0xffffffff, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bef92, 8), (register, 0x20, 8) CAST (unique, 0x10000736, 8), (unique, 0x10000736, 8) INT_ADD (unique, 0x1000072e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000072e, 8) CAST (register, 0x20, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x16b, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x16b, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x168, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x165, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x162, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x15f, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x15c, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x15a, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x156, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x153, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x14f, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x14c, 4), (ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x16b, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x16b, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x16b, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x16b, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x16b, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x16b, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x16b, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x16b, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x16b, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x16b, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x16a, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x16b, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x16b, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x16b, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x16b, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x16b, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x16a, 4)]
[(unique, 0x100005ee, 8) COPY (stack, 0xfffffffffffffe88, 8), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x16b, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x16a, 4)]
[ ---  CBRANCH (ram, 0x1befa3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1bf410, 8) , (unique, 0x1000073e, 8) , (unique, 0x10000606, 8) , (register, 0x30, 8), (unique, 0x1000073e, 8) CAST (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x1bf083, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bf08f, 8), (register, 0x20, 8) CAST (unique, 0x1000074e, 8), (unique, 0x1000074e, 8) INT_ADD (unique, 0x10000746, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000746, 8) CAST (register, 0x20, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x100005ee, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bf09b, 8), (register, 0x20, 8) CAST (unique, 0x1000075e, 8), (unique, 0x1000075e, 8) INT_ADD (unique, 0x10000756, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000756, 8) CAST (register, 0x20, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x5a0, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x59a, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x5a0, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x59a, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x5a0, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x59f, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x5a0, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x59f, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x5a0, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x59f, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x5a0, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x59f, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x5a0, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x59f, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x5a0, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x59f, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x5a0, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x59f, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x5a0, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x59f, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x5a0, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x59f, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x5a0, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x59f, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x5a0, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x59f, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x5a0, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x59f, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x599, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x5a0, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x59f, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x59a, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x599, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x5a0, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x59f, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x59a, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x599, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x5a0, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x59f, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x59a, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x599, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x5a0, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x59f, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x59a, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x599, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x10000616, 8), (unique, 0x10000616, 8) COPY (stack, 0xfffffffffffffea0, 8), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x599, 4)]
[ ---  CBRANCH (ram, 0x1bf008, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000766, 8), (unique, 0x10000766, 8) CAST (unique, 0x10000453, 8), (unique, 0x10000453, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bf0ae, 8), (register, 0x20, 8) CAST (unique, 0x10000776, 8), (unique, 0x10000776, 8) INT_ADD (unique, 0x1000076e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000076e, 8) CAST (register, 0x20, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x5b0, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x5b0, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x5b0, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x5b0, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x5b0, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x5b0, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x5b0, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x5b0, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x5b0, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x5b0, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x5b0, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x5b0, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x5b0, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x5af, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x5b0, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x5af, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x5b0, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x5af, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x5b0, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x5af, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x5b0, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x5af, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x5b0, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x5af, 4)]
[ ---  CALL (ram, 0x16d210, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1befe5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000077e, 8), (unique, 0x1000077e, 8) CAST (unique, 0x1000043b, 8), (unique, 0x1000043b, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1beff1, 8), (register, 0x20, 8) CAST (unique, 0x1000078e, 8), (unique, 0x1000078e, 8) INT_ADD (unique, 0x10000786, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000786, 8) CAST (register, 0x20, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x100005f6, 8), (unique, 0x100005f6, 8) COPY (stack, 0xfffffffffffffe88, 8), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1beffd, 8), (register, 0x20, 8) CAST (unique, 0x1000079e, 8), (unique, 0x1000079e, 8) INT_ADD (unique, 0x10000796, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000796, 8) CAST (register, 0x20, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x19b, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x195, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x19b, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x195, 4), (ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x19b, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x194, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x19b, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x194, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x19b, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x194, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x19b, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x194, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x19b, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x19a, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x194, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x19b, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x195, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x194, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x19b, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x195, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x194, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x19b, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x195, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x194, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x19b, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x195, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x194, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x19b, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x195, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x194, 4), (stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x19b, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x195, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x194, 4), (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x19b, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x19a, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x195, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x194, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x19b, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x19a, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x195, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x194, 4), (stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x19b, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x19a, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x195, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x194, 4), (stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x19b, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x19a, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x195, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x194, 4), (stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x19b, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x19a, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x195, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x194, 4), (stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x1000060e, 8), (unique, 0x1000060e, 8) COPY (stack, 0xfffffffffffffea0, 8), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x195, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x194, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[ ---  CBRANCH (ram, 0x1bf0be, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100007a6, 8), (unique, 0x100007a6, 8) CAST (unique, 0x1000044b, 8), (unique, 0x1000044b, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bf010, 8), (register, 0x20, 8) CAST (unique, 0x100007b6, 8), (unique, 0x100007b6, 8) INT_ADD (unique, 0x100007ae, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100007ae, 8) CAST (register, 0x20, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1a9, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[ ---  CALL (ram, 0x16d210, 8) , (register, 0x0, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x1aa, 4), (ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bf0c6, 8), (register, 0x20, 8) CAST (unique, 0x100007c6, 8), (unique, 0x100007c6, 8) INT_ADD (unique, 0x100007be, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100007be, 8) CAST (register, 0x20, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1b0, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1b0, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1b0, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1b0, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1b0, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1b0, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1b0, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1b0, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1b0, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1b0, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1b0, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1b0, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1b0, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x1b0, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x1b0, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x1b0, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1b0, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1af, 4)]
[ ---  CALL (ram, 0x16d210, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1bf0ae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x7, 4)]
[(stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x1bf0df, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x0, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bf0ee, 8), (register, 0x20, 8) CAST (unique, 0x100007d6, 8), (unique, 0x100007d6, 8) INT_ADD (unique, 0x100007ce, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100007ce, 8) CAST (register, 0x20, 8)]
[ ---  CALL (ram, 0x11f880, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bf0fd, 8), (register, 0x20, 8) CAST (unique, 0x100007e6, 8), (unique, 0x100007e6, 8) INT_ADD (unique, 0x100007de, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100007de, 8) CAST (register, 0x20, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1d7, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1d1, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x1d7, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x1d1, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1d7, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1d6, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1d1, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1d7, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1d6, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1d1, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1d7, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1d6, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1d1, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1d7, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1d6, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1d1, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1d7, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1d6, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1d1, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1d7, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1d6, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1d7, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1d6, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1d7, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1d6, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1d7, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1d6, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1d7, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1d6, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1d7, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1d6, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1d0, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1d7, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1d6, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1d0, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x1d6, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x1d1, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x1d0, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x1d6, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x1d1, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x1d0, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x1d6, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x1d1, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x1d0, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1d6, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1d1, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1d0, 4)]
[ ---  CALL (ram, 0x1baef0, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(unique, 0x1000034e, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x1bf11d, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1bf270, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x8000000080000000, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100007ee, 8), (unique, 0x100007ee, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1bf132, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0xc, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffecc, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffec8, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x10, 8)]
[(unique, 0x10000351, 1) COPY (const, 0x1, 1)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x593, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x559, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x552, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0xc, 8), (register, 0x0, 4) INT_ADD (stack, 0xfffffffffffffec4, 4) , (unique, 0x100002f5, 4), (unique, 0x100002f5, 4) INT_SREM (unique, 0x100007f6, 4) , (const, 0x7, 4), (unique, 0x100007f6, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x7, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (stack, 0xfffffffffffffed0, 4)]
[ ---  BRANCH (ram, 0x1bf11d, 1)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(unique, 0x10000350, 1) MULTIEQUAL (unique, 0x1000034e, 1) , (unique, 0x1000034e, 1) , (unique, 0x10000351, 1)]
[ ---  CBRANCH (ram, 0x1bf132, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xc, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1bf2b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0xc, 8)]
[ ---  CBRANCH (ram, 0x1bf2d5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x4d5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8), (register, 0x0, 4) INT_SUB (stack, 0xfffffffffffffecc, 4) , (unique, 0x1000031d, 4), (unique, 0x1000031d, 4) INT_SRIGHT (unique, 0x100007fa, 4) , (const, 0x1f, 4), (unique, 0x100007fa, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (stack, 0xfffffffffffffec8, 4)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[(register, 0x0, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1bf330, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x80000000, 4)]
[(unique, 0x10000626, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8)]
[(register, 0x8, 8) COPY (const, 0xe, 8)]
[(stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000626, 8) , (unique, 0x1000062e, 8)]
[ ---  CBRANCH (ram, 0x1bf2fa, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x4fc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000054b, 8) , (const, 0x0, 4), (unique, 0x1000054b, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x1000062e, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x10000806, 8), (unique, 0x10000806, 8) INT_ADD (unique, 0x100007fe, 8) , (unique, 0x10000543, 8), (unique, 0x100007fe, 8) CAST (register, 0x38, 8), (unique, 0x10000543, 8) INT_ADD (unique, 0x1000028f, 8) , (const, 0x4, 8), (unique, 0x1000028f, 8) INT_MULT (unique, 0xb580, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0xb580, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x1bf2f8, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bf319, 8), (register, 0x20, 8) CAST (unique, 0x10000816, 8), (unique, 0x10000816, 8) INT_ADD (unique, 0x1000080e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000080e, 8) CAST (register, 0x20, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x50a, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x50a, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x50a, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x50a, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x50a, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x50a, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x50a, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x50a, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x50a, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x50a, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x50a, 4), (stack, 0xfffffffffffffec8, 4) INDIRECT (stack, 0xfffffffffffffec8, 4) , (const, 0x509, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x50a, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x509, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x50a, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x509, 4), (stack, 0xffffffffffffff04, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x50a, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x509, 4), (stack, 0xffffffffffffff08, 4) COPY (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x50a, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x509, 4), (stack, 0xffffffffffffff0c, 4) COPY (unique, 0xbc80, 4)]
[ ---  CALL (ram, 0x1bb911, 8) , (unique, 0x3200, 8)]
[(register, 0x0, 4) INT_ADD (unique, 0x10000305, 4) , (const, 0x1, 4), (unique, 0x10000305, 4) INT_SREM (unique, 0x1000081e, 4) , (const, 0x7, 4), (unique, 0x1000081e, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x7, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (stack, 0xffffffffffffff10, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x50a, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x509, 4)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x539, 4), (ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0xc, 8), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x1000034f, 1) COPY (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x1bf132, 1)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffec8, 4) MULTIEQUAL (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4) , (stack, 0xfffffffffffffec8, 4)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(unique, 0x1000034a, 1) MULTIEQUAL (unique, 0x10000350, 1) , (unique, 0x10000350, 1) , (unique, 0x1000034f, 1) , (unique, 0x1000034e, 1)]
[ ---  CBRANCH (ram, 0x1bf251, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1bf33d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x8000000080000000, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000822, 8), (unique, 0x10000822, 8) CAST (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffebc, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffec0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x8, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x47d, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x47b, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x46b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000056b, 8) , (stack, 0xfffffffffffffeb8, 4), (unique, 0x1000056b, 8) PTRSUB (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1bf264, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffec0, 4) , (const, 0x80000000, 4)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x45f, 4), (ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1bf13f, 1)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  CBRANCH (ram, 0x1bf245, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x4, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x44d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x1bf14c, 1)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  CBRANCH (ram, 0x1bf378, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000049b, 8), (unique, 0x1000049b, 8) PTRSUB (register, 0x30, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x449, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000573, 8) , (const, 0x0, 4), (unique, 0x10000573, 8) PTRSUB (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1bf158, 1)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  CBRANCH (ram, 0x1bf21d, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x1000082a, 4) , (const, 0x18, 4), (unique, 0x1000082a, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1bf383, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1bf39e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0xc, 8)]
[ ---  CBRANCH (ram, 0x1bf38c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffec8, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x10, 8)]
[(unique, 0x1000034d, 1) COPY (const, 0x1, 1)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x446, 4), (ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x40e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0xc, 8), (register, 0x0, 4) INT_SUB (stack, 0xfffffffffffffec4, 4) , (unique, 0x10000321, 4), (unique, 0x10000321, 4) INT_SRIGHT (register, 0x0, 4) , (const, 0x1f, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (stack, 0xfffffffffffffec0, 4)]
[ ---  BRANCH (ram, 0x1bf164, 1)]
[ ---  CBRANCH (ram, 0x1bf17a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[ ---  CBRANCH (ram, 0x1bf183, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(unique, 0x1000034b, 1) MULTIEQUAL (unique, 0x1000034a, 1) , (unique, 0x1000034d, 1)]
[ ---  CBRANCH (ram, 0x1bf237, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[(unique, 0x1000034c, 1) MULTIEQUAL (unique, 0x1000034b, 1) , (unique, 0x1000034a, 1) , (unique, 0x1000034a, 1)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x3ae, 4), (ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffecc, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[ ---  BRANCH (ram, 0x1bf171, 1)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[(unique, 0x10000353, 1) MULTIEQUAL (unique, 0x1000034b, 1) , (unique, 0x1000034c, 1)]
[ ---  CBRANCH (ram, 0x1bf183, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x10, 8)]
[(unique, 0x10000352, 1) MULTIEQUAL (unique, 0x10000353, 1) , (unique, 0x1000034a, 1)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x27a, 4), (ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffec8, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x10, 8)]
[(ram, 0x4c2e18, 8) MULTIEQUAL (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8) , (ram, 0x4c2e18, 8)]
[ ---  CBRANCH (ram, 0x1bf204, 1) , (unique, 0x100005e3, 1), (unique, 0x100005e3, 1) BOOL_NEGATE (unique, 0x10000349, 1), (unique, 0x10000349, 1) MULTIEQUAL (unique, 0x10000353, 1) , (unique, 0x10000352, 1) , (unique, 0x1000034a, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0xc, 8)]
[ ---  CBRANCH (ram, 0x1bf1f2, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0xb, 4) , (unique, 0x1000082e, 4), (unique, 0x1000082e, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x10, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1bf1fc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000215, 8) , (const, 0x0, 8), (unique, 0x10000215, 8) INT_AND (register, 0x0, 8) , (const, 0xad5, 8), (register, 0x0, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1bf1f2, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x1e, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1bf367, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000021d, 8) , (const, 0x0, 8), (unique, 0x1000021d, 8) INT_AND (register, 0x0, 8) , (const, 0x528, 8)]
[ ---  CBRANCH (ram, 0x1bf1f2, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x1d, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1bf1f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000225, 8) , (const, 0x0, 8), (unique, 0x10000225, 8) INT_AND (register, 0x0, 8) , (const, 0x2, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1bf1f2, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x8, 4)]
[(register, 0x0, 4) COPY (const, 0x1c, 4)]
[ ---  CBRANCH (ram, 0x1bf1ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100002c9, 4) , (const, 0x0, 4), (unique, 0x100002c9, 4) INT_AND (unique, 0x3200, 4) , (const, 0x3, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x76c, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[(register, 0x0, 4) COPY (const, 0x1d, 4)]
[ ---  CBRANCH (ram, 0x1bf1ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100002cd, 4) , (const, 0x0, 4), (unique, 0x100002cd, 4) INT_SREM (unique, 0x10000832, 4) , (const, 0x64, 4), (unique, 0x10000832, 4) CAST (unique, 0x3200, 4)]
[(register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x1d, 4), (register, 0x0, 4) INT_NEGATE (unique, 0x10000239, 4), (unique, 0x10000239, 4) INT_2COMP (unique, 0x12600, 4), (unique, 0x12600, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x100002d5, 4) , (const, 0x0, 4), (unique, 0x100002d5, 4) INT_SREM (unique, 0x10000836, 4) , (const, 0x190, 4), (unique, 0x10000836, 4) CAST (unique, 0x3200, 4)]
[ ---  CBRANCH (ram, 0x1bf204, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 4) , (unique, 0xbc80, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1bf20c, 8), (register, 0x20, 8) CAST (unique, 0x10000842, 8), (unique, 0x10000842, 8) INT_ADD (unique, 0x1000083a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000083a, 8) CAST (register, 0x20, 8)]
[(ram, 0x4c2e18, 8) INDIRECT (ram, 0x4c2e18, 8) , (const, 0x363, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x362, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x363, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x362, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x363, 4), (stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x362, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x363, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x362, 4)]
[ ---  CBRANCH (ram, 0x1bedba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x1bb911, 8) , (register, 0x30, 8)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c2e18, 8) COPY (ram, 0x4c2e18, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x8, 4)]
