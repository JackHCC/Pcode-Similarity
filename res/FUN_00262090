[(unique, 0x10000682, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x33, 4)]
[(register, 0x20, 8) CAST (unique, 0x10000762, 8), (unique, 0x10000762, 8) INT_ADD (unique, 0x1000075a, 8) , (unique, 0x100000fc, 8), (unique, 0x1000075a, 8) CAST (unique, 0x10000349, 8), (unique, 0x10000349, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100000fc, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x262102, 8), (register, 0x20, 8) CAST (unique, 0x10000772, 8), (unique, 0x10000772, 8) INT_ADD (unique, 0x1000076a, 8) , (unique, 0x100004a9, 8), (unique, 0x1000076a, 8) CAST (unique, 0x100004b1, 8), (unique, 0x100004b1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100004a9, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100000fc, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x33, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x33, 4), (stack, 0xfffffffffffffe40, 8) COPY (const, 0x2620c4, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe68, 8) COPY (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x10000752, 8), (unique, 0x10000752, 8) INT_ADD (unique, 0x1000074a, 8) , (unique, 0x100000fc, 8), (unique, 0x1000074a, 8) CAST (unique, 0x10000331, 8), (unique, 0x10000331, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100000fc, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x30, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe70, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000073a, 8), (unique, 0x1000073a, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x30, 8)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x5f, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x5e, 4), (stack, 0xfffffffffffffe7c, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000742, 8), (unique, 0x10000742, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x33, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x5f, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x5e, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x33, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x5f, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x5e, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x33, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x33, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x33, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x33, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x33, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x5f, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x5e, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x33, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x5f, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x5e, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x33, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x33, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x33, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000732, 8), (unique, 0x10000732, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x100006ea, 8) COPY (register, 0x8, 8), (register, 0x8, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x262158, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x261950, 8) , (register, 0x38, 4) , (register, 0x30, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000073a, 8), (unique, 0x1000073a, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x26222d, 8), (register, 0x20, 8) CAST (unique, 0x10000792, 8), (unique, 0x10000792, 8) INT_ADD (unique, 0x1000078a, 8) , (unique, 0x100004c1, 8), (unique, 0x1000078a, 8) CAST (unique, 0x100004c9, 8), (unique, 0x100004c9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100004c1, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12e, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x12d, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x12d, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x12d, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x12d, 4), (stack, 0xfffffffffffffe60, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000782, 8), (unique, 0x10000782, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x12d, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x12d, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x12e, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x12d, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x12d, 4), (stack, 0xfffffffffffffe80, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x12d, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x12d, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x12d, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x12e, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x12d, 4), (stack, 0xfffffffffffffea8, 16) COPY (const, 0x0, 16)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x12d, 4), (stack, 0xfffffffffffffeb8, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x12d, 4), (stack, 0xfffffffffffffec0, 8) COPY (const, 0x2, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x12d, 4), (stack, 0xfffffffffffffec8, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x12d, 4), (stack, 0xfffffffffffffed0, 8) COPY (const, 0x14, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x12d, 4), (stack, 0xfffffffffffffed8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x12d, 4), (stack, 0xfffffffffffffee8, 8) COPY (const, 0x14, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x12e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x12d, 4), (stack, 0xfffffffffffffef0, 8) COPY (const, 0x100000001, 8)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x12e, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x12d, 4), (stack, 0xfffffffffffffef8, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x12d, 4), (stack, 0xffffffffffffff08, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x12d, 4), (stack, 0xffffffffffffff10, 8) COPY (unique, 0x1000077a, 8), (unique, 0x1000077a, 8) CAST (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x12d, 4), (stack, 0xffffffffffffff18, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe90, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x12d, 4), (stack, 0xffffffffffffff20, 8) COPY (const, 0x8, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x12e, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x12d, 4), (stack, 0xffffffffffffff28, 4) COPY (register, 0x0, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x12e, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x12d, 4), (stack, 0xffffffffffffff2c, 2) COPY (const, 0x19, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12d, 4)]
[ ---  CBRANCH (ram, 0x262348, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x214bb0, 8) , (unique, 0x1000079a, 8) , (const, 0x1, 8) , (const, 0x1388, 4), (unique, 0x1000079a, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000782, 8), (unique, 0x10000782, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(unique, 0x100006ba, 8) COPY (stack, 0xfffffffffffffe80, 8)]
[ ---  CBRANCH (ram, 0x2622f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007a2, 8), (unique, 0x100007a2, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000682, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x262366, 8), (register, 0x20, 8) CAST (unique, 0x100007b2, 8), (unique, 0x100007b2, 8) INT_ADD (unique, 0x100007aa, 8) , (unique, 0x10000569, 8), (unique, 0x100007aa, 8) CAST (unique, 0x10000571, 8), (unique, 0x10000571, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000569, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x344, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffe58, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x344, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x344, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x343, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x344, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x344, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x344, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x344, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x344, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x344, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x344, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x344, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x344, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x343, 4)]
[ ---  CALL (ram, 0x120ff0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe50, 8) COPY (const, 0x20c49ba5e353f7cf, 8)]
[(register, 0x10, 8) COPY (const, 0x1388, 8)]
[(stack, 0xfffffffffffffe80, 8) COPY (unique, 0x100007ba, 8), (unique, 0x100007ba, 8) CAST (unique, 0x3e80, 8), (unique, 0x3e80, 8) INT_ADD (unique, 0x3d00, 8) , (unique, 0x10000184, 8), (unique, 0x3d00, 8) INT_ADD (register, 0x38, 8) , (const, 0x1388, 8), (unique, 0x10000184, 8) INT_SDIV (unique, 0x3200, 8) , (const, 0x3e8, 8), (unique, 0x3200, 8) INT_ADD (stack, 0xfffffffffffffea0, 8) , (const, 0x1f4, 8), (register, 0x38, 8) INT_MULT (stack, 0xfffffffffffffe98, 8) , (const, 0x3e8, 8), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x344, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x343, 4)]
[ ---  BRANCH (ram, 0x262409, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x26241a, 8), (register, 0x20, 8) CAST (unique, 0x100007ca, 8), (unique, 0x100007ca, 8) INT_ADD (unique, 0x100007c2, 8) , (unique, 0x10000599, 8), (unique, 0x100007c2, 8) CAST (unique, 0x100005a1, 8), (unique, 0x100005a1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000599, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3bf, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3bf, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x3bf, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x3be, 4), (stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x3bf, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3bf, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3bf, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3bf, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3bf, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x3bf, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x3be, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x3bf, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x3be, 4), (stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3bf, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3bf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000068a, 8) COPY (stack, 0xfffffffffffffe58, 8), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x3bf, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[ ---  CBRANCH (ram, 0x26223d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x214bb0, 8) , (unique, 0x100007d2, 8) , (const, 0x1, 8) , (register, 0x10, 4), (unique, 0x100007d2, 8) CAST (unique, 0x1000069a, 8), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (unique, 0x1000069a, 8) COPY (stack, 0xfffffffffffffe60, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[ ---  CBRANCH (ram, 0x2623c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007da, 8), (unique, 0x100007da, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000682, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2623ce, 8), (register, 0x20, 8) CAST (unique, 0x100007ea, 8), (unique, 0x100007ea, 8) INT_ADD (unique, 0x100007e2, 8) , (unique, 0x10000581, 8), (unique, 0x100007e2, 8) CAST (unique, 0x10000589, 8), (unique, 0x10000589, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000581, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3e8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3e8, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x3e8, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3e7, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x3e8, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x3e7, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3e8, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3e7, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3e8, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3e7, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3e8, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3e7, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3e8, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3e7, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x3e8, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x3e7, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x3e8, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x3e7, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3e8, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3e7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3e8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3e7, 4)]
[ ---  CALL (ram, 0x120ff0, 8) , (unique, 0x1000068a, 8) , (const, 0x0, 8)]
[(register, 0x10, 8) INT_SUB (unique, 0x100007f2, 8) , (register, 0x0, 8), (unique, 0x100007f2, 8) CAST (stack, 0xfffffffffffffe80, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SUB (register, 0x10, 8) , (register, 0x8, 8), (register, 0x10, 8) SUBPIECE (unique, 0x10000672, 16) , (const, 0x0, 4), (unique, 0x10000672, 16) INT_SRIGHT (unique, 0x35600, 16) , (const, 0x47, 4), (register, 0x0, 8) INT_MULT (stack, 0xfffffffffffffe98, 8) , (const, 0x3e8, 8), (register, 0x8, 8) INT_SRIGHT (unique, 0x3200, 8) , (const, 0x3f, 4), (unique, 0x35600, 16) INT_MULT (unique, 0x35480, 16) , (unique, 0x35500, 16), (unique, 0x35500, 16) INT_SEXT (unique, 0x3200, 8), (unique, 0x35480, 16) INT_SEXT (stack, 0xfffffffffffffe50, 8), (unique, 0x3200, 8) INT_ADD (stack, 0xfffffffffffffea0, 8) , (const, 0x1f4, 8), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x3e8, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x3e7, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe80, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100007fa, 8), (unique, 0x100007fa, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[ ---  CBRANCH (ram, 0x26225e, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x262272, 8), (register, 0x20, 8) CAST (unique, 0x1000080a, 8), (unique, 0x1000080a, 8) INT_ADD (unique, 0x10000802, 8) , (unique, 0x100004d9, 8), (unique, 0x10000802, 8) CAST (unique, 0x100004e1, 8), (unique, 0x100004e1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100004d9, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x165, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x165, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x165, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x164, 4), (stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x165, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x164, 4), (stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x165, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x164, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x165, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x164, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x165, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x164, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x165, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x164, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x165, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x164, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x165, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x164, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x165, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x164, 4), (stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x165, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x164, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x165, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x164, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100006a2, 8) COPY (stack, 0xfffffffffffffe68, 8), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x164, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[ ---  CBRANCH (ram, 0x262258, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CAST (unique, 0x10000812, 8), (unique, 0x10000812, 8) CALL (ram, 0x222b90, 8) , (register, 0x0, 4) , (unique, 0x100006aa, 8) , (const, 0x40000000, 4), (unique, 0x100006aa, 8) COPY (stack, 0xfffffffffffffe80, 8), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[ ---  CBRANCH (ram, 0x262278, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000081a, 8), (unique, 0x1000081a, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000682, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x262430, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 8) , (stack, 0xfffffffffffffed0, 8)]
[ ---  CBRANCH (ram, 0x262430, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffec8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x262430, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x14, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffe80, 8) CAST (unique, 0x1000082a, 8), (unique, 0x1000082a, 8) INT_OR (unique, 0x100002e4, 8) , (unique, 0x100002ec, 8), (unique, 0x100002ec, 8) INT_ZEXT (stack, 0xfffffffffffffef8, 4), (unique, 0x100002e4, 8) INT_AND (unique, 0x10000822, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000822, 8) CAST (stack, 0xfffffffffffffe80, 8)]
[ ---  CBRANCH (ram, 0x262440, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffe70, 8)]
[ ---  CBRANCH (ram, 0x2622d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0xb0, 8), (register, 0xb0, 8) CAST (unique, 0x10000832, 8), (unique, 0x10000832, 8) INT_ADD (register, 0x0, 8) , (const, 0x9, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x26245c, 8), (register, 0x20, 8) CAST (unique, 0x10000842, 8), (unique, 0x10000842, 8) INT_ADD (unique, 0x1000083a, 8) , (unique, 0x100005b1, 8), (unique, 0x1000083a, 8) CAST (unique, 0x100005b9, 8), (unique, 0x100005b9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100005b1, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x305, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x305, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x305, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x305, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x304, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x305, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x305, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x305, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x304, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x305, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x304, 4)]
[ ---  CBRANCH (ram, 0x2622d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x1000084a, 8) , (register, 0x30, 8), (unique, 0x1000084a, 8) CAST (unique, 0x100006a2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2622c8, 8), (register, 0x20, 8) CAST (unique, 0x1000085a, 8), (unique, 0x1000085a, 8) INT_ADD (unique, 0x10000852, 8) , (unique, 0x100004f1, 8), (unique, 0x10000852, 8) CAST (unique, 0x100004f9, 8), (unique, 0x100004f9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100004f1, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b6, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x1b6, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x1b6, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1b6, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x1b6, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x1b6, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b5, 4)]
[(unique, 0x10000692, 8) COPY (stack, 0xfffffffffffffe60, 8), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1b5, 4)]
[ ---  CBRANCH (ram, 0x262554, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x10000862, 8) , (register, 0x30, 8), (unique, 0x10000862, 8) CAST (unique, 0x100006a2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x26256b, 8), (register, 0x20, 8) CAST (unique, 0x10000872, 8), (unique, 0x10000872, 8) INT_ADD (unique, 0x1000086a, 8) , (unique, 0x10000611, 8), (unique, 0x1000086a, 8) CAST (unique, 0x10000619, 8), (unique, 0x10000619, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000611, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1d9, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x1d9, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x1d9, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1d9, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1d8, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1d9, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1d9, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d9, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1d9, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d9, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x1d9, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x1d9, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d9, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d8, 4)]
[ ---  CBRANCH (ram, 0x2622d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f7b0, 8) , (const, 0x1, 4) , (stack, 0xfffffffffffffe80, 4) , (unique, 0x10000692, 8), (stack, 0xfffffffffffffe80, 4) SUBPIECE (stack, 0xfffffffffffffe80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2622d0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xffffffffffffff58, 8) , (const, 0x78, 8)]
[(stack, 0xfffffffffffffe90, 8) COPY (stack, 0xffffffffffffff58, 8)]
[ ---  BRANCH (ram, 0x26246b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x262486, 8), (register, 0x20, 8) CAST (unique, 0x10000882, 8), (unique, 0x10000882, 8) INT_ADD (unique, 0x1000087a, 8) , (unique, 0x100005c9, 8), (unique, 0x1000087a, 8) CAST (unique, 0x100005d1, 8), (unique, 0x100005d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100005c9, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x213, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x213, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x213, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x212, 4), (stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x213, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x212, 4), (stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x212, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x213, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x212, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x213, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x212, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x213, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x212, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x213, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x212, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x213, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x212, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x213, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x212, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x213, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x212, 4), (stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x213, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x212, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2622d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CAST (unique, 0x10000892, 8), (unique, 0x10000892, 8) CALL (ram, 0x21b9d0, 8) , (const, 0x0, 8) , (unique, 0x1000088a, 8) , (const, 0x1, 4) , (const, 0x1, 4) , (stack, 0xfffffffffffffe80, 4) , (const, 0x0, 8), (unique, 0x1000088a, 8) CAST (unique, 0x100006b2, 8), (stack, 0xfffffffffffffe80, 4) SUBPIECE (stack, 0xfffffffffffffe80, 8) , (const, 0x0, 8), (unique, 0x100006b2, 8) COPY (stack, 0xfffffffffffffe90, 8), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(unique, 0x10000712, 8) COPY (stack, 0xfffffffffffffe90, 8)]
[ ---  CBRANCH (ram, 0x262540, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x2, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x262540, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x78, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x262540, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x262590, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x26259b, 8), (register, 0x20, 8) CAST (unique, 0x100008aa, 8), (unique, 0x100008aa, 8) INT_ADD (unique, 0x100008a2, 8) , (unique, 0x10000629, 8), (unique, 0x100008a2, 8) CAST (unique, 0x10000631, 8), (unique, 0x10000631, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000629, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2d0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2d0, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x2d0, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x2d0, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x2d0, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x2cf, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2d0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2cf, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2d0, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2cf, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2d0, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2cf, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2d0, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2cf, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x2d0, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x2cf, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x2d0, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x2cf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2cf, 4)]
[(unique, 0x1000072a, 8) COPY (stack, 0xfffffffffffffe90, 8), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x2d0, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x2cf, 4)]
[ ---  CBRANCH (ram, 0x262540, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0xa8, 8) , (register, 0x0, 8), (register, 0xa8, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x12c, 8), (register, 0x0, 8) CALL (ram, 0x121260, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000089a, 8), (unique, 0x1000089a, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x2624be, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe60, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100008b2, 8), (unique, 0x100008b2, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xb, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffe68, 8) COPY (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100008c2, 8), (unique, 0x100008c2, 8) INT_ADD (unique, 0x100008ba, 8) , (register, 0xa8, 8), (unique, 0x100008ba, 8) CAST (unique, 0x10000431, 8), (unique, 0x10000431, 8) PTRSUB (register, 0x10, 8) , (const, 0x78, 8), (register, 0xa8, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0xf, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x10, 8) CAST (unique, 0x100008b2, 8), (unique, 0x100008b2, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xb, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000702, 8) COPY (stack, 0xfffffffffffffe90, 8), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[ ---  CBRANCH (ram, 0x262547, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (stack, 0xfffffffffffffe90, 8) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100008c2, 8), (unique, 0x100008c2, 8) INT_ADD (unique, 0x100008ba, 8) , (register, 0xa8, 8), (unique, 0x100008ba, 8) CAST (unique, 0x10000431, 8), (unique, 0x10000431, 8) PTRSUB (register, 0x10, 8) , (const, 0x78, 8), (register, 0xa8, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0xf, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x10, 8) CAST (unique, 0x100008b2, 8), (unique, 0x100008b2, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xb, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2624fe, 8), (register, 0x20, 8) CAST (unique, 0x100008d2, 8), (unique, 0x100008d2, 8) INT_ADD (unique, 0x100008ca, 8) , (unique, 0x100005e1, 8), (unique, 0x100008ca, 8) CAST (unique, 0x100005e9, 8), (unique, 0x100005e9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100005e1, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x283, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x283, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x283, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x283, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x283, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x283, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x283, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x282, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x283, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x282, 4)]
[(unique, 0x1000070a, 8) COPY (unique, 0x100006fa, 8), (unique, 0x100006fa, 8) COPY (stack, 0xfffffffffffffe70, 8), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x283, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x282, 4), (stack, 0xfffffffffffffe70, 8) COPY (stack, 0xfffffffffffffe90, 8)]
[ ---  CBRANCH (ram, 0x262547, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100008da, 8), (unique, 0x100008da, 8) CALL (ram, 0x1212c0, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x26254f, 8), (register, 0x20, 8) CAST (unique, 0x100008ea, 8), (unique, 0x100008ea, 8) INT_ADD (unique, 0x100008e2, 8) , (unique, 0x100005f9, 8), (unique, 0x100008e2, 8) CAST (unique, 0x10000601, 8), (unique, 0x10000601, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x100005f9, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2bf, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2bf, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x2bf, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x2be, 4), (stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x2bf, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x2be, 4), (stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2bf, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2be, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x2bf, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x2be, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2be, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2be, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2be, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2be, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x2bf, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x2be, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x2bf, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x2be, 4), (stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2bf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2be, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x21bab0, 8) , (register, 0x0, 8) , (unique, 0x100008f2, 8), (unique, 0x100008f2, 8) CAST (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000702, 8) , (unique, 0x1000070a, 8) , (unique, 0x10000712, 8) , (unique, 0x10000712, 8) , (unique, 0x10000712, 8) , (unique, 0x1000072a, 8)]
[ ---  BRANCH (ram, 0x2622d0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008fa, 8) , (const, 0x1, 4), (unique, 0x100008fa, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10000902, 8), (unique, 0x10000902, 8) CAST (stack, 0xfffffffffffffe68, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x1000090a, 8), (unique, 0x1000090a, 8) CAST (stack, 0xfffffffffffffe60, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2ba, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2ae, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2ab, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x29f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x293, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xb0, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0xb0, 8) CAST (unique, 0x1000091a, 8), (unique, 0x1000091a, 8) INT_ADD (unique, 0x10000912, 8) , (register, 0xa8, 8), (unique, 0x10000912, 8) CAST (register, 0x0, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x2622d7, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2622e9, 8), (register, 0x20, 8) CAST (unique, 0x1000092a, 8), (unique, 0x1000092a, 8) INT_ADD (unique, 0x10000922, 8) , (unique, 0x10000509, 8), (unique, 0x10000922, 8) CAST (unique, 0x10000511, 8), (unique, 0x10000511, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000509, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1cb, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1cb, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x1cb, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x1ca, 4), (stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x1cb, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x1ca, 4), (stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1cb, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1ca, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1cb, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1ca, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1cb, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1ca, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1cb, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1ca, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1cb, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1ca, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x1cb, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x1ca, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x1cb, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x1ca, 4), (stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1cb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ca, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x2108c0, 8) , (stack, 0xfffffffffffffe80, 4), (stack, 0xfffffffffffffe80, 4) SUBPIECE (stack, 0xfffffffffffffe80, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(unique, 0x100006ca, 8) COPY (unique, 0x10000932, 8), (unique, 0x10000932, 8) CAST (stack, 0xfffffffffffffe70, 8), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1cb, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffe70, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100006c2, 8) COPY (unique, 0x1000093a, 8), (unique, 0x1000093a, 8) CAST (register, 0x8, 8), (register, 0x8, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x2622f0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2622ff, 8), (register, 0x20, 8) CAST (unique, 0x1000094a, 8), (unique, 0x1000094a, 8) INT_ADD (unique, 0x10000942, 8) , (unique, 0x10000521, 8), (unique, 0x10000942, 8) CAST (unique, 0x10000529, 8), (unique, 0x10000529, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000521, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x158, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x158, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x158, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0x157, 4), (stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x158, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0x157, 4), (stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x158, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x157, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x158, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x157, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x158, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x157, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x158, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x157, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x158, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x157, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x158, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x157, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x158, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0x157, 4), (stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x158, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x157, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x2108c0, 8) , (register, 0x0, 4)]
[(unique, 0x100006f2, 8) COPY (unique, 0x10000952, 8), (unique, 0x10000952, 8) CAST (stack, 0xfffffffffffffe80, 8), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe80, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100006c2, 8) , (unique, 0x100006ca, 8) , (unique, 0x100006ba, 8)]
[ ---  BRANCH (ram, 0x26210d, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000095a, 8) , (stack, 0xfffffffffffffe7c, 4), (unique, 0x1000095a, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000682, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x76, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x72, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x1000096a, 8), (unique, 0x1000096a, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100006ea, 8) , (unique, 0x100006f2, 8)]
[(unique, 0x100006d2, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100006ea, 8) , (unique, 0x100006f2, 8)]
[ ---  CBRANCH (ram, 0x26212c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000962, 8), (unique, 0x10000962, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x89, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000097a, 8) , (unique, 0xbd00, 4), (unique, 0x1000097a, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000972, 8), (unique, 0x10000972, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x100006da, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x262310, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000982, 8), (unique, 0x10000982, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2625b5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000098a, 8), (unique, 0x1000098a, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x100002f9, 8), (unique, 0x100002f9, 8) PTRSUB (const, 0x0, 8) , (const, 0x2625d4, 8), (register, 0x20, 8) CAST (unique, 0x1000099a, 8), (unique, 0x1000099a, 8) INT_ADD (unique, 0x10000992, 8) , (unique, 0x10000659, 8), (unique, 0x10000992, 8) CAST (unique, 0x10000661, 8), (unique, 0x10000661, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000659, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0xe3, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0xe3, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xe2, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xe3, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xe3, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xe3, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xe3, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe3, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xe3, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0xe3, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe2, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000309, 8) , (unique, 0x10000301, 8) , (const, 0xf8, 4) , (unique, 0x10000311, 8), (unique, 0x10000311, 8) COPY (const, 0x2baee0, 8), (unique, 0x10000309, 8) COPY (const, 0x2b73aa, 8), (unique, 0x10000301, 8) COPY (const, 0x2b739c, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xe3, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x26232e, 8), (register, 0x20, 8) CAST (unique, 0x100009b2, 8), (unique, 0x100009b2, 8) INT_ADD (unique, 0x100009aa, 8) , (unique, 0x10000539, 8), (unique, 0x100009aa, 8) CAST (unique, 0x10000541, 8), (unique, 0x10000541, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000539, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x21bab0, 8) , (unique, 0xbd80, 8) , (unique, 0x100009ba, 8), (unique, 0x100009ba, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x262336, 8), (register, 0x20, 8) CAST (unique, 0x100009ca, 8), (unique, 0x100009ca, 8) INT_ADD (unique, 0x100009c2, 8) , (unique, 0x10000551, 8), (unique, 0x100009c2, 8) CAST (unique, 0x10000559, 8), (unique, 0x10000559, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000551, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd8, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd8, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd4, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0xd8, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0xd7, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0xd4, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0xd8, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0xd7, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0xd4, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd3, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xd8, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xd7, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xd4, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xd8, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xd4, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0xd8, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0xd7, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0xd4, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd3, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100006e2, 8) COPY (unique, 0x100009d2, 8), (unique, 0x100009d2, 8) CAST (stack, 0xfffffffffffffe80, 8), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xd8, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xd4, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xd3, 4), (stack, 0xfffffffffffffe80, 8) COPY (unique, 0x100009a2, 8), (unique, 0x100009a2, 8) CAST (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x26212c, 1)]
[(stack, 0xffffffffffffff2c, 2) MULTIEQUAL (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2) , (stack, 0xffffffffffffff2c, 2)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffea8, 16) MULTIEQUAL (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16) , (stack, 0xfffffffffffffea8, 16)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4) , (stack, 0xfffffffffffffe7c, 4)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100006d2, 8) , (unique, 0x100006da, 8) , (unique, 0x100006e2, 8)]
[ ---  CBRANCH (ram, 0x2625b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100009da, 8), (unique, 0x100009da, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2625b5, 8), (register, 0x20, 8) CAST (unique, 0x100009ea, 8), (unique, 0x100009ea, 8) INT_ADD (unique, 0x100009e2, 8) , (unique, 0x10000641, 8), (unique, 0x100009e2, 8) CAST (unique, 0x10000649, 8), (unique, 0x10000649, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x10000641, 8) INT_ADD (unique, 0x100000fc, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0xb8, 4), (stack, 0xfffffffffffffe7c, 4) INDIRECT (stack, 0xfffffffffffffe7c, 4) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0xb8, 4), (stack, 0xfffffffffffffea8, 16) INDIRECT (stack, 0xfffffffffffffea8, 16) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb8, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb7, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xb8, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xb7, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb8, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb7, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb8, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb7, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xb8, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xb7, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb8, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb7, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xb8, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xb7, 4)]
[(stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0xb8, 4), (stack, 0xffffffffffffff2c, 2) INDIRECT (stack, 0xffffffffffffff2c, 2) , (const, 0xb7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb7, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb8, 4)]
[ ---  RETURN (const, 0x1, 4)]
