[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000210, 8), (unique, 0x10000210, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1cce12, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x18, 8) CAST (unique, 0x10000218, 8), (unique, 0x10000218, 8) PTRSUB (const, 0x0, 8) , (const, 0x4edb10, 8)]
[ ---  CBRANCH (ram, 0x1ccfa0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000220, 4) , (const, 0x0, 4), (unique, 0x10000220, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7fffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x0, 2), (register, 0x0, 2) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x268, 4), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x265, 4), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x25f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x268, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x265, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x25f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x0, 8) COPY (const, 0xfffffffffffffffd, 8)]
[ ---  BRANCH (ram, 0x1cce46, 1)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffffa0, 4) COPY (const, 0x1, 4)]
[(unique, 0x10000208, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1cce70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1cce7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x28, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3c79, 8)]
[(register, 0x10, 8) COPY (const, 0x1, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xb8, 8)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x28, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(unique, 0x100001c8, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff74, 8)]
[ ---  CBRANCH (ram, 0x1ccff0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000023c, 8) , (const, 0x0, 8), (unique, 0x1000023c, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000234, 8), (unique, 0x10000234, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000022c, 8), (unique, 0x1000022c, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000224, 8), (unique, 0x10000224, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eadc8, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1cd035, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0x1000014f, 8), (unique, 0x1000014f, 8) PTRSUB (const, 0x0, 8) , (const, 0x4e8580, 8)]
[(register, 0xb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4e9ea0, 8)]
[ ---  BRANCH (ram, 0x1ccec0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x23f, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x23f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x23f, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x23f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x3800, 8) , (const, 0x23f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x23f, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x23f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000208, 8) , (const, 0x23f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x23f, 4)]
[ ---  CALL (ram, 0x1cbe40, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000244, 8), (unique, 0x10000244, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(unique, 0x100001d0, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100001c8, 8) , (const, 0x23f, 4)]
[ ---  BRANCH (ram, 0x1ccec0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000208, 8) , (stack, 0xffffffffffffffa8, 8) , (unique, 0x10000208, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xffffffffffffff90, 8) , (unique, 0x3800, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x100001c8, 8) , (unique, 0x100001d0, 8) , (unique, 0x100001c8, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0xb0, 8)]
[(register, 0x10, 8) PTRADD (register, 0x28, 8) , (register, 0x10, 8) , (const, 0x1, 8)]
[(unique, 0x10000200, 8) COPY (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1cd020, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (register, 0x10, 8) , (unique, 0x1000024c, 8), (unique, 0x1000024c, 8) CAST (register, 0x28, 8)]
[(register, 0xa8, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x1cced1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x28, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0xa8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000264, 8), (unique, 0x10000264, 8) INT_ADD (unique, 0x1000025c, 8) , (const, 0x28, 8), (unique, 0x1000025c, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1cceeb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000254, 8), (unique, 0x10000254, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(register, 0xa0, 8) CAST (unique, 0x10000284, 8), (unique, 0x10000284, 8) INT_XOR (register, 0xa0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000027c, 8), (unique, 0x1000027c, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0xa0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x10000274, 8) , (const, 0x2f, 4), (unique, 0x10000274, 8) CAST (unique, 0xbd80, 8), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x1000026c, 8) , (const, 0x11, 4), (unique, 0x1000026c, 8) CAST (unique, 0xbd80, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xa0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x117, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfb, 4)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x117, 4), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0xfb, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x117, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfb, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x117, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xfb, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x117, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000200, 8) , (const, 0xfb, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x117, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xfb, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x117, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xfb, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x117, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xfb, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x117, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xfb, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x117, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xfb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x117, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfb, 4)]
[ ---  CBRANCH (ram, 0x1ccf50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100000aa, 4) , (const, 0x0, 4), (unique, 0x100000aa, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffb, 4), (register, 0x0, 4) CALLIND (register, 0xa0, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (register, 0xa8, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x1, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1cd046, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x2, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_SUB (register, 0x0, 4) , (const, 0x5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21f, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000137, 8) , (unique, 0x10000127, 8) , (const, 0x73, 4) , (unique, 0x1000013f, 8), (unique, 0x1000013f, 8) COPY (const, 0x2b9678, 8), (unique, 0x10000137, 8) COPY (const, 0x2b9408, 8), (unique, 0x10000127, 8) COPY (const, 0x2b51c6, 8)]
[(ram, 0x4eadc8, 8) COPY (ram, 0x4eadc8, 8), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x21f, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x21f, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1ccf50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x5, 4)]
[ ---  CBRANCH (ram, 0x1cce3f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x7, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000208, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) COPY (const, 0xfffffffffffffffe, 8)]
[(register, 0x0, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (unique, 0x100000c6, 8) , (const, 0x1, 8), (unique, 0x100000c6, 8) INT_2COMP (unique, 0x1000028c, 8), (unique, 0x1000028c, 8) CAST (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1ccfc0, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x10000294, 4) , (const, 0x10000, 4), (unique, 0x10000294, 4) CAST (stack, 0xffffffffffffff74, 4)]
[ ---  CBRANCH (ram, 0x1ccfd3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x1f2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (register, 0x8, 2), (register, 0x8, 2) INT_ADD (register, 0x8, 2) , (const, 0xd7c0, 2), (register, 0x8, 2) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (register, 0x8, 4) INT_SRIGHT (unique, 0x10000298, 4) , (const, 0xa, 4), (unique, 0x10000298, 4) CAST (stack, 0xffffffffffffff74, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x80000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x217, 4), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x201, 4), (ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x217, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x201, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 4), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0xdc00, 4), (register, 0x10, 4) INT_AND (stack, 0xffffffffffffff74, 4) , (const, 0x3ff, 4)]
[ ---  BRANCH (ram, 0x1cce46, 1)]
[ ---  CBRANCH (ram, 0x1ccf6d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x177, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x177, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (register, 0x10, 2), (register, 0x10, 2) SUBPIECE (stack, 0xffffffffffffff74, 4) , (const, 0x0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[ ---  CBRANCH (ram, 0x1cce46, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x1cce46, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff74, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1cd065, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b6, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x1000011f, 8) , (unique, 0x1000012f, 8) , (const, 0x82, 4) , (unique, 0x10000147, 8), (unique, 0x10000147, 8) COPY (const, 0x2b9678, 8), (unique, 0x1000012f, 8) COPY (const, 0x2b51c6, 8), (unique, 0x1000011f, 8) COPY (const, 0x2b50f3, 8)]
[(ram, 0x4eadc8, 8) COPY (ram, 0x4eadc8, 8), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x1b6, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b6, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1cce46, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000200, 8)]
[(ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x14c, 4), (ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14c, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000029c, 8) , (const, 0x54, 4), (unique, 0x1000029c, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x1cce46, 1)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eadc8, 8) MULTIEQUAL (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8) , (ram, 0x4eadc8, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1cd041, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002a4, 8), (unique, 0x100002a4, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4eadc8, 8) COPY (ram, 0x4eadc8, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x91, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x91, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x91, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x91, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x91, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x91, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x91, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eadc8, 8) COPY (ram, 0x4eadc8, 8), (ram, 0x4eadc8, 8) INDIRECT (ram, 0x4eadc8, 8) , (const, 0x91, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x91, 4)]
[ ---  RETURN (const, 0x1, 4)]
