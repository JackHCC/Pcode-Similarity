[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000258, 8), (unique, 0x10000258, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1c2588, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 2) , (const, 0x400, 2), (register, 0x0, 2) INT_AND (register, 0x1090, 2) , (const, 0xc00, 2)]
[(register, 0xb8, 4) COPY (const, 0x400, 4)]
[ ---  BRANCH (ram, 0x1c239d, 1)]
[ ---  CBRANCH (ram, 0x1c2440, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 2) , (const, 0x401, 2)]
[ ---  CBRANCH (ram, 0x1c276d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 2) , (const, 0x0, 2)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x1c239d, 1)]
[ ---  CBRANCH (ram, 0x1c23f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 2) , (const, 0x800, 2)]
[ ---  CBRANCH (ram, 0x1c276d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 2) , (const, 0xc00, 2)]
[(register, 0xb8, 4) COPY (const, 0xc00, 4)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1c2407, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (unique, 0x10000260, 8) , (const, 0xffffffffffffc002, 8), (unique, 0x10000260, 8) CAST (register, 0x30, 8)]
[(register, 0xb8, 4) COPY (const, 0x800, 4)]
[ ---  CBRANCH (ram, 0x1c23a6, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (const, 0xffffffffffffc001, 8) , (unique, 0x10000268, 8), (unique, 0x10000268, 8) CAST (register, 0x30, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1c2678, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x10000270, 8) , (const, 0x4001, 8), (unique, 0x10000270, 8) CAST (register, 0x30, 8)]
[(register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (register, 0x8, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x80, 1) , (const, 0x3f, 1)]
[(register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (register, 0x8, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x80, 1) , (const, 0x3f, 1)]
[(register, 0x98, 1) INT_AND (unique, 0x1000020c, 1) , (const, 0x1, 1), (unique, 0x1000020c, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x1c2511, 1)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1c2458, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (unique, 0x10000278, 8) , (const, 0xffffffffffffbfc2, 8), (unique, 0x10000278, 8) CAST (register, 0x30, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000280, 8) , (const, 0x22, 4), (unique, 0x10000280, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0xa8, 1) INT_OR (unique, 0x100001f0, 1) , (register, 0x206, 1), (unique, 0x100001f0, 1) INT_AND (unique, 0x100001f2, 1) , (const, 0x1, 1), (unique, 0x100001f2, 1) SUBPIECE (register, 0x88, 4) , (const, 0x0, 4), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_NEGATE (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (const, 0xffffffffffffffff, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x80, 1) , (const, 0x3f, 1)]
[(unique, 0x10000254, 4) COPY (register, 0x88, 4), (register, 0x88, 4) INT_OR (register, 0x88, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_NEGATE (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (const, 0xffffffffffffffff, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x80, 1) , (const, 0x3f, 1)]
[ ---  CBRANCH (ram, 0x1c2778, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x40, 8), (register, 0x30, 8) INT_SUB (unique, 0x100000ad, 8) , (const, 0x3ffe, 8), (unique, 0x100000ad, 8) INT_2COMP (register, 0x30, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x547, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x98, 1) COPY (const, 0x0, 1)]
[(register, 0x0, 8) INT_RIGHT (unique, 0xbd80, 8) , (const, 0x3f, 4)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x38, 1) COPY (const, 0x3f, 1)]
[(unique, 0x10000192, 1) SUBPIECE (unique, 0x1000022b, 8) , (const, 0x0, 4), (unique, 0x1000022b, 8) INT_RIGHT (unique, 0xbd80, 8) , (const, 0x3f, 4)]
[ ---  BRANCH (ram, 0x1c24e4, 1)]
[(unique, 0x100001f6, 1) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1c25a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x1, 8)]
[(unique, 0x100001ca, 8) INT_AND (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_RIGHT (register, 0x8, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x80, 1) , (const, 0x3f, 1)]
[ ---  CBRANCH (ram, 0x1c27a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x400, 4)]
[ ---  CBRANCH (ram, 0x1c2710, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_LESS (const, 0x400, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1c2820, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x800, 4)]
[ ---  CBRANCH (ram, 0x1c276d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0xc00, 4)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1c24a8, 1)]
[ ---  CBRANCH (ram, 0x1c271e, 1) , (unique, 0x10000215, 1), (unique, 0x10000215, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1c27b6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100001ca, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1c271e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 1) , (const, 0x0, 1)]
[(register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x1c276d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1c282e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001bc, 8) , (const, 0x0, 8), (unique, 0x100001bc, 8) INT_AND (register, 0x10, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4b1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4b1, 4)]
[ ---  CALL (ram, 0x153340, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x100001dd, 1) , (const, 0x3f, 1), (unique, 0x100001dd, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001f6, 1)]
[(register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x100001dd, 1) , (const, 0x3f, 1), (unique, 0x100001dd, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001f6, 1)]
[(register, 0xb0, 1) CAST (unique, 0x10000288, 1), (unique, 0x10000288, 1) INT_AND (unique, 0x100001b2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x100001b2, 1) INT_OR (unique, 0x100001c4, 1) , (register, 0xa8, 1), (unique, 0x100001c4, 1) INT_AND (unique, 0x100001c6, 1) , (const, 0x1, 1), (unique, 0x100001c6, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x1c27bf, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x433, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x433, 4)]
[ ---  CALL (ram, 0x153340, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) COPY (const, 0xffffffffffffc001, 8)]
[(register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x100001db, 1) , (const, 0x3f, 1), (unique, 0x100001db, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001f6, 1)]
[(register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x100001db, 1) , (const, 0x3f, 1), (unique, 0x100001db, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001f6, 1)]
[ ---  CBRANCH (ram, 0x1c275d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb7, 1) , (const, 0x0, 1), (stack, 0xffffffffffffffb7, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0xb0, 1)]
[(register, 0x98, 1) INT_AND (unique, 0x1000020e, 1) , (const, 0x1, 1), (unique, 0x1000020e, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0x1000023b, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x1c2511, 1)]
[(register, 0x0, 1) MULTIEQUAL (register, 0x0, 1) , (register, 0x0, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x38, 1) MULTIEQUAL (unique, 0x100001db, 1) , (unique, 0x100001dd, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x98, 1) INT_AND (unique, 0x10000210, 1) , (const, 0x1, 1), (unique, 0x10000210, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x1c24e4, 1)]
[(register, 0x8, 8) INT_AND (register, 0x30, 8) , (const, 0xffffffff, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14e, 4)]
[ ---  CALL (ram, 0x153340, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (const, 0x1, 8) , (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x98, 1) INT_AND (unique, 0x10000212, 1) , (const, 0x1, 1), (unique, 0x10000212, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x100001d8, 1) , (const, 0x3f, 1), (unique, 0x100001d8, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001f6, 1)]
[(register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x100001d8, 1) , (const, 0x3f, 1), (unique, 0x100001d8, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001f6, 1)]
[(register, 0xb0, 1) MULTIEQUAL (register, 0x0, 1) , (register, 0x0, 1) , (unique, 0x10000192, 1)]
[(register, 0x98, 1) MULTIEQUAL (register, 0x98, 1) , (register, 0x98, 1) , (register, 0x98, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x38, 1) MULTIEQUAL (unique, 0x100001d8, 1) , (register, 0x38, 1) , (register, 0x38, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1c24f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1c26e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x1c24f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_AND (register, 0x10, 8) , (unique, 0xbd80, 8), (register, 0x10, 8) INT_NEGATE (register, 0x10, 8), (register, 0x10, 8) INT_LEFT (const, 0xffffffffffffffff, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x38, 1) , (const, 0x3f, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000289, 8) , (const, 0x22, 4), (unique, 0x10000289, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x18, 8) COPY (const, 0xffffffffffffc001, 8)]
[(unique, 0x10000233, 8) COPY (unique, 0xbd80, 8)]
[(register, 0xb0, 1) MULTIEQUAL (register, 0xb0, 1) , (register, 0x0, 1) , (register, 0x0, 1)]
[(register, 0x98, 1) MULTIEQUAL (register, 0x98, 1) , (register, 0x98, 1) , (register, 0x98, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x38, 1) MULTIEQUAL (register, 0x38, 1) , (unique, 0x100001db, 1) , (register, 0x80, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x10000233, 8) , (unique, 0x1000023b, 8) , (register, 0x8, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x10, 8) , (register, 0x30, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100001d7, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x1c2535, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4), (register, 0x88, 4) MULTIEQUAL (unique, 0x10000254, 4) , (unique, 0x10000254, 4) , (register, 0x88, 4)]
[(register, 0x10, 8) INT_AND (register, 0x10, 8) , (register, 0x90, 8), (register, 0x10, 8) INT_NEGATE (register, 0x10, 8), (register, 0x10, 8) INT_LEFT (const, 0xffffffffffffffff, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x38, 1) , (const, 0x3f, 1)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x18, 8) COPY (const, 0xffffffffffffc001, 8)]
[ ---  BRANCH (ram, 0x1c252e, 1)]
[(register, 0xb0, 1) MULTIEQUAL (register, 0xb0, 1) , (register, 0xb0, 1)]
[(register, 0x98, 1) MULTIEQUAL (register, 0x98, 1) , (register, 0x98, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0xb0, 1) MULTIEQUAL (register, 0xb0, 1) , (register, 0xb0, 1)]
[(register, 0x98, 1) MULTIEQUAL (register, 0x98, 1) , (register, 0x98, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x100001d5, 1) MULTIEQUAL (unique, 0x100001d7, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1c2650, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x400, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1c2608, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_LESS (register, 0xb8, 4) , (const, 0x401, 4)]
[ ---  CBRANCH (ram, 0x1c276d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4)]
[(unique, 0x10000243, 1) COPY (register, 0x98, 1)]
[ ---  CBRANCH (ram, 0x1c2562, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1c2668, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x800, 4)]
[ ---  CBRANCH (ram, 0x1c2562, 1) , (unique, 0x10000216, 1), (unique, 0x10000216, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1c2562, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 1) , (const, 0x0, 1), (register, 0x98, 1) INT_OR (unique, 0x100001d5, 1) , (unique, 0x100001da, 1), (unique, 0x100001da, 1) MULTIEQUAL (unique, 0x10000243, 1) , (register, 0xb0, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2aa, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1c26a0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffffe, 8) , (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f6, 4)]
[ ---  CALL (ram, 0x153340, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2fc, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2f6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_OR (unique, 0xbd80, 8) , (const, 0x8000000000000000, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1c2414, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x4001, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x325, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000291, 8) , (const, 0x22, 4), (unique, 0x10000291, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x1c2562, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0xffffffffffffc001, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (const, 0x3fff, 4), (register, 0x30, 4) INT_2COMP (unique, 0x10000105, 4), (unique, 0x10000105, 4) SUBPIECE (unique, 0x10000223, 8) , (const, 0x0, 4), (unique, 0x10000223, 8) INT_SRIGHT (unique, 0x10000299, 8) , (const, 0x3f, 4), (unique, 0x10000299, 8) CAST (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x1c2564, 1)]
[ ---  CBRANCH (ram, 0x1c276d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0xc00, 4)]
[ ---  CALL (ram, 0x1406c0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x27a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x254, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x254, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CALL (ram, 0x154bb0, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 4), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x1c23d2, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x1c284c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002a1, 8), (unique, 0x100002a1, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc2, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8)]
