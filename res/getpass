[(register, 0x20, 8) CAST (unique, 0x100001cd, 8), (unique, 0x100001cd, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x20, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x20, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x20, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x1ff400, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x16dd20, 8) , (unique, 0x1000016d, 8) , (unique, 0x10000175, 8), (unique, 0x10000175, 8) COPY (const, 0x28e0cb, 8), (unique, 0x1000016d, 8) COPY (const, 0x28c5f5, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100001d5, 8), (unique, 0x100001d5, 8) CAST (ram, 0x4c2fb0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100001dd, 8), (unique, 0x100001dd, 8) CAST (ram, 0x4c2db8, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x2f, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x2f, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x2f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001ad, 8) , (unique, 0xbd00, 4), (unique, 0x100001ad, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001a5, 8), (unique, 0x100001a5, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0x100001c5, 8) COPY (register, 0x0, 8)]
[(register, 0x28, 8) MULTIEQUAL (unique, 0x100001c5, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x47, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x41, 4), (ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x47, 4), (ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x41, 4), (ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x47, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x41, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x47, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x47, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x47, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x47, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x47, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x47, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x47, 4), (stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x47, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x47, 4), (stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x47, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x47, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x47, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x47, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x47, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x47, 4), (stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x41, 4)]
[(unique, 0x10000159, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x1ff330, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1fbdc0, 8) , (register, 0x0, 4) , (unique, 0x3800, 8), (register, 0x0, 4) CALL (ram, 0x175a10, 8) , (register, 0x18, 8), (unique, 0x3800, 8) CAST (unique, 0x100001e5, 8), (unique, 0x100001e5, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x14f, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x148, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x14f, 4), (ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x148, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x14f, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x148, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x148, 4), (stack, 0xffffffffffffff48, 8) COPY (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x148, 4), (stack, 0xffffffffffffff58, 8) COPY (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x148, 4), (stack, 0xffffffffffffff60, 8) COPY (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x148, 4), (stack, 0xffffffffffffff68, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x148, 4), (stack, 0xffffffffffffff70, 8) COPY (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x148, 4), (stack, 0xffffffffffffff78, 8) COPY (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x14f, 4), (stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x148, 4), (stack, 0xffffffffffffff80, 4) COPY (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x14f, 4), (stack, 0xffffffffffffff94, 4) INDIRECT (unique, 0xbc80, 4) , (const, 0x148, 4), (unique, 0xbc80, 4) INT_AND (stack, 0xffffffffffffff94, 4) , (const, 0xfffffff6, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1fbbc0, 8) , (register, 0x0, 4) , (const, 0x2, 4) , (unique, 0x3800, 8), (register, 0x0, 4) CALL (ram, 0x175a10, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x1ff2a1, 1)]
[(unique, 0x10000156, 1) MULTIEQUAL (unique, 0x10000159, 1) , (register, 0x206, 1)]
[ ---  CALL (ram, 0x16cfd0, 8) , (register, 0x28, 8) , (unique, 0x10000185, 8) , (register, 0x38, 8), (unique, 0x10000185, 8) COPY (const, 0x28eaa9, 8)]
[ ---  CALL (ram, 0x177ee0, 8) , (register, 0x28, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x75, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x6f, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x6b, 4), (ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x75, 4), (ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x6f, 4), (ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x6b, 4), (ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x75, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x6f, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x6b, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x75, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x6f, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x6b, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x75, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6f, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6b, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x75, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x6f, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x6b, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x75, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x6f, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x6b, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x75, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x6f, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x6b, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x75, 4), (stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x6f, 4), (stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x6b, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x75, 4), (stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x6f, 4), (stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x6b, 4), (stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(register, 0x0, 8) CALL (ram, 0x16b260, 8) , (unique, 0x10000195, 8) , (unique, 0x100001ed, 8) , (register, 0x18, 8), (unique, 0x100001ed, 8) CAST (unique, 0x1000018d, 8), (unique, 0x10000195, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c6180, 8), (unique, 0x1000018d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c6178, 8)]
[ ---  CBRANCH (ram, 0x1ff2f6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c6180, 8) , (const, 0x0, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x75, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x6f, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x6b, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[ ---  CBRANCH (ram, 0x1ff3f0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 8) , (const, 0x0, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xfa, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xfa, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xfa, 4)]
[ ---  STORE (const, 0x1b1, 4) , (ram, 0x4c6180, 8) , (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x1ff2f6, 1)]
[ ---  CBRANCH (ram, 0x1ff3b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0xa, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (ram, 0x4c6180, 8) , (unique, 0x100001bd, 8) , (const, 0x1, 8), (unique, 0x100001bd, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[ ---  CBRANCH (ram, 0x1ff3d0, 1) , (unique, 0x1000015a, 1), (unique, 0x1000015a, 1) BOOL_NEGATE (unique, 0x10000156, 1)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xe8, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xe8, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xe8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x1ff2ff, 1) , (unique, 0x10000157, 1), (unique, 0x10000157, 1) BOOL_NEGATE (unique, 0x10000156, 1)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xf8, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xf8, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0xf8, 4)]
[ ---  CALL (ram, 0x16cfd0, 8) , (register, 0x28, 8) , (unique, 0x10000165, 8), (unique, 0x10000165, 8) COPY (const, 0x28bea9, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xdc, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xd5, 4), (ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xdc, 4), (ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xd5, 4), (ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xdc, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xd5, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xdc, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xd5, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xdc, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xd5, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xdc, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd5, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xdc, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd5, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xdc, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd5, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xdc, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xd5, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xdc, 4), (stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xd5, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0xdc, 4), (stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0xd5, 4), (stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[ ---  CALL (ram, 0x1fbbc0, 8) , (register, 0x0, 4) , (const, 0x2, 4) , (register, 0x20, 8), (register, 0x0, 4) CALL (ram, 0x175a10, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x1ff2ff, 1)]
[(stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[ ---  CBRANCH (ram, 0x1ff313, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100001f5, 8), (unique, 0x100001f5, 8) CAST (ram, 0x4c2fb0, 8), (ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xb8, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xb8, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0xb8, 4)]
[ ---  CALL (ram, 0x16d210, 8) , (register, 0x18, 8)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8), (ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(ram, 0x4c2fb0, 8) COPY (ram, 0x4c2fb0, 8), (ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
