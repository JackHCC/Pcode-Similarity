[(register, 0x20, 8) CAST (unique, 0x10000295, 8), (unique, 0x10000295, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x30, 4)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x30, 4)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x30, 4)]
[(ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x30, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x30, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000029d, 8), (unique, 0x1000029d, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x219a10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x17ee30, 8) , (unique, 0x10000230, 8) , (unique, 0x10000238, 8), (unique, 0x10000238, 8) COPY (const, 0x2b58c2, 8), (unique, 0x10000230, 8) COPY (const, 0x2b3f1f, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002a5, 8), (unique, 0x100002a5, 8) CAST (ram, 0x4eafb0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002ad, 8), (unique, 0x100002ad, 8) CAST (ram, 0x4eadb0, 8)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x40, 4)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x40, 4)]
[(ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x40, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000270, 8) , (unique, 0xbd00, 4), (unique, 0x10000270, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000268, 8), (unique, 0x10000268, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0x10000289, 8) COPY (register, 0x0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10000289, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x57, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x51, 4)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x57, 4), (ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x51, 4), (ram, 0x4eadb0, 8) MULTIEQUAL (ram, 0x4eadb0, 8) , (ram, 0x4eadb0, 8)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x57, 4), (ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x51, 4), (ram, 0x4eafb0, 8) MULTIEQUAL (ram, 0x4eafb0, 8) , (ram, 0x4eafb0, 8)]
[(ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x57, 4), (ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x51, 4), (ram, 0x4ee280, 8) MULTIEQUAL (ram, 0x4ee280, 8) , (ram, 0x4ee280, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x57, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x57, 4), (stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x57, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x57, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x57, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x51, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x57, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x51, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x57, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x51, 4)]
[(unique, 0x10000223, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x2199b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x215c80, 8) , (register, 0x0, 4) , (unique, 0x3800, 8), (register, 0x0, 4) CALL (ram, 0x1877b0, 8) , (register, 0x18, 8), (unique, 0x3800, 8) CAST (unique, 0x100002b5, 8), (unique, 0x100002b5, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x161, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15a, 4)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x161, 4), (ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x15a, 4)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x161, 4), (ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x15a, 4)]
[(ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x161, 4), (ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x15a, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff38, 4) COPY (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff3c, 4) COPY (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff40, 4) COPY (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff44, 4) COPY (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff48, 4) COPY (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff4c, 4) COPY (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff50, 4) COPY (stack, 0xffffffffffffff90, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff54, 4) COPY (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff58, 4) COPY (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff5c, 4) COPY (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff60, 4) COPY (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff64, 4) COPY (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x161, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x15a, 4), (stack, 0xffffffffffffff68, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x15a, 4), (stack, 0xffffffffffffff70, 4) COPY (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff84, 4) INDIRECT (unique, 0x10000291, 4) , (const, 0x15a, 4), (unique, 0x10000291, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) INT_AND (stack, 0xffffffffffffff84, 4) , (const, 0xfffffff6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x161, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15a, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x215a50, 8) , (register, 0x0, 4) , (const, 0x2, 4) , (unique, 0x3800, 8), (register, 0x0, 4) CALL (ram, 0x1877b0, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x2198f4, 1)]
[(unique, 0x1000021f, 1) MULTIEQUAL (unique, 0x10000223, 1) , (register, 0x206, 1)]
[ ---  CALL (ram, 0x17ddd0, 8) , (register, 0xa0, 8) , (unique, 0x10000248, 8) , (register, 0x38, 8), (unique, 0x10000248, 8) COPY (const, 0x2b6796, 8)]
[ ---  CALL (ram, 0x18a2a0, 8) , (register, 0xa0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x85, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7b, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x85, 4), (ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x7f, 4), (ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x7b, 4), (ram, 0x4eadb0, 8) MULTIEQUAL (ram, 0x4eadb0, 8) , (ram, 0x4eadb0, 8)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x85, 4), (ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x7f, 4), (ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x7b, 4), (ram, 0x4eafb0, 8) MULTIEQUAL (ram, 0x4eafb0, 8) , (ram, 0x4eafb0, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x85, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x7f, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x7b, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x85, 4), (stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x85, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CALL (ram, 0x17bc50, 8) , (unique, 0x10000258, 8) , (unique, 0x100002bd, 8) , (register, 0x18, 8), (unique, 0x100002bd, 8) CAST (unique, 0x10000250, 8), (unique, 0x10000258, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ee280, 8), (unique, 0x10000250, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ee278, 8)]
[ ---  CBRANCH (ram, 0x219945, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee280, 8) , (const, 0x0, 8), (ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x85, 4), (ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x7f, 4), (ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x7b, 4), (ram, 0x4ee280, 8) MULTIEQUAL (ram, 0x4ee280, 8) , (ram, 0x4ee280, 8)]
[ ---  CBRANCH (ram, 0x2199a8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 8) , (const, 0x0, 8)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x11e, 4)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x11e, 4)]
[(ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x11e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (ram, 0x4ee280, 8) , (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x219945, 1)]
[ ---  CBRANCH (ram, 0x219a30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xa, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (ram, 0x4ee280, 8) , (unique, 0x10000280, 8) , (const, 0x1, 8), (unique, 0x10000280, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x10b, 4)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x10b, 4)]
[(ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x10b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x219961, 1) , (unique, 0x10000220, 1), (unique, 0x10000220, 1) BOOL_NEGATE (unique, 0x1000021f, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11b, 4)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0x11b, 4)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0x11b, 4)]
[(ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11b, 4)]
[ ---  CALL (ram, 0x17ddd0, 8) , (register, 0xa0, 8) , (unique, 0x10000228, 8), (unique, 0x10000228, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d39, 8)]
[ ---  BRANCH (ram, 0x219945, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(ram, 0x4ee280, 8) MULTIEQUAL (ram, 0x4ee280, 8) , (ram, 0x4ee280, 8) , (ram, 0x4ee280, 8) , (ram, 0x4ee280, 8)]
[(ram, 0x4eafb0, 8) MULTIEQUAL (ram, 0x4eafb0, 8) , (ram, 0x4eafb0, 8) , (ram, 0x4eafb0, 8) , (ram, 0x4eafb0, 8)]
[(ram, 0x4eadb0, 8) MULTIEQUAL (ram, 0x4eadb0, 8) , (ram, 0x4eadb0, 8) , (ram, 0x4eadb0, 8) , (ram, 0x4eadb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x219961, 1) , (unique, 0x1000021f, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc0, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb9, 4)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0xc0, 4), (ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0xb9, 4)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0xc0, 4), (ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0xb9, 4)]
[(ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0xc0, 4), (ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xc0, 4), (stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb9, 4)]
[ ---  CALL (ram, 0x215a50, 8) , (register, 0x0, 4) , (const, 0x2, 4) , (register, 0x20, 8), (register, 0x0, 4) CALL (ram, 0x1877b0, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(ram, 0x4ee280, 8) MULTIEQUAL (ram, 0x4ee280, 8) , (ram, 0x4ee280, 8) , (ram, 0x4ee280, 8)]
[(ram, 0x4eadb0, 8) MULTIEQUAL (ram, 0x4eadb0, 8) , (ram, 0x4eadb0, 8) , (ram, 0x4eadb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x219975, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002c5, 8), (unique, 0x100002c5, 8) CAST (ram, 0x4eafb0, 8), (ram, 0x4eafb0, 8) MULTIEQUAL (ram, 0x4eafb0, 8) , (ram, 0x4eafb0, 8) , (ram, 0x4eafb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd2, 4)]
[(ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0xd2, 4)]
[(ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0xd2, 4)]
[(ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd2, 4)]
[ ---  CALL (ram, 0x17e250, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(ram, 0x4eafb0, 8) MULTIEQUAL (ram, 0x4eafb0, 8) , (ram, 0x4eafb0, 8)]
[(ram, 0x4eadb0, 8) MULTIEQUAL (ram, 0x4eadb0, 8) , (ram, 0x4eadb0, 8)]
[(register, 0x0, 8) COPY (ram, 0x4ee280, 8), (ram, 0x4ee280, 8) MULTIEQUAL (ram, 0x4ee280, 8) , (ram, 0x4ee280, 8)]
[ ---  CBRANCH (ram, 0x219a52, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002cd, 8), (unique, 0x100002cd, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eadb0, 8) COPY (ram, 0x4eadb0, 8)]
[(ram, 0x4eafb0, 8) COPY (ram, 0x4eafb0, 8)]
[(ram, 0x4ee280, 8) COPY (ram, 0x4ee280, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfe, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eadb0, 8) COPY (ram, 0x4eadb0, 8), (ram, 0x4eadb0, 8) INDIRECT (ram, 0x4eadb0, 8) , (const, 0xfe, 4)]
[(ram, 0x4eafb0, 8) COPY (ram, 0x4eafb0, 8), (ram, 0x4eafb0, 8) INDIRECT (ram, 0x4eafb0, 8) , (const, 0xfe, 4)]
[(ram, 0x4ee280, 8) COPY (ram, 0x4ee280, 8), (ram, 0x4ee280, 8) INDIRECT (ram, 0x4ee280, 8) , (const, 0xfe, 4)]
[ ---  RETURN (const, 0x1, 4)]
