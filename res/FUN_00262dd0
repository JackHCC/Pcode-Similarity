[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2c, 4)]
[(ram, 0x4f02c0, 1) INDIRECT (ram, 0x4f02c0, 1) , (const, 0x2c, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x2c, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2c, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000dd, 8), (unique, 0x100000dd, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x262eb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x211810, 8) , (const, 0x0, 4) , (unique, 0x3c80, 8) , (const, 0x200, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffde8, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb6, 4)]
[(ram, 0x4f02c0, 1) INDIRECT (ram, 0x4f02c0, 1) , (const, 0xb6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100000e5, 8) , (register, 0x0, 4), (unique, 0x100000e5, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x262e8d, 1)]
[ ---  CALL (ram, 0x2635e0, 8)]
[ ---  CALL (ram, 0x1212a0, 8) , (unique, 0x3800, 8) , (unique, 0x3100, 8) , (const, 0x20, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffaf0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffded, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4c, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x44, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x44, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3a, 4)]
[(ram, 0x4f02c0, 1) INDIRECT (ram, 0x4f02c0, 1) , (const, 0x4c, 4), (ram, 0x4f02c0, 1) INDIRECT (ram, 0x4f02c0, 1) , (const, 0x44, 4), (ram, 0x4f02c0, 1) INDIRECT (ram, 0x4f02c0, 1) , (const, 0x3a, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x4c, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x44, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x3a, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x4c, 4), (stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x44, 4), (stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x3a, 4)]
[ ---  CBRANCH (ram, 0x262e60, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x263a20, 8) , (unique, 0x3800, 8) , (unique, 0x3c80, 8) , (unique, 0x3800, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffc68, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffae0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffae8, 8)]
[(register, 0x18, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f02a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa7, 4)]
[(ram, 0x4f02c0, 1) INDIRECT (ram, 0x4f02c0, 1) , (const, 0xa7, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xa7, 4)]
[ ---  CALL (ram, 0x1212a0, 8) , (unique, 0x100000a5, 8) , (unique, 0x3100, 8) , (const, 0x20, 8), (unique, 0x100000a5, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f02a0, 8), (unique, 0x3100, 8) CAST (unique, 0x100000ed, 8), (unique, 0x100000ed, 8) INT_ADD (stack, 0xfffffffffffffae0, 8) , (const, 0x2c, 8)]
[(ram, 0x4f02c0, 1) COPY (const, 0x0, 1)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x262e88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x3, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000f5, 8), (unique, 0x100000f5, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x74, 4)]
[(ram, 0x4f02c0, 1) INDIRECT (ram, 0x4f02c0, 1) , (const, 0x74, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100000fd, 8) , (const, 0x2, 4), (unique, 0x100000fd, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x262e88, 1)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x78, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x78, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f02c0, 1) INDIRECT (ram, 0x4f02c0, 1) , (const, 0x78, 4), (ram, 0x4f02c0, 1) MULTIEQUAL (ram, 0x4f02c0, 1) , (ram, 0x4f02c0, 1) , (ram, 0x4f02c0, 1)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x78, 4), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[ ---  CALL (ram, 0x2637b0, 8)]
[(ram, 0x4f02c0, 1) MULTIEQUAL (ram, 0x4f02c0, 1) , (ram, 0x4f02c0, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x262ebe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffff0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000105, 8), (unique, 0x10000105, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x9a, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9a, 4)]
[(ram, 0x4f02c0, 1) COPY (ram, 0x4f02c0, 1), (ram, 0x4f02c0, 1) INDIRECT (ram, 0x4f02c0, 1) , (const, 0x9a, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4f02c0, 1) COPY (ram, 0x4f02c0, 1)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
