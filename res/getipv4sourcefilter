[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0xb8, 8) INT_ZEXT (unique, 0x3580, 4), (unique, 0x3580, 4) INT_ADD (unique, 0x3480, 4) , (const, 0x10, 4), (unique, 0x3480, 4) INT_MULT (unique, 0xbc80, 4) , (const, 0x4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x48, 4), (stack, 0xffffffffffffff90, 8) COPY (const, 0x2407bb, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000025c, 8) , (const, 0x48, 4), (unique, 0x1000025c, 8) COPY (register, 0x88, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000264, 8) , (const, 0x48, 4), (unique, 0x10000264, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (unique, 0x10000270, 4) , (const, 0x48, 4), (unique, 0x10000270, 4) COPY (register, 0x10, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (unique, 0x10000274, 4) , (const, 0x48, 4), (unique, 0x10000274, 4) COPY (unique, 0x3580, 4), (unique, 0x3580, 4) INT_ADD (unique, 0x3480, 4) , (const, 0x10, 4), (unique, 0x3480, 4) INT_MULT (unique, 0xbc80, 4) , (const, 0x4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x48, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000278, 8), (unique, 0x10000278, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x0, 4) CALL (ram, 0x2300b0, 8)]
[(unique, 0x10000228, 4) COPY (stack, 0xffffffffffffffb0, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (unique, 0x1000026c, 4) , (const, 0x48, 4), (unique, 0x1000026c, 4) COPY (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x2407cf, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3580, 4) , (const, 0x1001, 4), (unique, 0x3580, 4) INT_ADD (unique, 0x3480, 4) , (const, 0x10, 4), (unique, 0x3480, 4) INT_MULT (unique, 0xbc80, 4) , (const, 0x4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x240898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x1000013f, 8) , (unique, 0x1000008b, 8) , (const, 0x1, 8), (unique, 0x1000013f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x1000008b, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000290, 8) , (stack, 0xffffffffffffffb4, 4), (unique, 0x10000290, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000288, 8), (unique, 0x10000288, 8) INT_ADD (unique, 0x10000280, 8) , (unique, 0x1000008b, 8), (unique, 0x10000280, 8) CAST (unique, 0x1000018f, 8), (unique, 0x1000018f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa0, 8), (unique, 0x1000008b, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 4), (unique, 0x3100, 8) CAST (unique, 0x100002a0, 8), (unique, 0x100002a0, 8) INT_ADD (unique, 0x10000298, 8) , (unique, 0x1000019f, 8), (unique, 0x10000298, 8) CAST (unique, 0x100001a7, 8), (unique, 0x100001a7, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa0, 8), (unique, 0x1000019f, 8) INT_ADD (unique, 0x1000008b, 8) , (const, 0x4, 8), (unique, 0x1000008b, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) CAST (unique, 0x100002b0, 8), (unique, 0x100002b0, 8) INT_ADD (unique, 0x100002a8, 8) , (unique, 0x100001b7, 8), (unique, 0x100002a8, 8) CAST (unique, 0x100001bf, 8), (unique, 0x100001bf, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8), (unique, 0x100001b7, 8) INT_ADD (unique, 0x1000008b, 8) , (const, 0x4, 8), (unique, 0x1000008b, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002b8, 8) , (const, 0x24080b, 8), (unique, 0x100002b8, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001d7, 8) , (unique, 0x100001cf, 8) , (const, 0x1, 8), (unique, 0x100001d7, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x100001cf, 8) INT_ADD (unique, 0x1000008b, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000008b, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1e, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xdf, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xdf, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xdf, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xdf, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xdf, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0xdf, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xdf, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xde, 4)]
[(unique, 0x10000244, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000127, 8) , (unique, 0x1000008b, 8) , (const, 0x1, 8), (unique, 0x10000127, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x1000008b, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1e, 8)]
[ ---  CBRANCH (ram, 0x240840, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2229a0, 8) , (unique, 0x10000228, 4) , (const, 0x0, 4) , (const, 0x29, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) CAST (unique, 0x10000288, 8), (unique, 0x10000288, 8) INT_ADD (unique, 0x10000280, 8) , (unique, 0x1000008b, 8), (unique, 0x10000280, 8) CAST (unique, 0x1000018f, 8), (unique, 0x1000018f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa0, 8), (unique, 0x1000008b, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffbc, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1e, 8)]
[(register, 0xa0, 4) COPY (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x183, 4), (stack, 0xffffffffffffff90, 8) COPY (const, 0x2408a0, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x183, 4)]
[ ---  CBRANCH (ram, 0x2408dd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002c0, 8), (unique, 0x100002c0, 8) CALL (ram, 0x1212c0, 8) , (register, 0xb8, 8)]
[(register, 0xa0, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x240812, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002c8, 8) , (stack, 0xffffffffffffffb4, 4), (unique, 0x100002c8, 8) CAST (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 4), (unique, 0x3100, 8) CAST (unique, 0x100002d8, 8), (unique, 0x100002d8, 8) INT_ADD (unique, 0x100002d0, 8) , (const, 0x4, 8), (unique, 0x100002d0, 8) CAST (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) CAST (unique, 0x100002e8, 8), (unique, 0x100002e8, 8) INT_ADD (unique, 0x100002e0, 8) , (const, 0xc, 8), (unique, 0x100002e0, 8) CAST (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff90, 8) COPY (const, 0x2408cb, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1af, 4)]
[ ---  CBRANCH (ram, 0x240846, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2229a0, 8) , (stack, 0xffffffffffffffb0, 4) , (const, 0x0, 4) , (const, 0x29, 4) , (register, 0x0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffbc, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0x0, 4)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x10000220, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffffa8, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100002f0, 8), (unique, 0x100002f0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[(unique, 0x3680, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)]
[(unique, 0x1000022c, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INT_LEFT (register, 0x10, 8) , (const, 0x2, 4), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000300, 8), (unique, 0x10000300, 8) INT_ADD (unique, 0x100002f8, 8) , (const, 0xc, 8), (unique, 0x100002f8, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x240877, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000300, 8), (unique, 0x10000300, 8) INT_ADD (unique, 0x100002f8, 8) , (const, 0xc, 8), (unique, 0x100002f8, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[(unique, 0x10000234, 8) COPY (unique, 0x3680, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000308, 8) , (const, 0x24087c, 8), (unique, 0x10000308, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x162, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x161, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x162, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x161, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x162, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x161, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x162, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x162, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x162, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x162, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x161, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x10000220, 8) , (unique, 0x3100, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000022c, 8) , (unique, 0x10000234, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (unique, 0xbc80, 4)]
[(unique, 0x1000023c, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x240890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0x0, 4)]
[(register, 0xa0, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000254, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x240812, 1)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000310, 8) , (const, 0x24088c, 8), (unique, 0x10000310, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000023c, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x173, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x173, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x172, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x173, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x172, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x173, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x172, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x173, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x172, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x173, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x172, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x173, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x172, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x173, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x172, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x0, 8)]
[(unique, 0x1000024c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000023c, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x240812, 1)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000244, 8) , (unique, 0x1000024c, 8) , (unique, 0x10000254, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2408d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000318, 8), (unique, 0x10000318, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0xa0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000320, 8) , (const, 0x2408dd, 8), (unique, 0x10000320, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x111, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x111, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x111, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x111, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x111, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x111, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x111, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x110, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
