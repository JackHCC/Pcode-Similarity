[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x43, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x43, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x43, 4), (stack, 0xffffffffffffff20, 8) COPY (const, 0x2173d3, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x43, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x43, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x43, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x43, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x43, 4)]
[(stack, 0xffffffffffffff78, 1) INDIRECT (stack, 0xffffffffffffff78, 1) , (const, 0x43, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x43, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000020b, 8), (unique, 0x1000020b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x217400, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (unique, 0x10000112, 8) , (const, 0x0, 8) , (const, 0x0, 8), (unique, 0x10000112, 8) COPY (const, 0x2b5850, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x57, 4), (stack, 0xffffffffffffff20, 8) COPY (const, 0x2173ec, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5d, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x57, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5d, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5d, 4), (stack, 0xffffffffffffff20, 8) COPY (const, 0x2173f6, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5d, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x5d, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x5d, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x5d, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x5d, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x57, 4)]
[(stack, 0xffffffffffffff78, 1) INDIRECT (stack, 0xffffffffffffff78, 1) , (const, 0x5d, 4), (stack, 0xffffffffffffff78, 1) INDIRECT (stack, 0xffffffffffffff78, 1) , (const, 0x57, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x57, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2174f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) CALL (ram, 0x210110, 8) , (register, 0x0, 4) , (unique, 0x3200, 8) , (const, 0x4, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff44, 8)]
[(register, 0x0, 8) INT_SEXT (stack, 0xffffffffffffff44, 4)]
[ ---  BRANCH (ram, 0x2174d2, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x6e, 4), (stack, 0xffffffffffffff20, 8) COPY (const, 0x217411, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x6e, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x6e, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x6e, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x6e, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff78, 1) INDIRECT (stack, 0xffffffffffffff78, 1) , (const, 0x6e, 4), (stack, 0xffffffffffffff78, 1) MULTIEQUAL (stack, 0xffffffffffffff78, 1) , (stack, 0xffffffffffffff78, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100001cb, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2174d0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x216e30, 8) , (unique, 0x3100, 8) , (const, 0x40, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(unique, 0x100001d3, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2174d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff78, 1) , (const, 0x0, 1)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff4c, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff30, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(unique, 0x100001b3, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb18, 8)]
[(unique, 0x100001db, 8) COPY (register, 0x90, 8), (register, 0x90, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb20, 8)]
[(unique, 0x100001f3, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) COPY (const, 0x400, 8)]
[ ---  BRANCH (ram, 0x21749e, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000213, 8) , (const, 0x2174b2, 8), (unique, 0x10000213, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100001b3, 8) , (unique, 0x100001bb, 8) , (unique, 0x100001c3, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xaf, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xaf, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xaf, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xaf, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xaf, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xae, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xaf, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xae, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xaf, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xaf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xae, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2174c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2361e0, 8) , (unique, 0x3100, 8) , (unique, 0x100001ab, 8) , (register, 0xa0, 8) , (register, 0xb8, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x100001ab, 8) COPY (stack, 0xffffffffffffff30, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100001db, 8) , (unique, 0x100001e3, 8) , (unique, 0x100001e3, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x100001f3, 8) , (unique, 0x100001fb, 8) , (unique, 0x10000203, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[ ---  CBRANCH (ram, 0x217500, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff50, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff48, 4) COPY (const, 0x0, 4)]
[(unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff50, 8) , (const, 0x14, 8)]
[(register, 0x10, 4) COPY (const, 0x4, 4)]
[ ---  CBRANCH (ram, 0x217517, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (unique, 0xbd00, 4) , (const, 0x5, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff50, 8) , (const, 0x14, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff50, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x217540, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0xbc80, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x196, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x196, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbb00, 1), (unique, 0x3400, 8) CAST (unique, 0x10000223, 8), (unique, 0x10000223, 8) INT_ADD (unique, 0x1000021b, 8) , (register, 0x0, 8), (unique, 0x1000021b, 8) CAST (unique, 0x1000019a, 8), (unique, 0x1000019a, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x21752f, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 8) , (unique, 0x1000022b, 8), (unique, 0x1000022b, 8) CAST (register, 0x10, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) INT_SEXT (unique, 0x10000233, 4), (unique, 0x10000233, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_OR (unique, 0x4c800, 4) , (unique, 0x4c900, 4), (unique, 0x4c900, 4) INT_RIGHT (stack, 0xffffffffffffff48, 4) , (const, 0x10, 4), (unique, 0x4c800, 4) INT_LEFT (stack, 0xffffffffffffff48, 4) , (const, 0x10, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[ ---  BRANCH (ram, 0x2174d2, 1)]
[ ---  CBRANCH (ram, 0x217460, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff4c, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x2174d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000237, 8), (unique, 0x10000237, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100000b3, 8) , (const, 0x1, 8), (unique, 0x100000b3, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100000f1, 8) , (const, 0x10, 8), (unique, 0x100000f1, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x100001bb, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100000b3, 8) , (const, 0x1, 8), (unique, 0x100000b3, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100000f1, 8) , (const, 0x10, 8), (unique, 0x100000f1, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x100001e3, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10000247, 8), (unique, 0x10000247, 8) INT_AND (unique, 0x1000023f, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000023f, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000016a, 8) , (const, 0x1, 8), (unique, 0x1000016a, 8) INT_ADD (unique, 0x100000b3, 8) , (const, 0xf, 8), (unique, 0x100000b3, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100000f1, 8) , (const, 0x10, 8), (unique, 0x100000f1, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x100001fb, 8) COPY (unique, 0x10000102, 8), (unique, 0x10000102, 8) INT_MULT (register, 0xb8, 8) , (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x21749e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x10, 8) , (unique, 0x100000f1, 8) , (const, 0x1, 8), (register, 0x10, 8) CAST (unique, 0x10000247, 8), (unique, 0x10000247, 8) INT_AND (unique, 0x1000023f, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000023f, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000016a, 8) , (const, 0x1, 8), (unique, 0x1000016a, 8) INT_ADD (unique, 0x100000b3, 8) , (const, 0xf, 8), (unique, 0x100000b3, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100000f1, 8) , (const, 0x10, 8), (unique, 0x100000f1, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x100001c3, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000203, 8) COPY (unique, 0x100000f1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x100001cb, 8) , (unique, 0x100001d3, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x21754d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000024f, 8), (unique, 0x1000024f, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000257, 8) , (unique, 0x1000010a, 8), (unique, 0x10000257, 8) CAST (register, 0x20, 8), (unique, 0x1000010a, 8) PTRSUB (const, 0x0, 8) , (const, 0x217552, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x106, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x105, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x106, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x105, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x106, 4), (stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x105, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x106, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x105, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x106, 4)]
[ ---  RETURN (const, 0x1, 4)]
