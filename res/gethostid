[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x79, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x79, 4), (stack, 0xffffffffffffff20, 8) COPY (const, 0x1fd080, 8)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff78, 1) INDIRECT (stack, 0xffffffffffffff78, 1) , (const, 0x79, 4)]
[ ---  CBRANCH (ram, 0x1fd08a, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1fcb80, 8) , (unique, 0x3100, 8) , (const, 0x40, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[ ---  CBRANCH (ram, 0x1fd0a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff78, 1) , (const, 0x0, 1)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff4c, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff30, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(unique, 0x10000145, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb18, 8)]
[(unique, 0x1000015d, 8) COPY (register, 0x90, 8), (register, 0x90, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb20, 8)]
[(unique, 0x10000175, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) COPY (const, 0x400, 8)]
[ ---  BRANCH (ram, 0x1fd11e, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000018d, 8) , (const, 0x1fd132, 8), (unique, 0x1000018d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000145, 8) , (unique, 0x1000014d, 8) , (unique, 0x10000155, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xd6, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd5, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xd5, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0xd5, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd5, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[ ---  CBRANCH (ram, 0x1fd142, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x219b60, 8) , (unique, 0x3100, 8) , (unique, 0x1000013d, 8) , (register, 0xa0, 8) , (register, 0xb8, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x1000013d, 8) COPY (stack, 0xffffffffffffff30, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x1000015d, 8) , (unique, 0x10000165, 8) , (unique, 0x10000165, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000175, 8) , (unique, 0x1000017d, 8) , (unique, 0x10000185, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[ ---  CBRANCH (ram, 0x1fd1a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff50, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff38, 4) COPY (const, 0x0, 4)]
[(unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff50, 8) , (const, 0x14, 8)]
[(register, 0x10, 4) COPY (const, 0x4, 4)]
[ ---  CBRANCH (ram, 0x1fd1b7, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (unique, 0xbd00, 4) , (const, 0x5, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff50, 8) , (const, 0x14, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff50, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1fd1e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0xbc80, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x18c, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbb00, 1), (unique, 0x3400, 8) CAST (unique, 0x1000019d, 8), (unique, 0x1000019d, 8) INT_ADD (unique, 0x10000195, 8) , (register, 0x0, 8), (unique, 0x10000195, 8) CAST (unique, 0x1000012d, 8), (unique, 0x1000012d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1fd1cf, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 8) , (unique, 0x100001a5, 8), (unique, 0x100001a5, 8) CAST (register, 0x10, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100001ad, 4), (unique, 0x100001ad, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_OR (unique, 0x4c800, 4) , (unique, 0x4c900, 4), (unique, 0x4c900, 4) INT_RIGHT (stack, 0xffffffffffffff38, 4) , (const, 0x10, 4), (unique, 0x4c800, 4) INT_LEFT (stack, 0xffffffffffffff38, 4) , (const, 0x10, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[ ---  CBRANCH (ram, 0x1fd0e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff4c, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x1fd08a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001b1, 8), (unique, 0x100001b1, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000089, 8) , (const, 0x1, 8), (unique, 0x10000089, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100000b7, 8) , (const, 0x10, 8), (unique, 0x100000b7, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x1000014d, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000089, 8) , (const, 0x1, 8), (unique, 0x10000089, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100000b7, 8) , (const, 0x10, 8), (unique, 0x100000b7, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x10000165, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100001c1, 8), (unique, 0x100001c1, 8) INT_AND (unique, 0x100001b9, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100001b9, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100000fd, 8) , (const, 0x1, 8), (unique, 0x100000fd, 8) INT_ADD (unique, 0x10000089, 8) , (const, 0xf, 8), (unique, 0x10000089, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100000b7, 8) , (const, 0x10, 8), (unique, 0x100000b7, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x1000017d, 8) COPY (unique, 0x100000c5, 8), (unique, 0x100000c5, 8) INT_MULT (register, 0xb8, 8) , (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x1fd11e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x10, 8) , (unique, 0x100000b7, 8) , (const, 0x1, 8), (register, 0x10, 8) CAST (unique, 0x100001c1, 8), (unique, 0x100001c1, 8) INT_AND (unique, 0x100001b9, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100001b9, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100000fd, 8) , (const, 0x1, 8), (unique, 0x100000fd, 8) INT_ADD (unique, 0x10000089, 8) , (const, 0xf, 8), (unique, 0x10000089, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100000b7, 8) , (const, 0x10, 8), (unique, 0x100000b7, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x10000155, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000185, 8) COPY (unique, 0x100000b7, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
