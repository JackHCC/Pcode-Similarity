[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 4) COPY (const, 0x0, 4)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x66, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x66, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x66, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x66, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x66, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x66, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x66, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x66, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x66, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x66, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x66, 4), (stack, 0xfffffffffffffbb0, 8) COPY (const, 0x400, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x66, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004a5, 8), (unique, 0x100004a5, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x0, 8) CAST (unique, 0x100004ad, 8), (unique, 0x100004ad, 8) CALL (ram, 0x2625e0, 8) , (const, 0xc, 8) , (unique, 0x100002fa, 8) , (unique, 0x1000031a, 8) , (unique, 0x3800, 8), (unique, 0x1000031a, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f0a80, 8), (unique, 0x100002fa, 8) COPY (const, 0x2b7067, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb64, 8)]
[(register, 0x28, 8) CAST (unique, 0x100004b5, 8), (unique, 0x100004b5, 8) INT_ADD (register, 0x80, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7, 4), (register, 0x0, 4) INT_2COMP (unique, 0x100000df, 4), (unique, 0x100000df, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb88, 8)]
[(unique, 0x1000047d, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000491, 4) COPY (stack, 0xfffffffffffffb64, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x66, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (unique, 0x10000491, 4) , (unique, 0x100004a1, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (unique, 0x1000047d, 8) , (stack, 0xfffffffffffffb08, 8)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x25f050, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0xffffffffffffffff, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa8, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0xa8, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xa8, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0xa8, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0xa8, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xa8, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xa8, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xa8, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0xa8, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xa8, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x25f050, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x262700, 8) , (register, 0x10, 4) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x18, 8) , (const, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100004bd, 8), (unique, 0x100004bd, 8) INT_ADD (register, 0x0, 8) , (const, 0x28, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x100004c5, 8), (unique, 0x100004c5, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[(unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100004cd, 8), (unique, 0x100004cd, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8)]
[(register, 0xb8, 4) COPY (const, 0xfffffffe, 4)]
[ ---  CBRANCH (ram, 0x25f060, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (stack, 0xfffffffffffffb64, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100004d5, 8), (unique, 0x100004d5, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x25f328, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100001e6, 8) , (const, 0x0, 8), (unique, 0x100001e6, 8) INT_AND (unique, 0x100004dd, 8) , (const, 0x3, 8), (unique, 0x100004dd, 8) CAST (unique, 0x3100, 8)]
[(register, 0x88, 8) INT_SEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb70, 4), (stack, 0xfffffffffffffb70, 4) SUBPIECE (unique, 0x100003fd, 16) , (const, 0x0, 4), (unique, 0x100003fd, 16) INT_RIGHT (unique, 0x5300, 16) , (const, 0x40, 4), (stack, 0xfffffffffffffb74, 4) SUBPIECE (unique, 0x100003ed, 16) , (const, 0x0, 4), (unique, 0x100003ed, 16) INT_RIGHT (unique, 0x5300, 16) , (const, 0x60, 4)]
[(unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x10, 8), (unique, 0x3880, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100004ed, 8), (unique, 0x100004ed, 8) INT_ADD (register, 0x0, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x25ee22, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3b80, 8) , (const, 0x0, 8), (unique, 0x3b80, 8) PTRADD (unique, 0x3100, 8) , (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (stack, 0xfffffffffffffb7c, 4), (stack, 0xfffffffffffffb7c, 4) SUBPIECE (unique, 0x100003e5, 8) , (const, 0x0, 4), (unique, 0x100003e5, 8) INT_RIGHT (unique, 0x100004e5, 8) , (const, 0x20, 4), (unique, 0x100004e5, 8) CAST (unique, 0xbd80, 8)]
[(register, 0x8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x25ee65, 1)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x631, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (unique, 0x5300, 16) , (const, 0x631, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x631, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x631, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x631, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x631, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x631, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x631, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x631, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x631, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x1000030a, 8) , (unique, 0x10000302, 8) , (const, 0x7f, 4) , (unique, 0x10000312, 8), (unique, 0x10000312, 8) COPY (const, 0x2baec0, 8), (unique, 0x1000030a, 8) COPY (const, 0x2bae88, 8), (unique, 0x10000302, 8) COPY (const, 0x2b7330, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x631, 4)]
[(ram, 0x4f0a90, 4) COPY (ram, 0x4f0a90, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x631, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x25ee22, 1)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x3100, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0x3a00, 8) , (register, 0x90, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c9, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x1c9, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (unique, 0x5300, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (unique, 0xbd80, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c9, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x25f1d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x2628a0, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 4) , (unique, 0x3c80, 8) , (const, 0x18, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(ram, 0x4f0a90, 4) COPY (const, 0x1, 4)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x25eea5, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x3100, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (unique, 0x3b80, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0x3a00, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f6, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x1f6, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0x8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x25f0f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb6c, 4) , (const, 0xffffffff, 4), (stack, 0xfffffffffffffb6c, 4) SUBPIECE (stack, 0xfffffffffffffb68, 16) , (const, 0x4, 8), (stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (unique, 0x5300, 16)]
[(ram, 0x4f0a90, 4) COPY (const, 0x1, 4)]
[(unique, 0x10000465, 8) COPY (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x25ee99, 1)]
[ ---  CBRANCH (ram, 0x25eec0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb6c, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x25f208, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (stack, 0xfffffffffffffb08, 8) , (register, 0x28, 8), (register, 0x28, 8) INT_ADD (register, 0x28, 8) , (register, 0x0, 8), (register, 0x28, 8) INT_ADD (unique, 0x3400, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_MULT (register, 0x38, 8) , (const, 0x8, 8), (unique, 0x3400, 8) INT_ADD (register, 0x0, 8) , (register, 0x30, 8), (register, 0x38, 8) INT_SEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (stack, 0xfffffffffffffb7c, 4) , (const, 0x1, 4), (register, 0x30, 8) INT_SEXT (stack, 0xfffffffffffffb74, 4), (stack, 0xfffffffffffffb74, 4) SUBPIECE (stack, 0xfffffffffffffb68, 16) , (const, 0xc, 8), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffb70, 4), (stack, 0xfffffffffffffb70, 4) SUBPIECE (stack, 0xfffffffffffffb68, 16) , (const, 0x8, 8), (stack, 0xfffffffffffffb7c, 4) SUBPIECE (stack, 0xfffffffffffffb78, 8) , (const, 0x4, 8)]
[(unique, 0xbd80, 8) INT_SUB (stack, 0xfffffffffffffb08, 8) , (register, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x28, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x100004fd, 8), (unique, 0x100004fd, 8) INT_ADD (register, 0x38, 8) , (unique, 0x100004f5, 8), (unique, 0x100004f5, 8) CAST (register, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3400, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x1000050d, 8), (unique, 0x1000050d, 8) INT_ADD (unique, 0x10000505, 8) , (register, 0x0, 8), (unique, 0x10000505, 8) CAST (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x100004fd, 8), (unique, 0x100004fd, 8) INT_ADD (register, 0x38, 8) , (unique, 0x100004f5, 8), (unique, 0x100004f5, 8) CAST (register, 0x28, 8)]
[(register, 0x28, 8) CAST (unique, 0x1000051d, 8), (unique, 0x1000051d, 8) INT_ADD (unique, 0x10000515, 8) , (register, 0x30, 8), (unique, 0x10000515, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000050d, 8), (unique, 0x1000050d, 8) INT_ADD (unique, 0x10000505, 8) , (register, 0x0, 8), (unique, 0x10000505, 8) CAST (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x100004fd, 8), (unique, 0x100004fd, 8) INT_ADD (register, 0x38, 8) , (unique, 0x100004f5, 8), (unique, 0x100004f5, 8) CAST (register, 0x28, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2ce, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2b9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2b6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2ad, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x2ce, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x2b9, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x2b6, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x2ad, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000525, 8) , (stack, 0xfffffffffffffb78, 4), (unique, 0x10000525, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x8, 8), (stack, 0xfffffffffffffb78, 4) SUBPIECE (stack, 0xfffffffffffffb78, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x25f0b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5da, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5da, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x5da, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5da, 4)]
[ ---  CALL (ram, 0x121160, 8) , (register, 0x38, 8) , (register, 0x98, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) INT_ADD (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb74, 4)]
[ ---  BRANCH (ram, 0x25ef96, 1)]
[ ---  CBRANCH (ram, 0x25f288, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb7c, 4) , (const, 0x0, 4)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x53a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x53a, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x53a, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x53a, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x53a, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x53a, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x53a, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x53a, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x53a, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x53a, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x53a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x53a, 4)]
[(unique, 0x1000040d, 8) COPY (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x53a, 4)]
[(unique, 0x1000045d, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x25ee99, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d1f0, 8) , (unique, 0x3c80, 8) , (register, 0x30, 8) , (const, 0x4, 8), (register, 0x30, 8) INT_SEXT (stack, 0xfffffffffffffb7c, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5ac, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5ac, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x5ac, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x5ac, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x5ac, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x5ac, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x5ac, 4), (stack, 0xfffffffffffffb88, 8) COPY (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (register, 0x10, 8) , (const, 0x5ac, 4), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (stack, 0xfffffffffffffb7c, 4), (stack, 0xfffffffffffffb7c, 4) SUBPIECE (stack, 0xfffffffffffffb78, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x5ac, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (register, 0x0, 8) , (const, 0x5ac, 4), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb70, 4), (stack, 0xfffffffffffffb70, 4) SUBPIECE (stack, 0xfffffffffffffb68, 16) , (const, 0x8, 8), (stack, 0xfffffffffffffb74, 4) SUBPIECE (stack, 0xfffffffffffffb68, 16) , (const, 0xc, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x5ac, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x5ac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5ac, 4)]
[(unique, 0x1000046d, 8) COPY (unique, 0x1000040d, 8)]
[ ---  CBRANCH (ram, 0x25ef7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x261da0, 8) , (register, 0x8, 4) , (unique, 0x3c80, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x0, 4) INT_ADD (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb70, 4), (stack, 0xfffffffffffffb70, 4) SUBPIECE (stack, 0xfffffffffffffb68, 16) , (const, 0x8, 8), (stack, 0xfffffffffffffb74, 4) SUBPIECE (stack, 0xfffffffffffffb68, 16) , (const, 0xc, 8), (register, 0x10, 8) INT_SEXT (stack, 0xfffffffffffffb7c, 4), (stack, 0xfffffffffffffb7c, 4) SUBPIECE (stack, 0xfffffffffffffb78, 8) , (const, 0x4, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2fd, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2fd, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x2fd, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2fd, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x2fd, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x2fd, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2fd, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2fd, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x2fd, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x2fd, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2fd, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2fd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2fd, 4)]
[(unique, 0x10000415, 8) COPY (register, 0xa8, 8)]
[(unique, 0x10000425, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x25ee99, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x261ba0, 8) , (register, 0x8, 4) , (register, 0x38, 8) , (register, 0x80, 8), (register, 0x80, 8) INT_SEXT (register, 0x80, 4), (register, 0x80, 4) INT_ADD (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffb7c, 4) SUBPIECE (stack, 0xfffffffffffffb78, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(unique, 0x10000475, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x10000415, 8) , (unique, 0x1000040d, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000475, 8) , (register, 0xa8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x32d, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x32d, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (register, 0xb8, 4), (unique, 0xbd80, 8) CAST (unique, 0x1000052d, 8), (unique, 0x1000052d, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x3, 8) , (const, 0x8, 8), (register, 0xb8, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[ ---  CBRANCH (ram, 0x25f228, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[ ---  CBRANCH (ram, 0x25f270, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x90, 8) , (unique, 0x1000053d, 8), (unique, 0x1000053d, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x10000535, 8) , (register, 0x88, 8), (unique, 0x10000535, 8) CAST (register, 0x98, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x25f000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (const, 0x0, 8)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x52d, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x52d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0x8, 8) , (unique, 0x10000545, 8), (unique, 0x10000545, 8) CAST (register, 0x8, 8)]
[(unique, 0x10000455, 8) COPY (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x25ee99, 1)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8), (register, 0x30, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (register, 0xb8, 4) , (const, 0x1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x35b, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x35b, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x28, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x28, 8) CAST (unique, 0x10000555, 8), (unique, 0x10000555, 8) INT_ADD (unique, 0x1000054d, 8) , (register, 0x10, 8), (unique, 0x1000054d, 8) CAST (register, 0x28, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x25efc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x25f270, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x90, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x3400, 8) , (unique, 0x1000055d, 8), (unique, 0x1000055d, 8) CAST (register, 0x98, 8), (unique, 0x3400, 8) INT_ADD (register, 0xb8, 8) , (register, 0x88, 8)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x25f02c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x25f1e8, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x25f208, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (const, 0x0, 8)]
[(register, 0xb8, 4) COPY (const, 0xfffffffe, 4)]
[(unique, 0x10000445, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x25ee99, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xfffffffffffffb64, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000565, 8), (unique, 0x10000565, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0xb8, 4) COPY (const, 0x22, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4ef, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x4ef, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000056d, 8) , (const, 0x22, 4), (unique, 0x1000056d, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x1000044d, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x25ee99, 1)]
[ ---  CBRANCH (ram, 0x25f100, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3be, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3be, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x3be, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x3be, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x3be, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x3be, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x3be, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x3be, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x3be, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x3be, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x3be, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x3be, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3be, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0xbd80, 8) , (register, 0x30, 8) , (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (register, 0x30, 8) CAST (unique, 0x1000057d, 8), (unique, 0x1000057d, 8) INT_ADD (unique, 0x10000575, 8) , (register, 0x88, 8), (unique, 0x10000575, 8) CAST (register, 0x98, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x25f120, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000058d, 8), (unique, 0x1000058d, 8) INT_ADD (unique, 0x10000585, 8) , (unique, 0x100003a2, 8), (unique, 0x10000585, 8) CAST (unique, 0xbd80, 8), (unique, 0x100003a2, 8) INT_ADD (register, 0x88, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x25f02c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000059d, 8), (unique, 0x1000059d, 8) INT_ADD (unique, 0x10000595, 8) , (unique, 0x100003ba, 8), (unique, 0x10000595, 8) CAST (unique, 0xbd80, 8), (unique, 0x100003ba, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffb74, 4), (stack, 0xfffffffffffffb74, 4) SUBPIECE (stack, 0xfffffffffffffb68, 16) , (const, 0xc, 8)]
[ ---  CBRANCH (ram, 0x25f109, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (stack, 0xfffffffffffffb7c, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffb7c, 4) SUBPIECE (stack, 0xfffffffffffffb78, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x25f02c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100005a5, 8), (unique, 0x100005a5, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[(register, 0x38, 8) INT_ADD (register, 0x38, 8) , (const, 0x1, 8), (register, 0x38, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (stack, 0xfffffffffffffb7c, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x25f18a, 1)]
[ ---  CBRANCH (ram, 0x25f170, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x25f02c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100005c5, 8), (unique, 0x100005c5, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100005bd, 8), (unique, 0x100005bd, 8) INT_ADD (unique, 0x100005b5, 8) , (unique, 0x100005ad, 8), (unique, 0x100005b5, 8) CAST (unique, 0xbd80, 8), (unique, 0x100005ad, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (register, 0x0, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) INT_SUB (unique, 0x100001d2, 4) , (const, 0x2, 4), (unique, 0x100001d2, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xfffffffffffffb64, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005cd, 8), (unique, 0x100005cd, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(unique, 0x1000042d, 8) COPY (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x25ee99, 1)]
[ ---  CBRANCH (ram, 0x25f198, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4b4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4b4, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x4b4, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x4b4, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x4b4, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x4b4, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x4b4, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x4b4, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x4b4, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x4b4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4b4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4b4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4b4, 4)]
[ ---  CBRANCH (ram, 0x25f109, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0xb8, 8), (register, 0x0, 8) CALL (ram, 0x261ba0, 8) , (register, 0x8, 4) , (unique, 0xbd80, 8) , (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(register, 0xb8, 4) COPY (const, 0x2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4c7, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x4c7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005d5, 8) , (const, 0x2, 4), (unique, 0x100005d5, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x1000043d, 8) COPY (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x25ee99, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x471, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x471, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0x8, 8) , (unique, 0x100005dd, 8), (unique, 0x100005dd, 8) CAST (register, 0x8, 8)]
[(unique, 0x10000435, 8) COPY (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x25ee99, 1)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x20f, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x20f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005e5, 8) , (const, 0x0, 4), (unique, 0x100005e5, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x1000041d, 8) COPY (register, 0xa8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xfffffffffffffb08, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xfffffffffffffb08, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (stack, 0xfffffffffffffb6c, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x1000041d, 8) , (unique, 0x10000425, 8) , (unique, 0x1000042d, 8) , (unique, 0x10000435, 8) , (unique, 0x1000043d, 8) , (unique, 0x10000445, 8) , (unique, 0x1000044d, 8) , (unique, 0x10000455, 8) , (unique, 0x1000045d, 8) , (unique, 0x10000465, 8) , (unique, 0x1000046d, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x25eea5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x21e, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21e, 4)]
[ ---  CALL (ram, 0x210940, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x25ed7d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0xffffffffffffffff, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x25ed6f, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (unique, 0x5300, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x25edc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb64, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005ed, 8), (unique, 0x100005ed, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xed, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0xed, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005fd, 8) , (unique, 0xbd00, 4), (unique, 0x100005fd, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005f5, 8), (unique, 0x100005f5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x10000499, 4) COPY (stack, 0xfffffffffffffb64, 4)]
[ ---  CBRANCH (ram, 0x25edef, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000605, 8), (unique, 0x10000605, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x100004a1, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x25ee00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000113, 4) , (const, 0x0, 4), (unique, 0x10000113, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x25ee00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0x5, 4), (register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x25ed0b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0xffffffff, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x17d, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x17d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000615, 8) , (unique, 0xbd00, 4), (unique, 0x10000615, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000060d, 8), (unique, 0x1000060d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x25f250, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000061d, 8), (unique, 0x1000061d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x146, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x146, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x146, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x146, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (unique, 0x10000499, 4) , (unique, 0x100004a1, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x146, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x146, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x146, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x146, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x146, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x146, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x146, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x146, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x146, 4)]
[ ---  CALL (ram, 0x262050, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x25ed7d, 1)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x193, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x193, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000062d, 8) , (unique, 0xbd00, 4), (unique, 0x1000062d, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000625, 8), (unique, 0x10000625, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x25f260, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000635, 8), (unique, 0x10000635, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5f2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5f2, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (unique, 0x100004a1, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f2, 4)]
[ ---  CALL (ram, 0x262050, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x25ee0b, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (unique, 0x100004a1, 4) , (stack, 0xfffffffffffffb64, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x25f250, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (unique, 0x100004a1, 4) , (stack, 0xfffffffffffffb64, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x25ed7d, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x25ed98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffba8, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x113, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x113, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x113, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x113, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 16) MULTIEQUAL (stack, 0xfffffffffffffb68, 16) , (stack, 0xfffffffffffffb68, 16)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 4) COPY (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x25f347, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000063d, 8), (unique, 0x1000063d, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4f0a90, 4) COPY (ram, 0x4f0a90, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffb68, 16) INDIRECT (stack, 0xfffffffffffffb68, 16) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x140, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x140, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x140, 4)]
[(ram, 0x4f0a90, 4) COPY (ram, 0x4f0a90, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x140, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x90, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(register, 0x18, 8) COPY (const, 0xffffffffffffffff, 8)]
