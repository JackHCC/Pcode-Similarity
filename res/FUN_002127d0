[(register, 0x20, 8) PTRADD (unique, 0x10000576, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x10000576, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100006c6, 8), (unique, 0x100006c6, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x212c96, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x451, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x451, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006ce, 8) , (const, 0x2, 4), (unique, 0x100006ce, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x212b1b, 1)]
[(unique, 0x10000676, 4) COPY (register, 0x10, 4), (register, 0x10, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x212809, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (const, 0x0, 4) , (register, 0x8, 4)]
[(unique, 0x1000067a, 4) COPY (register, 0x8, 4)]
[(register, 0x20, 8) CAST (unique, 0x100006de, 8), (unique, 0x100006de, 8) INT_ADD (unique, 0x100006d6, 8) , (unique, 0x1000058e, 8), (unique, 0x100006d6, 8) CAST (unique, 0x10000596, 8), (unique, 0x10000596, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8), (unique, 0x1000058e, 8) INT_ADD (unique, 0x1000011a, 8) , (const, 0x8, 8), (unique, 0x1000011a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x1e, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10000676, 4) , (unique, 0x1000067a, 4)]
[(register, 0x20, 8) CAST (unique, 0x100006ee, 8), (unique, 0x100006ee, 8) INT_ADD (unique, 0x100006e6, 8) , (unique, 0x100005ae, 8), (unique, 0x100006e6, 8) CAST (unique, 0x100005b6, 8), (unique, 0x100005b6, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8), (unique, 0x100005ae, 8) INT_ADD (unique, 0x1000011a, 8) , (const, 0x8, 8), (unique, 0x1000011a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x1e, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10000676, 4) , (unique, 0x1000067a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x21284d, 8), (register, 0x20, 8) CAST (unique, 0x1000070e, 8), (unique, 0x1000070e, 8) INT_ADD (unique, 0x10000706, 8) , (unique, 0x1000011a, 8), (unique, 0x10000706, 8) CAST (unique, 0x10000291, 8), (unique, 0x10000291, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8), (unique, 0x1000011a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x1e, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10000676, 4) , (unique, 0x1000067a, 4)]
[ ---  CALL (ram, 0x1211f0, 8) , (unique, 0x3800, 8) , (const, 0x0, 4) , (register, 0x10, 8), (unique, 0x3800, 8) CAST (unique, 0x100006fe, 8), (unique, 0x100006fe, 8) INT_ADD (unique, 0x100006f6, 8) , (unique, 0x1000011a, 8), (unique, 0x100006f6, 8) CAST (unique, 0x1000055d, 8), (unique, 0x1000055d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec0, 8), (unique, 0x1000011a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x1e, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10000676, 4) , (unique, 0x1000067a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212855, 8), (register, 0x20, 8) CAST (unique, 0x1000071e, 8), (unique, 0x1000071e, 8) INT_ADD (unique, 0x10000716, 8) , (unique, 0x1000011a, 8), (unique, 0x10000716, 8) CAST (unique, 0x10000299, 8), (unique, 0x10000299, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8), (unique, 0x1000011a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x1e, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10000676, 4) , (unique, 0x1000067a, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xae, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xaa, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xae, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xaa, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0xae, 4), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0xaa, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xae, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xad, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xaa, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xa9, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xae, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xad, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xaa, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xa9, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xae, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xad, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xaa, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xa9, 4), (stack, 0xfffffffffffffec8, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100006fe, 8), (unique, 0x100006fe, 8) INT_ADD (unique, 0x100006f6, 8) , (unique, 0x1000011a, 8), (unique, 0x100006f6, 8) CAST (unique, 0x1000055d, 8), (unique, 0x1000055d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec0, 8), (unique, 0x1000011a, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x1e, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10000676, 4) , (unique, 0x1000067a, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xae, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xad, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xaa, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xa9, 4), (stack, 0xfffffffffffffed0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xae, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xad, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xaa, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xa9, 4), (stack, 0xfffffffffffffed8, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10000676, 4) , (unique, 0x1000067a, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0xae, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0xad, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0xaa, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0xa9, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0xae, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0xad, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0xaa, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0xa9, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xae, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xad, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xaa, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xaa, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xaa, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xaa, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xaa, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xaa, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xaa, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xae, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xad, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xaa, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xae, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xad, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xaa, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa9, 4)]
[ ---  CBRANCH (ram, 0x212869, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x10000281, 8) , (const, 0x1000, 8), (unique, 0x10000281, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x38, 8)]
[(register, 0x38, 8) COPY (const, 0x1000, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212875, 8), (register, 0x20, 8) CAST (unique, 0x1000072e, 8), (unique, 0x1000072e, 8) INT_ADD (unique, 0x10000726, 8) , (unique, 0x1000011a, 8), (unique, 0x10000726, 8) CAST (unique, 0x100002a1, 8), (unique, 0x100002a1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc4, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0xc4, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc4, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc3, 4), (stack, 0xfffffffffffffee8, 8) COPY (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000281, 8) , (register, 0x38, 8)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0xc4, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0xc4, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xc4, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0xc3, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc3, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc3, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xc3, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc3, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xc3, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc4, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xc3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffee0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000736, 8), (unique, 0x10000736, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000281, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x212d10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000736, 8), (unique, 0x10000736, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000281, 8) , (register, 0x38, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x212b1b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212893, 8), (register, 0x20, 8) CAST (unique, 0x10000746, 8), (unique, 0x10000746, 8) INT_ADD (unique, 0x1000073e, 8) , (unique, 0x1000011a, 8), (unique, 0x1000073e, 8) CAST (unique, 0x100002a9, 8), (unique, 0x100002a9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd7, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0xd7, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xd6, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xd6, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd6, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xd6, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd6, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xd6, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd6, 4)]
[ ---  CBRANCH (ram, 0x2128a9, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121050, 8) , (register, 0x0, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x2128a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2128af, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xef, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0xef, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffef4, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000064e, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2128d5, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x1000063e, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000064e, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2128c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000064e, 8) , (register, 0x0, 8)]
[(unique, 0x10000646, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x212a28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffef0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x1000016c, 4) , (unique, 0x10000174, 4), (unique, 0x1000016c, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (unique, 0x10000174, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000063e, 8) , (unique, 0x10000646, 8) , (register, 0x0, 8)]
[(register, 0x0, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b1cf0, 8)]
[(stack, 0xfffffffffffffef8, 4) COPY (register, 0x80, 4)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffff18, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x212911, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(register, 0x0, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b1d10, 8)]
[(stack, 0xffffffffffffff00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x212a30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000017c, 4) , (const, 0x0, 4), (unique, 0x1000017c, 4) INT_AND (register, 0x80, 4) , (const, 0x4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212a43, 8), (register, 0x20, 8) CAST (unique, 0x10000756, 8), (unique, 0x10000756, 8) INT_ADD (unique, 0x1000074e, 8) , (unique, 0x1000011a, 8), (unique, 0x1000074e, 8) CAST (unique, 0x100002b1, 8), (unique, 0x100002b1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x319, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x319, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x318, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x319, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x318, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x319, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x318, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x319, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x318, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x319, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x318, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x319, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x318, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x319, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x318, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x319, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x318, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x319, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x318, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x319, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x318, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x319, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x318, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x319, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x318, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x319, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x318, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x319, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x318, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x319, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x318, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x319, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x318, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x319, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x318, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x319, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x318, 4)]
[(unique, 0x100005ee, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x319, 4)]
[ ---  CBRANCH (ram, 0x212c10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x20fc40, 8) , (unique, 0x1000040d, 8) , (const, 0x10000, 4), (unique, 0x1000040d, 8) COPY (const, 0x2b57d8, 8)]
[ ---  CBRANCH (ram, 0x212bf8, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xfffffffffffffed8, 8) , (const, 0x2, 8)]
[(stack, 0xfffffffffffffec0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x212a7d, 1)]
[(stack, 0xfffffffffffffec0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_SUB (stack, 0xfffffffffffffed8, 8) , (const, 0x1, 8)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x212af7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xd, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000075e, 8), (unique, 0x1000075e, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212c32, 8), (register, 0x20, 8) CAST (unique, 0x1000076e, 8), (unique, 0x1000076e, 8) INT_ADD (unique, 0x10000766, 8) , (unique, 0x1000011a, 8), (unique, 0x10000766, 8) CAST (unique, 0x100002b9, 8), (unique, 0x100002b9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3f2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3f2, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x3f2, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3f2, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3f1, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3f2, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3f1, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3f2, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3f1, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3f2, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3f1, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3f2, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3f1, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3f2, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3f1, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x3f2, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x3f1, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x3f2, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x3f1, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x3f2, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x3f1, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3f2, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3f1, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3f2, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3f1, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3f2, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3f1, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3f2, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3f1, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3f2, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3f1, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3f2, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3f1, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x3f2, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x3f1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3f2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3f1, 4)]
[(stack, 0xfffffffffffffec0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x210b50, 8) , (const, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x212a7d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x210b50, 8) , (const, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000061e, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffef0, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[ ---  CBRANCH (ram, 0x212c50, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (stack, 0xfffffffffffffef0, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[ ---  CBRANCH (ram, 0x212c82, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffef0, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212c8e, 8), (register, 0x20, 8) CAST (unique, 0x1000077e, 8), (unique, 0x1000077e, 8) INT_ADD (unique, 0x10000776, 8) , (unique, 0x1000011a, 8), (unique, 0x10000776, 8) CAST (unique, 0x100002f9, 8), (unique, 0x100002f9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3b9, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3b9, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3b8, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3b9, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3b8, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3b9, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x3b8, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3b9, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3b8, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3b9, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3b8, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3b9, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3b8, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3b9, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3b8, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x3b9, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x3b8, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x3b9, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x3b8, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x3b9, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x3b8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3b8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3b8, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3b8, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3b8, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3b8, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3b8, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x3b9, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x3b8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b8, 4)]
[(register, 0x0, 4) CALL (ram, 0x210af0, 8) , (unique, 0x10000405, 8), (unique, 0x10000405, 8) COPY (const, 0x2b525a, 8)]
[ ---  BRANCH (ram, 0x212aca, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffee0, 8) , (unique, 0x100004c5, 8) , (const, 0x1, 8), (unique, 0x100004c5, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212ab4, 8), (register, 0x20, 8) CAST (unique, 0x1000078e, 8), (unique, 0x1000078e, 8) INT_ADD (unique, 0x10000786, 8) , (unique, 0x1000011a, 8), (unique, 0x10000786, 8) CAST (unique, 0x100002d9, 8), (unique, 0x100002d9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x36e, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x36e, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x36d, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x36e, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x36d, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x36e, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x36d, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x36e, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x36d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x36e, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x36d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x36e, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x36d, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x36e, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x36d, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x36e, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x36e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x36e, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x36e, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x36e, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x36e, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x36e, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x36e, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x36e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x36d, 4)]
[(register, 0x0, 4) CALL (ram, 0x210af0, 8) , (unique, 0x1000061e, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x37b, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x36e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x368, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x37b, 4), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x36e, 4), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x368, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffee0, 8) , (unique, 0x100004d5, 8) , (const, 0x1, 8), (unique, 0x100004d5, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffef0, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x36e, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x36e, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x36d, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x36d, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffee0, 8) , (unique, 0x100004c5, 8) , (const, 0x1, 8), (unique, 0x100004c5, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x212c50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000066e, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x212939, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000354, 4) , (const, 0x0, 4), (unique, 0x10000354, 4) INT_AND (stack, 0xfffffffffffffef8, 4) , (const, 0x4, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[ ---  CBRANCH (ram, 0x212c7d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (stack, 0xfffffffffffffee0, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffef0, 4)]
[(register, 0xb8, 8) COPY (const, 0x2b57d8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000796, 8), (unique, 0x10000796, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x100005ee, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x100006a6, 8) COPY (stack, 0xfffffffffffffec0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000079e, 8), (unique, 0x1000079e, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x100005ee, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x212af7, 1)]
[(stack, 0xfffffffffffffec0, 8) COPY (const, 0x0, 8)]
[(register, 0xb0, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x1000065e, 8) COPY (ram, 0x4eae68, 8)]
[(unique, 0x10000666, 8) COPY (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000666, 8) , (unique, 0x1000066e, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x1000065e, 8) , (unique, 0x100005ee, 8) , (unique, 0x100005ee, 8) , (unique, 0x100005ee, 8)]
[(stack, 0xfffffffffffffeb8, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[ ---  CBRANCH (ram, 0x2129a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000180, 4) , (const, 0x0, 4), (unique, 0x10000180, 4) INT_AND (register, 0x80, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2129ad, 8), (register, 0x20, 8) CAST (unique, 0x100007ae, 8), (unique, 0x100007ae, 8) INT_ADD (unique, 0x100007a6, 8) , (unique, 0x1000011a, 8), (unique, 0x100007a6, 8) CAST (unique, 0x100002c9, 8), (unique, 0x100002c9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x265, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x265, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x265, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x265, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x264, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x265, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x264, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x265, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x264, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x265, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x264, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x265, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x264, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x265, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x264, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x265, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x264, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x265, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x264, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x265, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x264, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x265, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x264, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x265, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x264, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x265, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x264, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x265, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x264, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x265, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x264, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x265, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x264, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x265, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x264, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x265, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x264, 4)]
[(unique, 0x100005f6, 8) COPY (stack, 0xfffffffffffffeb8, 8), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x265, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x264, 4)]
[ ---  CBRANCH (ram, 0x212b40, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f760, 8) , (const, 0x1, 4) , (register, 0xb8, 8) , (unique, 0x100007b6, 8), (unique, 0x100007b6, 8) CAST (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x212caf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x4000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff40, 4) , (const, 0xf000, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212cc7, 8), (register, 0x20, 8) CAST (unique, 0x100007c6, 8), (unique, 0x100007c6, 8) INT_ADD (unique, 0x100007be, 8) , (unique, 0x1000011a, 8), (unique, 0x100007be, 8) CAST (unique, 0x10000301, 8), (unique, 0x10000301, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x291, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x291, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x291, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x291, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x290, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x291, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x290, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x291, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x290, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x291, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x290, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x291, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x290, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x291, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x290, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x291, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x290, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x291, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x290, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x291, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x290, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x291, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x290, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x291, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x290, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x291, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x290, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x291, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff10, 8) COPY (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x291, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x290, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x291, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x290, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x291, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x290, 4)]
[ ---  CBRANCH (ram, 0x212964, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100007ce, 8), (unique, 0x100007ce, 8) CALL (ram, 0x1212c0, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (stack, 0xffffffffffffff28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff30, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212cf8, 8), (register, 0x20, 8) CAST (unique, 0x100007de, 8), (unique, 0x100007de, 8) INT_ADD (unique, 0x100007d6, 8) , (unique, 0x1000011a, 8), (unique, 0x100007d6, 8) CAST (unique, 0x10000309, 8), (unique, 0x10000309, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2ac, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2ac, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2a8, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2a0, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x2ac, 4), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x2a8, 4), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x2a0, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2ac, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2ab, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2ac, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2ab, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2ac, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2ab, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2ac, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2ab, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2ac, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2ab, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2ac, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2ab, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2ac, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2ab, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x2ac, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x2ab, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x2ac, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x2ab, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x2ac, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2ab, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ac, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ab, 4)]
[ ---  CBRANCH (ram, 0x212bdb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x21d2e0, 8) , (register, 0x0, 8) , (unique, 0x3100, 8) , (unique, 0x100003f5, 8), (unique, 0x100003f5, 8) PTRSUB (const, 0x0, 8) , (const, 0x211dd0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x212969, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x2, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007e6, 8), (unique, 0x100007e6, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0xa0, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212b63, 8), (register, 0x20, 8) CAST (unique, 0x100007f6, 8), (unique, 0x100007f6, 8) INT_ADD (unique, 0x100007ee, 8) , (unique, 0x1000011a, 8), (unique, 0x100007ee, 8) CAST (unique, 0x100002e1, 8), (unique, 0x100002e1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2cf, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2cf, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x2cf, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2cf, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2ce, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2cf, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2ce, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2cf, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2ce, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2cf, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2ce, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2cf, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2ce, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x2cf, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x2ce, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x2cf, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x2ce, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x2cf, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x2ce, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2cf, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2ce, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2cf, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2ce, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2cf, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2ce, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2cf, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2ce, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2cf, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2ce, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2cf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ce, 4)]
[(unique, 0x1000062e, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2cf, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2ce, 4)]
[(unique, 0x10000606, 8) COPY (stack, 0xfffffffffffffeb8, 8), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2cf, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2ce, 4)]
[ ---  CBRANCH (ram, 0x212964, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f800, 8) , (const, 0x1, 4) , (register, 0xb8, 8) , (unique, 0x100005f6, 8)]
[ ---  CBRANCH (ram, 0x212964, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xa000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff40, 4) , (const, 0xf000, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212ba6, 8), (register, 0x20, 8) CAST (unique, 0x1000080e, 8), (unique, 0x1000080e, 8) INT_ADD (unique, 0x10000806, 8) , (unique, 0x1000011a, 8), (unique, 0x10000806, 8) CAST (unique, 0x100002e9, 8), (unique, 0x100002e9, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x307, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x307, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x307, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x307, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x307, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x307, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x307, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x307, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x307, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x307, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x307, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x307, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x307, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x307, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x307, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x307, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x307, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x307, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x305, 4)]
[(register, 0x0, 4) CALLIND (stack, 0xffffffffffffff08, 8) , (unique, 0x1000062e, 8) , (unique, 0x10000606, 8) , (unique, 0xbc80, 4) , (unique, 0x3200, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x305, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007fe, 8), (unique, 0x100007fe, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff00, 8) , (const, 0x18, 8) , (const, 0x1, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef0, 8)]
[ ---  BRANCH (ram, 0x212a02, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x21295c, 8), (register, 0x20, 8) CAST (unique, 0x1000081e, 8), (unique, 0x1000081e, 8) INT_ADD (unique, 0x10000816, 8) , (unique, 0x1000011a, 8), (unique, 0x10000816, 8) CAST (unique, 0x100002c1, 8), (unique, 0x100002c1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x140, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x140, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x140, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x140, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x13f, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x140, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x13f, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x140, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x13f, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x140, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x13f, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x140, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x13f, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x140, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x13f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x140, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x13f, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x140, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x13f, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x140, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x13f, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x140, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x140, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x140, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x140, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x140, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x140, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x140, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x140, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13f, 4)]
[ ---  CBRANCH (ram, 0x212bb0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f800, 8) , (const, 0x1, 4) , (register, 0xb8, 8) , (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x2129cb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff40, 4) , (const, 0xf000, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2129ff, 8), (register, 0x20, 8) CAST (unique, 0x10000836, 8), (unique, 0x10000836, 8) INT_ADD (unique, 0x1000082e, 8) , (unique, 0x1000011a, 8), (unique, 0x1000082e, 8) CAST (unique, 0x100002d1, 8), (unique, 0x100002d1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x260, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x260, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x260, 4), (ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x260, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x25e, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x260, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x25e, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x260, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x25e, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x260, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x25e, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x260, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x25e, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x260, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x25e, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x260, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x25e, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x260, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x25e, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x260, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x25e, 4), (stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x260, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x25e, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x260, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALLIND (stack, 0xffffffffffffff08, 8) , (unique, 0x10000616, 8) , (unique, 0x100005fe, 8) , (unique, 0xbc80, 4) , (unique, 0x3200, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x25e, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000826, 8), (unique, 0x10000826, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff00, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_ZEXT (register, 0x206, 1), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef0, 8), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xa000, 4), (unique, 0x100005fe, 8) COPY (stack, 0xfffffffffffffeb8, 8), (unique, 0x10000616, 8) COPY (stack, 0xfffffffffffffee0, 8), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (stack, 0xffffffffffffff28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212bec, 8), (register, 0x20, 8) CAST (unique, 0x10000846, 8), (unique, 0x10000846, 8) INT_ADD (unique, 0x1000083e, 8) , (unique, 0x1000011a, 8), (unique, 0x1000083e, 8) CAST (unique, 0x100002f1, 8), (unique, 0x100002f1, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1eb, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1eb, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x1eb, 4), (ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1eb, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1ea, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1eb, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1ea, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1eb, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1ea, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1eb, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1ea, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1eb, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1ea, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1eb, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1ea, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1eb, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1ea, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x1eb, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x1ea, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x1eb, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x1ea, 4), (stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1eb, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1ea, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1eb, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1ea, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1eb, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1ea, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1eb, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1ea, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1eb, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1ea, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1eb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ea, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALL (ram, 0x212130, 8) , (register, 0xa8, 8) , (unique, 0x1000060e, 8) , (const, 0x0, 8), (register, 0xa8, 8) PTRADD (unique, 0x100005ce, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x100005ce, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec0, 8), (unique, 0x1000060e, 8) COPY (stack, 0xfffffffffffffeb8, 8), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[ ---  BRANCH (ram, 0x212a02, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000084e, 8), (unique, 0x1000084e, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0xa0, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000069e, 8) COPY (stack, 0xfffffffffffffec0, 8), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[ ---  CBRANCH (ram, 0x212ad8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 4) , (const, 0x0, 4), (register, 0x18, 4) INT_AND (register, 0x80, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x212a20, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) INT_SUB (register, 0xb8, 4) , (const, 0x2, 4)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000856, 8), (unique, 0x10000856, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0xa0, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x10000696, 8) COPY (stack, 0xfffffffffffffec0, 8), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(unique, 0x1000035c, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (unique, 0x100005ee, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0x10000364, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000036c, 4) MULTIEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000374, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x1000037c, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(unique, 0x10000384, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(unique, 0x10000394, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x1000039c, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(unique, 0x100003a4, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x100003ac, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x100003b4, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x100003bc, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(unique, 0x100003c0, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(unique, 0x100003c4, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(unique, 0x100003c8, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x100003d0, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x100003d8, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x100003e0, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(unique, 0x100003e8, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100003f0, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0x0, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(unique, 0x100006be, 8) COPY (unique, 0x1000038c, 8), (unique, 0x1000038c, 8) MULTIEQUAL (unique, 0x10000696, 8) , (unique, 0x1000069e, 8) , (unique, 0x100006a6, 8) , (unique, 0x1000069e, 8) , (unique, 0x1000069e, 8)]
[ ---  CBRANCH (ram, 0x212979, 1) , (unique, 0x1000035b, 1), (unique, 0x1000035b, 1) INT_EQUAL (unique, 0x10000370, 4) , (const, 0xffffffff, 4), (unique, 0x10000370, 4) MULTIEQUAL (register, 0xb0, 4) , (register, 0xb0, 4) , (register, 0x0, 4) , (register, 0xb0, 4) , (register, 0xb0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212aea, 8), (register, 0x20, 8) CAST (unique, 0x10000866, 8), (unique, 0x10000866, 8) INT_ADD (unique, 0x1000085e, 8) , (unique, 0x1000011a, 8), (unique, 0x1000085e, 8) CAST (unique, 0x10000321, 8), (unique, 0x10000321, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[ ---  CALL (ram, 0x210b20, 8) , (unique, 0x10000370, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212af2, 8), (register, 0x20, 8) CAST (unique, 0x10000876, 8), (unique, 0x10000876, 8) INT_ADD (unique, 0x1000086e, 8) , (unique, 0x1000011a, 8), (unique, 0x1000086e, 8) CAST (unique, 0x10000329, 8), (unique, 0x10000329, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1b5, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (unique, 0x10000384, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1b5, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (unique, 0x100006be, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1b5, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (unique, 0x10000394, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1b5, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (unique, 0x1000039c, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1b5, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x100003a4, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1b5, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x100003ac, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1b6, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1b5, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1b1, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x100003b4, 8) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x1b6, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x1b5, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x1b1, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (unique, 0x100003bc, 4) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x1b6, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x1b5, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x1b1, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (unique, 0x100003c0, 4) , (const, 0x1b0, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1b6, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1b5, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1b1, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (unique, 0x100003c4, 4) , (const, 0x1b0, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1b1, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x100003c8, 8) , (const, 0x1b0, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1b1, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x100003d0, 8) , (const, 0x1b0, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1b1, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x100003d8, 8) , (const, 0x1b0, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1b1, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x100003e0, 8) , (const, 0x1b0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100003e8, 8) , (const, 0x1b0, 4)]
[ ---  CALL (ram, 0x210940, 8) , (unique, 0x10000370, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b6, 4), (ram, 0x4eae68, 8) INDIRECT (unique, 0x10000374, 8) , (const, 0x1b1, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x1b9, 4), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x1b6, 4), (ram, 0x4eaf98, 8) INDIRECT (unique, 0x1000037c, 8) , (const, 0x1b1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000087e, 8) , (unique, 0x1000036c, 4), (unique, 0x1000087e, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x1000035c, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b6, 4), (register, 0x110, 8) INDIRECT (unique, 0x10000364, 8) , (const, 0x1b1, 4)]
[ ---  CBRANCH (ram, 0x212af7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000038c, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212991, 8), (register, 0x20, 8) CAST (unique, 0x1000088e, 8), (unique, 0x1000088e, 8) INT_ADD (unique, 0x10000886, 8) , (unique, 0x1000011a, 8), (unique, 0x10000886, 8) CAST (unique, 0x10000311, 8), (unique, 0x10000311, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[ ---  CALL (ram, 0x210af0, 8) , (unique, 0x1000038c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212999, 8), (register, 0x20, 8) CAST (unique, 0x1000089e, 8), (unique, 0x1000089e, 8) INT_ADD (unique, 0x10000896, 8) , (unique, 0x1000011a, 8), (unique, 0x10000896, 8) CAST (unique, 0x10000319, 8), (unique, 0x10000319, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x170, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x16f, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x16c, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (unique, 0x10000384, 8) , (const, 0x16b, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x170, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x16f, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x16c, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (unique, 0x100006be, 8) , (const, 0x16b, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x170, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x16f, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x16c, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (unique, 0x10000394, 8) , (const, 0x16b, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x170, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x16f, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x16c, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (unique, 0x1000039c, 8) , (const, 0x16b, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x170, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x16f, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x16c, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x100003a4, 8) , (const, 0x16b, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x170, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x16f, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x16c, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x100003ac, 8) , (const, 0x16b, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x170, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x16f, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x16c, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x100003b4, 8) , (const, 0x16b, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x170, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x16f, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x16c, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (unique, 0x100003bc, 4) , (const, 0x16b, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x170, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x16f, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x16c, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (unique, 0x100003c0, 4) , (const, 0x16b, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x170, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x16f, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x16c, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (unique, 0x100003c4, 4) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x16f, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x100003c8, 8) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x16f, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x100003d0, 8) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x16f, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x100003d8, 8) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x170, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x16f, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x100003e0, 8) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x170, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100003e8, 8) , (const, 0x16b, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x1000038c, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x173, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x170, 4), (ram, 0x4eae68, 8) INDIRECT (unique, 0x10000374, 8) , (const, 0x16c, 4)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x173, 4), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x170, 4), (ram, 0x4eaf98, 8) INDIRECT (unique, 0x1000037c, 8) , (const, 0x16c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008a6, 8) , (unique, 0x1000036c, 4), (unique, 0x100008a6, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x1000035c, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x170, 4), (register, 0x110, 8) INDIRECT (unique, 0x10000364, 8) , (const, 0x16c, 4)]
[ ---  BRANCH (ram, 0x212af7, 1)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x100003f0, 4) , (unique, 0x100003f0, 4) , (unique, 0x100003f0, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212b0a, 8), (register, 0x20, 8) CAST (unique, 0x100008b6, 8), (unique, 0x100008b6, 8) INT_ADD (unique, 0x100008ae, 8) , (unique, 0x1000011a, 8), (unique, 0x100008ae, 8) CAST (unique, 0x10000331, 8), (unique, 0x10000331, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[ ---  CALL (ram, 0x21dd80, 8) , (unique, 0x10000636, 8) , (unique, 0x100008be, 8), (unique, 0x100008be, 8) CAST (ram, 0x4eaf98, 8), (unique, 0x10000636, 8) COPY (stack, 0xffffffffffffff18, 8), (ram, 0x4eaf98, 8) MULTIEQUAL (unique, 0x1000037c, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (unique, 0x100003e0, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x212b16, 8), (register, 0x20, 8) CAST (unique, 0x100008ce, 8), (unique, 0x100008ce, 8) INT_ADD (unique, 0x100008c6, 8) , (unique, 0x1000011a, 8), (unique, 0x100008c6, 8) CAST (unique, 0x10000339, 8), (unique, 0x10000339, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x180, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x17a, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (unique, 0x10000384, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x180, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x17a, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (unique, 0x100006be, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x180, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x17a, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (unique, 0x10000394, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x180, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x17a, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (unique, 0x1000039c, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x180, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x17a, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (unique, 0x100003a4, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x180, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x17a, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (unique, 0x100003ac, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x181, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x180, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x17a, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (unique, 0x100003b4, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x181, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x180, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x17b, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x17a, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (unique, 0x100003bc, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x181, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x180, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x17b, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x17a, 4), (stack, 0xfffffffffffffef4, 4) MULTIEQUAL (unique, 0x100003c0, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x181, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x180, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x17b, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x17a, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (unique, 0x100003c4, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x180, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (unique, 0x100003c8, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x180, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (unique, 0x100003d0, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x180, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (unique, 0x100003d8, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x180, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (unique, 0x100003e0, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x181, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x180, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x100003e8, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000626, 8), (unique, 0x10000626, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x17b, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x17a, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (unique, 0x100003ac, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x184, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x181, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x17b, 4), (ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x10000374, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x184, 4), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x181, 4), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x17b, 4), (ram, 0x4eaf98, 8) MULTIEQUAL (unique, 0x1000037c, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008d6, 8) , (register, 0xa8, 4), (unique, 0x100008d6, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0xa0, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x181, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17b, 4), (register, 0xa0, 8) MULTIEQUAL (unique, 0x1000035c, 8) , (unique, 0x1000035c, 8) , (unique, 0x1000035c, 8) , (unique, 0x100005ee, 8) , (unique, 0x100005ee, 8), (register, 0xa8, 4) MULTIEQUAL (unique, 0x1000036c, 4) , (unique, 0x1000036c, 4) , (unique, 0x1000036c, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (register, 0x110, 8) MULTIEQUAL (unique, 0x10000364, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000656, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(ram, 0x4eaf98, 8) MULTIEQUAL (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8) , (ram, 0x4eaf98, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000656, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x212d1b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100008de, 8), (unique, 0x100008de, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x100003fd, 8), (unique, 0x100003fd, 8) PTRSUB (const, 0x0, 8) , (const, 0x212d20, 8), (register, 0x20, 8) CAST (unique, 0x100008ee, 8), (unique, 0x100008ee, 8) INT_ADD (unique, 0x100008e6, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100008e6, 8) CAST (register, 0x20, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1a9, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1a9, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1a9, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1a9, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1a9, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1a9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1aa, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1a9, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x1aa, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x1a9, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x1aa, 4), (stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x1a9, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1aa, 4), (stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1a9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1aa, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1a9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1aa, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1a9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1aa, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1a9, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1aa, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1a9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1aa, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a9, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1aa, 4)]
[(ram, 0x4eaf98, 8) COPY (ram, 0x4eaf98, 8), (ram, 0x4eaf98, 8) INDIRECT (ram, 0x4eaf98, 8) , (const, 0x1aa, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4eaf98, 8) COPY (ram, 0x4eaf98, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
