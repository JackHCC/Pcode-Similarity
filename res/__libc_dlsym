[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000cf, 8), (unique, 0x100000cf, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x100000bf, 8) COPY (register, 0x38, 8)]
[(unique, 0x100000c7, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x266580, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100000d7, 8), (unique, 0x100000d7, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (ram, 0x4eae58, 8) , (const, 0x148, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6d, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x6d, 4)]
[(ram, 0x4f04a8, 8) INDIRECT (ram, 0x4f04a8, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6d, 4), (stack, 0xffffffffffffffc0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (unique, 0x100000bf, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x100000c7, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x6d, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x6d, 4)]
[ ---  CBRANCH (ram, 0x2665d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x267340, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x10000077, 8) , (unique, 0x3800, 8), (unique, 0x10000077, 8) PTRSUB (const, 0x0, 8) , (const, 0x2663c0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb7, 8)]
[ ---  CBRANCH (ram, 0x2665d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2665e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb7, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc7, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0xc7, 4)]
[(ram, 0x4f04a8, 8) INDIRECT (ram, 0x4f04a8, 8) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xc7, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xc7, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x266569, 1)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x266569, 1)]
[ ---  CBRANCH (ram, 0x2665c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffd8, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100000df, 8), (unique, 0x100000df, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffffd8, 8)]
[(register, 0x0, 8) INT_ADD (unique, 0x100000ef, 8) , (unique, 0xbd80, 8), (unique, 0x100000ef, 8) CAST (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100000e7, 8), (unique, 0x100000e7, 8) INT_ADD (stack, 0xffffffffffffffe0, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x266569, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3d, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x3d, 4)]
[(ram, 0x4f04a8, 8) INDIRECT (ram, 0x4f04a8, 8) , (const, 0x3d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3d, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (unique, 0x100000bf, 8) , (const, 0x3d, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x100000c7, 8) , (const, 0x3d, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3d, 4)]
[(register, 0x0, 8) CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100000f7, 8), (unique, 0x100000f7, 8) INT_ADD (ram, 0x4f04a8, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4f04a8, 8) MULTIEQUAL (ram, 0x4f04a8, 8) , (ram, 0x4f04a8, 8) , (ram, 0x4f04a8, 8) , (ram, 0x4f04a8, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2665f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffff0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000ff, 8), (unique, 0x100000ff, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5c, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x5c, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x5c, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x5c, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8), (ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x5c, 4)]
[(ram, 0x4f04a8, 8) COPY (ram, 0x4f04a8, 8), (ram, 0x4f04a8, 8) INDIRECT (ram, 0x4f04a8, 8) , (const, 0x5c, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8)]
[(ram, 0x4f04a8, 8) COPY (ram, 0x4f04a8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
