[(stack, 0xffffffffffffffac, 4) SUBPIECE (stack, 0xffffffffffffffa8, 8) , (const, 0x4, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x4886d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c0, 1) , (const, 0x1, 1)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x99f, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x99f, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x99f, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x99f, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x99f, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x99f, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x99f, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x99f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x99f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x99f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x99f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x99f, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x99f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x99f, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x10000428, 8), (unique, 0x10000428, 8) COPY (const, 0x4b09f7, 8)]
[ ---  BRANCH (ram, 0x488005, 1)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[ ---  CBRANCH (ram, 0x4884b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7fa0, 8) , (const, 0x0, 8), (ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x809, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x809, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x809, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x809, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x809, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x809, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x809, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x809, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x809, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x809, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x809, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x809, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x809, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x809, 4)]
[ ---  CBRANCH (ram, 0x488564, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CAST (unique, 0x1000076f, 8), (unique, 0x1000076f, 8) CALL (ram, 0x485280, 8) , (unique, 0x10000420, 8) , (unique, 0x10000448, 8) , (const, 0x1, 8), (unique, 0x10000448, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7f90, 8), (unique, 0x10000420, 8) COPY (const, 0x4b09e6, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488540, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (ram, 0x4c7f90, 8) , (const, 0x31, 8)]
[ ---  CBRANCH (ram, 0x488559, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (ram, 0x4c7f90, 8) , (const, 0x11, 8)]
[ ---  CBRANCH (ram, 0x488546, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_OR (register, 0x10, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_XOR (unique, 0xbd80, 8) , (const, 0x646c2d6362696c67, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x10, 8) INT_XOR (unique, 0xbd80, 8) , (const, 0x686361632e6f732e, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488546, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x312e3165, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000777, 8), (unique, 0x10000777, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488773, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x2e312d6f732e646c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488559, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x2e37, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000077f, 8), (unique, 0x1000077f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488559, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x30, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000078f, 8), (unique, 0x1000078f, 8) INT_ADD (unique, 0x10000787, 8) , (const, 0xa, 8), (unique, 0x10000787, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488559, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 8) , (register, 0x8, 8), (register, 0x10, 8) INT_DIV (unique, 0x3800, 8) , (const, 0xc, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000079f, 8), (unique, 0x1000079f, 8) INT_ADD (unique, 0x10000797, 8) , (const, 0xc, 8), (unique, 0x10000797, 8) CAST (register, 0x0, 8), (unique, 0x3800, 8) INT_SUB (ram, 0x4c7f90, 8) , (const, 0x10, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100007af, 8), (unique, 0x100007af, 8) INT_ADD (unique, 0x100007a7, 8) , (register, 0x0, 8), (unique, 0x100007a7, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x17, 8), (unique, 0x3480, 8) INT_MULT (register, 0x8, 8) , (const, 0xc, 8)]
[ ---  CBRANCH (ram, 0x488805, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (ram, 0x4c7f90, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x17, 8), (unique, 0x3480, 8) INT_MULT (register, 0x8, 8) , (const, 0xc, 8)]
[ ---  CBRANCH (ram, 0x488805, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_OR (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_XOR (unique, 0xbd80, 8) , (const, 0x646c2d6362696c67, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (register, 0x8, 8) INT_XOR (unique, 0xbd80, 8) , (const, 0x686361632e6f732e, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488848, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x312e3165, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007b7, 8), (unique, 0x100007b7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x1000066f, 8) COPY (ram, 0x4c7f98, 8), (ram, 0x4c7f98, 8) COPY (const, 0xffffffffffffffff, 8)]
[(unique, 0x100006a7, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x488026, 1)]
[(unique, 0x10000677, 8) COPY (unique, 0x3400, 8)]
[(unique, 0x100006af, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488026, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007c7, 8), (unique, 0x100007c7, 8) INT_ADD (unique, 0x100007bf, 8) , (const, 0x1c, 8), (unique, 0x100007bf, 8) CAST (unique, 0x3400, 8)]
[(unique, 0x1000067f, 8) COPY (unique, 0x3400, 8)]
[(unique, 0x100006b7, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488026, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x2, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x3, 1)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x970, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x970, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x970, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x970, 4), (ram, 0x4c7f98, 8) COPY (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x970, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x970, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x970, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x970, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x970, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x970, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x970, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x970, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x970, 4)]
[ ---  CALL (ram, 0x4562a0, 8) , (register, 0x0, 8) , (ram, 0x4c7f90, 8)]
[ ---  CBRANCH (ram, 0x488015, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7fa0, 8) , (const, 0x0, 8), (ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x970, 4), (ram, 0x4c7fa0, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10000438, 8) , (unique, 0x10000430, 8) , (const, 0x105, 4) , (unique, 0x10000440, 8), (unique, 0x10000440, 8) COPY (const, 0x4b0a50, 8), (unique, 0x10000438, 8) COPY (const, 0x4b0a35, 8), (unique, 0x10000430, 8) COPY (const, 0x4b0a2a, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4), (ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x983, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x983, 4)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8), (ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x983, 4)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8), (ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x983, 4)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8), (ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x983, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x983, 4)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8), (ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x983, 4)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4), (ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x983, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(unique, 0x10000697, 8) COPY (ram, 0x4c7f98, 8), (ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(unique, 0x100006cf, 8) COPY (ram, 0x4c7fa0, 8), (ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7fa0, 8) , (const, 0xffffffffffffffff, 8), (ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x892, 4)]
[ ---  CALL (ram, 0x4562a0, 8) , (register, 0x0, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4), (ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x892, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x892, 4)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8), (ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x892, 4)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8), (ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x892, 4)]
[(ram, 0x4c7fa0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x892, 4)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8), (ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x892, 4)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4), (ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x892, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000687, 8) COPY (register, 0x0, 8)]
[(unique, 0x100006bf, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488828, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007d7, 8), (unique, 0x100007d7, 8) INT_ADD (unique, 0x100007cf, 8) , (const, 0x1c, 8), (unique, 0x100007cf, 8) CAST (register, 0x0, 8)]
[(unique, 0x100006c7, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488828, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x2, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x3, 1)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x878, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x878, 4)]
[ ---  CALL (ram, 0x4562a0, 8) , (register, 0x0, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4), (ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x878, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x878, 4)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8), (ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x878, 4)]
[(ram, 0x4c7f98, 8) COPY (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c7fa0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x878, 4)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8), (ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x878, 4)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4), (ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x878, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(unique, 0x100005ff, 8) COPY (ram, 0x4c87e8, 8), (ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(register, 0xa8, 4) INT_ADD (unique, 0x10000370, 4) , (unique, 0x10000374, 4), (unique, 0x10000374, 4) SUBPIECE (ram, 0x4c7f90, 8) , (const, 0x0, 4), (unique, 0x10000370, 4) SUBPIECE (ram, 0x4c7fa0, 8) , (const, 0x0, 4), (ram, 0x4c7fa0, 8) COPY (unique, 0x100006d7, 8), (ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8), (unique, 0x100006d7, 8) MULTIEQUAL (unique, 0x100006a7, 8) , (unique, 0x100006af, 8) , (unique, 0x100006b7, 8) , (unique, 0x100006bf, 8) , (unique, 0x100006c7, 8) , (unique, 0x100006cf, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (ram, 0x4c7f98, 8), (ram, 0x4c7f98, 8) COPY (unique, 0x1000069f, 8), (unique, 0x1000069f, 8) MULTIEQUAL (unique, 0x1000066f, 8) , (unique, 0x10000677, 8) , (unique, 0x1000067f, 8) , (unique, 0x10000687, 8) , (unique, 0x10000687, 8) , (unique, 0x10000697, 8)]
[ ---  CBRANCH (ram, 0x488408, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7f98, 8) , (const, 0xffffffffffffffff, 8), (ram, 0x4c7f98, 8) COPY (unique, 0x1000069f, 8), (unique, 0x1000069f, 8) MULTIEQUAL (unique, 0x1000066f, 8) , (unique, 0x10000677, 8) , (unique, 0x1000067f, 8) , (unique, 0x10000687, 8) , (unique, 0x10000687, 8) , (unique, 0x10000697, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100007f7, 8), (unique, 0x100007f7, 8) INT_ADD (unique, 0x100007ef, 8) , (unique, 0x3580, 8), (unique, 0x100007ef, 8) CAST (ram, 0x4c7fa0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x10, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0xc, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007e7, 8), (unique, 0x100007e7, 8) INT_ADD (unique, 0x100007df, 8) , (const, 0xc, 8), (unique, 0x100007df, 8) CAST (ram, 0x4c7fa0, 8)]
[(register, 0xa0, 4) INT_SUB (unique, 0x10000374, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (unique, 0x3580, 8) , (const, 0x0, 4), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x10, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0xc, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007e7, 8), (unique, 0x100007e7, 8) INT_ADD (unique, 0x100007df, 8) , (const, 0xc, 8), (unique, 0x100007df, 8) CAST (ram, 0x4c7fa0, 8)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0xa8, 4) , (const, 0x0, 4), (register, 0xa8, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007e7, 8), (unique, 0x100007e7, 8) INT_ADD (unique, 0x100007df, 8) , (const, 0xc, 8), (unique, 0x100007df, 8) CAST (ram, 0x4c7fa0, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0xb0, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000647, 8) COPY (ram, 0x4c7fa0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x3400, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0x98, 8) CAST (unique, 0x100007ff, 8), (unique, 0x100007ff, 8) INT_ZEXT (register, 0x98, 4), (register, 0x98, 4) INT_SRIGHT (unique, 0x3400, 4) , (const, 0x1, 4), (unique, 0x3400, 4) INT_ADD (register, 0xb0, 4) , (register, 0xa8, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4), (register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (register, 0xb0, 4) , (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0xa0, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000813, 8), (unique, 0x10000813, 8) INT_ADD (unique, 0x1000080b, 8) , (unique, 0x10000528, 8), (unique, 0x1000080b, 8) CAST (register, 0x80, 8), (unique, 0x10000528, 8) INT_ADD (register, 0xb8, 8) , (const, 0x14, 8), (register, 0xb8, 8) INT_MULT (register, 0x0, 8) , (const, 0xc, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10000807, 4), (unique, 0x10000807, 4) CAST (register, 0x98, 4), (register, 0x98, 4) INT_SRIGHT (unique, 0x3400, 4) , (const, 0x1, 4), (unique, 0x3400, 4) INT_ADD (register, 0xb0, 4) , (register, 0xa8, 4), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000647, 8) , (unique, 0x10000637, 8) , (unique, 0x1000063f, 8), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4), (register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (register, 0xb0, 4) , (register, 0xb0, 4)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x63e, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x63e, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x63e, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x63e, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x63e, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x63e, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x63e, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x63e, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x63e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x63e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x63e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x63e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x63e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (register, 0x80, 8) , (const, 0x63e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x63e, 4)]
[(register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x488578, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(unique, 0x3a00, 8) CAST (unique, 0x10000823, 8), (unique, 0x10000823, 8) INT_ADD (unique, 0x1000081b, 8) , (unique, 0x10000540, 8), (unique, 0x1000081b, 8) CAST (stack, 0xffffffffffffffa8, 8), (unique, 0x10000540, 8) INT_ADD (register, 0xb8, 8) , (const, 0x8, 8)]
[(unique, 0x1000074f, 8) COPY (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x4885b7, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x3a00, 8) , (register, 0xb8, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x488588, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 4) , (const, 0x0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0xb0, 8) INT_AND (unique, 0x1000082b, 8) , (const, 0xffffffff, 8), (unique, 0x1000082b, 8) CAST (unique, 0x100003ce, 8), (unique, 0x100003ce, 8) MULTIEQUAL (unique, 0x1000074f, 8) , (unique, 0x10000757, 8)]
[(stack, 0xffffffffffffffa0, 8) CAST (unique, 0x1000083b, 8), (unique, 0x1000083b, 8) INT_OR (unique, 0x100003be, 8) , (unique, 0x100003c6, 8), (unique, 0x100003c6, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x100003be, 8) INT_AND (unique, 0x10000833, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000833, 8) CAST (stack, 0xffffffffffffffa0, 8), (register, 0x0, 4) INT_SUB (register, 0xb0, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x4885bc, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0xa0, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x4, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x7f1, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x7f1, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x7f1, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x7f1, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x7f1, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x7f1, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x7f1, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x7f1, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x7f1, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7f1, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7f1, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7f1, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7f1, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7f1, 4)]
[(unique, 0x10000757, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7f1, 4)]
[ ---  CBRANCH (ram, 0x4885bc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x0, 8) INT_SEXT (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x4886f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6110, 4) , (const, 0x303, 4), (ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(unique, 0x3a00, 8) CAST (unique, 0x1000084b, 8), (unique, 0x1000084b, 8) INT_ADD (unique, 0x10000843, 8) , (unique, 0x10000548, 8), (unique, 0x10000843, 8) CAST (stack, 0xffffffffffffffa8, 8), (unique, 0x10000548, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x10, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0xc, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x4885f1, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000627, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3a00, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48861e, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (register, 0x98, 4) , (register, 0xb0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0x98, 4) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x10000737, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488370, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0xa0, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000085b, 8), (unique, 0x1000085b, 8) INT_ADD (unique, 0x10000853, 8) , (const, 0x4, 8), (unique, 0x10000853, 8) CAST (register, 0x8, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x6c9, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x6c9, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x6c9, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x6c9, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x6c9, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x6c9, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x6c9, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x6c9, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x6c9, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x6c9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x6c9, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x6c9, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x6c9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x6c9, 4)]
[(unique, 0x1000062f, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000737, 8) , (const, 0x6c9, 4)]
[ ---  CBRANCH (ram, 0x488370, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(unique, 0x1000064f, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x4885e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x303, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000863, 8), (unique, 0x10000863, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000627, 8) , (unique, 0x1000062f, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000086b, 8), (unique, 0x1000086b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000657, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x4885e0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbc80, 4) , (register, 0xa0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000086b, 8), (unique, 0x1000086b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (unique, 0x10000873, 8), (unique, 0x10000873, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x1000065f, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x488639, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(unique, 0x10000667, 8) COPY (register, 0x0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x1000064f, 8) , (unique, 0x10000657, 8) , (unique, 0x1000065f, 8) , (unique, 0x10000667, 8)]
[(register, 0xb0, 8) INT_ZEXT (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(register, 0x8, 8) CAST (unique, 0x10000883, 8), (unique, 0x10000883, 8) INT_ADD (unique, 0x1000087b, 8) , (const, 0xc, 8), (unique, 0x1000087b, 8) CAST (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488370, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESSEQUAL (unique, 0x1000088b, 4) , (register, 0xa8, 4), (unique, 0x1000088b, 4) CAST (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(unique, 0x3a00, 8) CAST (unique, 0x10000897, 8), (unique, 0x10000897, 8) INT_ADD (unique, 0x1000088f, 8) , (unique, 0x10000590, 8), (unique, 0x1000088f, 8) CAST (stack, 0xffffffffffffffa8, 8), (unique, 0x10000590, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x10, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0xc, 8)]
[ ---  BRANCH (ram, 0x488711, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x3a00, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x488737, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x98, 4) , (register, 0xb0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0x98, 4) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0xa0, 4) , (unique, 0x1000089f, 4), (unique, 0x1000089f, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x75f, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x75f, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x75f, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x75f, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x75f, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x75f, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x75f, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x75f, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x75f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x75f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x75f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x75f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x75f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x75f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x75f, 4)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x488700, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x303, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x488700, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x100008a3, 4) , (register, 0xa0, 4), (unique, 0x100008a3, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (unique, 0x100008ab, 8), (unique, 0x100008ab, 8) CAST (stack, 0xffffffffffffffb0, 8), (register, 0xb8, 8) INT_ZEXT (unique, 0x100008a7, 4), (unique, 0x100008a7, 4) CAST (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x488386, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c0, 1) , (const, 0x1, 1)]
[(register, 0xb0, 8) INT_ZEXT (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0xa8, 4) , (unique, 0x100008b3, 4), (unique, 0x100008b3, 4) CAST (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000273, 4) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x488488, 1) , (register, 0x207, 1)]
[(unique, 0x1000063f, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x488438, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0xa8, 4) , (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (unique, 0x10000273, 4) , (const, 0x1, 4)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000637, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x488438, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0xa8, 4) , (register, 0xb0, 4), (register, 0xa8, 4) INT_ADD (unique, 0x10000273, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0xa8, 4) INT_SUB (register, 0xa8, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (ram, 0x4c7f98, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48883b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87e8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x48809d, 1)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x68, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x68, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x68, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x68, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x68, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x68, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x68, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x68, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x68, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x4000000000000, 8)]
[ ---  CBRANCH (ram, 0x48809d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x401140, 8) , (ram, 0x4c87e8, 8) , (unique, 0x10000408, 8), (unique, 0x10000408, 8) COPY (const, 0x49e8b2, 8)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x7b, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x7b, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x7b, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x7b, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x7b, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x7b, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x7b, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x7b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7b, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x7b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7b, 4)]
[(register, 0x0, 8) COPY (const, 0x8000000000000, 8)]
[ ---  CBRANCH (ram, 0x488099, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x401140, 8) , (unique, 0x100005ff, 8) , (unique, 0x10000410, 8), (unique, 0x10000410, 8) COPY (const, 0x49e8bb, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x9d, 4), (ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x9d, 4), (ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x9d, 4), (ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x9d, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x9d, 4), (ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x9d, 4), (ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CALL (ram, 0x459500, 8) , (const, 0xb, 8) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x9d, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (ram, 0x4c7f98, 8), (ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x9d, 4), (ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(stack, 0xffffffffffffffa8, 8) CAST (unique, 0x100008cb, 8), (unique, 0x100008cb, 8) INT_ADD (unique, 0x100005f7, 8) , (unique, 0xbc80, 4), (unique, 0x100005f7, 8) INT_LEFT (unique, 0x100005ef, 8) , (const, 0x20, 8), (unique, 0x100005ef, 8) INT_SEXT (unique, 0x100008c7, 4), (unique, 0x100008c7, 4) CAST (stack, 0xffffffffffffffac, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100008bf, 8), (unique, 0x100008bf, 8) INT_ADD (unique, 0x100008b7, 8) , (const, 0x14, 8), (unique, 0x100008b7, 8) CAST (ram, 0x4c7f98, 8), (stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x9d, 4), (ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x9d, 4), (ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0xa0, 4) , (const, 0x0, 4), (register, 0xa0, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100008bf, 8), (unique, 0x100008bf, 8) INT_ADD (unique, 0x100008b7, 8) , (const, 0x14, 8), (unique, 0x100008b7, 8) CAST (ram, 0x4c7f98, 8), (ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x9d, 4), (ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0x98, 8) INT_ZEXT (register, 0x98, 4), (register, 0x98, 4) INT_SRIGHT (unique, 0x3400, 4) , (const, 0x1, 4), (unique, 0x3400, 4) INT_ADD (register, 0xb8, 4) , (register, 0xa0, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100008df, 8), (unique, 0x100008df, 8) INT_ADD (unique, 0x100008d7, 8) , (unique, 0x10000478, 8), (unique, 0x100008d7, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x10000478, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x34, 8), (unique, 0x3680, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100008d3, 4), (unique, 0x100008d3, 4) CAST (register, 0x98, 4), (register, 0x98, 4) INT_SRIGHT (unique, 0x3400, 4) , (const, 0x1, 4), (unique, 0x3400, 4) INT_ADD (register, 0xb8, 4) , (register, 0xa0, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x104, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x104, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x104, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x104, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x104, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x104, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x104, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x104, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x104, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x104, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x104, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x104, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x104, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x104, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x104, 4)]
[(register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x488140, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(unique, 0x3a00, 8) CAST (unique, 0x100008ef, 8), (unique, 0x100008ef, 8) INT_ADD (unique, 0x100008e7, 8) , (unique, 0x10000480, 8), (unique, 0x100008e7, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x10000480, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1c, 8)]
[(register, 0xb0, 8) INT_AND (register, 0x98, 8) , (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x48817a, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x3a00, 8) , (register, 0x8, 8)]
[(unique, 0x1000073f, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x488150, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 4) , (const, 0x0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xb8, 4) INT_SUB (register, 0xb0, 4) , (const, 0x1, 4)]
[(unique, 0x10000747, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48817f, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (register, 0xa8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100008f7, 8), (unique, 0x100008f7, 8) CAST (register, 0x8, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x591, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x591, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x591, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x591, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x591, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x591, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x591, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x591, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x591, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x591, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x591, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x591, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x591, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x591, 4)]
[(register, 0x8, 8) PTRADD (stack, 0xffffffffffffffa8, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000747, 8) , (const, 0x591, 4)]
[ ---  CBRANCH (ram, 0x48817f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(register, 0xb0, 8) INT_ZEXT (register, 0xb8, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x1000073f, 8) , (unique, 0x10000747, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x0, 8) INT_NEGATE (register, 0x0, 8), (register, 0x0, 8) INT_OR (register, 0x0, 8) , (const, 0x800f000000000000, 8), (register, 0x0, 8) INT_AND (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) INT_OR (unique, 0x1000038e, 8) , (unique, 0x10000396, 8), (unique, 0x10000396, 8) INT_ZEXT (ram, 0x4c8868, 4), (unique, 0x1000038e, 8) INT_AND (stack, 0xffffffffffffff88, 8) , (const, 0xffffffff00000000, 8), (ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x488640, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c6110, 4) , (const, 0x303, 4), (ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffffa0, 8) , (unique, 0x10000568, 8) , (const, 0x8, 8), (unique, 0x10000568, 8) INT_ADD (unique, 0x10000560, 8) , (const, 0x6, 8), (unique, 0x10000560, 8) INT_MULT (register, 0x0, 8) , (const, 0x3, 8), (register, 0x0, 8) INT_SEXT (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x488301, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8868, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x3a00, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x488327, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x98, 4) , (register, 0xb0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0x98, 4) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000907, 8), (unique, 0x10000907, 8) INT_ADD (unique, 0x100008ff, 8) , (const, 0x4, 8), (unique, 0x100008ff, 8) CAST (register, 0xb8, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x4e8, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x4e8, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x4e8, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x4e8, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x4e8, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x4e8, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x4e8, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x4e8, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x4e8, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x4e8, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4e8, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x4e8, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x4e8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x4e8, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x4e8, 4)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4882f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x303, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000090f, 8), (unique, 0x1000090f, 8) CAST (register, 0xb8, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000917, 8), (unique, 0x10000917, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4882f0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbc80, 4) , (register, 0xa8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000917, 8), (unique, 0x10000917, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4882f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4882f0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x5200, 4) , (stack, 0xffffffffffffff88, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000927, 8), (unique, 0x10000927, 8) INT_ADD (unique, 0x1000091f, 8) , (const, 0xc, 8), (unique, 0x1000091f, 8) CAST (register, 0xb8, 8), (stack, 0xffffffffffffff88, 4) SUBPIECE (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488361, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xf000000000000, 8)]
[ ---  CBRANCH (ram, 0x4882f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (stack, 0xffffffffffffff98, 8)]
[(register, 0xb0, 8) INT_ZEXT (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0xa0, 4) , (unique, 0x1000092f, 4), (unique, 0x1000092f, 4) CAST (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x3a00, 8)]
[ ---  CBRANCH (ram, 0x488697, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x98, 4) , (register, 0xb0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0x98, 4) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000093b, 8), (unique, 0x1000093b, 8) INT_ADD (unique, 0x10000933, 8) , (const, 0x4, 8), (unique, 0x10000933, 8) CAST (register, 0xb8, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x43c, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x43c, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x43c, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x43c, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x43c, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x43c, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x43c, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x43c, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x43c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x43c, 4)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x488660, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x303, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000943, 8), (unique, 0x10000943, 8) CAST (register, 0xb8, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000094b, 8), (unique, 0x1000094b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488660, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbc80, 4) , (register, 0xa8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000094b, 8), (unique, 0x1000094b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488660, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488361, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xf000000000000, 8)]
[ ---  CBRANCH (ram, 0x488361, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0xb8, 8) INT_ADD (unique, 0x10000953, 8) , (register, 0x0, 8), (unique, 0x10000953, 8) CAST (stack, 0xffffffffffffffb0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x1000072f, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0xb0, 8) INT_ZEXT (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0xa0, 4) , (unique, 0x1000095b, 4), (unique, 0x1000095b, 4) CAST (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffffa0, 8) , (unique, 0x100004a0, 8) , (const, 0x8, 8), (unique, 0x100004a0, 8) INT_ADD (unique, 0x10000498, 8) , (const, 0x6, 8), (unique, 0x10000498, 8) INT_MULT (register, 0x0, 8) , (const, 0x3, 8), (register, 0x0, 8) INT_SEXT (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x4882b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8868, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000617, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3a00, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4882de, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (register, 0x98, 4) , (register, 0xb0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0x98, 4) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x10000717, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488370, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000967, 8), (unique, 0x10000967, 8) INT_ADD (unique, 0x1000095f, 8) , (const, 0x4, 8), (unique, 0x1000095f, 8) CAST (register, 0x8, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x35c, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x35c, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x35c, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x35c, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x35c, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x35c, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x35c, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x35c, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x35c, 4)]
[(unique, 0x1000061f, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000717, 8) , (const, 0x35c, 4)]
[(unique, 0x1000071f, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000717, 8) , (const, 0x35c, 4)]
[ ---  CBRANCH (ram, 0x488370, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4882a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x303, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000096f, 8), (unique, 0x1000096f, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000617, 8) , (unique, 0x1000061f, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000977, 8), (unique, 0x10000977, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4882a0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (register, 0xa8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000977, 8), (unique, 0x10000977, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4882a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4882a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4882a0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x5200, 4) , (stack, 0xffffffffffffff88, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000987, 8), (unique, 0x10000987, 8) INT_ADD (unique, 0x1000097f, 8) , (const, 0xc, 8), (unique, 0x1000097f, 8) CAST (register, 0x8, 8), (stack, 0xffffffffffffff88, 4) SUBPIECE (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488294, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xf000000000000, 8)]
[ ---  CBRANCH (ram, 0x4882a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff98, 8) , (register, 0x30, 8)]
[(unique, 0x3400, 8) INT_ADD (unique, 0x1000098f, 8) , (register, 0x0, 8), (unique, 0x1000098f, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (unique, 0x3400, 8)]
[(register, 0xb0, 8) INT_ZEXT (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x10000727, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x488370, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESSEQUAL (unique, 0x10000997, 4) , (register, 0xa0, 4), (unique, 0x10000997, 4) CAST (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000607, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0x3a00, 8)]
[ ---  CBRANCH (ram, 0x48824e, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (register, 0x98, 4) , (register, 0xb0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0x98, 4) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x100006ff, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488370, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100009a3, 8), (unique, 0x100009a3, 8) INT_ADD (unique, 0x1000099b, 8) , (const, 0x4, 8), (unique, 0x1000099b, 8) CAST (register, 0x8, 8)]
[(register, 0x98, 8) INDIRECT (register, 0x98, 8) , (const, 0x1cf, 4)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x1cf, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x1cf, 4)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x1cf, 4)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x1cf, 4)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x1cf, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x1cf, 4)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x1cf, 4)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1cf, 4)]
[(unique, 0x1000060f, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100006ff, 8) , (const, 0x1cf, 4)]
[(unique, 0x10000707, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100006ff, 8) , (const, 0x1cf, 4)]
[ ---  CBRANCH (ram, 0x488370, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x487f00, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x488210, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x303, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100009ab, 8), (unique, 0x100009ab, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000607, 8) , (unique, 0x1000060f, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100009b3, 8), (unique, 0x100009b3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488210, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (register, 0xa8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100009b3, 8), (unique, 0x100009b3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488210, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x488210, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x488204, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xf000000000000, 8)]
[ ---  CBRANCH (ram, 0x488210, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff98, 8) , (register, 0x30, 8)]
[(unique, 0x3400, 8) INT_ADD (unique, 0x100009bb, 8) , (register, 0x0, 8), (unique, 0x100009bb, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (unique, 0x3400, 8)]
[(register, 0xb0, 8) INT_ZEXT (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x1000070f, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x488370, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESSEQUAL (unique, 0x100009c3, 4) , (register, 0xa0, 4), (unique, 0x100009c3, 4) CAST (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x100006ff, 8) , (unique, 0x10000707, 8) , (unique, 0x1000070f, 8) , (unique, 0x10000717, 8) , (unique, 0x1000071f, 8) , (unique, 0x10000727, 8) , (unique, 0x1000072f, 8) , (unique, 0x10000737, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x488815, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c0, 1) , (const, 0x1, 1), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[ ---  CBRANCH (ram, 0x48811f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48875d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x32d, 4), (ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x32d, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x32d, 4), (ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x32d, 4), (ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x32d, 4), (ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x32d, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x32d, 4), (ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x32d, 4), (ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x10000418, 8) , (register, 0xb8, 8), (unique, 0x10000418, 8) COPY (const, 0x4af569, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x488386, 1)]
[(ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x270, 4), (ram, 0x4c6110, 4) MULTIEQUAL (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4) , (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x270, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x270, 4), (ram, 0x4c7f90, 8) MULTIEQUAL (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8) , (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x270, 4), (ram, 0x4c7f98, 8) MULTIEQUAL (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8) , (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x270, 4), (ram, 0x4c7fa0, 8) MULTIEQUAL (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8) , (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x270, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x270, 4), (ram, 0x4c87e8, 8) MULTIEQUAL (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8) , (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x270, 4), (ram, 0x4c8868, 4) MULTIEQUAL (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4) , (ram, 0x4c8868, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x270, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x270, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x270, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x270, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x270, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x270, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0x18, 8) CAST (unique, 0x100009cf, 8), (unique, 0x100009cf, 8) INT_SUB (unique, 0x100009c7, 8) , (register, 0x10, 8), (unique, 0x100009c7, 8) CAST (unique, 0x10000500, 8), (unique, 0x10000500, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x1000022f, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x1000075f, 8) COPY (register, 0x20, 8)]
[(unique, 0x100003f3, 8) MULTIEQUAL (unique, 0x1000075f, 8) , (unique, 0x10000767, 8)]
[(unique, 0x100003fb, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4883c3, 1) , (unique, 0x100003ea, 1), (unique, 0x100003ea, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) CAST (unique, 0x100009df, 8), (unique, 0x100009df, 8) INT_ADD (unique, 0x100009d7, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x100009d7, 8) CAST (unique, 0x100003f3, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100009ff, 8), (unique, 0x100009ff, 8) INT_ADD (unique, 0x100009f7, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100009f7, 8) CAST (unique, 0x100003f3, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000a0f, 8), (unique, 0x10000a0f, 8) INT_ADD (unique, 0x10000a07, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10000a07, 8) CAST (unique, 0x100003f3, 8)]
[(unique, 0x10000767, 8) COPY (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x100009ef, 8), (unique, 0x100009ef, 8) INT_ADD (unique, 0x100009e7, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x100009e7, 8) CAST (unique, 0x100003f3, 8)]
[(unique, 0x10000237, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x1000022f, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x4884a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x1000022f, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3880, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3880, 8), (unique, 0x3880, 8) CAST (unique, 0x10000a1f, 8), (unique, 0x10000a1f, 8) INT_ADD (unique, 0x10000a17, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000a17, 8) CAST (unique, 0x100003fb, 8)]
[ ---  BRANCH (ram, 0x4883d5, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x4883ea, 8), (register, 0x20, 8) CAST (unique, 0x10000a3f, 8), (unique, 0x10000a3f, 8) INT_ADD (unique, 0x10000a37, 8) , (unique, 0x10000518, 8), (unique, 0x10000a37, 8) CAST (unique, 0x100003fb, 8), (unique, 0x10000518, 8) INT_ADD (unique, 0x10000237, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x4883f2, 8), (register, 0x20, 8) CAST (unique, 0x10000a57, 8), (unique, 0x10000a57, 8) INT_ADD (unique, 0x10000a4f, 8) , (unique, 0x10000520, 8), (unique, 0x10000a4f, 8) CAST (unique, 0x100003fb, 8), (unique, 0x10000520, 8) INT_ADD (unique, 0x10000237, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2ef, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2ef, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2ef, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2ef, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2ef, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2ef, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2eb, 4)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4), (ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x2ef, 4), (ram, 0x4c6110, 4) INDIRECT (ram, 0x4c6110, 4) , (const, 0x2eb, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x2ef, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x2eb, 4)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8), (ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x2ef, 4), (ram, 0x4c7f90, 8) INDIRECT (ram, 0x4c7f90, 8) , (const, 0x2eb, 4)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8), (ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x2ef, 4), (ram, 0x4c7f98, 8) INDIRECT (ram, 0x4c7f98, 8) , (const, 0x2eb, 4)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8), (ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x2ef, 4), (ram, 0x4c7fa0, 8) INDIRECT (ram, 0x4c7fa0, 8) , (const, 0x2eb, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x2ef, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x2eb, 4)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8), (ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x2ef, 4), (ram, 0x4c87e8, 8) INDIRECT (ram, 0x4c87e8, 8) , (const, 0x2eb, 4)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4), (ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x2ef, 4), (ram, 0x4c8868, 4) INDIRECT (ram, 0x4c8868, 4) , (const, 0x2eb, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x429160, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000a47, 8), (unique, 0x10000a47, 8) CALL (ram, 0x401060, 8) , (register, 0x38, 8) , (register, 0xb8, 8) , (unique, 0x3100, 8), (register, 0x38, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x3800, 8) CAST (unique, 0x10000a2f, 8), (unique, 0x10000a2f, 8) INT_ADD (unique, 0x10000a27, 8) , (unique, 0x10000510, 8), (unique, 0x10000a27, 8) CAST (unique, 0x100003fb, 8), (unique, 0x10000510, 8) INT_ADD (unique, 0x10000237, 8) , (const, 0xf, 8)]
[(unique, 0x1000015b, 4) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x488130, 1) , (register, 0x207, 1)]
[ ---  CBRANCH (ram, 0x4880e0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0xa0, 4) , (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (unique, 0x1000015b, 4) , (const, 0x1, 4)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4880e0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0xa0, 4) , (register, 0xb8, 4), (register, 0xa0, 4) INT_ADD (unique, 0x1000015b, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c6110, 4) COPY (ram, 0x4c6110, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8)]
[(ram, 0x4c7f90, 8) COPY (ram, 0x4c7f90, 8)]
[(ram, 0x4c7f98, 8) COPY (ram, 0x4c7f98, 8)]
[(ram, 0x4c7fa0, 8) COPY (ram, 0x4c7fa0, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87e8, 8) COPY (ram, 0x4c87e8, 8)]
[(ram, 0x4c8868, 4) COPY (ram, 0x4c8868, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
