[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x56, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x56, 4), (register, 0x20a, 1) COPY (const, 0x0, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x56, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x56, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (unique, 0x1000056d, 8) , (const, 0x56, 4), (unique, 0x1000056d, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (unique, 0x10000575, 8) , (const, 0x56, 4), (unique, 0x10000575, 8) COPY (register, 0x10, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x56, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x56, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x56, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x56, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x56, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x56, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x56, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x56, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x56, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x56, 4)]
[ ---  CALL (ram, 0x155860, 8) , (unique, 0x3800, 8) , (const, 0x20, 8) , (unique, 0x1000041b, 8) , (register, 0x8, 8), (unique, 0x1000041b, 8) COPY (const, 0x28d7b5, 8), (register, 0x8, 8) INT_ZEXT (unique, 0x10000585, 2), (unique, 0x10000585, 2) CAST (register, 0x30, 2), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe58, 8), (register, 0x30, 2) INT_OR (unique, 0x4e880, 2) , (unique, 0x4e980, 2), (unique, 0x4e980, 2) INT_LEFT (register, 0x30, 2) , (const, 0x8, 4), (unique, 0x4e880, 2) INT_RIGHT (register, 0x30, 2) , (const, 0x8, 4), (register, 0x30, 2) SUBPIECE (register, 0x30, 4) , (const, 0x0, 4)]
[(unique, 0x100003ff, 4) INT_ZEXT (stack, 0x8, 2)]
[(stack, 0xfffffffffffffe77, 1) COPY (const, 0x0, 1)]
[(unique, 0x1000054d, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8)]
[(register, 0x8, 8) COPY (const, 0x6, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x1000054d, 8) , (unique, 0x10000555, 8)]
[ ---  CBRANCH (ram, 0x21e377, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x74, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x74, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x74, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x74, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x74, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x74, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000597, 8) , (const, 0x0, 8), (unique, 0x10000597, 8) CAST (register, 0x38, 8)]
[(unique, 0x10000555, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x1000058f, 8), (unique, 0x1000058f, 8) INT_ADD (unique, 0x10000587, 8) , (unique, 0x1000045b, 8), (unique, 0x10000587, 8) CAST (register, 0x38, 8), (unique, 0x1000045b, 8) INT_ADD (unique, 0x100001d2, 8) , (const, 0x8, 8), (unique, 0x100001d2, 8) INT_MULT (unique, 0xb880, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0xb880, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x21e374, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x85, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x85, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x85, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x85, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x85, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x85, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x85, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x85, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x85, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x85, 4), (stack, 0xfffffffffffffe98, 4) COPY (const, 0x2, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (unique, 0x100003ff, 4) , (const, 0x85, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x85, 4), (stack, 0xfffffffffffffea0, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x85, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x85, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x85, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x85, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x85, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x85, 4)]
[(unique, 0x1000051d, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x85, 4)]
[ ---  CBRANCH (ram, 0x21e76b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1ee3c0, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (unique, 0x3c80, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe50, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x21e790, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x46c, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x469, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x46c, 4), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x469, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000059f, 8) , (const, 0x2, 4), (unique, 0x1000059f, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x1000051d, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x21e473, 1)]
[ ---  CALL (ram, 0x11f8a8, 8) , (ram, 0x4c4858, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xae, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa5, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xae, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xa5, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0xae, 4), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0xae, 4), (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xae, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0xae, 4), (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0xae, 4), (stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xae, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0xae, 4), (stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0xae, 4), (stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0xae, 4), (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0xae, 4), (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0xa5, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xae, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xae, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa5, 4)]
[ ---  CBRANCH (ram, 0x21e800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18aa40, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x20, 8), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xa5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc9, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xc9, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xbb, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0xc9, 4), (ram, 0x4c4858, 8) INDIRECT (register, 0x0, 8) , (const, 0xbb, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xc9, 4)]
[ ---  CALL (ram, 0x21eb10, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x20, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe40, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe38, 8)]
[(unique, 0x1000055d, 4) COPY (register, 0x18, 4), (register, 0x18, 4) COPY (const, 0x1, 4)]
[(register, 0x18, 4) MULTIEQUAL (unique, 0x1000055d, 4) , (unique, 0x10000561, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe1, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xe1, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0xe1, 4), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0xe1, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xe1, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0xe1, 4), (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0xe1, 4), (stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xe1, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0xe1, 4), (stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0xe1, 4), (stack, 0xfffffffffffffe78, 1) MULTIEQUAL (stack, 0xfffffffffffffe78, 1) , (stack, 0xfffffffffffffe78, 1)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0xe1, 4), (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0xe1, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xe1, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x21e488, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207ce0, 8) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x8, 8), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x45e, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x45e, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x45e, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x45e, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x45e, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x45e, 4)]
[ ---  CALL (ram, 0x16a940, 8) , (unique, 0x10000433, 8), (unique, 0x10000433, 8) COPY (const, 0x28ef6f, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x45e, 4)]
[(ram, 0x4c4858, 8) COPY (ram, 0x4c4858, 8), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x45e, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfc, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xfc, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0xfc, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xfc, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xfc, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xfc, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xfc, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xfc, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xfc, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xfc, 4)]
[ ---  CBRANCH (ram, 0x21e4a0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207860, 8) , (register, 0x0, 4) , (unique, 0xbd80, 8) , (unique, 0xbc80, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x18, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x21e7b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x443, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x443, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x443, 4)]
[ ---  CALL (ram, 0x1f6a00, 8) , (register, 0x0, 4) , (unique, 0x1000040b, 8) , (const, 0x1, 8), (unique, 0x1000040b, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c365, 8)]
[(stack, 0xfffffffffffffe36, 2) COPY (const, 0x0, 2)]
[ ---  BRANCH (ram, 0x21e60f, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17d, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x17d, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x17d, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x17d, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x17d, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x17d, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x17d, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x17d, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x17d, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x17d, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x17d, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x17d, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x17d, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x17d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x17d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x17d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x17d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x17d, 4)]
[ ---  CBRANCH (ram, 0x21e83c, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207ce0, 8) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x43a, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x43a, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x43a, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x43a, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x43a, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x43a, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x43a, 4)]
[(ram, 0x4c4858, 8) COPY (ram, 0x4c4858, 8), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x43a, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  CALL (ram, 0x207950, 8) , (register, 0x0, 4) , (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x19e, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x18f, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x19e, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x18f, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x19e, 4), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x19e, 4), (stack, 0xfffffffffffffe48, 4) COPY (const, 0x80, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x19e, 4), (stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x19e, 4), (stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x19e, 4), (stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x19e, 4), (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x19e, 4), (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x19e, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x18f, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x19e, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x18f, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x19e, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x18f, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x19e, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x18f, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x19e, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x18f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x19e, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x18f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x19e, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x18f, 4)]
[ ---  CBRANCH (ram, 0x21e824, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2078f0, 8) , (register, 0x0, 4) , (unique, 0x100005a7, 8) , (unique, 0x3800, 8), (unique, 0x100005a7, 8) CAST (unique, 0x3c80, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe48, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[ ---  CALL (ram, 0x16a940, 8) , (unique, 0x1000043b, 8), (unique, 0x1000043b, 8) COPY (const, 0x28ef7d, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x434, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x42f, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x434, 4), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x42f, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x434, 4), (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x42f, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x434, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x42f, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x434, 4), (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x42f, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x434, 4), (stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x42f, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x434, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x42f, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x434, 4), (stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x42f, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x434, 4), (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x42f, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x434, 4), (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x42f, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x434, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x434, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x434, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x434, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x434, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x434, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x434, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x42f, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x21e733, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1af, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1af, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1af, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1af, 4)]
[ ---  CBRANCH (ram, 0x21e7e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (stack, 0xfffffffffffffe48, 4), (register, 0x0, 4) CALL (ram, 0x2081a0, 8), (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1af, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005af, 8) , (const, 0x16, 4), (unique, 0x100005af, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x42a, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x427, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x42a, 4), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x42a, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x42a, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x42a, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x42a, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x42a, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x42a, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x42a, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x42a, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x42a, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x42a, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x42a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x42a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x42a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x42a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x42a, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x21e733, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e8, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1e8, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x1e8, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x1e8, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x1e8, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x1e8, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1e8, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x1e8, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x1e8, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x1e8, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1e8, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1e8, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1e8, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1e8, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1e8, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1e8, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1e8, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1e8, 4)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffe36, 2) COPY (const, 0x0, 2)]
[ ---  CBRANCH (ram, 0x21e74f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2208d0, 8) , (unique, 0x100005b7, 8) , (register, 0x0, 4) , (const, 0x0, 8) , (const, 0x0, 4) , (unique, 0x3800, 8) , (const, 0x20, 4) , (const, 0x2, 4), (unique, 0x100005b7, 8) CAST (unique, 0x3c80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x41b, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x41b, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x41b, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x41b, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x41b, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x41b, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x41b, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x41b, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x41b, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x41b, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x41b, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x41b, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x41b, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x41b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x41b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x41b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x41b, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x41b, 4)]
[(register, 0x0, 2) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x13b3b0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0xa, 4)]
[(register, 0x10, 8) INT_AND (register, 0x0, 8) , (const, 0xffff, 8), (register, 0x0, 8) CALL (ram, 0x13b3b0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0xa, 4)]
[ ---  BRANCH (ram, 0x21e545, 1)]
[(stack, 0xfffffffffffffe36, 2) MULTIEQUAL (stack, 0xfffffffffffffe36, 2) , (register, 0x0, 2)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x222, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x222, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x222, 4), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x222, 4), (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x222, 4), (stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x222, 4), (stack, 0xfffffffffffffe78, 1) MULTIEQUAL (stack, 0xfffffffffffffe78, 1) , (stack, 0xfffffffffffffe78, 1)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x222, 4), (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x222, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x222, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x222, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x222, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x222, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x222, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x222, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x222, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CALL (ram, 0x1558f0, 8) , (unique, 0x3800, 8) , (unique, 0x10000423, 8) , (register, 0x10, 8), (unique, 0x10000423, 8) COPY (const, 0x28e933, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x10000535, 8) COPY (unique, 0x100005bf, 8), (unique, 0x100005bf, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[(unique, 0x1000053d, 8) COPY (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x10, 8) COPY (unique, 0x10000545, 8), (unique, 0x10000545, 8) MULTIEQUAL (unique, 0x10000535, 8) , (unique, 0x1000053d, 8)]
[ ---  CBRANCH (ram, 0x21e566, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x80808080, 4), (register, 0x0, 4) INT_AND (unique, 0x3200, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_NEGATE (unique, 0xbc80, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0xfefefeff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) COPY (unique, 0x10000545, 8), (unique, 0x10000545, 8) MULTIEQUAL (unique, 0x10000535, 8) , (unique, 0x1000053d, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(register, 0x8, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x10, 4)]
[(unique, 0x10000565, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x21e595, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58a00, 4) , (const, 0x0, 4), (unique, 0x58a00, 4) INT_AND (register, 0x0, 4) , (const, 0x8080, 4)]
[(unique, 0x10000569, 4) COPY (register, 0x8, 4)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0x10000565, 4) , (unique, 0x10000569, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x100005cf, 8), (unique, 0x100005cf, 8) INT_ADD (unique, 0x100005c7, 8) , (const, 0x6, 8), (unique, 0x100005c7, 8) CAST (register, 0x10, 8)]
[(unique, 0x10000525, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x21e59d, 1) , (register, 0x206, 1)]
[(unique, 0x1000052d, 8) COPY (unique, 0x3100, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2ba, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2ba, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x2ba, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2ba, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2ba, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x2ba, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2ba, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x2ba, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x2ba, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x2ba, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x2ba, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2ba, 4)]
[ ---  CALL (ram, 0x1f6a00, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ADD (unique, 0x100005df, 8) , (unique, 0x100004fb, 8), (unique, 0x100005df, 8) CAST (register, 0x10, 8), (unique, 0x100004fb, 8) INT_ADD (unique, 0x100004f3, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x100004f3, 8) INT_SUB (unique, 0x100002be, 8) , (unique, 0x12600, 8), (unique, 0x100002be, 8) INT_2COMP (unique, 0x100005d7, 8), (unique, 0x100005d7, 8) CAST (unique, 0x3800, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (register, 0x0, 1) , (register, 0x0, 1), (register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000525, 8) , (unique, 0x1000052d, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe4c, 8)]
[(stack, 0xfffffffffffffe4c, 4) COPY (const, 0x80, 4)]
[ ---  BRANCH (ram, 0x21e5e1, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2cc, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2cc, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x2cc, 4), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2cc, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2cc, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x2cc, 4), (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x2cc, 4), (stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2cc, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x2cc, 4), (stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x2cc, 4), (stack, 0xfffffffffffffe78, 1) MULTIEQUAL (stack, 0xfffffffffffffe78, 1) , (stack, 0xfffffffffffffe78, 1)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x2cc, 4), (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x2cc, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x2cc, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2cc, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2cc, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2cc, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2cc, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2cc, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2cc, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x21e5d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x2077d0, 8) , (register, 0x0, 4) , (unique, 0x3c80, 8) , (unique, 0x3800, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2de, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2de, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2de, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x21e77c, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2ee, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x2ee, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffe36, 2) MULTIEQUAL (stack, 0xfffffffffffffe36, 2) , (stack, 0xfffffffffffffe36, 2)]
[(stack, 0xfffffffffffffe28, 8) CAST (unique, 0x100005e7, 8), (unique, 0x100005e7, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe08, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x31f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x30c, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f7, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x31f, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x30c, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2f7, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x31f, 4), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x30c, 4), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x2f7, 4), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x31f, 4), (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x30c, 4), (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x31f, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x30c, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x31f, 4), (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x30c, 4), (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x31f, 4), (stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x30c, 4), (stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x31f, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x30c, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x31f, 4), (stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x30c, 4), (stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x31f, 4), (stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x30c, 4), (stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe78, 1) MULTIEQUAL (stack, 0xfffffffffffffe78, 1) , (stack, 0xfffffffffffffe78, 1)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x31f, 4), (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x30c, 4), (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x31f, 4), (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x30c, 4), (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x31f, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x30c, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x2f7, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x31f, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x30c, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2f7, 4), (stack, 0xffffffffffffff48, 8) COPY (stack, 0xfffffffffffffe40, 8), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x31f, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (register, 0x0, 8) , (const, 0x30c, 4), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (stack, 0xfffffffffffffe40, 8), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x31f, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x30c, 4), (stack, 0xffffffffffffff58, 8) COPY (stack, 0xfffffffffffffe38, 8), (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (register, 0x0, 8) , (const, 0x31f, 4), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (stack, 0xfffffffffffffe38, 8), (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x2f7, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x1000057d, 8) , (const, 0x31f, 4), (unique, 0x1000057d, 8) COPY (register, 0x80, 8)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (register, 0x80, 8)]
[ ---  BRANCH (ram, 0x21e67d, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x334, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x334, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x334, 4), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x334, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x334, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x334, 4), (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x334, 4), (stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x334, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x334, 4), (stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x334, 4), (stack, 0xfffffffffffffe78, 1) MULTIEQUAL (stack, 0xfffffffffffffe78, 1) , (stack, 0xfffffffffffffe78, 1)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x334, 4), (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x334, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x334, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x334, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x334, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x334, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x334, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x334, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x334, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x21e670, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x1fc710, 8) , (register, 0x0, 4) , (stack, 0xfffffffffffffe08, 8) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x21e694, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005ef, 8), (unique, 0x100005ef, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x21e6a5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (stack, 0xfffffffffffffe40, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x352, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x352, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x352, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x352, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x352, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x352, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x352, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x352, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x352, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe78, 1) MULTIEQUAL (stack, 0xfffffffffffffe78, 1) , (stack, 0xfffffffffffffe78, 1)]
[(stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x21e6b6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (stack, 0xfffffffffffffe38, 8), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x366, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x366, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x366, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x366, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x366, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x366, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x366, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x366, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x366, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xfffffffffffffe38, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x36f, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x36f, 4), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x36f, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x36f, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x36f, 4), (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x36f, 4), (stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x36f, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x36f, 4), (stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x36f, 4), (stack, 0xfffffffffffffe78, 1) MULTIEQUAL (stack, 0xfffffffffffffe78, 1) , (stack, 0xfffffffffffffe78, 1)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x36f, 4), (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x36f, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x36f, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x36f, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x36f, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x36f, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x36f, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x36f, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x36f, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x21e816, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1f69a0, 8) , (register, 0x0, 4) , (stack, 0xfffffffffffffe28, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3e1, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x3e1, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x3e1, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3e1, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x3e1, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x3e1, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x3e1, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x3e1, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x3e1, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x3e1, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x3e1, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3e1, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3e1, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3e1, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3e1, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3e1, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3e1, 4)]
[ ---  CALL (ram, 0x16a940, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x21e723, 1)]
[ ---  CBRANCH (ram, 0x21e70b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe78, 1) , (const, 0x0, 1)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x38f, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x38f, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x38f, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x38f, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x38f, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x38f, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x38f, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x38f, 4)]
[ ---  CALL (ram, 0x1ef040, 8) , (stack, 0xfffffffffffffe50, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x38f, 4)]
[(ram, 0x4c4858, 8) COPY (ram, 0x4c4858, 8), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x38f, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x39b, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x39b, 4), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x39b, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x39b, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x39b, 4), (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x39b, 4), (stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x39b, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x39b, 4), (stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x39b, 4), (stack, 0xfffffffffffffe78, 1) MULTIEQUAL (stack, 0xfffffffffffffe78, 1) , (stack, 0xfffffffffffffe78, 1)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x39b, 4), (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x39b, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x39b, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x39b, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x39b, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x39b, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x39b, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x39b, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x39b, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x21e6f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1f69a0, 8) , (register, 0x0, 4) , (stack, 0xfffffffffffffe28, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3ce, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x3ce, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x3ce, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3ce, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x3ce, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x3ce, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x3ce, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x3ce, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x3ce, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x3ce, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x3ce, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3ce, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3ce, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3ce, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3ce, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3ce, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3ce, 4)]
[ ---  CALL (ram, 0x1f6a00, 8) , (const, 0x2, 4) , (stack, 0xfffffffffffffe28, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x21e723, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe78, 1) , (const, 0xa, 1), (stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x3ce, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x21e733, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe36, 2) , (const, 0x0, 2)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3b9, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x3b9, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3b9, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x21e775, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005f7, 8), (unique, 0x100005f7, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x40c, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x40c, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3f6, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x3f6, 4), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x3f6, 4), (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x3f6, 4), (stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x3f6, 4), (stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x3f6, 4), (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x3f6, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x3f6, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3f6, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3f6, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3f6, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3f6, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3f6, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3f6, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CALL (ram, 0x16a940, 8) , (unique, 0x10000443, 8), (unique, 0x10000443, 8) COPY (const, 0x28ef89, 8)]
[ ---  BRANCH (ram, 0x21e733, 1)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x3c4, 4), (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe38, 8) MULTIEQUAL (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8) , (stack, 0xfffffffffffffe38, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3c4, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x3c4, 4), (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffe48, 4) MULTIEQUAL (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4) , (stack, 0xfffffffffffffe48, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x3c4, 4), (stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffe4c, 4) MULTIEQUAL (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4) , (stack, 0xfffffffffffffe4c, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x3c4, 4), (stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x3be, 4), (stack, 0xfffffffffffffe77, 1) MULTIEQUAL (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1) , (stack, 0xfffffffffffffe77, 1)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x3c4, 4), (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffe98, 4) MULTIEQUAL (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4) , (stack, 0xfffffffffffffe98, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x3c4, 4), (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x3c4, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3c4, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3c4, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3c4, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3c4, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3c4, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3c4, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CALL (ram, 0x1ef040, 8) , (stack, 0xfffffffffffffe50, 8), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3c4, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3be, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) COPY (ram, 0x4c4858, 8), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x3c4, 4), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x3be, 4), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x21e460, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x6f, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005ff, 8), (unique, 0x100005ff, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x21e460, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x10, 4) , (unique, 0x10000607, 4), (unique, 0x10000607, 4) CAST (register, 0x18, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x142, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x142, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x142, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x142, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x142, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x142, 4)]
[ ---  CALL (ram, 0x16a940, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffe50, 8) , (const, 0x20, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x142, 4)]
[(ram, 0x4c4858, 8) COPY (ram, 0x4c4858, 8), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x142, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x138, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x129, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x138, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x129, 4)]
[(ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x138, 4), (ram, 0x4c4858, 8) INDIRECT (ram, 0x4c4858, 8) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x138, 4), (stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x138, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x138, 4), (stack, 0xfffffffffffffe48, 4) INDIRECT (stack, 0xfffffffffffffe48, 4) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x138, 4), (stack, 0xfffffffffffffe4c, 4) INDIRECT (stack, 0xfffffffffffffe4c, 4) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x138, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x138, 4), (stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x138, 4), (stack, 0xfffffffffffffe78, 1) INDIRECT (stack, 0xfffffffffffffe78, 1) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x138, 4), (stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x138, 4), (stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x129, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x138, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x129, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x138, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x129, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x138, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x129, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x138, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x129, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x138, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x129, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x138, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x129, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x138, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x129, 4)]
[ ---  CALL (ram, 0x1cb800, 8) , (register, 0x18, 4)]
[(unique, 0x10000561, 4) COPY (unique, 0x100003de, 4), (unique, 0x100003de, 4) INT_MULT (register, 0x18, 4) , (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x21e405, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x464, 4)]
[(ram, 0x4c4858, 8) INDIRECT (register, 0x0, 8) , (const, 0x464, 4)]
[(stack, 0xfffffffffffffe38, 8) INDIRECT (stack, 0xfffffffffffffe38, 8) , (const, 0x464, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x464, 4)]
[(stack, 0xfffffffffffffe77, 1) INDIRECT (stack, 0xfffffffffffffe77, 1) , (const, 0x464, 4)]
[(stack, 0xfffffffffffffe98, 4) INDIRECT (stack, 0xfffffffffffffe98, 4) , (const, 0x464, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x464, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x464, 4)]
[ ---  CALL (ram, 0x16a940, 8) , (unique, 0x1000042b, 8), (unique, 0x1000042b, 8) COPY (const, 0x28ef61, 8)]
[ ---  BRANCH (ram, 0x21e473, 1)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c4858, 8) COPY (ram, 0x4c4858, 8), (ram, 0x4c4858, 8) MULTIEQUAL (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8) , (ram, 0x4c4858, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
