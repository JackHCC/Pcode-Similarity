[(unique, 0x10000132, 4) COPY (ram, 0x4c8790, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[ ---  CBRANCH (ram, 0x16f140, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x238, 4)]
[(ram, 0x4c5720, 4) INDIRECT (ram, 0x4c5720, 4) , (const, 0x238, 4)]
[(ram, 0x4c5724, 4) INDIRECT (ram, 0x4c5724, 4) , (const, 0x238, 4)]
[(ram, 0x4c5728, 8) INDIRECT (ram, 0x4c5728, 8) , (const, 0x238, 4)]
[(ram, 0x4c5730, 8) INDIRECT (ram, 0x4c5730, 8) , (const, 0x238, 4)]
[(ram, 0x4c8750, 8) INDIRECT (ram, 0x4c8750, 8) , (const, 0x238, 4)]
[(ram, 0x4c8758, 8) INDIRECT (ram, 0x4c8758, 8) , (const, 0x238, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x238, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x238, 4)]
[ ---  CALLIND (register, 0x0, 8) , (register, 0x20, 8) , (unique, 0x100000fd, 8) , (const, 0x0, 8), (unique, 0x100000fd, 8) PTRSUB (const, 0x0, 8) , (const, 0x16f190, 8), (register, 0x0, 8) CAST (unique, 0x1000019e, 8), (unique, 0x1000019e, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000196, 8), (unique, 0x10000196, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8750, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8750, 8) , (const, 0x11, 4)]
[ ---  BRANCH (ram, 0x16ef7d, 1)]
[(stack, 0xffffffffffffffd0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc8, 8) PTRSUB (const, 0x0, 8) , (const, 0x16f190, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8758, 8) MULTIEQUAL (ram, 0x4c8758, 8) , (ram, 0x4c8758, 8)]
[(ram, 0x4c8750, 8) MULTIEQUAL (ram, 0x4c8750, 8) , (ram, 0x4c8750, 8)]
[(ram, 0x4c5730, 8) MULTIEQUAL (ram, 0x4c5730, 8) , (ram, 0x4c5730, 8)]
[(ram, 0x4c5724, 4) MULTIEQUAL (ram, 0x4c5724, 4) , (ram, 0x4c5724, 4)]
[(ram, 0x4c5720, 4) MULTIEQUAL (ram, 0x4c5720, 4) , (ram, 0x4c5720, 4)]
[(unique, 0x1000016e, 8) COPY (ram, 0x4c5728, 8), (ram, 0x4c5728, 8) MULTIEQUAL (ram, 0x4c5728, 8) , (ram, 0x4c5728, 8)]
[ ---  CBRANCH (ram, 0x16efd5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (ram, 0x4c5728, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100001a6, 8), (unique, 0x100001a6, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4c5728, 8) MULTIEQUAL (ram, 0x4c5728, 8) , (ram, 0x4c5728, 8)]
[ ---  CBRANCH (ram, 0x16efab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c5720, 4) , (const, 0x0, 4)]
[(ram, 0x4c5720, 4) COPY (const, 0x1, 4)]
[(unique, 0x10000186, 8) COPY (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c5720, 4) , (const, 0x0, 4)]
[(ram, 0x4c5720, 4) COPY (const, 0x1, 4)]
[(unique, 0x10000176, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x16efce, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f0, 4)]
[(ram, 0x4c5720, 4) INDIRECT (ram, 0x4c5720, 4) , (const, 0x1f0, 4)]
[(ram, 0x4c5724, 4) INDIRECT (ram, 0x4c5724, 4) , (const, 0x1f0, 4)]
[(ram, 0x4c5728, 8) INDIRECT (ram, 0x4c5728, 8) , (const, 0x1f0, 4)]
[(ram, 0x4c5730, 8) INDIRECT (ram, 0x4c5730, 8) , (const, 0x1f0, 4)]
[(ram, 0x4c8750, 8) INDIRECT (ram, 0x4c8750, 8) , (const, 0x1f0, 4)]
[(ram, 0x4c8758, 8) INDIRECT (ram, 0x4c8758, 8) , (const, 0x1f0, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x1f0, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x1f0, 4)]
[ ---  CALL (ram, 0x2147c0, 8) , (unique, 0x1000010d, 8), (unique, 0x1000010d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c5720, 8)]
[(unique, 0x1000017e, 8) COPY (unique, 0x10000166, 8), (unique, 0x10000166, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8758, 8) MULTIEQUAL (ram, 0x4c8758, 8) , (ram, 0x4c8758, 8) , (ram, 0x4c8758, 8) , (ram, 0x4c8758, 8)]
[(ram, 0x4c8750, 8) MULTIEQUAL (ram, 0x4c8750, 8) , (ram, 0x4c8750, 8) , (ram, 0x4c8750, 8) , (ram, 0x4c8750, 8)]
[(ram, 0x4c5728, 8) MULTIEQUAL (unique, 0x1000016e, 8) , (unique, 0x10000176, 8) , (unique, 0x1000017e, 8) , (unique, 0x10000186, 8)]
[(ram, 0x4c5724, 4) MULTIEQUAL (ram, 0x4c5724, 4) , (ram, 0x4c5724, 4) , (ram, 0x4c5724, 4) , (ram, 0x4c5724, 4)]
[(ram, 0x4c5720, 4) MULTIEQUAL (ram, 0x4c5720, 4) , (ram, 0x4c5720, 4) , (ram, 0x4c5720, 4) , (ram, 0x4c5720, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x16f01e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c5730, 8) , (const, 0x0, 8), (ram, 0x4c5730, 8) MULTIEQUAL (ram, 0x4c5730, 8) , (ram, 0x4c5730, 8) , (ram, 0x4c5730, 8) , (ram, 0x4c5730, 8)]
[(unique, 0x1000013e, 8) COPY (ram, 0x4c5730, 8)]
[ ---  CBRANCH (ram, 0x16f00c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (ram, 0x4c5730, 8)]
[ ---  CBRANCH (ram, 0x16f000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100001ae, 8), (unique, 0x100001ae, 8) INT_ADD (register, 0x10, 8) , (const, 0xe8, 8), (register, 0x10, 8) COPY (unique, 0x1000014e, 8), (unique, 0x1000014e, 8) MULTIEQUAL (unique, 0x1000013e, 8) , (unique, 0x10000146, 8)]
[(register, 0xa0, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x10000146, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x16f100, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(register, 0x10, 8) CAST (unique, 0x100001b6, 8), (unique, 0x100001b6, 8) INT_ADD (register, 0x10, 8) , (const, 0xe8, 8)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c5730, 8)]
[(unique, 0x10000136, 8) COPY (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x16f107, 1)]
[(register, 0xa0, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c5720, 4) INDIRECT (ram, 0x4c5720, 4) , (const, 0x8b, 4)]
[(ram, 0x4c5728, 8) INDIRECT (ram, 0x4c5728, 8) , (const, 0x8b, 4)]
[(ram, 0x4c5730, 8) INDIRECT (ram, 0x4c5730, 8) , (const, 0x8b, 4)]
[(ram, 0x4c8750, 8) INDIRECT (ram, 0x4c8750, 8) , (const, 0x8b, 4)]
[(ram, 0x4c8758, 8) INDIRECT (ram, 0x4c8758, 8) , (const, 0x8b, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x8b, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x8b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100001be, 8), (unique, 0x100001be, 8) INT_ADD (register, 0x0, 8) , (const, 0xe8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000136, 8) , (unique, 0xbd80, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x16f01e, 1)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8758, 8) MULTIEQUAL (ram, 0x4c8758, 8) , (ram, 0x4c8758, 8) , (ram, 0x4c8758, 8)]
[(ram, 0x4c8750, 8) MULTIEQUAL (ram, 0x4c8750, 8) , (ram, 0x4c8750, 8) , (ram, 0x4c8750, 8)]
[(ram, 0x4c5730, 8) MULTIEQUAL (ram, 0x4c5730, 8) , (ram, 0x4c5730, 8) , (ram, 0x4c5730, 8)]
[(ram, 0x4c5728, 8) MULTIEQUAL (ram, 0x4c5728, 8) , (ram, 0x4c5728, 8) , (ram, 0x4c5728, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[(unique, 0x10000156, 4) COPY (ram, 0x4c5720, 4), (ram, 0x4c5720, 4) MULTIEQUAL (ram, 0x4c5720, 4) , (ram, 0x4c5720, 4) , (ram, 0x4c5720, 4)]
[ ---  CBRANCH (ram, 0x16f069, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c5724, 4) , (const, 0x0, 4)]
[(ram, 0x4c5728, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x16f047, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x1000015e, 4) COPY (unique, 0x10000125, 4), (unique, 0x10000125, 4) INT_ADD (ram, 0x4c5720, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x16f069, 1) , (unique, 0x10000129, 1), (unique, 0x10000129, 1) INT_NOTEQUAL (unique, 0x10000125, 4) , (const, 0x0, 4), (unique, 0x10000125, 4) INT_ADD (ram, 0x4c5720, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ae, 4)]
[(ram, 0x4c5724, 4) INDIRECT (ram, 0x4c5724, 4) , (const, 0x1ae, 4)]
[(ram, 0x4c5728, 8) INDIRECT (ram, 0x4c5728, 8) , (const, 0x1ae, 4)]
[(ram, 0x4c5730, 8) INDIRECT (ram, 0x4c5730, 8) , (const, 0x1ae, 4)]
[(ram, 0x4c8750, 8) INDIRECT (ram, 0x4c8750, 8) , (const, 0x1ae, 4)]
[(ram, 0x4c8758, 8) INDIRECT (ram, 0x4c8758, 8) , (const, 0x1ae, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x1ae, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x1ae, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x1ae, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x1ae, 4)]
[ ---  CALL (ram, 0x2147f0, 8) , (unique, 0x10000105, 8), (unique, 0x10000105, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c5720, 8)]
[(unique, 0x1000015a, 4) COPY (ram, 0x4c5720, 4), (ram, 0x4c5720, 4) INDIRECT (ram, 0x4c5720, 4) , (const, 0x1ae, 4), (ram, 0x4c5720, 4) INT_ADD (ram, 0x4c5720, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8758, 8) MULTIEQUAL (ram, 0x4c8758, 8) , (ram, 0x4c8758, 8) , (ram, 0x4c8758, 8)]
[(ram, 0x4c8750, 8) MULTIEQUAL (ram, 0x4c8750, 8) , (ram, 0x4c8750, 8) , (ram, 0x4c8750, 8)]
[(ram, 0x4c5730, 8) MULTIEQUAL (ram, 0x4c5730, 8) , (ram, 0x4c5730, 8) , (ram, 0x4c5730, 8)]
[(ram, 0x4c5728, 8) MULTIEQUAL (ram, 0x4c5728, 8) , (ram, 0x4c5728, 8) , (ram, 0x4c5728, 8)]
[(ram, 0x4c5724, 4) MULTIEQUAL (ram, 0x4c5724, 4) , (ram, 0x4c5724, 4) , (ram, 0x4c5724, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c5720, 4) COPY (unique, 0x10000162, 4), (unique, 0x10000162, 4) MULTIEQUAL (unique, 0x10000156, 4) , (unique, 0x1000015a, 4) , (unique, 0x1000015e, 4)]
[ ---  CBRANCH (ram, 0x16f120, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000132, 4) , (const, 0x0, 4)]
[(ram, 0x4c5720, 4) INDIRECT (ram, 0x4c5720, 4) , (const, 0x1a0, 4)]
[(ram, 0x4c5724, 4) INDIRECT (ram, 0x4c5724, 4) , (const, 0x1a0, 4)]
[(ram, 0x4c5728, 8) INDIRECT (ram, 0x4c5728, 8) , (const, 0x1a0, 4)]
[(ram, 0x4c5730, 8) INDIRECT (ram, 0x4c5730, 8) , (const, 0x1a0, 4)]
[(ram, 0x4c8750, 8) INDIRECT (ram, 0x4c8750, 8) , (const, 0x1a0, 4)]
[(ram, 0x4c8758, 8) INDIRECT (ram, 0x4c8758, 8) , (const, 0x1a0, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x1a0, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x1a0, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x1a0, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x1a0, 4)]
[ ---  CALLIND (register, 0x0, 8) , (register, 0x20, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100001ce, 8), (unique, 0x100001ce, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100001c6, 8), (unique, 0x100001c6, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8758, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8758, 8) , (const, 0x11, 4)]
[ ---  BRANCH (ram, 0x16f071, 1)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8758, 8) MULTIEQUAL (ram, 0x4c8758, 8) , (ram, 0x4c8758, 8)]
[(ram, 0x4c8750, 8) MULTIEQUAL (ram, 0x4c8750, 8) , (ram, 0x4c8750, 8)]
[(ram, 0x4c5730, 8) MULTIEQUAL (ram, 0x4c5730, 8) , (ram, 0x4c5730, 8)]
[(ram, 0x4c5728, 8) MULTIEQUAL (ram, 0x4c5728, 8) , (ram, 0x4c5728, 8)]
[(ram, 0x4c5724, 4) MULTIEQUAL (ram, 0x4c5724, 4) , (ram, 0x4c5724, 4)]
[(ram, 0x4c5720, 4) MULTIEQUAL (ram, 0x4c5720, 4) , (ram, 0x4c5720, 4)]
[ ---  CBRANCH (ram, 0x16f0e1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c5720, 4) COPY (ram, 0x4c5720, 4)]
[(ram, 0x4c5724, 4) COPY (ram, 0x4c5724, 4)]
[(ram, 0x4c5728, 8) COPY (ram, 0x4c5728, 8)]
[(ram, 0x4c5730, 8) COPY (ram, 0x4c5730, 8)]
[(ram, 0x4c8750, 8) COPY (ram, 0x4c8750, 8)]
[(ram, 0x4c8758, 8) COPY (ram, 0x4c8758, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(ram, 0x4c5720, 4) COPY (ram, 0x4c5720, 4)]
[(ram, 0x4c5724, 4) COPY (ram, 0x4c5724, 4)]
[(ram, 0x4c5728, 8) COPY (ram, 0x4c5728, 8)]
[(ram, 0x4c5730, 8) COPY (ram, 0x4c5730, 8)]
[(ram, 0x4c8750, 8) COPY (ram, 0x4c8750, 8)]
[(ram, 0x4c8758, 8) COPY (ram, 0x4c8758, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x100001d6, 8) , (const, 0xffffffff, 8), (unique, 0x100001d6, 8) CAST (stack, 0xffffffffffffffc8, 8)]
