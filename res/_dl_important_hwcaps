[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x3c, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x3c, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x3100, 8) , (const, 0x3c, 4), (unique, 0x3100, 8) CAST (unique, 0x10000b60, 8), (unique, 0x10000b60, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x10000a38, 8) , (const, 0x3c, 4), (unique, 0x10000a38, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x10000a40, 8) , (const, 0x3c, 4), (unique, 0x10000a40, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000a50, 8) , (const, 0x3c, 4), (unique, 0x10000a50, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x10000a58, 8) , (const, 0x3c, 4), (unique, 0x10000a58, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3c, 4)]
[ ---  CALL (ram, 0x459500, 8) , (const, 0xb, 8) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000b60, 8), (unique, 0x10000b60, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x3c, 4)]
[(unique, 0x100000d6, 8) CAST (unique, 0x10000b68, 8), (unique, 0x10000b68, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c, 4)]
[ ---  CBRANCH (ram, 0x484c88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000b80, 8), (unique, 0x10000b80, 8) INT_AND (unique, 0x10000b70, 8) , (unique, 0x10000b78, 8), (unique, 0x10000b78, 8) CAST (stack, 0xffffffffffffffc0, 8), (unique, 0x10000b70, 8) CAST (ram, 0x4c7d08, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x3c, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x10000b90, 8), (unique, 0x10000b90, 8) INT_ADD (unique, 0x10000b88, 8) , (const, 0x1, 8), (unique, 0x10000b88, 8) CAST (unique, 0x100000d6, 8)]
[ ---  BRANCH (ram, 0x484446, 1)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000990, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100000d6, 8) , (register, 0x10, 8)]
[(unique, 0x100009f8, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000ba8, 8), (unique, 0x10000ba8, 8) INT_ADD (unique, 0x10000ba0, 8) , (const, 0x1, 8), (unique, 0x10000ba0, 8) CAST (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100000d6, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x484434, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_NOTEQUAL (unique, 0x1d680, 8) , (const, 0x0, 8), (unique, 0x1d680, 8) INT_AND (unique, 0x1d600, 8) , (const, 0x1, 8), (unique, 0x1d600, 8) INT_RIGHT (unique, 0x10000b98, 8) , (unique, 0x1d580, 8), (unique, 0x10000b98, 8) CAST (register, 0x0, 8), (unique, 0x1d580, 8) INT_AND (register, 0x8, 8) , (const, 0x3f, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000bb8, 8), (unique, 0x10000bb8, 8) INT_ADD (unique, 0x10000bb0, 8) , (const, 0x2, 8), (unique, 0x10000bb0, 8) CAST (register, 0x10, 8)]
[(unique, 0x10000998, 8) COPY (unique, 0x3100, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x100009f8, 8) , (unique, 0x3100, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x10000990, 8) , (unique, 0x10000998, 8)]
[ ---  CBRANCH (ram, 0x484420, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (unique, 0x10000bc0, 8), (unique, 0x10000bc0, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x484b53, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8800, 8) , (const, 0x0, 8)]
[(register, 0x18, 8) PTRADD (unique, 0x100008ab, 8) , (unique, 0x100002a2, 8) , (const, 0x1, 8), (unique, 0x100008ab, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (unique, 0x100002a2, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffff000, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_MULT (unique, 0x10000bc8, 8) , (const, 0x10, 8), (unique, 0x10000bc8, 8) CAST (register, 0xa0, 8)]
[(unique, 0x10000b40, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000b50, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000904, 8) MULTIEQUAL (unique, 0x10000b40, 8) , (unique, 0x10000b48, 8)]
[(unique, 0x1000090c, 8) MULTIEQUAL (unique, 0x10000b50, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x484a8f, 1) , (unique, 0x10000903, 1), (unique, 0x10000903, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000904, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000bd8, 8) , (unique, 0xbe00, 8), (unique, 0x10000bd8, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000bd0, 8), (unique, 0x10000bd0, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x10000904, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000904, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10000b48, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000904, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000be8, 8), (unique, 0x10000be8, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (ram, 0x4c8800, 8) , (const, 0x55, 8) , (const, 0x8, 8)]
[(unique, 0x10000a88, 8) COPY (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x484a57, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8), (register, 0xb8, 8) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000be0, 8), (unique, 0x10000be0, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (ram, 0x4c8800, 8) , (const, 0x57, 8) , (const, 0x8, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x484491, 1)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x484480, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x484a48, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbd80, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000bf0, 8), (unique, 0x10000bf0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0xc, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) COPY (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x4844b0, 1)]
[ ---  CBRANCH (ram, 0x484480, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58b00, 8) , (const, 0x0, 8), (unique, 0x58b00, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffffb, 8), (unique, 0x3100, 8) INT_SUB (unique, 0xbd80, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xb0, 8)]
[(register, 0x10, 8) CAST (unique, 0x10000c08, 8), (unique, 0x10000c08, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000c00, 8), (unique, 0x10000c00, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (ram, 0x4c8800, 8)]
[ ---  CBRANCH (ram, 0x484480, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xc, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000bf8, 8), (unique, 0x10000bf8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0xa, 8) , (const, 0x4, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0xb0, 8) , (const, 0xb, 8)]
[(register, 0x8, 8) INT_2COMP (register, 0xb0, 8)]
[(unique, 0x3100, 8) INT_SUB (register, 0xb0, 8) , (const, 0x1, 8)]
[(register, 0x88, 8) INT_SUB (const, 0xc, 8) , (unique, 0x10000c10, 8), (unique, 0x10000c10, 8) CAST (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x4844fb, 1)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0xa8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x4844e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x2, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x4844e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x4, 4)]
[ ---  CBRANCH (ram, 0x4844e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x554e47, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x4844e0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xb, 4)]
[ ---  CBRANCH (ram, 0x484480, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0x10000c30, 8), (unique, 0x10000c30, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x10000c28, 8) , (register, 0x88, 8), (unique, 0x10000c28, 8) CAST (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10000c20, 8), (unique, 0x10000c20, 8) INT_ADD (unique, 0x10000c18, 8) , (register, 0x0, 8), (unique, 0x10000c18, 8) CAST (register, 0x10, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (register, 0xa8, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (register, 0x8, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (unique, 0x3100, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (unique, 0x3100, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) CAST (unique, 0x10000c40, 8), (unique, 0x10000c40, 8) INT_ADD (register, 0x0, 8) , (unique, 0x10000c38, 8), (unique, 0x10000c38, 8) CAST (register, 0x10, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb0, 8) , (const, 0xf, 8)]
[(register, 0x18, 8) PTRADD (unique, 0x10000603, 8) , (unique, 0x10000122, 8) , (const, 0x1, 8), (unique, 0x10000603, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (unique, 0x10000122, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_AND (register, 0x8, 8) , (const, 0xfffffffffffff000, 8), (register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0x10, 8), (register, 0x8, 8) INT_MULT (unique, 0x10000c58, 8) , (const, 0x10, 8), (unique, 0x10000c58, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) CAST (unique, 0x10000c50, 8), (unique, 0x10000c50, 8) INT_ADD (unique, 0x10000c48, 8) , (register, 0x8, 8), (unique, 0x10000c48, 8) CAST (register, 0xa0, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000c40, 8), (unique, 0x10000c40, 8) INT_ADD (register, 0x0, 8) , (unique, 0x10000c38, 8), (unique, 0x10000c38, 8) CAST (register, 0x10, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb0, 8) , (const, 0xf, 8)]
[(unique, 0x10000b30, 8) COPY (register, 0x20, 8)]
[(unique, 0x100004ed, 8) MULTIEQUAL (unique, 0x10000b30, 8) , (unique, 0x10000b38, 8)]
[(unique, 0x100004f5, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x48456a, 1) , (unique, 0x100004ec, 1), (unique, 0x100004ec, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100004ed, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c68, 8) , (unique, 0xbe00, 8), (unique, 0x10000c68, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000c60, 8), (unique, 0x10000c60, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100004ed, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100004ed, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10000b38, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004ed, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100004f5, 8) , (unique, 0x10000142, 8) , (const, 0x1, 8), (unique, 0x10000142, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0xfff, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x100004f5, 8) , (unique, 0x10000142, 8) , (const, 0x1, 8), (unique, 0x10000142, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0xfff, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48457e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0xfff, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c78, 8) , (unique, 0xbe00, 8), (unique, 0x10000c78, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000c70, 8), (unique, 0x10000c70, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x100004f5, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0xb0, 8) CAST (unique, 0x10000c98, 8), (unique, 0x10000c98, 8) INT_AND (unique, 0x10000c90, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000c90, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x100004f5, 8) , (unique, 0x10000613, 8) , (const, 0x1, 8), (unique, 0x10000613, 8) INT_ADD (unique, 0x10000142, 8) , (const, 0xf, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000cc0, 8) , (const, 0x4845c2, 8), (unique, 0x10000cc0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004f5, 8) , (unique, 0x1000061b, 8) , (const, 0x1, 8), (unique, 0x1000061b, 8) INT_ADD (unique, 0x10000142, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x2a7, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x2a7, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (register, 0x0, 8) , (const, 0x2a7, 4), (register, 0x0, 8) CAST (unique, 0x10000ca8, 8), (unique, 0x10000ca8, 8) INT_OR (unique, 0x10000ca0, 8) , (register, 0x8, 8), (unique, 0x10000ca0, 8) CAST (ram, 0x4c7d08, 8), (register, 0x8, 8) INT_LEFT (register, 0x0, 8) , (const, 0x34, 4), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2a7, 4), (stack, 0xffffffffffffffb0, 8) CAST (unique, 0x10000c88, 8), (unique, 0x10000c88, 8) INT_OR (unique, 0x10000389, 8) , (unique, 0x10000391, 8), (unique, 0x10000391, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10000389, 8) INT_AND (unique, 0x10000c80, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000c80, 8) CAST (register, 0x0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (register, 0x8, 8) , (const, 0x2a7, 4), (register, 0x8, 8) CAST (unique, 0x10000cb8, 8), (unique, 0x10000cb8, 8) INT_OR (register, 0x8, 8) , (unique, 0x10000cb0, 8), (unique, 0x10000cb0, 8) CAST (stack, 0xffffffffffffffc0, 8), (register, 0x8, 8) INT_LEFT (register, 0x0, 8) , (const, 0x34, 4), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CALL (ram, 0x458f00, 8) , (const, 0xb, 8) , (stack, 0xffffffffffffff78, 8)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100009d8, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x10000a18, 8) , (const, 0x2a7, 4), (unique, 0x10000a18, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x484cad, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3a00, 8) , (unique, 0x3100, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000cd0, 8), (unique, 0x10000cd0, 8) INT_ADD (unique, 0x10000cc8, 8) , (register, 0xa8, 8), (unique, 0x10000cc8, 8) CAST (register, 0x0, 8)]
[(stack, 0xffffffffffffff78, 8) COPY (stack, 0xffffffffffffff70, 8)]
[(unique, 0x10000a28, 8) COPY (register, 0xb0, 8)]
[(unique, 0x10000a68, 8) COPY (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ce8, 8) , (const, 0x4845fc, 8), (unique, 0x10000ce8, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004f5, 8) , (unique, 0x10000623, 8) , (const, 0x1, 8), (unique, 0x10000623, 8) INT_ADD (unique, 0x10000142, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x2d5, 4), (ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x2d5, 4), (ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x2d5, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x2d5, 4), (ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x2d5, 4), (stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000a28, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000a68, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000cf0, 8), (unique, 0x10000cf0, 8) CALL (ram, 0x401190, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000ce0, 8), (unique, 0x10000ce0, 8) INT_ADD (unique, 0x10000cd8, 8) , (const, 0x1, 8), (unique, 0x10000cd8, 8) CAST (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3a00, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x10000d08, 8), (unique, 0x10000d08, 8) INT_ADD (unique, 0x10000d00, 8) , (const, 0x1, 8), (unique, 0x10000d00, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa0, 8)]
[(unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000633, 8) , (const, 0x8, 8), (unique, 0x10000633, 8) INT_MULT (unique, 0x10000d10, 8) , (const, 0x2, 8), (unique, 0x10000d10, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x484c91, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_AND (stack, 0xffffffffffffffb0, 4) , (register, 0x10, 4), (stack, 0xffffffffffffffb0, 4) SUBPIECE (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8), (register, 0x10, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000cf8, 8), (unique, 0x10000cf8, 8) CAST (register, 0xa8, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2d5, 4), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3a00, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0xbe00, 8) CAST (unique, 0x10000d20, 8), (unique, 0x10000d20, 8) INT_ADD (unique, 0x10000d18, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10000d18, 8) CAST (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000968, 8) COPY (unique, 0x3800, 8)]
[ ---  BRANCH (ram, 0x484635, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0x3100, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x33e, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x338, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x33e, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x338, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x33e, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x338, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x33e, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x338, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x3a00, 8) PTRADD (register, 0xb0, 8) , (unique, 0x1000065b, 8) , (const, 0x8, 8), (unique, 0x1000065b, 8) INT_ADD (unique, 0x10000653, 8) , (const, 0x2, 8), (unique, 0x10000653, 8) INT_MULT (unique, 0x10000d38, 8) , (const, 0x2, 8), (unique, 0x10000d38, 8) CAST (register, 0xa0, 8)]
[(unique, 0x10000960, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000d30, 8), (unique, 0x10000d30, 8) INT_ADD (unique, 0x10000d28, 8) , (const, 0x2, 8), (unique, 0x10000d28, 8) CAST (register, 0xa0, 8)]
[(unique, 0x100009f0, 8) COPY (unique, 0x3800, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x100009f0, 8) , (register, 0xa0, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x3a00, 8) , (unique, 0x3400, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10000960, 8) , (unique, 0x10000968, 8)]
[(unique, 0x10000ab8, 8) COPY (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000ad0, 8) COPY (unique, 0x10000ac0, 8), (unique, 0x10000ac0, 8) COPY (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000ae8, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0xbe00, 8)]
[(unique, 0x10000af8, 8) COPY (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x4845f0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3a00, 8) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000d58, 8), (unique, 0x10000d58, 8) PTRADD (unique, 0x3880, 8) , (unique, 0x10000d50, 8) , (const, 0x1, 8), (unique, 0x10000d50, 8) CAST (register, 0x0, 8), (unique, 0x3880, 8) CAST (unique, 0x10000d48, 8), (unique, 0x10000d48, 8) INT_ADD (unique, 0x10000d40, 8) , (const, 0x2, 8), (unique, 0x10000d40, 8) CAST (register, 0xa8, 8)]
[(register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0xe, 8) , (const, 0x4, 8)]
[(unique, 0x10000a90, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x484a53, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (register, 0x18, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x10000a88, 8) , (unique, 0x10000a90, 8)]
[(register, 0x18, 8) PTRADD (unique, 0x10000853, 8) , (unique, 0x10000252, 8) , (const, 0x1, 8), (unique, 0x10000853, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (unique, 0x10000252, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffff000, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_MULT (unique, 0x10000d60, 8) , (const, 0x10, 8), (unique, 0x10000d60, 8) CAST (register, 0xa0, 8)]
[(unique, 0x10000a98, 8) COPY (register, 0x20, 8)]
[(unique, 0x100003e6, 8) MULTIEQUAL (unique, 0x10000a98, 8) , (unique, 0x10000aa0, 8)]
[(unique, 0x100003ee, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x484a8f, 1) , (unique, 0x100003dd, 1), (unique, 0x100003dd, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100003e6, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000d70, 8) , (unique, 0xbe00, 8), (unique, 0x10000d70, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000d68, 8), (unique, 0x10000d68, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100003e6, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100003e6, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10000aa0, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100003e6, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000272, 8) , (const, 0x1, 8), (unique, 0x10000272, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100003ee, 8) , (unique, 0x1000090c, 8)]
[ ---  CBRANCH (ram, 0x484aa2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000d80, 8) , (unique, 0xbe00, 8), (unique, 0x10000d80, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000d78, 8), (unique, 0x10000d78, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000d90, 8), (unique, 0x10000d90, 8) INT_AND (unique, 0x10000d88, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000d88, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000863, 8) , (const, 0x1, 8), (unique, 0x10000863, 8) INT_ADD (unique, 0x10000272, 8) , (const, 0xf, 8)]
[(unique, 0x100009d0, 8) COPY (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[(unique, 0x10000aa8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb0, 8)]
[(unique, 0x10000ab0, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100009d0, 8) , (unique, 0x100009d8, 8)]
[(unique, 0x10000ac8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb0, 8)]
[(unique, 0x10000ae0, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0x10000af0, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10000b00, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x100003f7, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100003ff, 8) MULTIEQUAL (unique, 0x10000aa8, 8) , (register, 0x38, 8)]
[(unique, 0x10000407, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa0, 8)]
[(unique, 0x1000040f, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(unique, 0x10000417, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(unique, 0x1000041f, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(unique, 0x10000427, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(unique, 0x1000042f, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x10000437, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(unique, 0x1000043b, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x1000044b, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x1000045b, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000463, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x1000046b, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000473, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x1000047b, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x1000048b, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000049b, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100004a3, 8) MULTIEQUAL (unique, 0x10000b00, 8) , (register, 0x20, 8)]
[(unique, 0x100009a0, 8) COPY (unique, 0x10000453, 8), (unique, 0x10000453, 8) COPY (unique, 0x10000ad8, 8), (unique, 0x10000ad8, 8) MULTIEQUAL (unique, 0x10000ac8, 8) , (unique, 0x10000ad0, 8)]
[(unique, 0x100009e0, 8) COPY (unique, 0x10000483, 8), (unique, 0x10000483, 8) MULTIEQUAL (unique, 0x10000ae0, 8) , (unique, 0x10000ae8, 8)]
[(unique, 0x10000a70, 8) COPY (unique, 0x10000493, 8), (unique, 0x10000493, 8) MULTIEQUAL (unique, 0x10000af0, 8) , (unique, 0x10000af8, 8)]
[ ---  CBRANCH (ram, 0x484abf, 1) , (unique, 0x100003f6, 1), (unique, 0x100003f6, 1) INT_NOTEQUAL (unique, 0x10000443, 8) , (const, 0x0, 8), (unique, 0x10000443, 8) MULTIEQUAL (unique, 0x10000ab0, 8) , (unique, 0x10000ab8, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000da0, 8), (unique, 0x10000da0, 8) INT_ADD (unique, 0x10000d98, 8) , (const, 0x1, 8), (unique, 0x10000d98, 8) CAST (unique, 0x10000407, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100009b0, 8) COPY (unique, 0x10000407, 8)]
[(unique, 0x10000a08, 8) COPY (unique, 0x10000443, 8)]
[(unique, 0x10000a30, 8) COPY (unique, 0x10000483, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000049b, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x1000047b, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x10000473, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x1000046b, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x10000463, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000a30, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000044b, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x1000043b, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (unique, 0x10000437, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x1000042f, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (unique, 0x10000427, 8) , (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (unique, 0x1000041f, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (unique, 0x10000417, 8) , (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (unique, 0x1000040f, 8) , (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x3400, 8) PTRADD (register, 0x10, 8) , (unique, 0x1000086b, 8) , (const, 0x8, 8), (unique, 0x1000086b, 8) INT_MULT (unique, 0x10000db0, 8) , (const, 0x2, 8), (unique, 0x10000db0, 8) CAST (register, 0x18, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000453, 8) , (stack, 0xffffffffffffffb0, 8) , (register, 0x10, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x100009b0, 8) , (unique, 0x100009b8, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x484b98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1d680, 8) , (const, 0x0, 8), (unique, 0x1d680, 8) INT_AND (unique, 0x1d600, 8) , (const, 0x1, 8), (unique, 0x1d600, 8) INT_RIGHT (unique, 0x10000da8, 8) , (unique, 0x1d580, 8), (unique, 0x10000da8, 8) CAST (register, 0xb0, 8), (unique, 0x1d580, 8) INT_AND (register, 0xb8, 8) , (const, 0x3f, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000a08, 8) , (unique, 0x10000a10, 8) , (register, 0xb0, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x484ae0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0x10000db8, 8), (unique, 0x10000db8, 8) CAST (register, 0x38, 8), (register, 0x38, 8) PTRADD (unique, 0x10000513, 8) , (unique, 0x1000028a, 8) , (const, 0x1, 8), (unique, 0x10000513, 8) PTRSUB (const, 0x0, 8) , (const, 0x49e8d0, 8), (unique, 0x1000028a, 8) INT_MULT (register, 0x0, 8) , (const, 0x9, 8), (register, 0x0, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000dc0, 8) , (const, 0x484b17, 8), (unique, 0x10000dc0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xafe, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xafe, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xafe, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xafe, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xafe, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xafe, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xafe, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xafe, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000a60, 8) , (const, 0xafe, 4), (unique, 0x10000a60, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xafe, 4)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xb36, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xafe, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xafb, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xb36, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xafe, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xafb, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xb36, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xafe, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xafb, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xb36, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xafe, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xafb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x10000dc8, 8), (unique, 0x10000dc8, 8) CALL (ram, 0x401190, 8)]
[(register, 0x38, 8) CAST (unique, 0x10000de8, 8), (unique, 0x10000de8, 8) INT_XOR (unique, 0x10000dd8, 8) , (unique, 0x10000de0, 8), (unique, 0x10000de0, 8) CAST (register, 0x30, 8), (unique, 0x10000dd8, 8) CAST (register, 0xb0, 8), (register, 0x30, 8) CAST (unique, 0x10000dd0, 8), (unique, 0x10000dd0, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (unique, 0x10000338, 1) , (const, 0x3f, 1), (unique, 0x10000338, 1) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x10000df8, 8), (unique, 0x10000df8, 8) INT_ADD (unique, 0x10000df0, 8) , (const, 0x2, 8), (unique, 0x10000df0, 8) CAST (register, 0x18, 8)]
[(unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffffb0, 8) , (unique, 0x10000893, 8) , (const, 0x8, 8), (unique, 0x10000893, 8) INT_ADD (unique, 0x1000088b, 8) , (const, 0x2, 8), (unique, 0x1000088b, 8) INT_MULT (unique, 0x10000e00, 8) , (const, 0x2, 8), (unique, 0x10000e00, 8) CAST (register, 0x18, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (register, 0x10, 8) , (const, 0xafe, 4)]
[(unique, 0x100009a8, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (register, 0x10, 8) , (const, 0xafe, 4)]
[(unique, 0x100009e8, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xafe, 4)]
[(unique, 0x10000a78, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (register, 0x10, 8) , (const, 0xafe, 4)]
[ ---  CBRANCH (ram, 0x484bc2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x10000dd0, 8), (unique, 0x10000dd0, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (unique, 0x10000338, 1) , (const, 0x3f, 1), (unique, 0x10000338, 1) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4)]
[(register, 0x80, 8) CAST (unique, 0x10000e10, 8), (unique, 0x10000e10, 8) INT_ADD (unique, 0x10000e08, 8) , (const, 0x1, 8), (unique, 0x10000e08, 8) CAST (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x100009b8, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000a10, 8) COPY (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x484ae0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000049b, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x1000048b, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x1000047b, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x1000046b, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x10000463, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x1000045b, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000044b, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x1000043b, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (unique, 0x10000437, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x1000042f, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (unique, 0x10000427, 8) , (ram, 0x4c8800, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (unique, 0x1000041f, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (unique, 0x10000417, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (unique, 0x1000040f, 8) , (ram, 0x4b0520, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x100009e0, 8) , (unique, 0x100009e8, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x100009a0, 8) , (unique, 0x100009a8, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x100003ff, 8) , (unique, 0x3a00, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (unique, 0x10000a80, 8), (unique, 0x10000a80, 8) MULTIEQUAL (unique, 0x10000a70, 8) , (unique, 0x10000a78, 8)]
[(unique, 0x10000970, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100003f7, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x48467c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff98, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x10000473, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x37b, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x375, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x37b, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x375, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x37b, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x375, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x37b, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x375, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10000e18, 8), (unique, 0x10000e18, 8) CAST (stack, 0xffffffffffffff90, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x8, 8) CAST (unique, 0x10000e28, 8), (unique, 0x10000e28, 8) INT_ADD (unique, 0x10000e20, 8) , (const, 0x1, 8), (unique, 0x10000e20, 8) CAST (register, 0x8, 8)]
[(register, 0x0, 8) PTRADD (register, 0x18, 8) , (unique, 0x10000673, 8) , (const, 0x8, 8), (unique, 0x10000673, 8) INT_MULT (unique, 0x10000e30, 8) , (const, 0x2, 8), (unique, 0x10000e30, 8) CAST (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x3, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x3b9, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x3b7, 4), (ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x3b9, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x3b7, 4), (ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x3b9, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x3b7, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x3b9, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x3b7, 4), (ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x10000e38, 8), (unique, 0x10000e38, 8) CAST (unique, 0x1000051b, 8), (unique, 0x1000051b, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b04ba, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x484cba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000970, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000e40, 8) , (unique, 0x1000050b, 8), (unique, 0x10000e40, 8) CAST (register, 0x20, 8), (unique, 0x1000050b, 8) PTRSUB (const, 0x0, 8) , (const, 0x484cd9, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xaa0, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xaa0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xaa0, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xaa0, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xaa0, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xaa0, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xaa0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xaa0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xaa0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xaa0, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x1000052b, 8) , (unique, 0x10000523, 8) , (const, 0xcc, 4) , (unique, 0x1000053b, 8), (unique, 0x1000053b, 8) COPY (const, 0x4b0500, 8), (unique, 0x1000052b, 8) COPY (const, 0x4b04ca, 8), (unique, 0x10000523, 8) COPY (const, 0x4b04be, 8)]
[(ram, 0x4b0520, 8) COPY (ram, 0x4b0520, 8), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xaa0, 4)]
[(ram, 0x4b0528, 8) COPY (ram, 0x4b0528, 8), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xaa0, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xaa0, 4)]
[(ram, 0x4c8800, 8) COPY (ram, 0x4c8800, 8), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xaa0, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000e48, 8), (unique, 0x10000e48, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x484bce, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x1, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000e68, 8), (unique, 0x10000e68, 8) INT_ADD (unique, 0x10000e60, 8) , (const, 0x1, 8), (unique, 0x10000e60, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffffa0, 8) , (const, 0x2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000e70, 8) , (const, 0x484be6, 8), (unique, 0x10000e70, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa68, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa65, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa68, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa65, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa68, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa65, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa68, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa65, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0xa68, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa68, 4)]
[ ---  CBRANCH (ram, 0x484c33, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000e78, 8), (unique, 0x10000e78, 8) CALL (ram, 0x426550, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000e58, 8), (unique, 0x10000e58, 8) INT_ADD (unique, 0x10000e50, 8) , (const, 0x21, 8), (unique, 0x10000e50, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10000e80, 8), (unique, 0x10000e80, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x10000e88, 8), (unique, 0x10000e88, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10000e90, 8), (unique, 0x10000e90, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000e98, 8) , (const, 0x484c56, 8), (unique, 0x10000e98, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa89, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa89, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa89, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa89, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa89, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa89, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa89, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa89, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x10000ea0, 8), (unique, 0x10000ea0, 8) CALL (ram, 0x401160, 8) , (unique, 0x3100, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffffa0, 8) , (const, 0x2, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa89, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff88, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa89, 4)]
[(ram, 0x4b0520, 8) COPY (ram, 0x4b0520, 8), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa98, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa93, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa8e, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa89, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa86, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa83, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa80, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa7e, 4)]
[(ram, 0x4b0528, 8) COPY (ram, 0x4b0528, 8), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa98, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa93, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa8e, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa89, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa86, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa83, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa80, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa7e, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa98, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa93, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa8e, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa89, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa86, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa83, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa80, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa7e, 4)]
[(ram, 0x4c8800, 8) COPY (ram, 0x4c8800, 8), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa98, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa93, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa8e, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa89, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa86, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa83, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa80, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa7e, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8)]
[(register, 0x0, 8) INT_MULT (unique, 0x10000ea8, 8) , (const, 0x10, 8), (unique, 0x10000ea8, 8) CAST (register, 0xa0, 8)]
[(unique, 0x3a00, 8) INT_ADD (unique, 0x10000ec8, 8) , (unique, 0x3880, 8), (unique, 0x10000ec8, 8) CAST (unique, 0xbd80, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x10000ec0, 8) , (const, 0x2, 8), (unique, 0x10000ec0, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000eb8, 8), (unique, 0x10000eb8, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3a00, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x100006a3, 8) , (const, 0x8, 8), (unique, 0x100006a3, 8) INT_ADD (unique, 0x1000069b, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x1000069b, 8) INT_MULT (unique, 0x10000eb0, 8) , (const, 0x2, 8), (unique, 0x10000eb0, 8) CAST (register, 0xa0, 8)]
[(unique, 0x10000342, 4) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x484c03, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x2, 8) , (register, 0xa0, 8)]
[(unique, 0x1000033a, 8) INT_MULT (unique, 0x3a00, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x484c9e, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3800, 8) , (const, 0x4, 8), (unique, 0x3800, 8) INT_SUB (unique, 0x10000ed0, 8) , (const, 0x3, 8), (unique, 0x10000ed0, 8) CAST (register, 0xa0, 8)]
[(register, 0x30, 8) COPY (const, 0x1, 8)]
[(register, 0x38, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x484748, 1)]
[(register, 0x1220, 8) COPY (const, 0x0, 8)]
[(register, 0x1228, 8) COPY (const, 0x0, 8)]
[(register, 0x38, 8) PTRADD (register, 0x18, 8) , (unique, 0x100006bb, 8) , (const, 0x8, 8), (unique, 0x100006bb, 8) INT_MULT (register, 0x38, 8) , (const, 0x4, 8), (register, 0x38, 8) INT_RIGHT (unique, 0x3800, 8) , (const, 0x1, 4)]
[(unique, 0x10000958, 8) COPY (register, 0x18, 8)]
[(register, 0x1220, 8) INT_ADD (unique, 0x10000ed8, 8) , (unique, 0x100006e3, 8), (unique, 0x10000ed8, 8) CAST (unique, 0x10000352, 8), (unique, 0x100006e3, 8) INT_ADD (register, 0x1220, 8) , (ram, 0x4b0520, 8), (unique, 0x10000352, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000958, 8) , (register, 0x0, 8), (register, 0x1220, 8) MULTIEQUAL (register, 0x1220, 8) , (register, 0x1220, 8)]
[(register, 0x1228, 8) INT_ADD (unique, 0x10000ee0, 8) , (unique, 0x100006eb, 8), (unique, 0x10000ee0, 8) CAST (unique, 0x1000036a, 8), (unique, 0x100006eb, 8) INT_ADD (register, 0x1228, 8) , (ram, 0x4b0528, 8), (unique, 0x1000036a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000958, 8) , (register, 0x0, 8), (register, 0x1228, 8) MULTIEQUAL (register, 0x1228, 8) , (register, 0x1228, 8)]
[ ---  CBRANCH (ram, 0x484708, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000958, 8) , (register, 0x0, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0x30, 8) , (const, 0x2, 8), (register, 0x30, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffffffe, 8)]
[(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8), (register, 0x30, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffffffe, 8)]
[(register, 0x8, 8) INT_ADD (unique, 0x1000033a, 8) , (register, 0x1220, 8), (register, 0x1220, 8) INT_ADD (register, 0x1220, 8) , (register, 0x1228, 8)]
[(unique, 0x3a00, 8) INT_ADD (unique, 0x10000ef0, 8) , (unique, 0x3880, 8), (unique, 0x10000ef0, 8) CAST (unique, 0xbd80, 8), (unique, 0x3880, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x10000703, 8) , (const, 0x8, 8), (unique, 0x10000703, 8) INT_ADD (unique, 0x100006fb, 8) , (const, 0x1, 8), (unique, 0x100006fb, 8) INT_MULT (register, 0x30, 8) , (const, 0x2, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0x1000033a, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x484c74, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3100, 8) , (register, 0xa0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000ee8, 8), (unique, 0x10000ee8, 8) INT_ADD (register, 0x38, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x4847a2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x3, 8)]
[(register, 0x30, 4) COPY (const, 0x3, 4)]
[ ---  BRANCH (ram, 0x4847ca, 1)]
[(unique, 0x3a00, 8) INT_ADD (unique, 0x10000ef8, 8) , (unique, 0x3880, 8), (unique, 0x10000ef8, 8) CAST (unique, 0xbd80, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x10000723, 8) , (const, 0x8, 8), (unique, 0x10000723, 8) INT_ADD (unique, 0x1000071b, 8) , (const, 0x1, 8), (unique, 0x1000071b, 8) INT_MULT (register, 0x38, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x4847a2, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0xa0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000f00, 8), (unique, 0x10000f00, 8) INT_ADD (register, 0x38, 8) , (const, 0x2, 8)]
[(unique, 0x3a00, 8) INT_ADD (unique, 0x10000f18, 8) , (unique, 0x3880, 8), (unique, 0x10000f18, 8) CAST (unique, 0xbd80, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x10000743, 8) , (const, 0x8, 8), (unique, 0x10000743, 8) INT_ADD (unique, 0x1000073b, 8) , (const, 0x1, 8), (unique, 0x1000073b, 8) INT_MULT (unique, 0x10000f10, 8) , (const, 0x2, 8), (unique, 0x10000f10, 8) CAST (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x4847a2, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x38, 8) , (register, 0xa0, 8), (register, 0x38, 8) CAST (unique, 0x10000f08, 8), (unique, 0x10000f08, 8) INT_ADD (register, 0x38, 8) , (const, 0x3, 8)]
[(unique, 0x3a00, 8) INT_ADD (unique, 0x10000f28, 8) , (unique, 0x3880, 8), (unique, 0x10000f28, 8) CAST (unique, 0xbd80, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x10000763, 8) , (const, 0x8, 8), (unique, 0x10000763, 8) INT_ADD (unique, 0x1000075b, 8) , (const, 0x1, 8), (unique, 0x1000075b, 8) INT_MULT (unique, 0x10000f20, 8) , (const, 0x2, 8), (unique, 0x10000f20, 8) CAST (unique, 0x3100, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x3a00, 8) , (unique, 0x3a00, 8) , (unique, 0x3a00, 8) , (unique, 0x3a00, 8)]
[ ---  CBRANCH (ram, 0x484bee, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x3f, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x484bee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8), (register, 0x38, 8) INT_RIGHT (unique, 0x3200, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x43, 1) , (unique, 0x10000334, 1), (unique, 0x10000334, 1) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4), (unique, 0x3200, 8) INT_ADD (register, 0x0, 8) , (const, 0x80, 8)]
[(register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (unique, 0x10000336, 1) , (const, 0x3, 1), (unique, 0x10000336, 1) SUBPIECE (register, 0x30, 4) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3a00, 8), (register, 0x30, 4) MULTIEQUAL (unique, 0x10000342, 4) , (register, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffffa0, 8) , (unique, 0x10000f48, 8), (unique, 0x10000f48, 8) CAST (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x10000f40, 8), (unique, 0x10000f40, 8) INT_SEXT (register, 0x38, 4), (register, 0x38, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x30, 4) , (const, 0x0, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (unique, 0x10000342, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f58, 8) , (const, 0x48480c, 8), (unique, 0x10000f58, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x669, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x63a, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x669, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x63a, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x669, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x63a, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x669, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x63a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (register, 0x0, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (register, 0x38, 4) , (const, 0x669, 4), (register, 0x38, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x30, 4) , (const, 0x0, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (unique, 0x10000342, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x10000a20, 8) , (const, 0x669, 4), (unique, 0x10000a20, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x10000f40, 8), (unique, 0x10000f40, 8) INT_SEXT (register, 0x38, 4), (register, 0x38, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x30, 4) , (const, 0x0, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (unique, 0x10000342, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x669, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x669, 4)]
[(unique, 0x10000928, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x10000a48, 8) , (const, 0x669, 4), (unique, 0x10000a48, 8) COPY (unique, 0x3a00, 8)]
[(stack, 0xffffffffffffff98, 4) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x669, 4), (stack, 0xffffffffffffff98, 8) CAST (unique, 0x10000f38, 8), (unique, 0x10000f38, 8) INT_OR (unique, 0x1000039c, 8) , (unique, 0x100003a4, 8), (unique, 0x100003a4, 8) INT_ZEXT (register, 0x30, 4), (unique, 0x1000039c, 8) INT_AND (unique, 0x10000f30, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000f30, 8) CAST (stack, 0xffffffffffffff98, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (unique, 0x10000342, 4)]
[ ---  CBRANCH (ram, 0x484bee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000f60, 8), (unique, 0x10000f60, 8) CALL (ram, 0x426550, 8) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) INT_ADD (register, 0x0, 8) , (register, 0xa8, 8), (register, 0xa8, 8) INT_MULT (unique, 0x10000f50, 8) , (const, 0x10, 8), (unique, 0x10000f50, 8) CAST (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x10000f40, 8), (unique, 0x10000f40, 8) INT_SEXT (register, 0x38, 4), (register, 0x38, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x30, 4) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3a00, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (unique, 0x10000342, 4)]
[(stack, 0xffffffffffffff80, 8) CAST (unique, 0x10000f80, 8), (unique, 0x10000f80, 8) INT_OR (unique, 0x100003ad, 8) , (unique, 0x100003b5, 8), (unique, 0x100003b5, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x100003ad, 8) INT_AND (unique, 0x10000f78, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000f78, 8) CAST (stack, 0xffffffffffffff80, 8), (register, 0x0, 4) INT_SUB (stack, 0xffffffffffffff98, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000f70, 8), (unique, 0x10000f70, 8) PTRADD (register, 0x0, 8) , (unique, 0x10000773, 8) , (const, 0x8, 8), (unique, 0x10000773, 8) INT_MULT (unique, 0x10000f68, 8) , (const, 0x2, 8), (unique, 0x10000f68, 8) CAST (register, 0x38, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000f88, 8), (unique, 0x10000f88, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x0, 4)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x6da, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x6b2, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x6da, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x6b2, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x6da, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x6b2, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x6da, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x6b2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3400, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x10000f70, 8), (unique, 0x10000f70, 8) PTRADD (register, 0x0, 8) , (unique, 0x10000773, 8) , (const, 0x8, 8), (unique, 0x10000773, 8) INT_MULT (unique, 0x10000f68, 8) , (const, 0x2, 8), (unique, 0x10000f68, 8) CAST (register, 0x38, 8)]
[(stack, 0xffffffffffffff90, 8) CAST (unique, 0x10000f98, 8), (unique, 0x10000f98, 8) INT_OR (unique, 0x100003bd, 8) , (unique, 0x100003c5, 8), (unique, 0x100003c5, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x100003bd, 8) INT_AND (unique, 0x10000f90, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000f90, 8) CAST (stack, 0xffffffffffffff90, 8), (register, 0x80, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_SUB (stack, 0xffffffffffffff98, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x484c0b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fa0, 8) , (const, 0x484c18, 8), (unique, 0x10000fa0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x10000fa8, 8), (unique, 0x10000fa8, 8) CALL (ram, 0x401160, 8) , (unique, 0x3400, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fb0, 8) , (const, 0x484c2b, 8), (unique, 0x10000fb0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xa2b, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (register, 0x0, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa1f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa2b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa1f, 4)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa2d, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa2b, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa26, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa1f, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa2d, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa2b, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa26, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa1f, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa2d, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa2b, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa26, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa1f, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa2d, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa2b, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa26, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa1f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x10000fb8, 8), (unique, 0x10000fb8, 8) CALL (ram, 0x401160, 8) , (unique, 0x3100, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb0, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x0, 8) CAST (unique, 0x10000fa8, 8), (unique, 0x10000fa8, 8) CALL (ram, 0x401160, 8) , (unique, 0x3400, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa1f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x484915, 1)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000fc0, 8), (unique, 0x10000fc0, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000928, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x10000fd0, 8), (unique, 0x10000fd0, 8) INT_ADD (unique, 0x10000fc8, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x10000fc8, 8) CAST (register, 0xa0, 8)]
[(register, 0xb8, 8) INT_SEXT (unique, 0x10000fd8, 4), (unique, 0x10000fd8, 4) CAST (register, 0x80, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(register, 0xa0, 8) INT_SUB (register, 0xa0, 8) , (const, 0x2, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fdc, 8) , (const, 0x4848a1, 8), (unique, 0x10000fdc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x716, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x716, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (register, 0xa0, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x716, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x716, 4), (stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x716, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x716, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x716, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x716, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x716, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x716, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x716, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x716, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x716, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x71c, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x716, 4), (ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x71c, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x716, 4), (ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x71c, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x716, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x71c, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x716, 4), (ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x10000fe4, 8), (unique, 0x10000fe4, 8) CALL (ram, 0x401160, 8) , (register, 0x38, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3100, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x38, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x10000fe4, 8), (unique, 0x10000fe4, 8) CALL (ram, 0x401160, 8) , (register, 0x38, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3100, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000a00, 8) COPY (unique, 0x10000fec, 8), (unique, 0x10000fec, 8) CAST (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x716, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  BRANCH (ram, 0x4848be, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0x3100, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x4848b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (register, 0xa0, 8), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (unique, 0x100003ce, 1) , (const, 0x1f, 1), (unique, 0x100003ce, 1) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000a00, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ff4, 8) , (const, 0x4848e2, 8), (unique, 0x10000ff4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x78d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x78d, 4)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x78f, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x78d, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x78f, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x78d, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x78f, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x78d, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x78f, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x78d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x10000ffc, 8), (unique, 0x10000ffc, 8) CALL (ram, 0x401160, 8) , (register, 0x38, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x18, 8) , (unique, 0x100007ab, 8) , (const, 0x8, 8), (unique, 0x100007ab, 8) INT_MULT (register, 0xb0, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x1000079b, 8) , (const, 0x8, 8), (unique, 0x1000079b, 8) INT_ADD (unique, 0x10000793, 8) , (const, 0x1, 8), (unique, 0x10000793, 8) INT_MULT (register, 0xb0, 8) , (const, 0x2, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x10000ffc, 8), (unique, 0x10000ffc, 8) CALL (ram, 0x401160, 8) , (register, 0x38, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x18, 8) , (unique, 0x100007ab, 8) , (const, 0x8, 8), (unique, 0x100007ab, 8) INT_MULT (register, 0xb0, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x1000079b, 8) , (const, 0x8, 8), (unique, 0x1000079b, 8) INT_ADD (unique, 0x10000793, 8) , (const, 0x1, 8), (unique, 0x10000793, 8) INT_MULT (register, 0xb0, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x4848be, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (const, 0x0, 8), (register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x4848ef, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0x0, 8), (register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001004, 8) , (const, 0x4848fb, 8), (unique, 0x10001004, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x7a3, 4), (stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7a3, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x7a5, 4), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x7a3, 4), (ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x7a5, 4), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x7a3, 4), (ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x7a5, 4), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x7a3, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x7a5, 4), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x7a3, 4), (ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x1000100c, 8), (unique, 0x1000100c, 8) CALL (ram, 0x401160, 8) , (register, 0x38, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb0, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x38, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10001014, 8), (unique, 0x10001014, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x1000100c, 8), (unique, 0x1000100c, 8) CALL (ram, 0x401160, 8) , (register, 0x38, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb0, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x38, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x484890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff50, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x10000948, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x7fb, 4), (ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x7fb, 4), (ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x7fb, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x7fb, 4), (ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000101c, 8) , (unique, 0x100007cb, 8) , (const, 0x8, 8), (unique, 0x1000101c, 8) CAST (register, 0xb0, 8), (unique, 0x100007cb, 8) INT_ADD (unique, 0x100007c3, 8) , (const, 0x1, 8), (unique, 0x100007c3, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000948, 8) , (unique, 0x10000950, 8)]
[(unique, 0x10000950, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000948, 8) , (unique, 0x10000950, 8)]
[ ---  CBRANCH (ram, 0x484920, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 8) , (stack, 0xffffffffffffff78, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000948, 8) , (unique, 0x10000950, 8)]
[ ---  CBRANCH (ram, 0x4849a2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff70, 8) , (const, 0x0, 8)]
[(register, 0x18, 8) INT_ADD (unique, 0x10001024, 8) , (stack, 0xffffffffffffff60, 8), (unique, 0x10001024, 8) CAST (register, 0x18, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (unique, 0x100004dc, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (unique, 0x100004d4, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (unique, 0x100004cc, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (unique, 0x100004c4, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x30, 8) INT_SEXT (register, 0x30, 4), (register, 0x30, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) CAST (unique, 0x10001034, 8), (unique, 0x10001034, 8) INT_ADD (unique, 0x1000102c, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x1000102c, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0x8, 8)]
[(unique, 0x10000b10, 8) COPY (unique, 0x1000103c, 8), (unique, 0x1000103c, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10000b28, 8) COPY (stack, 0xffffffffffffff70, 8)]
[(unique, 0x100004c4, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8) , (unique, 0x100004c4, 8)]
[(unique, 0x100004cc, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8) , (unique, 0x100004cc, 8)]
[(unique, 0x100004d4, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (unique, 0x100004d4, 8)]
[(unique, 0x100004dc, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8) , (unique, 0x100004dc, 8)]
[(unique, 0x100004bb, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000b08, 8) , (unique, 0x10000b10, 8) , (unique, 0x10000b18, 8)]
[ ---  CBRANCH (ram, 0x484994, 1) , (unique, 0x100004c3, 1), (unique, 0x100004c3, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (register, 0x30, 8) , (unique, 0x10001054, 8), (unique, 0x10001054, 8) CAST (unique, 0x100004b3, 8), (unique, 0x100004b3, 8) CAST (unique, 0x1000104c, 8), (unique, 0x1000104c, 8) INT_ADD (unique, 0x10001044, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10001044, 8) CAST (unique, 0x100004e4, 8), (unique, 0x100004e4, 8) MULTIEQUAL (unique, 0x10000b20, 8) , (unique, 0x10000b28, 8) , (unique, 0x100004b3, 8)]
[(unique, 0x10000b18, 8) COPY (unique, 0x100004bb, 8)]
[ ---  CBRANCH (ram, 0x484969, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100004b3, 8) , (const, 0x0, 8)]
[(register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0xfffffffffffffff0, 8)]
[ ---  CBRANCH (ram, 0x484958, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(ram, 0x4b0520, 8) INDIRECT (unique, 0x100004c4, 8) , (const, 0x890, 4)]
[(ram, 0x4b0528, 8) INDIRECT (unique, 0x100004cc, 8) , (const, 0x890, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (unique, 0x100004d4, 8) , (const, 0x890, 4)]
[(ram, 0x4c8800, 8) INDIRECT (unique, 0x100004dc, 8) , (const, 0x890, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3a00, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0xbd80, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000105c, 8), (unique, 0x1000105c, 8) INT_ADD (register, 0x18, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000b08, 8) COPY (unique, 0x100004bb, 8)]
[(unique, 0x10000b20, 8) COPY (unique, 0x100004b3, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (unique, 0x100004dc, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (unique, 0x100004d4, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (unique, 0x100004cc, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (unique, 0x100004c4, 8)]
[(unique, 0x10000940, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10001064, 8) , (const, 0x4, 8) , (const, 0x8, 8), (unique, 0x10001064, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10000988, 8) COPY (register, 0x80, 8), (register, 0x80, 8) INT_SEXT (register, 0x80, 4), (register, 0x80, 4) INT_ADD (stack, 0xffffffffffffff6c, 4) , (const, 0xfffffffe, 4)]
[ ---  CBRANCH (ram, 0x4849fc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (register, 0x0, 8), (register, 0x80, 8) INT_SEXT (register, 0x80, 4), (register, 0x0, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (stack, 0xffffffffffffff80, 1) , (const, 0x3f, 1), (register, 0x80, 4) INT_ADD (stack, 0xffffffffffffff6c, 4) , (const, 0xfffffffe, 4), (stack, 0xffffffffffffff80, 1) SUBPIECE (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10000930, 8) , (unique, 0x10000938, 8) , (unique, 0x10000940, 8)]
[ ---  CBRANCH (ram, 0x484ba8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000232, 8) , (const, 0x0, 8), (unique, 0x10000232, 8) INT_AND (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_SUB (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000978, 8) , (unique, 0x10000980, 8) , (unique, 0x10000988, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x931, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x931, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x931, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x931, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffc, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x8, 8)]
[(unique, 0x10000930, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000978, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x4849d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (register, 0x0, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa00, 4)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa00, 4)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa00, 4)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa00, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[(unique, 0x10000938, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000980, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x4849d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (register, 0x0, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(register, 0x30, 8) PTRADD (unique, 0x3100, 8) , (unique, 0x10000813, 8) , (const, 0x8, 8), (unique, 0x10000813, 8) INT_MULT (register, 0x80, 8) , (const, 0x2, 8), (register, 0x80, 8) INT_SUB (register, 0x80, 8) , (register, 0x0, 8)]
[(ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[(ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) INT_2COMP (stack, 0xffffffffffffff90, 4), (stack, 0xffffffffffffff90, 4) SUBPIECE (stack, 0xffffffffffffff90, 8) , (const, 0x0, 8)]
[(unique, 0x100009c0, 8) COPY (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[(ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x9cc, 4), (ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x9cc, 4), (ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x9cc, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x9cc, 4), (ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x1000106c, 8) , (unique, 0x10000823, 8), (unique, 0x1000106c, 8) CAST (stack, 0xffffffffffffffa8, 8), (unique, 0x10000823, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x30, 8) , (unique, 0x1000082b, 8) , (const, 0x8, 8), (unique, 0x1000082b, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x100009c0, 8) , (unique, 0x100009c8, 8)]
[(unique, 0x100009c8, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x100009c0, 8) , (unique, 0x100009c8, 8)]
[ ---  CBRANCH (ram, 0x484a10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_SUB (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff88, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10001074, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x10001074, 8) CAST (register, 0xb0, 8)]
[(ram, 0x4b0520, 8) COPY (ram, 0x4b0520, 8), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0x9df, 4)]
[(ram, 0x4b0528, 8) COPY (ram, 0x4b0528, 8), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0x9df, 4)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0x9df, 4)]
[(ram, 0x4c8800, 8) COPY (ram, 0x4c8800, 8), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0x9df, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (unique, 0x1000107c, 8), (unique, 0x1000107c, 8) CAST (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001084, 8) , (const, 0x484c03, 8), (unique, 0x10001084, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004a3, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xa47, 4), (stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa47, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x489410, 8) , (const, 0xc, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (unique, 0x10000533, 8), (unique, 0x10000533, 8) COPY (const, 0x4b04d3, 8)]
[(ram, 0x4b0520, 8) COPY (ram, 0x4b0520, 8), (ram, 0x4b0520, 8) INDIRECT (ram, 0x4b0520, 8) , (const, 0xa47, 4), (ram, 0x4b0520, 8) MULTIEQUAL (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8) , (ram, 0x4b0520, 8)]
[(ram, 0x4b0528, 8) COPY (ram, 0x4b0528, 8), (ram, 0x4b0528, 8) INDIRECT (ram, 0x4b0528, 8) , (const, 0xa47, 4), (ram, 0x4b0528, 8) MULTIEQUAL (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8) , (ram, 0x4b0528, 8)]
[(ram, 0x4c7d08, 8) COPY (ram, 0x4c7d08, 8), (ram, 0x4c7d08, 8) INDIRECT (ram, 0x4c7d08, 8) , (const, 0xa47, 4), (ram, 0x4c7d08, 8) MULTIEQUAL (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8) , (ram, 0x4c7d08, 8)]
[(ram, 0x4c8800, 8) COPY (ram, 0x4c8800, 8), (ram, 0x4c8800, 8) INDIRECT (ram, 0x4c8800, 8) , (const, 0xa47, 4), (ram, 0x4c8800, 8) MULTIEQUAL (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8) , (ram, 0x4c8800, 8)]
[ ---  RETURN (const, 0x1, 4)]
