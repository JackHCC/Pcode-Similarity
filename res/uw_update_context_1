[(stack, 0xfffffffffffffed8, 4) COPY (unique, 0x100001fb, 4), (unique, 0x100001fb, 4) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(stack, 0xfffffffffffffedc, 4) COPY (unique, 0x100001ff, 4), (unique, 0x100001ff, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000203, 8), (unique, 0x10000203, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffee0, 4) COPY (unique, 0x1000020b, 4), (unique, 0x1000020b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000020f, 8), (unique, 0x1000020f, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffee4, 4) COPY (unique, 0x10000217, 4), (unique, 0x10000217, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000021b, 8), (unique, 0x1000021b, 8) PTRADD (register, 0x38, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffee8, 4) COPY (unique, 0x1000023b, 4), (unique, 0x1000023b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffeec, 4) COPY (unique, 0x1000023f, 4), (unique, 0x1000023f, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000243, 8), (unique, 0x10000243, 8) PTRADD (register, 0x38, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffef0, 4) COPY (unique, 0x1000024b, 4), (unique, 0x1000024b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000024f, 8), (unique, 0x1000024f, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffef4, 4) COPY (unique, 0x10000257, 4), (unique, 0x10000257, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000025b, 8), (unique, 0x1000025b, 8) PTRADD (register, 0x38, 8) , (const, 0x7, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffef8, 4) COPY (unique, 0x1000027b, 4), (unique, 0x1000027b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffefc, 4) COPY (unique, 0x1000027f, 4), (unique, 0x1000027f, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000283, 8), (unique, 0x10000283, 8) PTRADD (register, 0x38, 8) , (const, 0x9, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff00, 4) COPY (unique, 0x1000028b, 4), (unique, 0x1000028b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000028f, 8), (unique, 0x1000028f, 8) PTRADD (register, 0x38, 8) , (const, 0xa, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff04, 4) COPY (unique, 0x10000297, 4), (unique, 0x10000297, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000029b, 8), (unique, 0x1000029b, 8) PTRADD (register, 0x38, 8) , (const, 0xb, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff08, 4) COPY (unique, 0x100002bb, 4), (unique, 0x100002bb, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0xc, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff0c, 4) COPY (unique, 0x100002bf, 4), (unique, 0x100002bf, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100002c3, 8), (unique, 0x100002c3, 8) PTRADD (register, 0x38, 8) , (const, 0xd, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (unique, 0x100003e4, 8), (unique, 0x100003e4, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a31, 8), (unique, 0x10000a31, 8) CAST (unique, 0x100002cf, 8), (unique, 0x100002cf, 8) PTRADD (register, 0x38, 8) , (const, 0xe, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff18, 4) COPY (unique, 0x100002fb, 4), (unique, 0x100002fb, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff1c, 4) COPY (unique, 0x100002ff, 4), (unique, 0x100002ff, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000303, 8), (unique, 0x10000303, 8) PTRADD (register, 0x38, 8) , (const, 0x11, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff20, 4) COPY (unique, 0x1000030b, 4), (unique, 0x1000030b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000030f, 8), (unique, 0x1000030f, 8) PTRADD (register, 0x38, 8) , (const, 0x12, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff24, 4) COPY (unique, 0x10000317, 4), (unique, 0x10000317, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000031b, 8), (unique, 0x1000031b, 8) PTRADD (register, 0x38, 8) , (const, 0x13, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff28, 4) COPY (unique, 0x1000033b, 4), (unique, 0x1000033b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x14, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff2c, 4) COPY (unique, 0x1000033f, 4), (unique, 0x1000033f, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000343, 8), (unique, 0x10000343, 8) PTRADD (register, 0x38, 8) , (const, 0x15, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff30, 4) COPY (unique, 0x1000034b, 4), (unique, 0x1000034b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000034f, 8), (unique, 0x1000034f, 8) PTRADD (register, 0x38, 8) , (const, 0x16, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff34, 4) COPY (unique, 0x10000357, 4), (unique, 0x10000357, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000035b, 8), (unique, 0x1000035b, 8) PTRADD (register, 0x38, 8) , (const, 0x17, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff38, 4) COPY (unique, 0x1000037b, 4), (unique, 0x1000037b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x18, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff3c, 4) COPY (unique, 0x1000037f, 4), (unique, 0x1000037f, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000383, 8), (unique, 0x10000383, 8) PTRADD (register, 0x38, 8) , (const, 0x19, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff40, 4) COPY (unique, 0x1000038b, 4), (unique, 0x1000038b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000038f, 8), (unique, 0x1000038f, 8) PTRADD (register, 0x38, 8) , (const, 0x1a, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff44, 4) COPY (unique, 0x10000397, 4), (unique, 0x10000397, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000039b, 8), (unique, 0x1000039b, 8) PTRADD (register, 0x38, 8) , (const, 0x1b, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff48, 8) COPY (unique, 0x100000fb, 8), (unique, 0x100000fb, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a39, 8), (unique, 0x10000a39, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1c, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff50, 8) COPY (unique, 0x10000103, 8), (unique, 0x10000103, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a41, 8), (unique, 0x10000a41, 8) CAST (unique, 0x1000010b, 8), (unique, 0x1000010b, 8) PTRADD (register, 0x38, 8) , (const, 0x1e, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff58, 8) COPY (unique, 0x1000011b, 8), (unique, 0x1000011b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a49, 8), (unique, 0x10000a49, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x20, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff60, 8) COPY (unique, 0x10000123, 8), (unique, 0x10000123, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a51, 8), (unique, 0x10000a51, 8) CAST (unique, 0x1000012b, 8), (unique, 0x1000012b, 8) PTRADD (register, 0x38, 8) , (const, 0x22, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff68, 8) COPY (unique, 0x1000013b, 8), (unique, 0x1000013b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a59, 8), (unique, 0x10000a59, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x24, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (unique, 0x10000143, 8), (unique, 0x10000143, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a61, 8), (unique, 0x10000a61, 8) CAST (unique, 0x1000014b, 8), (unique, 0x1000014b, 8) PTRADD (register, 0x38, 8) , (const, 0x26, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff78, 8) COPY (unique, 0x1000015b, 8), (unique, 0x1000015b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a69, 8), (unique, 0x10000a69, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x28, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x10000163, 8), (unique, 0x10000163, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a71, 8), (unique, 0x10000a71, 8) CAST (unique, 0x1000016b, 8), (unique, 0x1000016b, 8) PTRADD (register, 0x38, 8) , (const, 0x2a, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (unique, 0x1000017b, 8), (unique, 0x1000017b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a79, 8), (unique, 0x10000a79, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x2c, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x10000183, 8), (unique, 0x10000183, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a81, 8), (unique, 0x10000a81, 8) CAST (unique, 0x1000018b, 8), (unique, 0x1000018b, 8) PTRADD (register, 0x38, 8) , (const, 0x2e, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (unique, 0x1000019b, 8), (unique, 0x1000019b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a91, 8), (unique, 0x10000a91, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x30, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (unique, 0x100001a3, 8), (unique, 0x100001a3, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a99, 8), (unique, 0x10000a99, 8) CAST (unique, 0x100001ab, 8), (unique, 0x100001ab, 8) PTRADD (register, 0x38, 8) , (const, 0x32, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (unique, 0x100001bb, 8), (unique, 0x100001bb, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000aa1, 8), (unique, 0x10000aa1, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x34, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (unique, 0x100001c3, 8), (unique, 0x100001c3, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000aa9, 8), (unique, 0x10000aa9, 8) CAST (unique, 0x100001cb, 8), (unique, 0x100001cb, 8) PTRADD (register, 0x38, 8) , (const, 0x36, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (unique, 0x100001db, 8), (unique, 0x100001db, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000ab1, 8), (unique, 0x10000ab1, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x38, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0x100001e3, 8), (unique, 0x100001e3, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000ab9, 8), (unique, 0x10000ab9, 8) CAST (unique, 0x100001eb, 8), (unique, 0x100001eb, 8) PTRADD (register, 0x38, 8) , (const, 0x3a, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x494346, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1e080, 8) , (const, 0x0, 8), (unique, 0x1e080, 8) INT_AND (unique, 0x1e000, 8) , (const, 0x1, 8), (unique, 0x1e000, 8) INT_RIGHT (unique, 0xbd80, 8) , (const, 0x3e, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000a89, 8), (unique, 0x10000a89, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x30, 8) , (const, 0x4, 8)]
[(unique, 0x10000a19, 8) COPY (stack, 0xfffffffffffffed0, 8)]
[ ---  CBRANCH (ram, 0x494352, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb7, 1) , (const, 0x0, 1), (stack, 0xffffffffffffffb7, 1) SUBPIECE (unique, 0x10000a09, 8) , (const, 0x0, 4), (unique, 0x10000a09, 8) INT_RIGHT (unique, 0x100001c3, 8) , (const, 0x38, 4)]
[(unique, 0x10000a21, 8) COPY (stack, 0xfffffffffffffed0, 8)]
[ ---  CBRANCH (ram, 0x494639, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100003e4, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000ac1, 8), (unique, 0x10000ac1, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x24, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x401794, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8107, 1) , (const, 0x8, 1)]
[ ---  CBRANCH (ram, 0x494664, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100003db, 8) , (const, 0x0, 8), (unique, 0x100003db, 8) INT_AND (unique, 0x1000019b, 8) , (const, 0x4000000000000000, 8)]
[(stack, 0xffffffffffffffb0, 8) INT_AND (unique, 0x100001c3, 8) , (const, 0xffffffffffffff, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed0, 8)]
[(unique, 0x10000a29, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x494352, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (unique, 0x10000a19, 8) , (unique, 0x10000a21, 8) , (unique, 0x10000a29, 8)]
[ ---  CBRANCH (ram, 0x494364, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x40, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000ad1, 8), (unique, 0x10000ad1, 8) INT_ADD (unique, 0x10000ac9, 8) , (const, 0xc7, 8), (unique, 0x10000ac9, 8) CAST (register, 0x38, 8)]
[(ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0xac, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (const, 0x0, 1), (unique, 0x3200, 8) CAST (unique, 0x10000ae1, 8), (unique, 0x10000ae1, 8) INT_ADD (unique, 0x10000ad9, 8) , (const, 0xdf, 8), (unique, 0x10000ad9, 8) CAST (register, 0x38, 8)]
[(ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0xb2, 4), (ram, 0x4c8107, 1) MULTIEQUAL (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ae9, 8) , (const, 0x0, 8), (unique, 0x10000ae9, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0xe, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x4943d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000af1, 8), (unique, 0x10000af1, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x30, 8) , (const, 0x28, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x494673, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffedc, 4) INDIRECT (stack, 0xfffffffffffffedc, 4) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x24c, 4)]
[(stack, 0xfffffffffffffefc, 4) INDIRECT (stack, 0xfffffffffffffefc, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff2c, 4) INDIRECT (stack, 0xffffffffffffff2c, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x24c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24c, 4)]
[ ---  CALL (ram, 0x4011c4, 8)]
[(ram, 0x4c8107, 1) COPY (ram, 0x4c8107, 1), (ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x24c, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 1) COPY (const, 0x0, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x30, 8) , (const, 0x27, 8) , (const, 0x8, 8)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[(register, 0x8, 1) INT_ADD (register, 0x8, 1) , (const, 0x7, 1), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1)]
[(register, 0x30, 8) INT_OR (register, 0x30, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7f, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x4943f8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000af9, 1) , (const, 0x0, 1), (unique, 0x10000af9, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[(ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffedc, 4) INDIRECT (stack, 0xfffffffffffffedc, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffefc, 4) INDIRECT (stack, 0xfffffffffffffefc, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff2c, 4) INDIRECT (stack, 0xffffffffffffff2c, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x247, 4)]
[(register, 0x0, 8) CALL (ram, 0x493af0, 8) , (unique, 0x1000011b, 8) , (unique, 0x1000013b, 8) , (unique, 0x1000015b, 8) , (unique, 0x1000017b, 8) , (unique, 0x1000019b, 8) , (unique, 0x100001bb, 8) , (unique, 0x100001db, 8) , (unique, 0x100000fb, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (unique, 0x3800, 8) , (const, 0x0, 8), (register, 0x30, 8) PTRADD (register, 0x38, 8) , (register, 0x30, 8) , (const, 0x1, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x401794, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x11, 4) , (register, 0x10, 4), (register, 0x10, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x30, 8) , (const, 0x26, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000b0a, 8), (unique, 0x10000b0a, 8) INT_ADD (unique, 0x10000b02, 8) , (unique, 0x10000afa, 8), (unique, 0x10000b02, 8) CAST (unique, 0x1000058c, 8), (unique, 0x10000afa, 8) INT_MULT (unique, 0x100009d6, 8) , (const, 0x4, 8), (unique, 0x100009d6, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (unique, 0x1000058c, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x4943ad, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100003c9, 8) , (const, 0x0, 8), (unique, 0x100003c9, 8) INT_AND (unique, 0x1000019b, 8) , (const, 0x4000000000000000, 8)]
[ ---  CBRANCH (ram, 0x4943c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3e80, 8), (unique, 0x3e80, 8) CAST (unique, 0x10000b1a, 8), (unique, 0x10000b1a, 8) INT_ADD (unique, 0x10000b12, 8) , (register, 0x10, 8), (unique, 0x10000b12, 8) CAST (unique, 0x100005ac, 8), (unique, 0x100005ac, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x401794, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100003ec, 8) , (register, 0x10, 8) , (const, 0x1, 8), (unique, 0x100003ec, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c8100, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000b22, 8), (unique, 0x10000b22, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(register, 0x90, 8) INT_ADD (unique, 0x10000b2a, 8) , (unique, 0x10000b32, 8), (unique, 0x10000b32, 8) CAST (unique, 0xbd80, 8), (unique, 0x10000b2a, 8) CAST (register, 0x90, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x30, 8) , (const, 0x25, 8) , (const, 0x8, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x494424, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff2c, 4) MULTIEQUAL (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffefc, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffedc, 4) MULTIEQUAL (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4)]
[(stack, 0xfffffffffffffed8, 4) MULTIEQUAL (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x11f, 4), (ram, 0x4c8107, 1) MULTIEQUAL (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b3a, 8) , (register, 0x28, 8), (unique, 0x10000b3a, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x24, 8) , (const, 0x4, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(unique, 0x10000a11, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff2c, 4) MULTIEQUAL (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffefc, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffedc, 4) MULTIEQUAL (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4)]
[(stack, 0xfffffffffffffed8, 4) MULTIEQUAL (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c8107, 1) MULTIEQUAL (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  BRANCHIND (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000b42, 8), (unique, 0x10000b42, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000a11, 8) , (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 1) COPY (const, 0x0, 1)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[(register, 0x8, 1) INT_ADD (register, 0x8, 1) , (const, 0x7, 1), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1)]
[(register, 0x30, 8) INT_OR (register, 0x30, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7f, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x494470, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000b4a, 1) , (const, 0x0, 1), (unique, 0x10000b4a, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[(ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffedc, 4) INDIRECT (stack, 0xfffffffffffffedc, 4) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x2f3, 4)]
[(stack, 0xfffffffffffffefc, 4) INDIRECT (stack, 0xfffffffffffffefc, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff2c, 4) INDIRECT (stack, 0xffffffffffffff2c, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f3, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000b4b, 8), (unique, 0x10000b4b, 8) CALL (ram, 0x493af0, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (unique, 0x3800, 8) , (register, 0x28, 8), (register, 0x30, 8) PTRADD (register, 0x38, 8) , (register, 0x30, 8) , (const, 0x1, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000b53, 8), (unique, 0x10000b53, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x28, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x401794, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x10000b5b, 1) , (const, 0x9, 1), (unique, 0x10000b5b, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100003fc, 8) , (register, 0xb8, 8) , (const, 0x1, 8), (unique, 0x100003fc, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c8100, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 1) COPY (const, 0x0, 1)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[(register, 0x8, 1) INT_ADD (register, 0x8, 1) , (const, 0x7, 1), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1)]
[(register, 0x30, 8) INT_OR (register, 0x30, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7f, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x494540, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000b5c, 1) , (const, 0x0, 1), (unique, 0x10000b5c, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[(ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffedc, 4) INDIRECT (stack, 0xfffffffffffffedc, 4) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x3ac, 4)]
[(stack, 0xfffffffffffffefc, 4) INDIRECT (stack, 0xfffffffffffffefc, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff2c, 4) INDIRECT (stack, 0xffffffffffffff2c, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3ac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3ac, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000b5d, 8), (unique, 0x10000b5d, 8) CALL (ram, 0x493af0, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (unique, 0x3800, 8), (register, 0x30, 8) PTRADD (register, 0x38, 8) , (register, 0x30, 8) , (const, 0x1, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000b65, 8), (unique, 0x10000b65, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x30, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x4945f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3e80, 8), (unique, 0x3e80, 8) CAST (unique, 0x10000b75, 8), (unique, 0x10000b75, 8) INT_ADD (unique, 0x10000b6d, 8) , (register, 0x0, 8), (unique, 0x10000b6d, 8) CAST (unique, 0x10000644, 8), (unique, 0x10000644, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8), (register, 0x0, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000b8d, 8), (unique, 0x10000b8d, 8) INT_ADD (unique, 0x10000b85, 8) , (unique, 0x10000b7d, 8), (unique, 0x10000b85, 8) CAST (unique, 0x10000664, 8), (unique, 0x10000b7d, 8) INT_MULT (unique, 0x100009e6, 8) , (const, 0x4, 8), (unique, 0x100009e6, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x10000664, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000b95, 8), (unique, 0x10000b95, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x30, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x401794, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x11, 4) , (register, 0x10, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000bad, 8), (unique, 0x10000bad, 8) INT_ADD (unique, 0x10000ba5, 8) , (unique, 0x10000b9d, 8), (unique, 0x10000ba5, 8) CAST (unique, 0x1000068c, 8), (unique, 0x10000b9d, 8) INT_MULT (unique, 0x100009f6, 8) , (const, 0x4, 8), (unique, 0x100009f6, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x1000068c, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x494620, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (stack, 0xffffffffffffff98, 8) , (const, 0x4000000000000000, 8)]
[ ---  CBRANCH (ram, 0x401794, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000404, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000404, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c8100, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000bb5, 8), (unique, 0x10000bb5, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x494498, 1)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffed8, 4) MULTIEQUAL (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4)]
[(stack, 0xfffffffffffffedc, 4) INDIRECT (stack, 0xfffffffffffffedc, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffedc, 4) MULTIEQUAL (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffefc, 4) INDIRECT (stack, 0xfffffffffffffefc, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffefc, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff2c, 4) INDIRECT (stack, 0xffffffffffffff2c, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff2c, 4) MULTIEQUAL (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1af, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x4011c4, 8)]
[(ram, 0x4c8107, 1) COPY (ram, 0x4c8107, 1), (ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x1af, 4), (ram, 0x4c8107, 1) MULTIEQUAL (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff2c, 4) MULTIEQUAL (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffefc, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffedc, 4) MULTIEQUAL (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4)]
[(stack, 0xfffffffffffffed8, 4) MULTIEQUAL (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c8107, 1) MULTIEQUAL (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x4944c8, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x8, 1) , (unique, 0x10000bbd, 1), (unique, 0x10000bbd, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100003f4, 8) , (register, 0xb8, 8) , (const, 0x1, 8), (unique, 0x100003f4, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c8100, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffed8, 4) INDIRECT (stack, 0xfffffffffffffed8, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffedc, 4) INDIRECT (stack, 0xfffffffffffffedc, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffee8, 4) INDIRECT (stack, 0xfffffffffffffee8, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffeec, 4) INDIRECT (stack, 0xfffffffffffffeec, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffef4, 4) INDIRECT (stack, 0xfffffffffffffef4, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffef8, 4) INDIRECT (stack, 0xfffffffffffffef8, 4) , (const, 0x305, 4)]
[(stack, 0xfffffffffffffefc, 4) INDIRECT (stack, 0xfffffffffffffefc, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff2c, 4) INDIRECT (stack, 0xffffffffffffff2c, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x305, 4)]
[ ---  CALL (ram, 0x401794, 8)]
[(ram, 0x4c8107, 1) COPY (ram, 0x4c8107, 1), (ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x305, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff2c, 4) MULTIEQUAL (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffefc, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffedc, 4) MULTIEQUAL (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4)]
[(stack, 0xfffffffffffffed8, 4) MULTIEQUAL (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x30c, 4), (ram, 0x4c8107, 1) MULTIEQUAL (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (const, 0x1, 1), (unique, 0x3e80, 8) CAST (unique, 0x10000bc6, 8), (unique, 0x10000bc6, 8) INT_ADD (unique, 0x10000bbe, 8) , (unique, 0x100005ec, 8), (unique, 0x10000bbe, 8) CAST (register, 0x38, 8), (unique, 0x100005ec, 8) INT_ADD (register, 0xb8, 8) , (const, 0xd8, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000bce, 8), (unique, 0x10000bce, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x28, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000bd6, 8), (unique, 0x10000bd6, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x30, 8) , (const, 0x4, 8)]
[(unique, 0x100007c8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100007d1, 1) MULTIEQUAL (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1)]
[(unique, 0x100007d2, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(unique, 0x100007da, 4) MULTIEQUAL (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4)]
[(unique, 0x100007de, 4) MULTIEQUAL (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4)]
[(unique, 0x100007e2, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(unique, 0x100007e6, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(unique, 0x100007ea, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(unique, 0x100007ee, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(unique, 0x100007f2, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(unique, 0x100007f6, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(unique, 0x100007fa, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(unique, 0x100007fe, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4)]
[(unique, 0x10000802, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(unique, 0x10000806, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(unique, 0x1000080a, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(unique, 0x1000080e, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(unique, 0x10000812, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x1000081a, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(unique, 0x1000081e, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(unique, 0x10000822, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(unique, 0x10000826, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(unique, 0x1000082a, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(unique, 0x1000082e, 4) MULTIEQUAL (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4)]
[(unique, 0x10000832, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(unique, 0x10000836, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(unique, 0x1000083a, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(unique, 0x1000083e, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(unique, 0x10000842, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(unique, 0x10000846, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(unique, 0x1000084a, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(unique, 0x10000852, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(unique, 0x1000085a, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x10000862, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x1000086a, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x10000872, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x1000087a, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000882, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000088a, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000892, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x1000089a, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x100008a2, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x100008aa, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x100008b2, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x100008ba, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x100008c2, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x4944d1, 1) , (unique, 0x100007d0, 1), (unique, 0x100007d0, 1) INT_NOTEQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x4000000000000000, 8), (unique, 0xbd80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c8107, 1) INDIRECT (unique, 0x100007d1, 1) , (const, 0x3bf, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (const, 0x0, 1), (unique, 0x3e80, 8) CAST (unique, 0x10000be6, 8), (unique, 0x10000be6, 8) INT_ADD (unique, 0x10000bde, 8) , (unique, 0x1000062c, 8), (unique, 0x10000bde, 8) CAST (register, 0x38, 8), (unique, 0x1000062c, 8) INT_ADD (register, 0xb8, 8) , (const, 0xd8, 8)]
[ ---  BRANCH (ram, 0x4944d1, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x100008c2, 8) , (unique, 0x100008c2, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (unique, 0x100008ba, 8) , (unique, 0x100008ba, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x100008b2, 8) , (unique, 0x100008b2, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x100008aa, 8) , (unique, 0x100008aa, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x100008a2, 8) , (unique, 0x100008a2, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x1000089a, 8) , (unique, 0x1000089a, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x10000892, 8) , (unique, 0x10000892, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x1000088a, 8) , (unique, 0x1000088a, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000882, 8) , (unique, 0x10000882, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x1000087a, 8) , (unique, 0x1000087a, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x10000872, 8) , (unique, 0x10000872, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x1000086a, 8) , (unique, 0x1000086a, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (unique, 0x10000862, 8) , (unique, 0x10000862, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (unique, 0x1000085a, 8) , (unique, 0x1000085a, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (unique, 0x10000852, 8) , (unique, 0x10000852, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (unique, 0x1000084a, 8) , (unique, 0x1000084a, 8)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (unique, 0x10000846, 4) , (unique, 0x10000846, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (unique, 0x10000842, 4) , (unique, 0x10000842, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (unique, 0x1000083e, 4) , (unique, 0x1000083e, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (unique, 0x1000083a, 4) , (unique, 0x1000083a, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (unique, 0x10000836, 4) , (unique, 0x10000836, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (unique, 0x10000832, 4) , (unique, 0x10000832, 4)]
[(stack, 0xffffffffffffff2c, 4) MULTIEQUAL (stack, 0xffffffffffffff2c, 4) , (unique, 0x1000082e, 4) , (unique, 0x1000082e, 4)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (unique, 0x1000082a, 4) , (unique, 0x1000082a, 4)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (unique, 0x10000826, 4) , (unique, 0x10000826, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (unique, 0x10000822, 4) , (unique, 0x10000822, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (unique, 0x1000081e, 4) , (unique, 0x1000081e, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (unique, 0x1000081a, 4) , (unique, 0x1000081a, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (unique, 0x10000812, 8) , (unique, 0x10000812, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (unique, 0x1000080e, 4) , (unique, 0x1000080e, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (unique, 0x1000080a, 4) , (unique, 0x1000080a, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (unique, 0x10000806, 4) , (unique, 0x10000806, 4)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (unique, 0x10000802, 4) , (unique, 0x10000802, 4)]
[(stack, 0xfffffffffffffefc, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (unique, 0x100007fe, 4) , (unique, 0x100007fe, 4)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (unique, 0x100007fa, 4) , (unique, 0x100007fa, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (unique, 0x100007f6, 4) , (unique, 0x100007f6, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (unique, 0x100007f2, 4) , (unique, 0x100007f2, 4)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (unique, 0x100007ee, 4) , (unique, 0x100007ee, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (unique, 0x100007ea, 4) , (unique, 0x100007ea, 4)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (unique, 0x100007e6, 4) , (unique, 0x100007e6, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (unique, 0x100007e2, 4) , (unique, 0x100007e2, 4)]
[(stack, 0xfffffffffffffedc, 4) MULTIEQUAL (stack, 0xfffffffffffffedc, 4) , (unique, 0x100007de, 4) , (unique, 0x100007de, 4)]
[(stack, 0xfffffffffffffed8, 4) MULTIEQUAL (stack, 0xfffffffffffffed8, 4) , (unique, 0x100007da, 4) , (unique, 0x100007da, 4)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (unique, 0x100007d2, 8) , (unique, 0x100007d2, 8)]
[(ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x310, 4), (ram, 0x4c8107, 1) MULTIEQUAL (ram, 0x4c8107, 1) , (unique, 0x100007d1, 1) , (ram, 0x4c8107, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000bee, 8) , (register, 0x0, 8), (unique, 0x10000bee, 8) CAST (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0x38, 8) , (unique, 0x100005f4, 8) , (const, 0x4, 8), (unique, 0x100005f4, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x100007c8, 8) , (unique, 0x100007c8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff2c, 4) MULTIEQUAL (stack, 0xffffffffffffff2c, 4) , (stack, 0xffffffffffffff2c, 4)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffefc, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4)]
[(stack, 0xfffffffffffffef8, 4) MULTIEQUAL (stack, 0xfffffffffffffef8, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef4, 4) MULTIEQUAL (stack, 0xfffffffffffffef4, 4) , (stack, 0xfffffffffffffef4, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffeec, 4) MULTIEQUAL (stack, 0xfffffffffffffeec, 4) , (stack, 0xfffffffffffffeec, 4)]
[(stack, 0xfffffffffffffee8, 4) MULTIEQUAL (stack, 0xfffffffffffffee8, 4) , (stack, 0xfffffffffffffee8, 4)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffedc, 4) MULTIEQUAL (stack, 0xfffffffffffffedc, 4) , (stack, 0xfffffffffffffedc, 4)]
[(stack, 0xfffffffffffffed8, 4) MULTIEQUAL (stack, 0xfffffffffffffed8, 4) , (stack, 0xfffffffffffffed8, 4)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c8107, 1) MULTIEQUAL (ram, 0x4c8107, 1) , (ram, 0x4c8107, 1)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x494440, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x12, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1, 8)]
[(register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x7fffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000bf6, 8), (unique, 0x10000bf6, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x30, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x49450d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000c06, 8), (unique, 0x10000c06, 8) INT_ADD (unique, 0x10000bfe, 8) , (const, 0x173, 8), (unique, 0x10000bfe, 8) CAST (register, 0x30, 8)]
[(register, 0x0, 8) INT_OR (unique, 0xbd80, 8) , (const, 0x8000000000000000, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c0e, 8) , (register, 0x0, 8), (unique, 0x10000c0e, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x30, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4c8107, 1) COPY (ram, 0x4c8107, 1), (ram, 0x4c8107, 1) INDIRECT (ram, 0x4c8107, 1) , (const, 0x194, 4)]
[ ---  RETURN (const, 0x0, 8)]
