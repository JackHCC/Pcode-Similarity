[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3f, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3f, 4), (stack, 0xffffffffffffff40, 8) COPY (const, 0x26310f, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (unique, 0x100002a6, 8) , (const, 0x3f, 4), (unique, 0x100002a6, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x100002ae, 8) , (const, 0x3f, 4), (unique, 0x100002ae, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x3f, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002be, 8), (unique, 0x100002be, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x26333e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (unique, 0x100001b4, 8) , (const, 0x0, 8), (unique, 0x100001b4, 8) COPY (const, 0x2b73f7, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb4, 8)]
[ ---  BRANCH (ram, 0x263139, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x55, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x55, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x55, 4), (stack, 0xffffffffffffff40, 8) COPY (const, 0x263149, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x55, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x55, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x55, 4), (stack, 0xffffffffffffff5f, 1) MULTIEQUAL (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x55, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x55, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x55, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x55, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x55, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x263128, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x210110, 8) , (register, 0x0, 4) , (unique, 0x3100, 8) , (const, 0xc, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x65, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x65, 4), (stack, 0xffffffffffffff40, 8) COPY (const, 0x26315a, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x65, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x65, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffff5f, 1) COPY (unique, 0x100000df, 1), (unique, 0x100000df, 1) BOOL_OR (unique, 0xce80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xc, 8), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x26333e, 1) , (unique, 0x100002c6, 1), (unique, 0x100002c6, 1) CAST (unique, 0x100000df, 1), (unique, 0x100000df, 1) BOOL_OR (unique, 0xce80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xc, 8), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x100001ec, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x100001ec, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x95, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x95, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x95, 4), (stack, 0xffffffffffffff40, 8) COPY (const, 0x26318f, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x95, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x95, 4)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x95, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x95, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x95, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x95, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x95, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x92, 4)]
[(unique, 0x10000173, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x145140, 8) , (unique, 0x3100, 8) , (unique, 0x3200, 8) , (const, 0xa, 4), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[ ---  CBRANCH (ram, 0x26333e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x3100, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x95, 4)]
[ ---  CBRANCH (ram, 0x26333e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff5f, 1) MULTIEQUAL (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x1000026e, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x263275, 1)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(unique, 0x10000226, 8) COPY (register, 0x18, 8), (register, 0x18, 8) COPY (const, 0x400, 8)]
[(unique, 0x10000246, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb38, 8)]
[(unique, 0x10000286, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb40, 8)]
[ ---  BRANCH (ram, 0x263233, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002c7, 8) , (const, 0x263244, 8), (unique, 0x100002c7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000246, 8) , (unique, 0x1000024e, 8) , (unique, 0x10000256, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd8, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd8, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0xd8, 4), (stack, 0xffffffffffffff5f, 1) MULTIEQUAL (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2631e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x22, 4), (register, 0x0, 4) CALL (ram, 0x1e3bf0, 8) , (unique, 0x10000173, 4) , (stack, 0xffffffffffffff60, 8) , (register, 0xa0, 8) , (register, 0x18, 8) , (unique, 0x3200, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000226, 8) , (unique, 0x1000022e, 8) , (unique, 0x10000236, 8) , (unique, 0x1000023e, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000286, 8) , (unique, 0x1000028e, 8) , (unique, 0x1000028e, 8) , (unique, 0x1000029e, 8), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff60, 8) CAST (unique, 0x100002d7, 8), (unique, 0x100002d7, 8) INT_OR (unique, 0x10000188, 8) , (unique, 0x10000190, 8), (unique, 0x10000190, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x10000188, 8) INT_AND (unique, 0x100002cf, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100002cf, 8) CAST (stack, 0xffffffffffffff60, 8)]
[ ---  CBRANCH (ram, 0x2632a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x263253, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff70, 8) , (const, 0x0, 8)]
[(register, 0x8, 4) COPY (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002df, 8) , (const, 0x2632b6, 8), (unique, 0x100002df, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x146, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x146, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x146, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x146, 4)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x146, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x146, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x146, 4)]
[ ---  CBRANCH (ram, 0x26331e, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xffffffffffffff50, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x146, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002e7, 8) , (const, 0x263333, 8), (unique, 0x100002e7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16b, 4)]
[ ---  CALL (ram, 0x121160, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x3100, 8)]
[(stack, 0xffffffffffffff60, 4) SUBPIECE (stack, 0xffffffffffffff60, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x16b, 4), (stack, 0xffffffffffffff60, 8) COPY (stack, 0xffffffffffffff60, 8)]
[ ---  BRANCH (ram, 0x263258, 1)]
[(register, 0x8, 4) COPY (const, 0x22, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x160, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002ef, 8) , (const, 0x22, 4), (unique, 0x100002ef, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x263258, 1)]
[(unique, 0x1000016b, 8) INT_MULT (register, 0x18, 8) , (const, 0x2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002f7, 8) , (const, 0x2631ec, 8), (unique, 0x100002f7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x177, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x177, 4)]
[ ---  CBRANCH (ram, 0x2631fd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8)]
[ ---  CBRANCH (ram, 0x2632f5, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1000, 8) , (unique, 0x1000016b, 8)]
[(unique, 0x1000017b, 8) INT_MULT (register, 0x18, 8) , (const, 0x3, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000010d, 8) , (const, 0x1, 8), (unique, 0x1000010d, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x1000016b, 8) , (const, 0x10, 8)]
[(unique, 0x1000022e, 8) COPY (unique, 0x1000016b, 8)]
[(unique, 0x1000024e, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000010d, 8) , (const, 0x1, 8), (unique, 0x1000010d, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x1000016b, 8) , (const, 0x10, 8)]
[(unique, 0x1000028e, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000307, 8), (unique, 0x10000307, 8) INT_AND (unique, 0x100002ff, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100002ff, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000021c, 8) , (const, 0x1, 8), (unique, 0x1000021c, 8) INT_ADD (unique, 0x1000010d, 8) , (const, 0xf, 8), (unique, 0x1000010d, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x1000016b, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x263226, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x1000016b, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x10000307, 8), (unique, 0x10000307, 8) INT_AND (unique, 0x100002ff, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100002ff, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000021c, 8) , (const, 0x1, 8), (unique, 0x1000021c, 8) INT_ADD (unique, 0x1000010d, 8) , (const, 0xf, 8), (unique, 0x1000010d, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x1000016b, 8) , (const, 0x10, 8)]
[(unique, 0x10000236, 8) COPY (unique, 0x1000017b, 8)]
[(unique, 0x10000256, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000276, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x263308, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff5f, 1) , (const, 0x0, 1)]
[(unique, 0x1000027e, 8) COPY (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000030f, 8) , (const, 0x26330d, 8), (unique, 0x1000030f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1e3, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1e3, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1e3, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1e3, 4)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x1e3, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1e3, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1e3, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1e3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e3, 4)]
[ ---  CBRANCH (ram, 0x263348, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000317, 8), (unique, 0x10000317, 8) CALL (ram, 0x121020, 8) , (register, 0x38, 8) , (unique, 0x1000016b, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000276, 8) , (unique, 0x1000027e, 8)]
[(register, 0x8, 4) COPY (const, 0xc, 4)]
[ ---  BRANCH (ram, 0x263258, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (stack, 0xffffffffffffff60, 4) , (register, 0x8, 4)]
[(unique, 0x1000025e, 8) COPY (unique, 0x1000031f, 8), (unique, 0x1000031f, 8) CAST (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x263275, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff5f, 1) , (const, 0x0, 1), (stack, 0xffffffffffffff5f, 1) MULTIEQUAL (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000337, 8) , (const, 0x26326f, 8), (unique, 0x10000337, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x105, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x105, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x105, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x105, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x105, 4)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x105, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x105, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xa0, 8)]
[(stack, 0xffffffffffffff60, 4) SUBPIECE (stack, 0xffffffffffffff60, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x105, 4), (stack, 0xffffffffffffff60, 8) CAST (unique, 0x1000032f, 8), (unique, 0x1000032f, 8) INT_OR (unique, 0x1000019a, 8) , (unique, 0x100001a2, 8), (unique, 0x100001a2, 8) INT_ZEXT (register, 0x8, 4), (unique, 0x1000019a, 8) INT_AND (unique, 0x10000327, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000327, 8) CAST (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff5f, 1) COPY (const, 0x1, 1)]
[(unique, 0x1000023e, 8) COPY (unique, 0x1000016b, 8)]
[(unique, 0x1000029e, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x263226, 1)]
[ ---  CBRANCH (ram, 0x2632e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000033f, 8), (unique, 0x1000033f, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x20a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x20a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x20a, 4), (stack, 0xffffffffffffff40, 8) COPY (const, 0x2632f0, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x20a, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x20a, 4)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x20a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x20a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x20a, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[(register, 0x8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x263275, 1)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff5f, 1) MULTIEQUAL (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1) , (stack, 0xffffffffffffff5f, 1)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x1000025e, 8) , (unique, 0x1000025e, 8) , (unique, 0x1000026e, 8) , (register, 0x20, 8)]
[(register, 0x0, 4) COPY (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff60, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x263352, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000347, 8), (unique, 0x10000347, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x100001ac, 8), (unique, 0x100001ac, 8) PTRSUB (const, 0x0, 8) , (const, 0x263357, 8), (register, 0x20, 8) CAST (unique, 0x10000357, 8), (unique, 0x10000357, 8) INT_ADD (unique, 0x1000034f, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000034f, 8) CAST (register, 0x20, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x12f, 4), (stack, 0xffffffffffffff5f, 1) INDIRECT (stack, 0xffffffffffffff5f, 1) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x12e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12e, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12f, 4)]
[ ---  RETURN (const, 0x1, 4)]
