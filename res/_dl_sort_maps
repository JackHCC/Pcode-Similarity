[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x48eef8, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1, 4) , (register, 0x30, 4)]
[(unique, 0x10000152, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (unique, 0x10000079, 8) , (const, 0xf, 8), (unique, 0x10000079, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (register, 0x10, 8) INT_ZEXT (register, 0x30, 4)]
[(register, 0x38, 8) PTRADD (unique, 0x100001fd, 8) , (unique, 0x10000081, 8) , (const, 0x1, 8), (unique, 0x100001fd, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8), (unique, 0x10000081, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10000079, 8) , (const, 0xf, 8), (unique, 0x10000079, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (register, 0x10, 8) INT_ZEXT (register, 0x30, 4)]
[(unique, 0x10000350, 8) COPY (register, 0x20, 8)]
[(unique, 0x100001bd, 8) MULTIEQUAL (unique, 0x10000350, 8) , (unique, 0x10000358, 8)]
[(unique, 0x100001c5, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x48ee10, 1) , (unique, 0x100001bc, 1), (unique, 0x100001bc, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x38, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100001bd, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003a4, 8) , (unique, 0xbe00, 8), (unique, 0x100003a4, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000039c, 8), (unique, 0x1000039c, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100001bd, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100001bd, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10000358, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001bd, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100001c5, 8) , (unique, 0x100000a1, 8) , (const, 0x1, 8), (unique, 0x100000a1, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000152, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x100001c5, 8) , (unique, 0x100000a1, 8) , (const, 0x1, 8), (unique, 0x100000a1, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000152, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x48ee23, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x10000152, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003b4, 8) , (unique, 0xbe00, 8), (unique, 0x100003b4, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100003ac, 8), (unique, 0x100003ac, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x100001c5, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003bc, 8) , (const, 0x48ee41, 8), (unique, 0x100003bc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001c5, 8) , (unique, 0x1000020d, 8) , (const, 0x1, 8), (unique, 0x1000020d, 8) INT_ADD (unique, 0x100000a1, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (register, 0x20, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10000313, 8) , (const, 0x119, 4), (unique, 0x10000313, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (unique, 0x1000033f, 1) , (const, 0x119, 4), (unique, 0x1000033f, 1) COPY (register, 0x8, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (register, 0x20, 8) , (const, 0x119, 4)]
[ ---  CALL (ram, 0x401120, 8) , (register, 0x20, 8) , (const, 0x0, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100003c4, 8), (unique, 0x100003c4, 8) INT_ADD (stack, 0xffffffffffffffb0, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (stack, 0xffffffffffffffb8, 4) , (const, 0x1, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (unique, 0x1000033b, 4) , (const, 0x119, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x10000333, 8) , (const, 0x119, 4), (unique, 0x1000033b, 4) COPY (register, 0x30, 4), (unique, 0x10000333, 8) COPY (register, 0x38, 8)]
[(unique, 0x100002c3, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100002fb, 4) COPY (register, 0xb0, 4), (register, 0xb0, 4) COPY (const, 0x1, 4)]
[(unique, 0x1000030b, 4) COPY (register, 0xb0, 4), (register, 0xb0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(register, 0xb0, 4) MULTIEQUAL (unique, 0x1000030b, 4) , (unique, 0x1000030f, 4) , (register, 0xb0, 4)]
[(register, 0xb8, 4) COPY (unique, 0x10000307, 4), (unique, 0x10000307, 4) MULTIEQUAL (unique, 0x100002fb, 4) , (unique, 0x100002ff, 4) , (unique, 0x10000303, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 2), (register, 0x0, 2) INT_ADD (unique, 0xbc00, 2) , (const, 0x1, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100003d4, 8), (unique, 0x100003d4, 8) PTRADD (stack, 0xffffffffffffffc0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x100003cc, 8) , (const, 0x2, 8), (unique, 0x100003cc, 8) CAST (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x100002c3, 8) , (unique, 0x100002cb, 8) , (unique, 0x100002d3, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100003e4, 8), (unique, 0x100003e4, 8) INT_ADD (stack, 0xffffffffffffffb0, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x100003dc, 8) , (const, 0x8, 8), (unique, 0x100003dc, 8) CAST (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x100002c3, 8) , (unique, 0x100002cb, 8) , (unique, 0x100002d3, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10000368, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x3400, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x10000380, 8) COPY (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000394, 4) COPY (stack, 0xffffffffffffff84, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[ ---  CBRANCH (ram, 0x48f090, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffbf, 1) , (const, 0x0, 1), (stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[ ---  CBRANCH (ram, 0x48eedb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100003ec, 8), (unique, 0x100003ec, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x48ee9c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100003f4, 8), (unique, 0x100003f4, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3ec, 8)]
[(unique, 0x1000026e, 8) MULTIEQUAL (unique, 0x10000360, 8) , (unique, 0x10000368, 8) , (unique, 0x10000368, 8)]
[(unique, 0x10000276, 8) MULTIEQUAL (unique, 0x10000378, 8) , (unique, 0x10000380, 8) , (unique, 0x10000380, 8)]
[ ---  CBRANCH (ram, 0x48eedb, 1) , (unique, 0x1000026d, 1), (unique, 0x1000026d, 1) INT_LESS (register, 0xb0, 4) , (unique, 0x1000027f, 4), (unique, 0x1000027f, 4) MULTIEQUAL (unique, 0x10000390, 4) , (unique, 0x10000394, 4) , (unique, 0x10000394, 4)]
[(unique, 0x1000016d, 4) SUBPIECE (unique, 0x10000276, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48ef10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100003fc, 8), (unique, 0x100003fc, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3c8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000026e, 8)]
[ ---  CBRANCH (ram, 0x48eec5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48ef10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48f020, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffbf, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x48eece, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000404, 8), (unique, 0x10000404, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3d0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48eece, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) INT_SUB (unique, 0x10000162, 4) , (const, 0x1, 4), (unique, 0x10000162, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48f040, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000040c, 8), (unique, 0x1000040c, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10000255, 8) , (const, 0x4, 8), (unique, 0x10000255, 8) INT_ADD (unique, 0x1000024d, 8) , (const, 0x2, 8), (unique, 0x1000024d, 8) INT_MULT (register, 0x98, 8) , (const, 0x2, 8), (register, 0x98, 8) INT_ZEXT (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48f07d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000414, 8), (unique, 0x10000414, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x3c8, 8)]
[ ---  CBRANCH (ram, 0x48f070, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000044c, 8) , (const, 0x48ef52, 8), (unique, 0x1000044c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001c5, 8) , (unique, 0x10000215, 8) , (const, 0x1, 8), (unique, 0x10000215, 8) INT_ADD (unique, 0x100000a1, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x29f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x29f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x29f, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x29f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x29f, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x29f, 4)]
[(stack, 0xffffffffffffffbc, 2) INDIRECT (register, 0x0, 2) , (const, 0x29f, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x29f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x29f, 4)]
[ ---  CALL (ram, 0x401040, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8) , (unique, 0x3680, 8), (unique, 0x3400, 8) INT_ADD (stack, 0xffffffffffffffb0, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10000434, 8) , (const, 0x8, 8), (unique, 0x10000434, 8) CAST (register, 0x80, 8), (unique, 0x3680, 8) INT_MULT (unique, 0x1000042c, 8) , (const, 0x8, 8), (unique, 0x1000042c, 8) CAST (register, 0x98, 8), (register, 0x98, 8) CAST (unique, 0x10000424, 8), (unique, 0x10000424, 8) INT_ZEXT (register, 0x98, 4), (register, 0x98, 4) INT_SUB (unique, 0x1000016d, 4) , (register, 0xb0, 4), (register, 0x80, 8) CAST (unique, 0x1000041c, 8), (unique, 0x1000041c, 8) INT_ZEXT (register, 0xb8, 4)]
[(unique, 0x10000283, 8) COPY (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x29f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000026e, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100002ab, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (register, 0x80, 8) , (const, 0x29f, 4), (register, 0x80, 8) CAST (unique, 0x1000041c, 8), (unique, 0x1000041c, 8) INT_ZEXT (register, 0xb8, 4)]
[(unique, 0x100002bb, 8) COPY (unique, 0x10000293, 8), (unique, 0x10000293, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x10000323, 8) , (const, 0x29f, 4), (unique, 0x10000323, 8) COPY (unique, 0x3400, 8)]
[(unique, 0x100002e3, 8) COPY (unique, 0x1000028b, 8), (unique, 0x1000028b, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x1000031b, 8) , (const, 0x29f, 4), (unique, 0x1000031b, 8) COPY (register, 0x90, 8)]
[(unique, 0x100002f3, 8) COPY (unique, 0x1000029b, 8), (unique, 0x1000029b, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (register, 0x98, 8) , (const, 0x29f, 4), (register, 0x98, 8) CAST (unique, 0x10000424, 8), (unique, 0x10000424, 8) INT_ZEXT (register, 0x98, 4), (register, 0x98, 4) INT_SUB (unique, 0x1000016d, 4) , (register, 0xb0, 4)]
[(unique, 0x10000348, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x29f, 4), (stack, 0xffffffffffffff98, 8) CAST (unique, 0x10000444, 8), (unique, 0x10000444, 8) INT_OR (unique, 0x10000175, 8) , (unique, 0x1000017d, 8), (unique, 0x1000017d, 8) INT_AND (unique, 0x10000276, 8) , (const, 0xffffffff, 8), (unique, 0x10000175, 8) INT_AND (unique, 0x1000043c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000043c, 8) CAST (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x48efb5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff68, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x29f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000484, 8) , (const, 0x48ef9d, 8), (unique, 0x10000484, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001c5, 8) , (unique, 0x1000021d, 8) , (const, 0x1, 8), (unique, 0x1000021d, 8) INT_ADD (unique, 0x100000a1, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2da, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2da, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2da, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2da, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x2da, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2da, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x2da, 4)]
[(stack, 0xffffffffffffffbc, 2) INDIRECT (stack, 0xffffffffffffffbc, 2) , (const, 0x2da, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x2da, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2da, 4)]
[ ---  CALL (ram, 0x401040, 8) , (unique, 0x3b80, 8) , (unique, 0x3b80, 8) , (unique, 0x1000029b, 8), (unique, 0x3b80, 8) INT_ADD (stack, 0xffffffffffffff68, 8) , (unique, 0x10000464, 8), (unique, 0x10000464, 8) CAST (stack, 0xffffffffffffffa8, 8), (unique, 0x3b80, 8) CAST (unique, 0x1000045c, 8), (unique, 0x1000045c, 8) INT_ADD (stack, 0xffffffffffffff68, 8) , (unique, 0x10000454, 8), (unique, 0x10000454, 8) CAST (stack, 0xffffffffffffff88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (unique, 0xbb00, 1), (unique, 0x3b80, 8) CAST (unique, 0x1000048c, 8), (unique, 0x1000048c, 8) INT_ADD (unique, 0x10000283, 8) , (unique, 0x10000276, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) CAST (unique, 0x1000045c, 8), (unique, 0x1000045c, 8) INT_ADD (stack, 0xffffffffffffff68, 8) , (unique, 0x10000454, 8), (unique, 0x10000454, 8) CAST (stack, 0xffffffffffffff88, 8)]
[(unique, 0x100002a3, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2da, 4), (stack, 0xffffffffffffffa0, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x100002b3, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2da, 4), (stack, 0xffffffffffffff88, 8) COPY (unique, 0x10000293, 8)]
[(unique, 0x100002db, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2da, 4), (stack, 0xffffffffffffff98, 8) COPY (unique, 0x1000028b, 8)]
[(unique, 0x100002eb, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2da, 4), (stack, 0xffffffffffffffa8, 8) COPY (unique, 0x1000029b, 8)]
[(unique, 0x10000340, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2da, 4), (stack, 0xffffffffffffff90, 8) CAST (unique, 0x1000047c, 8), (unique, 0x1000047c, 8) INT_OR (unique, 0x10000186, 8) , (unique, 0x1000018e, 8), (unique, 0x1000018e, 8) INT_AND (unique, 0x10000474, 8) , (const, 0xffffffff, 8), (unique, 0x10000474, 8) CAST (stack, 0xffffffffffffff98, 8), (unique, 0x10000186, 8) INT_AND (unique, 0x1000046c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000046c, 8) CAST (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000196, 8) MULTIEQUAL (unique, 0x10000348, 8) , (unique, 0x10000340, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbc, 2) MULTIEQUAL (stack, 0xffffffffffffffbc, 2) , (stack, 0xffffffffffffffbc, 2)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x100002f3, 8) , (unique, 0x100002eb, 8)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x100002e3, 8) , (unique, 0x100002db, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x100002bb, 8) , (unique, 0x100002b3, 8)]
[(unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffc0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x100004a4, 8) , (const, 0x2, 8), (unique, 0x100004a4, 8) CAST (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100002ab, 8) , (unique, 0x100002a3, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x48eff0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_ZEXT (unique, 0xbc00, 2), (register, 0x0, 4) INT_SUB (stack, 0xffffffffffffffb8, 4) , (register, 0xb0, 4), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000049c, 8), (unique, 0x1000049c, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffc0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10000494, 8) , (const, 0x2, 8), (unique, 0x10000494, 8) CAST (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100002ab, 8) , (unique, 0x100002a3, 8), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004cc, 8) , (const, 0x48f006, 8), (unique, 0x100004cc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001c5, 8) , (unique, 0x10000225, 8) , (const, 0x1, 8), (unique, 0x10000225, 8) INT_ADD (unique, 0x100000a1, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x320, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x320, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x320, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x320, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x320, 4)]
[ ---  CALL (ram, 0x401040, 8) , (register, 0x88, 8) , (unique, 0x3400, 8) , (unique, 0x1000015a, 8), (unique, 0x1000015a, 8) INT_MULT (unique, 0x100004ac, 8) , (const, 0x2, 8), (unique, 0x100004ac, 8) CAST (register, 0x98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004dc, 8) , (stack, 0xffffffffffffffbc, 2), (unique, 0x100004dc, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffc0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (register, 0x8, 8) INT_AND (unique, 0x100004d4, 8) , (const, 0xffffffff, 8), (unique, 0x100004d4, 8) CAST (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x320, 4), (stack, 0xffffffffffffffbc, 2) INDIRECT (stack, 0xffffffffffffffbc, 2) , (const, 0x320, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x320, 4), (stack, 0xffffffffffffffa8, 8) CAST (unique, 0x100004c4, 8), (unique, 0x100004c4, 8) INT_OR (unique, 0x100001a7, 8) , (unique, 0x100001af, 8), (unique, 0x100001af, 8) INT_AND (unique, 0x100004bc, 8) , (const, 0xffffffff, 8), (unique, 0x100004bc, 8) CAST (unique, 0x10000196, 8), (unique, 0x100001a7, 8) INT_AND (unique, 0x100004b4, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100004b4, 8) CAST (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x100002d3, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000032b, 8) , (const, 0x320, 4), (unique, 0x1000032b, 8) COPY (register, 0x90, 8)]
[(unique, 0x10000303, 4) COPY (register, 0xb8, 4)]
[ ---  BRANCH (ram, 0x48ee70, 1)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48eece, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000360, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) PTRADD (unique, 0x1000026e, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[(unique, 0x10000378, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) INT_SUB (unique, 0x10000276, 8) , (const, 0x1, 8)]
[(unique, 0x10000390, 4) COPY (register, 0xa0, 4), (register, 0xa0, 4) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4), (register, 0xa0, 8) INT_SUB (unique, 0x10000276, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x48eef1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb8, 4) , (register, 0xb8, 4)]
[(unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffc0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_ZEXT (register, 0xb8, 4)]
[ ---  BRANCH (ram, 0x48efcc, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004e4, 8) , (const, 0x48efdf, 8), (unique, 0x100004e4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001c5, 8) , (unique, 0x1000022d, 8) , (const, 0x1, 8), (unique, 0x1000022d, 8) INT_ADD (unique, 0x100000a1, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x205, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x205, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x205, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x205, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x205, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffbc, 2) INDIRECT (stack, 0xffffffffffffffbc, 2) , (const, 0x205, 4), (stack, 0xffffffffffffffbc, 2) MULTIEQUAL (register, 0x0, 2) , (stack, 0xffffffffffffffbc, 2)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x205, 4), (stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x205, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x401120, 8) , (register, 0x38, 8) , (const, 0x0, 8) , (unique, 0x10000112, 8), (unique, 0x10000112, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_SUB (stack, 0xffffffffffffffb8, 4) , (register, 0xb8, 4), (register, 0x38, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(unique, 0x100002cb, 8) COPY (register, 0x90, 8), (register, 0x90, 8) CAST (unique, 0x100004ec, 8), (unique, 0x100004ec, 8) INT_ZEXT (register, 0xb8, 4)]
[(unique, 0x100002ff, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4)]
[(unique, 0x1000030f, 4) COPY (register, 0xb8, 4)]
[ ---  BRANCH (ram, 0x48ee70, 1)]
[ ---  RETURN (const, 0x0, 8)]
