[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[(register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3e, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x3e, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x3e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x3e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x3e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3e, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0x110, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1e095f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000027e, 8), (unique, 0x1000027e, 8) CALL (ram, 0x248f60, 8) , (register, 0x38, 8) , (unique, 0x100001ab, 8) , (register, 0x10, 8) , (const, 0x0, 8), (unique, 0x100001ab, 8) COPY (const, 0x2b52ab, 8)]
[(register, 0x18, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x1e0741, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4e, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x4e, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x4e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4e, 4)]
[ ---  CBRANCH (ram, 0x1e0770, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000286, 8), (unique, 0x10000286, 8) CALL (ram, 0x248f60, 8) , (register, 0x38, 8) , (unique, 0x100001b3, 8), (unique, 0x100001b3, 8) COPY (const, 0x2b52b6, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x60, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x60, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5d, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x60, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x5d, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x60, 4), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x5d, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x60, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x5d, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x60, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x5d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x60, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5d, 4)]
[ ---  CBRANCH (ram, 0x1e0770, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) CALLIND (register, 0x0, 8)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0xa0, 4), (stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0xa0, 4), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa0, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CAST (unique, 0x1000028e, 8), (unique, 0x1000028e, 8) CALL (ram, 0x248f60, 8) , (register, 0x38, 8) , (unique, 0x100001bb, 8), (unique, 0x100001bb, 8) COPY (const, 0x2b52bf, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(register, 0xb0, 8) PTRADD (ram, 0x4eae68, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x110, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa0, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffbb0, 8) COPY (const, 0x400, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb88, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd6, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x10000214, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc9, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (unique, 0x1000021c, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0xc9, 4), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (unique, 0x10000230, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xc9, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (unique, 0x10000238, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xc9, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (unique, 0x10000240, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc9, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000248, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000252, 4) COPY (stack, 0xfffffffffffffb98, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0xd6, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0xc9, 4), (stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (unique, 0x10000224, 4) , (stack, 0xfffffffffffffb98, 4)]
[ ---  CBRANCH (ram, 0x1e0880, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xfffffffe, 4), (register, 0x0, 4) CALLIND (register, 0x0, 8) , (unique, 0x3800, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffbb0, 8) , (register, 0xb0, 8), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xc9, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xc9, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (unique, 0x10000238, 8) , (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (unique, 0x10000240, 8) , (stack, 0xfffffffffffffbb0, 8)]
[ ---  CBRANCH (ram, 0x1e088d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1e07c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb98, 4) , (register, 0x10, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffba0, 8)]
[(unique, 0x10000276, 8) COPY (stack, 0xfffffffffffffba0, 8)]
[(unique, 0x10000214, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000021c, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000224, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(unique, 0x10000228, 8) MULTIEQUAL (unique, 0x10000276, 8) , (register, 0xb8, 8)]
[(unique, 0x10000230, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(unique, 0x10000238, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x10000240, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(unique, 0x10000248, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1e081c, 1) , (unique, 0x10000213, 1), (unique, 0x10000213, 1) INT_NOTEQUAL (unique, 0x1000020b, 8) , (const, 0x0, 8), (unique, 0x1000020b, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000214, 8) , (const, 0x114, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x1000021c, 8) , (const, 0x114, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (unique, 0x10000224, 4) , (const, 0x114, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (unique, 0x10000230, 8) , (const, 0x114, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x10000238, 8) , (const, 0x114, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (unique, 0x10000240, 8) , (const, 0x114, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000248, 8) , (const, 0x114, 4)]
[ ---  CBRANCH (ram, 0x1e0810, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x1000020b, 8) , (register, 0x30, 8)]
[(register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1e08e4, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1e07c0, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x1e07c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000252, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1e0853, 1)]
[ ---  CBRANCH (ram, 0x1e0848, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (unique, 0xbd80, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x1000026e, 4) COPY (unique, 0x10000252, 4)]
[ ---  CBRANCH (ram, 0x1e08f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x1e0959, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (stack, 0x8, 8) , (const, 0x1, 8)]
[(unique, 0x10000256, 8) COPY (unique, 0x10000194, 8), (unique, 0x10000194, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x1e091c, 1)]
[ ---  CBRANCH (ram, 0x1e088d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (stack, 0x8, 8)]
[(unique, 0x1000025e, 8) COPY (unique, 0x10000172, 8), (unique, 0x10000172, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x1e0919, 1) , (unique, 0x27800, 1), (unique, 0x27800, 1) INT_SLESS (stack, 0x8, 8) , (unique, 0x10000172, 8), (unique, 0x10000172, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x2, 8)]
[(unique, 0x10000266, 8) COPY (stack, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c2, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x1c2, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x1c2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1c2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1c2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c2, 4)]
[ ---  CBRANCH (ram, 0x1e088d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000296, 8), (unique, 0x10000296, 8) CALL (ram, 0x121020, 8) , (register, 0xa8, 8) , (unique, 0x3680, 8), (unique, 0x3680, 8) INT_MULT (register, 0x18, 8) , (const, 0x4, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000256, 8) , (unique, 0x1000025e, 8) , (unique, 0x10000266, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1d7, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1d2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(unique, 0x10000272, 4) COPY (stack, 0xfffffffffffffb98, 4)]
[ ---  BRANCH (ram, 0x1e086a, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (register, 0x18, 4), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x18, 4) MULTIEQUAL (unique, 0x1000026e, 4) , (unique, 0x10000272, 4), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x17e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x173, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x1e07c0, 1)]
[ ---  CBRANCH (ram, 0x1e07c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000252, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (register, 0x0, 8) , (const, 0x4, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (unique, 0x10000228, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1e08d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002ae, 8), (unique, 0x100002ae, 8) INT_ADD (unique, 0x1000029e, 8) , (unique, 0x100002a6, 8), (unique, 0x100002a6, 8) CAST (ram, 0x4eae68, 8), (unique, 0x1000029e, 8) CAST (register, 0x110, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 4) COPY (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x254, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x254, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x254, 4)]
[ ---  CBRANCH (ram, 0x1e07c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (unique, 0x3800, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1e08aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffba8, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1fe, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1fe, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1fe, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1fe, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fe, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1e0741, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x213, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x20f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x213, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x20f, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x20f, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x213, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x20f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x213, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x20f, 4)]
[ ---  CALLIND (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x1e0741, 1)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 4) COPY (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x1e0969, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0x110, 8) , (const, 0x5, 8) , (const, 0x8, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x99, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x99, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
