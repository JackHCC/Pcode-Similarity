[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000315, 8), (unique, 0x10000315, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffffd8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48b930, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4f00, 8) , (const, 0x0, 8)]
[(unique, 0x10000305, 8) COPY (ram, 0x4c7fc8, 8)]
[ ---  CBRANCH (ram, 0x48b82a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7fc0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48ba1e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4f28, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d7, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1d7, 4)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0x1d7, 4)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0x1d7, 4)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0x1d7, 4)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0x1d7, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0x1d7, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1d7, 4)]
[ ---  CBRANCH (ram, 0x48ba18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x0, 8) , (unique, 0x100001bf, 8) , (unique, 0x10000187, 8), (unique, 0x100001bf, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7fc4, 8), (unique, 0x10000187, 8) PTRSUB (const, 0x0, 8) , (const, 0x48ba60, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(ram, 0x4c7fc4, 4) MULTIEQUAL (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4)]
[(ram, 0x4c4f78, 8) MULTIEQUAL (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8)]
[(ram, 0x4c4f28, 8) MULTIEQUAL (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8)]
[(ram, 0x4c4f00, 8) MULTIEQUAL (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8)]
[(register, 0x10, 4) MULTIEQUAL (ram, 0x4c7fc0, 4) , (ram, 0x4c7fc0, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c7fc8, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7fe0, 8)]
[ ---  BRANCH (ram, 0x48b97b, 1)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(ram, 0x4c7fc4, 4) MULTIEQUAL (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4)]
[(ram, 0x4c4f78, 8) MULTIEQUAL (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8)]
[(ram, 0x4c4f28, 8) MULTIEQUAL (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8)]
[(ram, 0x4c4f00, 8) MULTIEQUAL (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (const, 0x2, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (ram, 0x4c7fc0, 4)]
[(unique, 0x100002f5, 8) COPY (ram, 0x4c7fc8, 8), (ram, 0x4c7fc8, 8) MULTIEQUAL (ram, 0x4c7fc8, 8) , (ram, 0x4c7fc8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x2f, 4)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0x2f, 4)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0x2f, 4)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0x2f, 4)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0x2f, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2f, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x100001b7, 8) , (unique, 0x1000017f, 8), (unique, 0x100001b7, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7fc0, 8), (unique, 0x1000017f, 8) PTRSUB (const, 0x0, 8) , (const, 0x48b790, 8)]
[(unique, 0x100002fd, 8) COPY (ram, 0x4c7fc8, 8), (ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0x2f, 4)]
[(unique, 0x10000138, 4) MULTIEQUAL (register, 0x10, 4) , (ram, 0x4c7fc0, 4) , (ram, 0x4c7fc0, 4)]
[(unique, 0x1000013d, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000145, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(unique, 0x10000146, 8) MULTIEQUAL (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8)]
[(unique, 0x1000014e, 8) MULTIEQUAL (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8)]
[(unique, 0x10000156, 8) MULTIEQUAL (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8)]
[(unique, 0x1000015e, 4) MULTIEQUAL (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4)]
[(unique, 0x1000016a, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(unique, 0x10000172, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100002d5, 8) COPY (unique, 0x10000162, 8), (unique, 0x10000162, 8) MULTIEQUAL (unique, 0x100002f5, 8) , (unique, 0x100002fd, 8) , (unique, 0x10000305, 8)]
[ ---  CBRANCH (ram, 0x48b833, 1) , (unique, 0x1000013c, 1), (unique, 0x1000013c, 1) INT_EQUAL (unique, 0x1000031d, 8) , (const, 0x0, 8), (unique, 0x1000031d, 8) CAST (unique, 0x10000162, 8), (unique, 0x10000162, 8) MULTIEQUAL (unique, 0x100002f5, 8) , (unique, 0x100002fd, 8) , (unique, 0x10000305, 8)]
[ ---  CBRANCH (ram, 0x48b9ae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000156, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x1000013d, 8) , (const, 0x1ac, 4)]
[(register, 0x20a, 1) INDIRECT (unique, 0x10000145, 1) , (const, 0x1ac, 4)]
[(ram, 0x4c4f00, 8) INDIRECT (unique, 0x10000146, 8) , (const, 0x1ac, 4)]
[(ram, 0x4c4f28, 8) INDIRECT (unique, 0x1000014e, 8) , (const, 0x1ac, 4)]
[(ram, 0x4c4f78, 8) INDIRECT (unique, 0x10000156, 8) , (const, 0x1ac, 4)]
[(ram, 0x4c7fc0, 4) INDIRECT (unique, 0x10000138, 4) , (const, 0x1ac, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (unique, 0x1000015e, 4) , (const, 0x1ac, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (unique, 0x100002d5, 8) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0x1000016a, 8) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0x10000172, 8) , (const, 0x1ac, 4)]
[ ---  CBRANCH (ram, 0x48b833, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000032d, 8) , (const, 0x0, 8), (unique, 0x1000032d, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000325, 8), (unique, 0x10000325, 8) CALL (ram, 0x0, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (unique, 0x10000172, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (unique, 0x1000016a, 8) , (stack, 0xffffffffffffffd8, 8)]
[(ram, 0x4c7fc8, 8) MULTIEQUAL (unique, 0x100002d5, 8) , (ram, 0x4c7fc8, 8)]
[(ram, 0x4c7fc4, 4) MULTIEQUAL (unique, 0x1000015e, 4) , (ram, 0x4c7fc4, 4)]
[(ram, 0x4c7fc0, 4) MULTIEQUAL (unique, 0x10000138, 4) , (ram, 0x4c7fc0, 4)]
[(ram, 0x4c4f78, 8) MULTIEQUAL (unique, 0x10000156, 8) , (ram, 0x4c4f78, 8)]
[(ram, 0x4c4f28, 8) MULTIEQUAL (unique, 0x1000014e, 8) , (ram, 0x4c4f28, 8)]
[(ram, 0x4c4f00, 8) MULTIEQUAL (unique, 0x10000146, 8) , (ram, 0x4c4f00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (unique, 0x10000145, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x1000013d, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7fe0, 8)]
[ ---  BRANCH (ram, 0x48b833, 1)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (unique, 0x10000172, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (unique, 0x1000016a, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(ram, 0x4c7fc8, 8) MULTIEQUAL (unique, 0x100002d5, 8) , (ram, 0x4c7fc8, 8) , (ram, 0x4c7fc8, 8)]
[(ram, 0x4c7fc4, 4) MULTIEQUAL (unique, 0x1000015e, 4) , (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4)]
[(ram, 0x4c7fc0, 4) MULTIEQUAL (unique, 0x10000138, 4) , (ram, 0x4c7fc0, 4) , (ram, 0x4c7fc0, 4)]
[(ram, 0x4c4f78, 8) MULTIEQUAL (unique, 0x10000156, 8) , (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8)]
[(ram, 0x4c4f28, 8) MULTIEQUAL (unique, 0x1000014e, 8) , (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8)]
[(ram, 0x4c4f00, 8) MULTIEQUAL (unique, 0x10000146, 8) , (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (unique, 0x10000145, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x1000013d, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000034d, 8), (unique, 0x1000034d, 8) INT_ADD (unique, 0x10000345, 8) , (const, 0x18, 8), (unique, 0x10000345, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000162, 8) , (register, 0x0, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x48b890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000033d, 8), (unique, 0x1000033d, 8) INT_ADD (unique, 0x10000335, 8) , (const, 0x4, 8), (unique, 0x10000335, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000162, 8) , (register, 0x0, 8) , (register, 0x18, 8)]
[(register, 0x200, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x48b869, 1) , (unique, 0x1000012f, 1), (unique, 0x1000012f, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0x8, 8) COPY (const, 0xe, 8)]
[(unique, 0x1000029d, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x100002bd, 8) COPY (unique, 0x10000355, 8), (unique, 0x10000355, 8) CAST (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x4b5090, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100002bd, 8) , (unique, 0x100002c5, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x1000029d, 8) , (unique, 0x100002a5, 8)]
[ ---  CBRANCH (ram, 0x48b854, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x200, 1) INT_LESS (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x100002a5, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x100001ef, 8) , (const, 0x1, 8), (unique, 0x100001ef, 8) INT_ADD (unique, 0x1000009b, 8) , (const, 0x1, 8), (unique, 0x1000009b, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x100002c5, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100001e7, 8) , (const, 0x1, 8), (unique, 0x100001e7, 8) INT_ADD (unique, 0x10000093, 8) , (const, 0x1, 8), (unique, 0x10000093, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x48b852, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x48ba38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xc900, 1) , (register, 0x200, 1), (unique, 0xc900, 1) BOOL_AND (unique, 0x100000a4, 1) , (unique, 0x100000a5, 1), (unique, 0x100000a5, 1) BOOL_NEGATE (register, 0x206, 1), (unique, 0x100000a4, 1) BOOL_NEGATE (register, 0x200, 1), (register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc0, 4)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0xc0, 4)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0xc0, 4)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0xc0, 4)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0xc0, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0xc0, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0xc0, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xc0, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xc0, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x48b861, 1)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0x95, 4), (ram, 0x4c4f00, 8) MULTIEQUAL (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0x95, 4), (ram, 0x4c4f28, 8) MULTIEQUAL (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0x95, 4), (ram, 0x4c4f78, 8) MULTIEQUAL (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0x95, 4), (ram, 0x4c7fc0, 4) MULTIEQUAL (ram, 0x4c7fc0, 4) , (ram, 0x4c7fc0, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0x95, 4), (ram, 0x4c7fc4, 4) MULTIEQUAL (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0x95, 4), (ram, 0x4c7fc8, 8) MULTIEQUAL (ram, 0x4c7fc8, 8) , (ram, 0x4c7fc8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000365, 8), (unique, 0x10000365, 8) INT_ADD (unique, 0x1000035d, 8) , (const, 0x18, 8), (unique, 0x1000035d, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x48b869, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(unique, 0x1000030d, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48b9c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000036d, 8), (unique, 0x1000036d, 8) CAST (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16d, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x16d, 4)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0x16d, 4)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0x16d, 4)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0x16d, 4)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0x16d, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0x16d, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0x16d, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0x1000030d, 8) , (const, 0x16d, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x16d, 4)]
[(register, 0x0, 8) CALL (ram, 0x4031c0, 8) , (unique, 0x10000197, 8) , (unique, 0xbd80, 8) , (const, 0x5, 8), (unique, 0x10000197, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae11c, 8)]
[(register, 0x8, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0c15, 8)]
[ ---  CBRANCH (ram, 0x48b9fa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000037d, 8), (unique, 0x1000037d, 8) INT_ADD (unique, 0x10000375, 8) , (const, 0x10, 8), (unique, 0x10000375, 8) CAST (register, 0x18, 8)]
[(register, 0x8, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a38d, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x192, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x192, 4)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0x192, 4)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0x192, 4)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0x192, 4)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0x192, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0x192, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0x192, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x192, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x192, 4)]
[(register, 0x0, 4) CALL (ram, 0x410e90, 8) , (unique, 0x10000385, 8) , (unique, 0x100001a7, 8) , (unique, 0xbd80, 8) , (register, 0x8, 8) , (register, 0x0, 8), (unique, 0x10000385, 8) CAST (register, 0x20, 8), (unique, 0x100001a7, 8) COPY (const, 0x4afd9e, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x0, 8) CALL (ram, 0x48bee0, 8) , (unique, 0xbc80, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe6, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xdd, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xe6, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xdd, 4)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0xe6, 4), (ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0xdd, 4)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0xe6, 4), (ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0xdd, 4)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0xe6, 4), (ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0xdd, 4)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0xe6, 4), (ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0xdd, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0xe6, 4), (ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0xdd, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0xe6, 4), (ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xe6, 4), (stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0x1000030d, 8) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xe6, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xdd, 4)]
[(register, 0x0, 8) CALL (ram, 0x4031c0, 8) , (unique, 0x1000018f, 8) , (unique, 0xbd80, 8) , (const, 0x5, 8), (unique, 0x1000018f, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae11c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000395, 8), (unique, 0x10000395, 8) INT_ADD (unique, 0x1000038d, 8) , (const, 0x18, 8), (unique, 0x1000038d, 8) CAST (register, 0x18, 8)]
[(register, 0x8, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0c15, 8)]
[ ---  CBRANCH (ram, 0x48b8e9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100003a5, 8), (unique, 0x100003a5, 8) INT_ADD (unique, 0x1000039d, 8) , (const, 0x10, 8), (unique, 0x1000039d, 8) CAST (register, 0x18, 8)]
[(register, 0x8, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a38d, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10c, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x10c, 4)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0x10c, 4)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0x10c, 4)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0x10c, 4)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0x10c, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0x10c, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0x10c, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x10c, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x10c, 4)]
[(register, 0x0, 4) CALL (ram, 0x410e90, 8) , (unique, 0x100003ad, 8) , (unique, 0x100001af, 8) , (unique, 0xbd80, 8) , (register, 0x8, 8) , (register, 0x0, 8) , (register, 0x0, 8), (unique, 0x100003ad, 8) CAST (register, 0x20, 8), (unique, 0x100001af, 8) COPY (const, 0x4b509e, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10000249, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000251, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(unique, 0x10000252, 8) MULTIEQUAL (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8)]
[(unique, 0x1000025a, 8) MULTIEQUAL (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8)]
[(unique, 0x10000262, 8) MULTIEQUAL (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8)]
[(unique, 0x1000026a, 4) MULTIEQUAL (ram, 0x4c7fc0, 4) , (ram, 0x4c7fc0, 4)]
[(unique, 0x1000026e, 4) MULTIEQUAL (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4)]
[(unique, 0x10000272, 8) MULTIEQUAL (ram, 0x4c7fc8, 8) , (ram, 0x4c7fc8, 8)]
[(unique, 0x1000027a, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(unique, 0x10000282, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CBRANCH (ram, 0x48b8f9, 1) , (unique, 0x1000028a, 1), (unique, 0x1000028a, 1) BOOL_NEGATE (unique, 0x10000244, 1), (unique, 0x10000244, 1) INT_EQUAL (unique, 0x10000245, 4) , (const, 0xffffffff, 4), (unique, 0x10000245, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x200, 1) INT_NOTEQUAL (unique, 0x10000245, 4) , (const, 0xffffffff, 4)]
[(register, 0x8, 8) COPY (const, 0xe, 8)]
[(unique, 0x1000028d, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100003bd, 8), (unique, 0x100003bd, 8) INT_ADD (unique, 0x100003b5, 8) , (const, 0x18, 8), (unique, 0x100003b5, 8) CAST (register, 0x18, 8)]
[(unique, 0x100002ad, 8) COPY (unique, 0x100003c5, 8), (unique, 0x100003c5, 8) CAST (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x4b5090, 8)]
[(register, 0x206, 1) MULTIEQUAL (unique, 0x10000244, 1) , (register, 0x206, 1)]
[(register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100002ad, 8) , (unique, 0x100002b5, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x1000028d, 8) , (unique, 0x10000295, 8)]
[ ---  CBRANCH (ram, 0x48b90e, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x200, 1) INT_LESS (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000295, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x1000021f, 8) , (const, 0x1, 8), (unique, 0x1000021f, 8) INT_ADD (unique, 0x100000d5, 8) , (const, 0x1, 8), (unique, 0x100000d5, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (unique, 0x10000251, 1)]
[(unique, 0x100002b5, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000217, 8) , (const, 0x1, 8), (unique, 0x10000217, 8) INT_ADD (unique, 0x100000cd, 8) , (const, 0x1, 8), (unique, 0x100000cd, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (unique, 0x10000251, 1)]
[ ---  CBRANCH (ram, 0x48b90c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x48ba48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xc900, 1) , (register, 0x200, 1), (unique, 0xc900, 1) BOOL_AND (unique, 0x100000de, 1) , (unique, 0x100000df, 1), (unique, 0x100000df, 1) BOOL_NEGATE (register, 0x206, 1), (unique, 0x100000de, 1) BOOL_NEGATE (register, 0x200, 1), (register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000249, 8) , (const, 0x163, 4)]
[(ram, 0x4c4f00, 8) INDIRECT (unique, 0x10000252, 8) , (const, 0x163, 4)]
[(ram, 0x4c4f28, 8) INDIRECT (unique, 0x1000025a, 8) , (const, 0x163, 4)]
[(ram, 0x4c4f78, 8) INDIRECT (unique, 0x10000262, 8) , (const, 0x163, 4)]
[(ram, 0x4c7fc0, 4) INDIRECT (unique, 0x1000026a, 4) , (const, 0x163, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (unique, 0x1000026e, 4) , (const, 0x163, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (unique, 0x10000272, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0x1000027a, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0x10000282, 8) , (const, 0x163, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x48b91b, 1)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (unique, 0x10000282, 8) , (stack, 0xffffffffffffffe0, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x10000249, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0x15b, 4), (ram, 0x4c4f00, 8) MULTIEQUAL (unique, 0x10000252, 8) , (ram, 0x4c4f00, 8)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0x15b, 4), (ram, 0x4c4f28, 8) MULTIEQUAL (unique, 0x1000025a, 8) , (ram, 0x4c4f28, 8)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0x15b, 4), (ram, 0x4c4f78, 8) MULTIEQUAL (unique, 0x10000262, 8) , (ram, 0x4c4f78, 8)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0x15b, 4), (ram, 0x4c7fc0, 4) MULTIEQUAL (unique, 0x1000026a, 4) , (ram, 0x4c7fc0, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0x15b, 4), (ram, 0x4c7fc4, 4) MULTIEQUAL (unique, 0x1000026e, 4) , (ram, 0x4c7fc4, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0x15b, 4), (ram, 0x4c7fc8, 8) MULTIEQUAL (unique, 0x10000272, 8) , (ram, 0x4c7fc8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffd8, 8), (unique, 0x3100, 8) CAST (unique, 0x100003d5, 8), (unique, 0x100003d5, 8) INT_ADD (unique, 0x100003cd, 8) , (const, 0x18, 8), (unique, 0x100003cd, 8) CAST (register, 0x18, 8), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (unique, 0x1000027a, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0x10000282, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (unique, 0x1000027a, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000249, 8)]
[(ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0x15e, 4), (ram, 0x4c4f00, 8) MULTIEQUAL (ram, 0x4c4f00, 8) , (unique, 0x10000252, 8)]
[(ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0x15e, 4), (ram, 0x4c4f28, 8) MULTIEQUAL (ram, 0x4c4f28, 8) , (unique, 0x1000025a, 8)]
[(ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0x15e, 4), (ram, 0x4c4f78, 8) MULTIEQUAL (ram, 0x4c4f78, 8) , (unique, 0x10000262, 8)]
[(ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0x15e, 4), (ram, 0x4c7fc0, 4) MULTIEQUAL (ram, 0x4c7fc0, 4) , (unique, 0x1000026a, 4)]
[(ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0x15e, 4), (ram, 0x4c7fc4, 4) MULTIEQUAL (ram, 0x4c7fc4, 4) , (unique, 0x1000026e, 4)]
[(ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0x15e, 4), (ram, 0x4c7fc8, 8) MULTIEQUAL (ram, 0x4c7fc8, 8) , (unique, 0x10000272, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x1, 4), (unique, 0x3100, 8) CAST (unique, 0x100003e5, 8), (unique, 0x100003e5, 8) INT_ADD (unique, 0x100003dd, 8) , (const, 0x4, 8), (unique, 0x100003dd, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x48b86d, 1)]
[(ram, 0x4c7fc8, 8) MULTIEQUAL (ram, 0x4c7fc8, 8) , (ram, 0x4c7fc8, 8) , (ram, 0x4c7fc8, 8) , (ram, 0x4c7fc8, 8)]
[(ram, 0x4c7fc4, 4) MULTIEQUAL (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4) , (ram, 0x4c7fc4, 4)]
[(ram, 0x4c7fc0, 4) MULTIEQUAL (ram, 0x4c7fc0, 4) , (ram, 0x4c7fc0, 4) , (ram, 0x4c7fc0, 4) , (ram, 0x4c7fc0, 4)]
[(ram, 0x4c4f78, 8) MULTIEQUAL (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8) , (ram, 0x4c4f78, 8)]
[(ram, 0x4c4f28, 8) MULTIEQUAL (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8) , (ram, 0x4c4f28, 8)]
[(ram, 0x4c4f00, 8) MULTIEQUAL (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8) , (ram, 0x4c4f00, 8)]
[(register, 0x0, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[ ---  CBRANCH (ram, 0x48ba55, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003ed, 8), (unique, 0x100003ed, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(ram, 0x4c4f00, 8) COPY (ram, 0x4c4f00, 8)]
[(ram, 0x4c4f28, 8) COPY (ram, 0x4c4f28, 8)]
[(ram, 0x4c4f78, 8) COPY (ram, 0x4c4f78, 8)]
[(ram, 0x4c7fc0, 4) COPY (ram, 0x4c7fc0, 4)]
[(ram, 0x4c7fc4, 4) COPY (ram, 0x4c7fc4, 4)]
[(ram, 0x4c7fc8, 8) COPY (ram, 0x4c7fc8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (register, 0x0, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xba, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c4f00, 8) COPY (ram, 0x4c4f00, 8), (ram, 0x4c4f00, 8) INDIRECT (ram, 0x4c4f00, 8) , (const, 0xba, 4)]
[(ram, 0x4c4f28, 8) COPY (ram, 0x4c4f28, 8), (ram, 0x4c4f28, 8) INDIRECT (ram, 0x4c4f28, 8) , (const, 0xba, 4)]
[(ram, 0x4c4f78, 8) COPY (ram, 0x4c4f78, 8), (ram, 0x4c4f78, 8) INDIRECT (ram, 0x4c4f78, 8) , (const, 0xba, 4)]
[(ram, 0x4c7fc0, 4) COPY (ram, 0x4c7fc0, 4), (ram, 0x4c7fc0, 4) INDIRECT (ram, 0x4c7fc0, 4) , (const, 0xba, 4)]
[(ram, 0x4c7fc4, 4) COPY (ram, 0x4c7fc4, 4), (ram, 0x4c7fc4, 4) INDIRECT (ram, 0x4c7fc4, 4) , (const, 0xba, 4)]
[(ram, 0x4c7fc8, 8) COPY (ram, 0x4c7fc8, 8), (ram, 0x4c7fc8, 8) INDIRECT (ram, 0x4c7fc8, 8) , (const, 0xba, 4)]
[ ---  RETURN (const, 0x1, 4)]
