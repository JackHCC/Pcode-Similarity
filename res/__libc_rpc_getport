[(register, 0x28, 8) INT_ZEXT (register, 0x8, 4)]
[(stack, 0xffffffffffffffa2, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffa4, 4) COPY (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x6f00, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x237710, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x6, 4)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x125, 4)]
[ ---  CBRANCH (ram, 0x2377c8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207ce0, 8) , (const, 0x2, 4) , (const, 0x1, 4) , (const, 0x6, 4)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x151, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x151, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x151, 4), (stack, 0xffffffffffffffa8, 8) COPY (const, 0x2, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x151, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x151, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x151, 4)]
[ ---  CBRANCH (ram, 0x2377c0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207830, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (const, 0x10, 4), (unique, 0x3800, 8) CAST (unique, 0x1000031f, 8), (unique, 0x1000031f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x162, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x162, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x162, 4)]
[ ---  CBRANCH (ram, 0x2377c0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207860, 8) , (register, 0x0, 4) , (unique, 0x10000327, 8) , (const, 0x10, 4), (unique, 0x10000327, 8) CAST (register, 0x38, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x18e, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x18e, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x18e, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x19b, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x19b, 4), (stack, 0xffffffffffffffa4, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x19b, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x0, 8) CALL (ram, 0x234dd0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x190, 4) , (const, 0x190, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa4, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x179, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0x10000303, 4) , (const, 0x179, 4), (unique, 0x10000303, 4) COPY (register, 0x0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x179, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x179, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x179, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x179, 4)]
[(unique, 0x10000228, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x237646, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x234dd0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x190, 4) , (const, 0x190, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa4, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x61, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x61, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x61, 4)]
[(register, 0x0, 8) CALL (ram, 0x235cb0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x1000032f, 16) , (register, 0x80, 8) , (const, 0x0, 4) , (register, 0x88, 4), (unique, 0x1000032f, 16) CAST (unique, 0x10000181, 16), (unique, 0x10000181, 16) INT_ADD (unique, 0x100002f3, 16) , (unique, 0x10000191, 9), (unique, 0x100002f3, 16) INT_LEFT (unique, 0x100002e3, 16) , (const, 0x48, 16), (unique, 0x100002e3, 16) INT_SEXT (const, 0x1, 7), (unique, 0x10000191, 9) INT_ADD (unique, 0x100002da, 9) , (const, 0x190, 8), (unique, 0x100002da, 9) INT_LEFT (unique, 0x100002d1, 9) , (const, 0x40, 9), (unique, 0x100002d1, 9) INT_SEXT (const, 0x90, 1), (register, 0x88, 4) INT_SUB (unique, 0x1000021b, 4) , (const, 0x5c, 4), (unique, 0x1000021b, 4) SUBPIECE (register, 0x20, 8) , (const, 0x0, 4)]
[(unique, 0x100002c3, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(unique, 0x100002c5, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(unique, 0x100002c9, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x237637, 1) , (unique, 0x100002ba, 1), (unique, 0x100002ba, 1) INT_EQUAL (unique, 0x100002bb, 8) , (const, 0x0, 8), (unique, 0x100002bb, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10000229, 1) COPY (const, 0x0, 1)]
[(unique, 0x10000225, 1) MULTIEQUAL (unique, 0x10000229, 1) , (unique, 0x10000228, 1)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7b, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x100002c9, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0xa4, 4), (stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x7b, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (unique, 0x100002c3, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xa4, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x7b, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x100002c5, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000307, 8) , (const, 0xa4, 4), (unique, 0x10000307, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x1000030f, 8) , (const, 0xa4, 4), (unique, 0x1000030f, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x10000317, 8) , (const, 0xa4, 4), (unique, 0x10000317, 8) COPY (register, 0x28, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa4, 4), (stack, 0xffffffffffffffc0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2376f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0xa0, 8) , (const, 0x3, 8) , (unique, 0x1000022a, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x10000232, 8) , (unique, 0x10000347, 8) , (unique, 0x1000034f, 16), (unique, 0x1000034f, 16) CAST (unique, 0x1000019a, 16), (unique, 0x10000347, 8) CAST (unique, 0x3800, 8), (unique, 0x10000232, 8) PTRSUB (const, 0x0, 8) , (const, 0x23a6c0, 8), (unique, 0x1000022a, 8) PTRSUB (const, 0x0, 8) , (const, 0x22c3f0, 8), (unique, 0x1000019a, 16) INT_ZEXT (register, 0x88, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000025a, 8), (unique, 0x1000025a, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) CAST (unique, 0x1000033f, 8), (unique, 0x1000033f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100002bb, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000028a, 8) , (const, 0xe, 4), (unique, 0x1000028a, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11e, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0xa0, 8) , (unique, 0x3100, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x2376b2, 1)]
[ ---  CBRANCH (ram, 0x2376b2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffa2, 2) , (const, 0x0, 2)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000262, 8) , (const, 0xf, 4), (unique, 0x10000262, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0xd0, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0xa0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2376cd, 1) , (unique, 0x10000227, 1), (unique, 0x10000227, 1) BOOL_NEGATE (unique, 0x10000225, 1)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0xe5, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xe5, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xe5, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe5, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xe5, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1f7030, 8) , (stack, 0xffffffffffffffa4, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 2), (register, 0x0, 2) COPY (stack, 0xffffffffffffffa2, 2), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (unique, 0x100002c3, 2) , (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
