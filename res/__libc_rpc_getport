[(register, 0xa0, 8) INT_ZEXT (register, 0x8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x6f00, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000400, 8), (unique, 0x10000400, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x100003ec, 4) COPY (stack, 0xffffffffffffff68, 4), (stack, 0xffffffffffffff68, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4)]
[(unique, 0x100003f0, 4) COPY (stack, 0xffffffffffffff6c, 4), (stack, 0xffffffffffffff6c, 4) SUBPIECE (unique, 0x100003aa, 8) , (const, 0x0, 4), (unique, 0x100003aa, 8) INT_RIGHT (unique, 0x10000408, 8) , (const, 0x20, 4), (unique, 0x10000408, 8) CAST (register, 0x10, 8)]
[(stack, 0xffffffffffffff82, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffff84, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x259280, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x6, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x14f, 4)]
[ ---  CBRANCH (ram, 0x259337, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222ec0, 8) , (const, 0x2, 4) , (const, 0x1, 4) , (const, 0x6, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x166, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x166, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x166, 4), (stack, 0xffffffffffffffa8, 8) COPY (const, 0x2, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x166, 4)]
[ ---  CBRANCH (ram, 0x259330, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222870, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (const, 0x10, 4), (unique, 0x3800, 8) CAST (unique, 0x10000410, 8), (unique, 0x10000410, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x177, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x177, 4)]
[ ---  CBRANCH (ram, 0x259330, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2228a0, 8) , (register, 0x0, 4) , (unique, 0x10000418, 8) , (const, 0x10, 4), (unique, 0x10000418, 8) CAST (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x1a0, 4), (stack, 0xffffffffffffff82, 2) MULTIEQUAL (stack, 0xffffffffffffff82, 2) , (stack, 0xffffffffffffff82, 2)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x1a0, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1a0, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x1a0, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x1a0, 4), (stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x1a0, 4), (stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1a0, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1a0, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1a0, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a0, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x2108c0, 8) , (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b7, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x1b7, 4), (stack, 0xffffffffffffff82, 2) MULTIEQUAL (stack, 0xffffffffffffff82, 2) , (stack, 0xffffffffffffff82, 2)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x1b7, 4), (stack, 0xffffffffffffff84, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1b7, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x1b7, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x1b7, 4), (stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x1b7, 4), (stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CALL (ram, 0x2564d0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x190, 4) , (const, 0x190, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff84, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x18e, 4)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x18e, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (unique, 0x100003f4, 4) , (const, 0x18e, 4), (unique, 0x100003f4, 4) COPY (register, 0x0, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x18e, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x18e, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x18e, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x18e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x18e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x18e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x18e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x18e, 4)]
[ ---  CBRANCH (ram, 0x259270, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x2564d0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x190, 4) , (const, 0x190, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff84, 8)]
[(unique, 0x100002c9, 1) COPY (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x2591ae, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x7e, 4)]
[(register, 0x0, 8) CALL (ram, 0x257520, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x10000420, 16) , (register, 0x80, 8) , (const, 0x0, 4) , (register, 0x88, 4), (unique, 0x10000420, 16) CAST (unique, 0x100001e9, 16), (unique, 0x100001e9, 16) INT_ADD (unique, 0x100003d4, 16) , (unique, 0x100001f9, 9), (unique, 0x100003d4, 16) INT_LEFT (unique, 0x100003c4, 16) , (const, 0x48, 16), (unique, 0x100003c4, 16) INT_SEXT (const, 0x1, 7), (unique, 0x100001f9, 9) INT_ADD (unique, 0x100003bb, 9) , (const, 0x190, 8), (unique, 0x100003bb, 9) INT_LEFT (unique, 0x100003b2, 9) , (const, 0x40, 9), (unique, 0x100003b2, 9) INT_SEXT (const, 0x90, 1), (register, 0x88, 4) INT_SUB (unique, 0x100002bf, 4) , (const, 0x7c, 4), (unique, 0x100002bf, 4) SUBPIECE (register, 0x20, 8) , (const, 0x0, 4)]
[(unique, 0x10000369, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000371, 2) MULTIEQUAL (stack, 0xffffffffffffff82, 2) , (stack, 0xffffffffffffff82, 2)]
[(unique, 0x10000373, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(unique, 0x10000377, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(unique, 0x1000037b, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(unique, 0x1000037f, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(unique, 0x10000383, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(unique, 0x10000387, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x1000038f, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000397, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000039f, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100003a7, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x2591ae, 1) , (unique, 0x10000360, 1), (unique, 0x10000360, 1) INT_EQUAL (unique, 0x10000361, 8) , (const, 0x0, 8), (unique, 0x10000361, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100002c7, 1) MULTIEQUAL (unique, 0x100003a7, 1) , (unique, 0x100002c9, 1)]
[(register, 0x0, 8) CALL (ram, 0x259750, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbf, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x99, 4), (register, 0x110, 8) MULTIEQUAL (unique, 0x10000369, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0xbf, 4), (stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x99, 4), (stack, 0xffffffffffffff82, 2) MULTIEQUAL (unique, 0x10000371, 2) , (stack, 0xffffffffffffff82, 2)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x99, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (unique, 0x10000373, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff88, 4) COPY (stack, 0xffffffffffffff68, 4), (stack, 0xffffffffffffff68, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff8c, 4) COPY (stack, 0xffffffffffffff6c, 4), (stack, 0xffffffffffffff6c, 4) SUBPIECE (unique, 0x100003e4, 8) , (const, 0x0, 4), (unique, 0x100003e4, 8) INT_RIGHT (unique, 0x10000430, 8) , (const, 0x20, 4), (unique, 0x10000430, 8) CAST (register, 0x30, 8)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff90, 4) COPY (unique, 0x100003ec, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff94, 4) COPY (unique, 0x100003f0, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x100003f8, 8) , (const, 0xbf, 4), (unique, 0x100003f8, 8) COPY (register, 0xa0, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x99, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000397, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x99, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000039f, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x259310, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x18, 8) , (const, 0x3, 8) , (unique, 0x100002d0, 8) , (unique, 0x10000438, 8) , (unique, 0x100002d8, 8) , (unique, 0x10000440, 8) , (unique, 0x10000448, 16), (unique, 0x10000448, 16) CAST (unique, 0x10000202, 16), (unique, 0x10000440, 8) CAST (unique, 0x3800, 8), (unique, 0x10000438, 8) CAST (unique, 0x3800, 8), (unique, 0x100002d8, 8) PTRSUB (const, 0x0, 8) , (const, 0x25cac0, 8), (unique, 0x100002d0, 8) PTRSUB (const, 0x0, 8) , (const, 0x24cdc0, 8), (unique, 0x10000202, 16) INT_ZEXT (register, 0x88, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000300, 8), (unique, 0x10000300, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff82, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000361, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x259232, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff82, 2) , (const, 0x0, 2)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000350, 8) , (const, 0xf, 4), (unique, 0x10000350, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x259232, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000310, 8) , (const, 0xe, 4), (unique, 0x10000310, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xdd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdd, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x18, 8) , (unique, 0x3100, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x10, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0xe6, 4), (stack, 0xffffffffffffff82, 2) MULTIEQUAL (stack, 0xffffffffffffff82, 2) , (stack, 0xffffffffffffff82, 2) , (stack, 0xffffffffffffff82, 2)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xe6, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xe6, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xe6, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0xe6, 4), (stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0xe6, 4), (stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xe6, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xe6, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xe6, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe6, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x259270, 1) , (unique, 0x100002cb, 1), (unique, 0x100002cb, 1) BOOL_NEGATE (unique, 0x100002c7, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x136, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x136, 4), (stack, 0xffffffffffffff82, 2) MULTIEQUAL (stack, 0xffffffffffffff82, 2) , (stack, 0xffffffffffffff82, 2)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x136, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x136, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x136, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x136, 4), (stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x136, 4), (stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x136, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x136, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x136, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x136, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x2108c0, 8) , (stack, 0xffffffffffffff84, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[ ---  BRANCH (ram, 0x259241, 1)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000397, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x1000038f, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x10000387, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff94, 4) MULTIEQUAL (unique, 0x10000383, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff90, 4) MULTIEQUAL (unique, 0x1000037f, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (unique, 0x1000037b, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (unique, 0x10000377, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (unique, 0x10000373, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[(register, 0x0, 2) COPY (stack, 0xffffffffffffff82, 2), (stack, 0xffffffffffffff82, 2) MULTIEQUAL (unique, 0x10000371, 2) , (stack, 0xffffffffffffff82, 2) , (stack, 0xffffffffffffff82, 2)]
[ ---  CBRANCH (ram, 0x259376, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000458, 8), (unique, 0x10000458, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (unique, 0x10000369, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000039f, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff82, 2) INDIRECT (stack, 0xffffffffffffff82, 2) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12d, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 2)]
