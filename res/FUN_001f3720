[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9a, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (unique, 0x3100, 4) , (const, 0x9a, 4), (unique, 0x3100, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100003fa, 8), (unique, 0x100003fa, 8) INT_ADD (register, 0xa0, 8) , (const, 0x4, 8), (register, 0xa0, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x5, 8) , (const, 0x8, 8), (register, 0x18, 8) INT_MULT (register, 0x18, 8) , (const, 0x10, 8), (register, 0x18, 8) INT_SEXT (register, 0x10, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x9a, 4), (stack, 0xffffffffffffff9c, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x9a, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x9a, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x9a, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x9a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x9a, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003f2, 8), (unique, 0x100003f2, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1f3ad8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_LEFT (register, 0x38, 8) , (const, 0x2, 4), (register, 0x38, 8) INT_SEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100003fa, 8), (unique, 0x100003fa, 8) INT_ADD (register, 0xa0, 8) , (const, 0x4, 8), (register, 0xa0, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x5, 8) , (const, 0x8, 8), (register, 0x18, 8) INT_MULT (register, 0x18, 8) , (const, 0x10, 8), (register, 0x18, 8) INT_SEXT (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0xffffffff, 4), (unique, 0x3a00, 8) CAST (unique, 0x10000402, 8), (unique, 0x10000402, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x18, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1f3a20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x3ff00, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000040a, 8), (unique, 0x1000040a, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x8, 8), (unique, 0x3400, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1f3ac8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000412, 8), (unique, 0x10000412, 8) INT_ADD (register, 0xa0, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1f37ae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000422, 8), (unique, 0x10000422, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x8, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xa, 8), (register, 0x8, 8) INT_MULT (register, 0x8, 8) , (const, 0x10, 8), (register, 0x8, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x1000041a, 8), (unique, 0x1000041a, 8) INT_ADD (register, 0xa0, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (register, 0x0, 8) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x50b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x50b, 4)]
[ ---  CBRANCH (ram, 0x1f399e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x1f2f90, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x8, 8), (register, 0x30, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (register, 0x10, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (register, 0x8, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8)]
[(register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x1f37ae, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1f3ac8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000042a, 8), (unique, 0x1000042a, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1f3ac8, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000432, 8), (unique, 0x10000432, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x4, 8), (unique, 0x3400, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff88, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1f3a10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x8, 8) CAST (unique, 0x1000044a, 8), (unique, 0x1000044a, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0xa0, 8), (register, 0xa0, 8) INT_MULT (register, 0xa0, 8) , (const, 0x10, 8), (register, 0xa0, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000442, 8), (unique, 0x10000442, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x6, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000043a, 8), (unique, 0x1000043a, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffff88, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x1f3945, 1)]
[ ---  CBRANCH (ram, 0x1f3ae8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x466, 4)]
[ ---  CBRANCH (ram, 0x1f3813, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x1f3720, 8) , (unique, 0x3800, 8) , (register, 0x30, 8)]
[(unique, 0x1000018b, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(unique, 0x1000018f, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000193, 8), (unique, 0x10000193, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x1000019b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000019f, 8), (unique, 0x1000019f, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(unique, 0x100001a7, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001ab, 8), (unique, 0x100001ab, 8) PTRADD (register, 0x8, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (unique, 0x100001a7, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (unique, 0x1000019b, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (unique, 0x1000018b, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1f3930, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffac, 4) , (const, 0x0, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (unique, 0x1000018f, 4) , (stack, 0xffffffffffffffac, 4)]
[ ---  CBRANCH (ram, 0x1f3a78, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (stack, 0xffffffffffffff98, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff9c, 4) , (unique, 0x100000c3, 4), (unique, 0x100000c3, 4) INT_MULT (stack, 0xffffffffffffffac, 4) , (const, 0x2, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x42f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x42f, 4)]
[ ---  CBRANCH (ram, 0x1f3ad8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121020, 8) , (stack, 0xffffffffffffffa0, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_LEFT (register, 0x30, 8) , (const, 0x2, 4), (register, 0x30, 8) INT_SEXT (unique, 0x10000187, 4), (unique, 0x10000187, 4) INT_MULT (register, 0x10, 4) , (const, 0x2, 4), (register, 0x10, 4) INT_ADD (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffff98, 4)]
[(unique, 0x1000025b, 8) CAST (unique, 0x10000456, 8), (unique, 0x10000456, 8) INT_ADD (unique, 0x1000039e, 8) , (stack, 0xffffffffffffffb0, 4), (unique, 0x1000039e, 8) INT_LEFT (unique, 0x10000396, 8) , (const, 0x20, 8), (unique, 0x10000396, 8) INT_SEXT (unique, 0x10000452, 4), (unique, 0x10000452, 4) CAST (stack, 0xffffffffffffffb4, 4)]
[(unique, 0x100003c2, 8) COPY (register, 0x0, 8)]
[(unique, 0x100003ca, 4) COPY (unique, 0x10000187, 4)]
[(unique, 0x100003ce, 4) COPY (stack, 0xffffffffffffff9c, 4)]
[(unique, 0x100003d6, 4) COPY (stack, 0xffffffffffffffac, 4)]
[(unique, 0x1000024b, 8) CAST (unique, 0x10000462, 8), (unique, 0x10000462, 8) INT_ADD (unique, 0x1000037e, 8) , (stack, 0xffffffffffffffb0, 4), (unique, 0x1000037e, 8) INT_LEFT (unique, 0x10000376, 8) , (const, 0x20, 8), (unique, 0x10000376, 8) INT_SEXT (unique, 0x1000045e, 4), (unique, 0x1000045e, 4) CAST (stack, 0xffffffffffffffb4, 4)]
[(unique, 0x100003d2, 4) COPY (stack, 0xffffffffffffff9c, 4)]
[(unique, 0x100003da, 4) COPY (stack, 0xffffffffffffffac, 4)]
[(unique, 0x1000026f, 8) MULTIEQUAL (unique, 0x100003c2, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000277, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000027f, 4) MULTIEQUAL (unique, 0x100003ca, 4) , (stack, 0xffffffffffffff98, 4)]
[(unique, 0x10000287, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(unique, 0x1000028f, 8) MULTIEQUAL (unique, 0x1000025b, 8) , (unique, 0x1000024b, 8)]
[(unique, 0x10000297, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(unique, 0x1000029b, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(unique, 0x1000029f, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100003ee, 4) COPY (unique, 0x1000028b, 4), (unique, 0x1000028b, 4) MULTIEQUAL (unique, 0x100003d6, 4) , (unique, 0x100003da, 4)]
[ ---  CBRANCH (ram, 0x1f3847, 1) , (unique, 0x1000026e, 1), (unique, 0x1000026e, 1) INT_EQUAL (unique, 0x10000283, 4) , (const, 0x0, 4), (unique, 0x10000283, 4) MULTIEQUAL (unique, 0x100003ce, 4) , (unique, 0x100003d2, 4)]
[(register, 0xb8, 4) INT_ADD (unique, 0x10000283, 4) , (unique, 0x100000d7, 4), (unique, 0x100000d7, 4) INT_MULT (unique, 0x1000028b, 4) , (const, 0x2, 4)]
[(register, 0x8, 4) INT_ADD (unique, 0x10000283, 4) , (const, 0xffffffff, 4)]
[(unique, 0x100003e2, 4) COPY (register, 0x88, 4), (register, 0x88, 4) INT_NEGATE (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0x1000028b, 4) , (const, 0x1, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x10000351, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (unique, 0x10000351, 4) , (unique, 0x10000351, 4)]
[(unique, 0x10000355, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (unique, 0x10000355, 4) , (register, 0x10, 4)]
[(unique, 0x10000359, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (unique, 0x10000359, 4) , (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x1f3898, 1) , (unique, 0x10000350, 1), (unique, 0x10000350, 1) INT_SLESS (unique, 0x1000046a, 4) , (const, 0x0, 4), (unique, 0x1000046a, 4) CAST (unique, 0x1000035d, 4), (unique, 0x1000035d, 4) MULTIEQUAL (unique, 0x100003de, 4) , (unique, 0x100003e2, 4) , (unique, 0x100003e6, 4) , (unique, 0x100003ea, 4)]
[ ---  CBRANCH (ram, 0x1f3898, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x8, 4)]
[(unique, 0x100003ae, 4) COPY (unique, 0x10000283, 4)]
[ ---  CBRANCH (ram, 0x1f38b5, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x1000046e, 4), (unique, 0x1000046e, 4) CAST (unique, 0x10000355, 4)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000277, 8) , (const, 0x23e, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (unique, 0x1000027f, 4) , (const, 0x23e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000026f, 8) , (const, 0x23e, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (unique, 0x10000287, 4) , (const, 0x23e, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (unique, 0x100003ee, 4) , (const, 0x23e, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (unique, 0x10000297, 4) , (const, 0x23e, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (unique, 0x1000029b, 4) , (const, 0x23e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000029f, 8) , (const, 0x23e, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3400, 8) , (unique, 0x1000028f, 8) , (register, 0x10, 8), (unique, 0x3400, 8) CAST (unique, 0x1000047e, 8), (unique, 0x1000047e, 8) INT_ADD (unique, 0x10000476, 8) , (unique, 0x3300, 8), (unique, 0x10000476, 8) CAST (unique, 0x1000026f, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_LEFT (register, 0x10, 8) , (const, 0x2, 4), (register, 0x0, 8) INT_SEXT (register, 0xb8, 4), (register, 0x10, 8) INT_SEXT (unique, 0x10000472, 4), (unique, 0x10000472, 4) CAST (register, 0x10, 4), (register, 0xb8, 4) INT_SUB (unique, 0x10000351, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_ADD (unique, 0x10000355, 4) , (const, 0x1, 4)]
[(unique, 0x100003b2, 4) COPY (stack, 0xffffffffffffff9c, 4), (stack, 0xffffffffffffff9c, 4) INDIRECT (unique, 0x100003aa, 4) , (const, 0x23e, 4), (unique, 0x100003aa, 4) COPY (unique, 0x10000283, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000029f, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (unique, 0x1000029b, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (unique, 0x10000297, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (unique, 0x10000287, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x1000026f, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (unique, 0x1000027f, 4) , (stack, 0xffffffffffffff98, 4)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x10000277, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1f3930, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) INT_SUB (unique, 0x3a00, 4) , (register, 0xb8, 4), (unique, 0x3a00, 4) INT_ADD (unique, 0x3880, 4) , (unique, 0x3900, 4), (unique, 0x3900, 4) INT_MULT (stack, 0xffffffffffffffac, 4) , (const, 0x2, 4), (unique, 0x3880, 4) INT_ADD (stack, 0xffffffffffffff9c, 4) , (const, 0xffffffff, 4), (stack, 0xffffffffffffff9c, 4) COPY (unique, 0x100003b6, 4), (register, 0xb8, 4) MULTIEQUAL (unique, 0x10000351, 4) , (register, 0xb8, 4), (unique, 0x100003b6, 4) MULTIEQUAL (unique, 0x100003ae, 4) , (unique, 0x100003b2, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (unique, 0x100003ee, 4) , (stack, 0xffffffffffffffac, 4)]
[(unique, 0x3100, 4) INT_ADD (stack, 0xffffffffffffff9c, 4) , (const, 0xffffffff, 4)]
[(register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff9c, 4) , (register, 0x10, 4)]
[(register, 0x98, 8) INT_SEXT (unique, 0x3a00, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x3a00, 4) , (register, 0x88, 4)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(register, 0x90, 8) INT_SEXT (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0x3100, 4) , (register, 0x8, 4)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(unique, 0x3400, 8) CAST (unique, 0x100004ae, 8), (unique, 0x100004ae, 8) INT_ADD (unique, 0x100004a6, 8) , (unique, 0x3300, 8), (unique, 0x100004a6, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_SEXT (unique, 0x3400, 4), (unique, 0x3400, 4) INT_ADD (register, 0x8, 4) , (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x1f3910, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESSEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000049e, 8), (unique, 0x1000049e, 8) INT_ADD (unique, 0x10000496, 8) , (unique, 0x3300, 8), (unique, 0x10000496, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x3300, 8) INT_MULT (register, 0x90, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000048e, 8), (unique, 0x1000048e, 8) INT_ADD (unique, 0x10000486, 8) , (unique, 0x3300, 8), (unique, 0x10000486, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x3300, 8) INT_MULT (register, 0x98, 8) , (const, 0x4, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1f38e0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (register, 0x0, 4) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a6, 4)]
[ ---  CALL (ram, 0x121160, 8) , (stack, 0xffffffffffffffa0, 8) , (unique, 0x3400, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_LEFT (register, 0x10, 8) , (const, 0x2, 4), (unique, 0x3400, 8) CAST (unique, 0x100004be, 8), (unique, 0x100004be, 8) INT_ADD (unique, 0x100004b6, 8) , (unique, 0x3300, 8), (unique, 0x100004b6, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb8, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0xb8, 8) INT_SEXT (register, 0xb8, 4)]
[(register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1f3930, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0xffffffff, 4)]
[(register, 0x98, 8) INT_SEXT (register, 0x88, 4)]
[ ---  BRANCH (ram, 0x1f38e3, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100004e2, 8), (unique, 0x100004e2, 8) INT_ADD (unique, 0x100004da, 8) , (unique, 0x3300, 8), (unique, 0x100004da, 8) CAST (unique, 0x1000026f, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_SEXT (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1f39c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100004e2, 8), (unique, 0x100004e2, 8) INT_ADD (unique, 0x100004da, 8) , (unique, 0x3300, 8), (unique, 0x100004da, 8) CAST (unique, 0x1000026f, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100004d2, 8), (unique, 0x100004d2, 8) INT_ADD (unique, 0x100004ca, 8) , (unique, 0x3300, 8), (unique, 0x100004ca, 8) CAST (unique, 0x1000028f, 8), (unique, 0x3300, 8) INT_MULT (register, 0x80, 8) , (const, 0x4, 8), (register, 0x80, 8) INT_SEXT (unique, 0x100004c6, 4), (unique, 0x100004c6, 4) CAST (unique, 0x10000355, 4), (register, 0x0, 8) INT_SEXT (register, 0x8, 4)]
[(register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffffff, 4)]
[(unique, 0x100003ea, 4) COPY (register, 0x88, 4), (register, 0x88, 4) INT_NEGATE (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0x10000355, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x1f3857, 1)]
[ ---  CBRANCH (ram, 0x1f39e0, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffffff, 4)]
[(unique, 0x100003e6, 4) COPY (unique, 0x10000359, 4)]
[ ---  BRANCH (ram, 0x1f3857, 1)]
[(register, 0x88, 4) INT_NEGATE (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0x10000355, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbc80, 4), (unique, 0x3400, 8) CAST (unique, 0x100004f2, 8), (unique, 0x100004f2, 8) INT_ADD (unique, 0x100004ea, 8) , (unique, 0x3300, 8), (unique, 0x100004ea, 8) CAST (unique, 0x1000026f, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (unique, 0x10000351, 4) , (const, 0xffffffff, 4)]
[(unique, 0x100003de, 4) COPY (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0x10000355, 4) , (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000277, 8) , (const, 0x3f7, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (unique, 0x1000027f, 4) , (const, 0x3f7, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (unique, 0x1000028b, 4) , (const, 0x3f7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000026f, 8) , (const, 0x3f7, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (unique, 0x10000287, 4) , (const, 0x3f7, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (unique, 0x100003ee, 4) , (const, 0x3f7, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (unique, 0x10000297, 4) , (const, 0x3f7, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (unique, 0x1000029b, 4) , (const, 0x3f7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000029f, 8) , (const, 0x3f7, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x1000026f, 8) , (unique, 0x1000028f, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_LEFT (register, 0x10, 8) , (const, 0x2, 4), (register, 0x10, 8) INT_SEXT (unique, 0x1000028b, 4)]
[ ---  BRANCH (ram, 0x1f3930, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (register, 0x0, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1f39f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100004fa, 8), (unique, 0x100004fa, 8) INT_ADD (unique, 0x3880, 8) , (register, 0xa0, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x367, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x367, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x367, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x367, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x367, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x367, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x367, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x367, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x367, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000253, 8), (unique, 0x10000253, 8) CAST (unique, 0x10000506, 8), (unique, 0x10000506, 8) INT_ADD (unique, 0x1000038e, 8) , (stack, 0xffffffffffffffb0, 4), (unique, 0x1000038e, 8) INT_LEFT (unique, 0x10000386, 8) , (const, 0x20, 8), (unique, 0x10000386, 8) INT_SEXT (unique, 0x10000502, 4), (unique, 0x10000502, 4) CAST (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffff88, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x1f3941, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1f37e0, 1) , (unique, 0x10000372, 1), (unique, 0x10000372, 1) BOOL_AND (register, 0x206, 1) , (unique, 0xcf80, 1), (unique, 0xcf80, 1) INT_SLESSEQUAL (register, 0x10, 4) , (unique, 0xbc80, 4), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x10, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000050e, 8), (unique, 0x1000050e, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x4, 8), (register, 0x10, 4) INT_ADD (unique, 0x1000011f, 4) , (const, 0x1, 4), (unique, 0x1000011f, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (unique, 0x3400, 8) INT_ADD (register, 0x30, 8) , (register, 0x18, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2eb, 4)]
[ ---  CBRANCH (ram, 0x1f3ad8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1ee150, 8) , (unique, 0x3800, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x3400, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1f3b08, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_AND (stack, 0xffffffffffffff88, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_XOR (register, 0x8, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x10000516, 8), (unique, 0x10000516, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x47c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x47c, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x47c, 4), (stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x47c, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x47c, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x47c, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x47c, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x47c, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x47c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1f3b04, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1ee150, 8) , (unique, 0x3800, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) COPY (const, 0xc, 8)]
[ ---  BRANCH (ram, 0x1f399e, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (stack, 0xffffffffffffff98, 4), (unique, 0x3400, 8) CAST (unique, 0x1000051e, 8), (unique, 0x1000051e, 8) INT_ADD (register, 0x10, 8) , (register, 0x18, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000233, 8) , (stack, 0xffffffffffffff9c, 4), (unique, 0x10000233, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x1000051e, 8), (unique, 0x1000051e, 8) INT_ADD (register, 0x10, 8) , (register, 0x18, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000023b, 8) , (stack, 0xffffffffffffffa0, 4), (unique, 0x1000023b, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x1000051e, 8), (unique, 0x1000051e, 8) INT_ADD (register, 0x10, 8) , (register, 0x18, 8), (stack, 0xffffffffffffffa0, 4) SUBPIECE (stack, 0xffffffffffffffa0, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000243, 8) , (stack, 0xffffffffffffffa4, 4), (unique, 0x10000243, 8) PTRADD (unique, 0x3400, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x1000051e, 8), (unique, 0x1000051e, 8) INT_ADD (register, 0x10, 8) , (register, 0x18, 8), (stack, 0xffffffffffffffa4, 4) SUBPIECE (stack, 0xffffffffffffffa0, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  BRANCH (ram, 0x1f398e, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (stack, 0xffffffffffffff98, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001f3, 8) , (stack, 0xffffffffffffff9c, 4), (unique, 0x100001f3, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001fb, 8) , (stack, 0xffffffffffffffa0, 4), (unique, 0x100001fb, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffa0, 4) SUBPIECE (stack, 0xffffffffffffffa0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000203, 8) , (stack, 0xffffffffffffffa4, 4), (unique, 0x10000203, 8) PTRADD (register, 0x38, 8) , (const, 0x3, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffa4, 4) SUBPIECE (stack, 0xffffffffffffffa0, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1f3b17, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000526, 8), (unique, 0x10000526, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x355, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x355, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x355, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x355, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x355, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x355, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x355, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x355, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
