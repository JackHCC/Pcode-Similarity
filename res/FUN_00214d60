[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000139, 8), (unique, 0x10000139, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x214e70, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x214e70, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x28, 4) COPY (const, 0x16, 4)]
[ ---  BRANCH (ram, 0x214e38, 1)]
[(register, 0x28, 4) COPY (const, 0x1b, 4)]
[ ---  CBRANCH (ram, 0x214e38, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x30, 8) , (register, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x66, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x66, 4)]
[(stack, 0xfffffffffffffea7, 1) INDIRECT (stack, 0xfffffffffffffea7, 1) , (const, 0x66, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x66, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x66, 4)]
[ ---  CBRANCH (ram, 0x214e68, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000141, 4) , (const, 0x0, 4), (unique, 0x10000141, 4) CAST (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2105a0, 8) , (register, 0x38, 4) , (const, 0x3, 4) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x214e68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000008f, 4) , (const, 0x0, 4), (unique, 0x1000008f, 4) INT_AND (register, 0x0, 4) , (const, 0x400, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x83, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x83, 4)]
[(stack, 0xfffffffffffffea7, 1) INDIRECT (stack, 0xfffffffffffffea7, 1) , (const, 0x83, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x83, 4)]
[ ---  CBRANCH (ram, 0x214e68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f7b0, 8) , (const, 0x1, 4) , (register, 0x38, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[ ---  CBRANCH (ram, 0x214f48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x1000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff40, 4) , (const, 0xf000, 4)]
[(register, 0x28, 4) COPY (const, 0x1d, 4)]
[ ---  BRANCH (ram, 0x214e38, 1)]
[ ---  CBRANCH (ram, 0x214f38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x8000, 4)]
[(register, 0x28, 4) COPY (const, 0x13, 4)]
[ ---  BRANCH (ram, 0x214e38, 1)]
[ ---  CBRANCH (ram, 0x214e80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x118, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x118, 4)]
[(stack, 0xfffffffffffffea7, 1) INDIRECT (stack, 0xfffffffffffffea7, 1) , (const, 0x118, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x118, 4)]
[ ---  CBRANCH (ram, 0x214e2a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f9a0, 8) , (register, 0x38, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0xb0, 8) COPY (const, 0x200, 8)]
[ ---  CBRANCH (ram, 0x214eb3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffeb0, 8) , (const, 0x0, 8)]
[(register, 0xb0, 8) INT_AND (stack, 0xfffffffffffffeb0, 8) , (const, 0xffffffff, 8)]
[ ---  CBRANCH (ram, 0x214eb3, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0xfff, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(register, 0xb0, 8) COPY (const, 0x1000, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea7, 8)]
[(register, 0xa0, 8) INT_ADD (register, 0x30, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SREM (unique, 0x3100, 8) , (unique, 0x10000145, 8), (unique, 0x10000145, 8) CAST (register, 0xb0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x214efd, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffea7, 1) MULTIEQUAL (stack, 0xfffffffffffffea7, 1) , (stack, 0xfffffffffffffea7, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) INT_SUB (register, 0x18, 8) , (register, 0xb0, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x214ed0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0xa0, 8) , (stack, 0xffffffffffffff58, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x17b, 4)]
[(stack, 0xfffffffffffffea7, 1) INDIRECT (stack, 0xfffffffffffffea7, 1) , (const, 0x17b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x17b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17b, 4)]
[ ---  CBRANCH (ram, 0x214e2a, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x20e620, 8) , (register, 0x38, 4) , (unique, 0x3800, 8) , (const, 0x1, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x214ed0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x214ed0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffea7, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1bc, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1bc, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffea7, 1) INDIRECT (stack, 0xfffffffffffffea7, 1) , (const, 0x1bc, 4), (stack, 0xfffffffffffffea7, 1) MULTIEQUAL (stack, 0xfffffffffffffea7, 1) , (stack, 0xfffffffffffffea7, 1) , (stack, 0xfffffffffffffea7, 1)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1bc, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1bc, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x214e2a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x20e6d0, 8) , (register, 0x38, 4) , (unique, 0x10000115, 8) , (const, 0x1, 8) , (register, 0xa0, 8), (unique, 0x10000115, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3c79, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xfffffffffffffea7, 1) MULTIEQUAL (stack, 0xfffffffffffffea7, 1) , (stack, 0xfffffffffffffea7, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x214e38, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x214e38, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESSEQUAL (register, 0x30, 8) , (stack, 0xffffffffffffff58, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd3, 4)]
[ ---  CBRANCH (ram, 0x214e38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x218c90, 8) , (register, 0x38, 4) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000014d, 8), (unique, 0x1000014d, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x28, 4) COPY (const, 0x9, 4)]
[ ---  BRANCH (ram, 0x214e38, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 4) COPY (register, 0x28, 4), (register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (unique, 0xbc80, 4) , (register, 0x0, 4) , (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x214f52, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000155, 8), (unique, 0x10000155, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10f, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10f, 4)]
[ ---  RETURN (const, 0x1, 4)]
