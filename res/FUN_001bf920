[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000247, 8), (unique, 0x10000247, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1bfb90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 2) , (const, 0x400, 2), (register, 0x0, 2) INT_AND (register, 0x1090, 2) , (const, 0xc00, 2)]
[(register, 0xa8, 4) COPY (const, 0x400, 4)]
[ ---  BRANCH (ram, 0x1bf97d, 1)]
[ ---  CBRANCH (ram, 0x1bfa40, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 2) , (const, 0x401, 2)]
[ ---  CBRANCH (ram, 0x1bfdd6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 2) , (const, 0x0, 2)]
[(register, 0xa8, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x1bf97d, 1)]
[ ---  CBRANCH (ram, 0x1bf9c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 2) , (const, 0x800, 2)]
[ ---  CBRANCH (ram, 0x1bfdd6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 2) , (const, 0xc00, 2)]
[(register, 0xa8, 4) COPY (const, 0xc00, 4)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x1bf9cf, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (unique, 0x1000024f, 8) , (const, 0xfffffffffffffc02, 8), (unique, 0x1000024f, 8) CAST (register, 0x30, 8)]
[(register, 0xa8, 4) COPY (const, 0x800, 4)]
[ ---  CBRANCH (ram, 0x1bf986, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (const, 0xfffffffffffffc01, 8) , (unique, 0x10000257, 8), (unique, 0x10000257, 8) CAST (register, 0x30, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x1bfca8, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x1000025f, 8) , (const, 0x401, 8), (unique, 0x1000025f, 8) CAST (register, 0x30, 8)]
[(register, 0xb8, 4) INT_AND (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_RIGHT (register, 0x8, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x80, 1) , (const, 0x3f, 1)]
[(register, 0x38, 1) INT_AND (unique, 0x10000215, 1) , (const, 0x1, 1), (unique, 0x10000215, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x1bfb15, 1)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x1bfa58, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (unique, 0x10000267, 8) , (const, 0xfffffffffffffbcd, 8), (unique, 0x10000267, 8) CAST (register, 0x30, 8)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x84, 4)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x84, 4)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x84, 4)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x84, 4)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x84, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x84, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000026f, 8) , (const, 0x22, 4), (unique, 0x1000026f, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1bfba0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0x1200, 8) FLOAT_MULT (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[ ---  BRANCH (ram, 0x1bf9ff, 1)]
[(register, 0x1200, 8) FLOAT_MULT (ram, 0x2bc408, 8) , (ram, 0x2bc400, 8)]
[ ---  BRANCH (ram, 0x1bf9ff, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x88, 4) INT_OR (register, 0x88, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_NEGATE (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (const, 0xffffffffffffffff, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x80, 1) , (const, 0x3f, 1)]
[(register, 0xb0, 1) INT_OR (unique, 0x100001c5, 1) , (register, 0x206, 1), (unique, 0x100001c5, 1) INT_AND (unique, 0x100001c7, 1) , (const, 0x1, 1), (unique, 0x100001c7, 1) SUBPIECE (register, 0x88, 4) , (const, 0x0, 4), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_NEGATE (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (const, 0xffffffffffffffff, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x80, 1) , (const, 0x3f, 1)]
[ ---  CBRANCH (ram, 0x1bfde0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x35, 8), (register, 0x30, 8) INT_SUB (unique, 0x100000ad, 8) , (const, 0x3fe, 8), (unique, 0x100000ad, 8) INT_2COMP (register, 0x30, 8)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x514, 4)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x514, 4)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x514, 4)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x514, 4)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x514, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x514, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x38, 1) COPY (const, 0x0, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x98, 1) COPY (const, 0x34, 1)]
[(register, 0xb8, 4) INT_AND (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) SUBPIECE (unique, 0x10000231, 8) , (const, 0x0, 4), (unique, 0x10000231, 8) INT_RIGHT (unique, 0xbd80, 8) , (const, 0x34, 4)]
[ ---  BRANCH (ram, 0x1bfae6, 1)]
[(unique, 0x100001ef, 1) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1bfbb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x1, 8)]
[(register, 0x8, 8) INT_AND (register, 0x30, 8) , (const, 0xffffffff, 8)]
[(unique, 0x100001cd, 8) INT_AND (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_RIGHT (register, 0x8, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x80, 1) , (const, 0x3f, 1)]
[ ---  CBRANCH (ram, 0x1bfe08, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x400, 4)]
[ ---  CBRANCH (ram, 0x1bfd40, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_LESS (const, 0x400, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x1bfe90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x800, 4)]
[ ---  CBRANCH (ram, 0x1bfdd6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0xc00, 4)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1bfaa9, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x134, 4)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x134, 4)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x134, 4)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x134, 4)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x134, 4)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x134, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x134, 4)]
[(register, 0x1200, 8) CAST (unique, 0x10000277, 8), (unique, 0x10000277, 8) CALL (ram, 0x153340, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (const, 0x1, 8) , (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x38, 1) INT_AND (unique, 0x1000021b, 1) , (const, 0x1, 1), (unique, 0x1000021b, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0xb8, 4) INT_AND (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x100001dc, 1) , (const, 0x3f, 1), (unique, 0x100001dc, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001ef, 1)]
[ ---  CBRANCH (ram, 0x1bfdd6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x0, 4)]
[(register, 0xb8, 4) INT_AND (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001ef, 1)]
[ ---  CBRANCH (ram, 0x1bfe3c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100001b5, 8) , (const, 0x0, 8), (unique, 0x100001b5, 8) INT_AND (register, 0x10, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1bfd7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000121, 8) , (const, 0x0, 8), (unique, 0x10000121, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1bfe3c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x1bfe99, 1) , (unique, 0x100001de, 1), (unique, 0x100001de, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0xb8, 4) INT_AND (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001ef, 1)]
[ ---  BRANCH (ram, 0x1bfe3c, 1)]
[(register, 0xb8, 4) INT_AND (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x1, 1) , (unique, 0x100001ef, 1)]
[ ---  CBRANCH (ram, 0x1bfd7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001cd, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1bfd7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 1) , (const, 0x0, 1)]
[(register, 0x98, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3f4, 4)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x3f4, 4)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x3f4, 4)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x3f4, 4)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x3f4, 4)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x3f4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3f4, 4)]
[(register, 0x1200, 8) CAST (unique, 0x1000027f, 8), (unique, 0x1000027f, 8) CALL (ram, 0x153340, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (const, 0x1, 8)]
[(register, 0x38, 1) INT_AND (unique, 0x10000219, 1) , (const, 0x1, 1), (unique, 0x10000219, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x1bfae6, 1)]
[(register, 0x98, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x479, 4)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x479, 4)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x479, 4)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x479, 4)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x479, 4)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x479, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x479, 4)]
[(register, 0x1200, 8) CAST (unique, 0x10000287, 8), (unique, 0x10000287, 8) CALL (ram, 0x153340, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (const, 0x1, 8)]
[(register, 0x38, 1) INT_AND (unique, 0x10000217, 1) , (const, 0x1, 1), (unique, 0x10000217, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1bfb0e, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1e080, 8) , (const, 0x0, 8), (unique, 0x1e080, 8) INT_AND (unique, 0x1e000, 8) , (const, 0x1, 8), (unique, 0x1e000, 8) INT_RIGHT (unique, 0x3100, 8) , (const, 0x35, 4), (unique, 0x3100, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8)]
[(register, 0x38, 1) MULTIEQUAL (register, 0x38, 1) , (register, 0x38, 1) , (register, 0x38, 1) , (register, 0x38, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(register, 0x98, 1) MULTIEQUAL (unique, 0x100001dc, 1) , (register, 0x98, 1) , (register, 0x98, 1) , (register, 0x98, 1)]
[(register, 0x1200, 8) MULTIEQUAL (register, 0x1200, 8) , (register, 0x1200, 8) , (register, 0x1200, 8) , (register, 0x1200, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x30, 8) , (unique, 0xbd80, 8)]
[(register, 0x80, 1) SUBPIECE (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1bfaf4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x1bfd18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x1bfaf4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (unique, 0xbd80, 8), (register, 0x0, 8) INT_NEGATE (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (const, 0xffffffffffffffff, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x98, 1) , (const, 0x3f, 1)]
[(register, 0x1200, 8) FLOAT_MULT (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x1a3, 4)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x1a3, 4)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x1a3, 4)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x1a3, 4)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x1a3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1a3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000028f, 8) , (const, 0x22, 4), (unique, 0x1000028f, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(register, 0x18, 8) COPY (const, 0xfffffffffffffc01, 8)]
[ ---  BRANCH (ram, 0x1bfb33, 1)]
[(register, 0x38, 1) MULTIEQUAL (register, 0x38, 1) , (register, 0x38, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(register, 0x98, 1) MULTIEQUAL (register, 0x98, 1) , (register, 0x98, 1)]
[(register, 0x1200, 8) MULTIEQUAL (register, 0x1200, 8) , (register, 0x1200, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) COPY (const, 0xfffffffffffffc01, 8)]
[(unique, 0x10000239, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000243, 4) COPY (register, 0x88, 4)]
[(register, 0x38, 1) MULTIEQUAL (register, 0x38, 1) , (register, 0x38, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(register, 0x98, 1) MULTIEQUAL (register, 0x98, 1) , (register, 0x80, 1)]
[(register, 0x1200, 8) MULTIEQUAL (register, 0x1200, 8) , (register, 0x1200, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x10000239, 8) , (register, 0x8, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x30, 8)]
[(register, 0x80, 1) SUBPIECE (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(unique, 0x100001da, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x1bfb3a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4), (register, 0x88, 4) MULTIEQUAL (unique, 0x10000243, 4) , (register, 0x88, 4)]
[(register, 0x0, 8) INT_AND (register, 0x0, 8) , (register, 0x90, 8), (register, 0x0, 8) INT_NEGATE (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (const, 0xffffffffffffffff, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x98, 1) , (const, 0x3f, 1)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (register, 0x80, 1)]
[(register, 0x38, 1) MULTIEQUAL (register, 0x38, 1) , (register, 0x38, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(register, 0x1200, 8) MULTIEQUAL (register, 0x1200, 8) , (register, 0x1200, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (register, 0x80, 1)]
[(register, 0x38, 1) MULTIEQUAL (register, 0x38, 1) , (register, 0x38, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(unique, 0x100001d8, 1) MULTIEQUAL (unique, 0x100001da, 1) , (register, 0x206, 1)]
[(register, 0x1200, 8) MULTIEQUAL (register, 0x1200, 8) , (register, 0x1200, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1bfc80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x400, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x1bfc20, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_LESS (register, 0xa8, 4) , (const, 0x401, 4)]
[ ---  CBRANCH (ram, 0x1bfdd6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x0, 4)]
[(unique, 0x10000241, 1) COPY (register, 0x38, 1)]
[ ---  CBRANCH (ram, 0x1bfb67, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1bfc98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x800, 4)]
[(unique, 0x10000242, 1) COPY (register, 0x80, 1)]
[ ---  CBRANCH (ram, 0x1bfb67, 1) , (unique, 0x1000022c, 1), (unique, 0x1000022c, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1bfb67, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 1) , (const, 0x0, 1), (register, 0x38, 1) INT_OR (unique, 0x100001d8, 1) , (unique, 0x100001db, 1), (unique, 0x100001db, 1) MULTIEQUAL (unique, 0x10000241, 1) , (unique, 0x10000242, 1)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x269, 4)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x269, 4)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x269, 4)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x269, 4)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x269, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x269, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1bfcd0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_NOTEQUAL (unique, 0x1e080, 8) , (const, 0x0, 8), (unique, 0x1e080, 8) INT_AND (unique, 0x1e000, 8) , (const, 0x1, 8), (unique, 0x1e000, 8) INT_RIGHT (register, 0x30, 8) , (const, 0x35, 4), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a1, 4)]
[(register, 0x1200, 8) CAST (unique, 0x10000297, 8), (unique, 0x10000297, 8) CALL (ram, 0x153340, 8) , (register, 0x1200, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x2a7, 4), (ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x2a1, 4)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x2a7, 4), (ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x2a1, 4)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x2a7, 4), (ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x2a1, 4)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x2a7, 4), (ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x2a1, 4)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x2a7, 4), (ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x2a1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2a7, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2a1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_OR (unique, 0xbd80, 8) , (const, 0x10000000000000, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1bf9dc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x401, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x2cc, 4), (ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x2cc, 4), (ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x2cc, 4), (ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x2cc, 4), (ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x2cc, 4), (ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2cc, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000029f, 8) , (const, 0x22, 4), (unique, 0x1000029f, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x1bfa28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0x1200, 8) FLOAT_MULT (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[ ---  BRANCH (ram, 0x1bf9ff, 1)]
[(register, 0x1200, 8) FLOAT_MULT (ram, 0x2bc410, 8) , (ram, 0x2bc3f8, 8)]
[ ---  CBRANCH (ram, 0x1bfb67, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0xfffffffffffffc01, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (const, 0x3ff, 4), (register, 0x30, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59300, 8) , (const, 0x0, 8), (unique, 0x59300, 8) INT_AND (register, 0x30, 8) , (const, 0x10000000000000, 8)]
[ ---  BRANCH (ram, 0x1bfb69, 1)]
[ ---  CBRANCH (ram, 0x1bfdd6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0xc00, 4)]
[ ---  CALL (ram, 0x1406c0, 8)]
[(ram, 0x2bc3d0, 8) COPY (ram, 0x2bc3d0, 8), (ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x235, 4), (ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(ram, 0x2bc3f8, 8) COPY (ram, 0x2bc3f8, 8), (ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x235, 4), (ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc400, 8) COPY (ram, 0x2bc400, 8), (ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x235, 4), (ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc408, 8) COPY (ram, 0x2bc408, 8), (ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x235, 4), (ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc410, 8) COPY (ram, 0x2bc410, 8), (ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x235, 4), (ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x235, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(register, 0x1200, 8) MULTIEQUAL (register, 0x1200, 8) , (register, 0x1200, 8) , (register, 0x1200, 8) , (register, 0x1200, 8) , (register, 0x1200, 8) , (register, 0x1200, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(register, 0x1200, 8) MULTIEQUAL (register, 0x1200, 8) , (register, 0x1200, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1bfc08, 1) , (unique, 0x100001d8, 1)]
[ ---  CBRANCH (ram, 0x1bfc08, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 1) , (const, 0x0, 1)]
[(register, 0x1200, 8) FLOAT_ADD (ram, 0x2bc400, 8) , (ram, 0x2bc3d0, 8)]
[ ---  BRANCH (ram, 0x1bfb7b, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x22d, 4)]
[(ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0x22d, 4)]
[(ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0x22d, 4)]
[(ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0x22d, 4)]
[(ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0x22d, 4)]
[(ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0x22d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x22d, 4)]
[(register, 0x1200, 8) CAST (unique, 0x100002a7, 8), (unique, 0x100002a7, 8) CALL (ram, 0x154b70, 8) , (register, 0x1200, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 4), (register, 0x1200, 8) MULTIEQUAL (register, 0x1200, 8) , (register, 0x1200, 8)]
[ ---  BRANCH (ram, 0x1bf9ff, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x2bc410, 8) MULTIEQUAL (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8) , (ram, 0x2bc410, 8)]
[(ram, 0x2bc408, 8) MULTIEQUAL (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8) , (ram, 0x2bc408, 8)]
[(ram, 0x2bc400, 8) MULTIEQUAL (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8) , (ram, 0x2bc400, 8)]
[(ram, 0x2bc3f8, 8) MULTIEQUAL (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8) , (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc3d0, 8) MULTIEQUAL (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8) , (ram, 0x2bc3d0, 8)]
[(register, 0x1200, 8) MULTIEQUAL (register, 0x1200, 8) , (register, 0x1200, 8) , (register, 0x1200, 8) , (register, 0x1200, 8) , (register, 0x1200, 8)]
[ ---  CBRANCH (ram, 0x1bfeb5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002af, 8), (unique, 0x100002af, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CALL (ram, 0x234c80, 8) , (register, 0x1200, 8)]
[(ram, 0x2bc3d0, 8) COPY (ram, 0x2bc3d0, 8), (ram, 0x2bc3d0, 8) INDIRECT (ram, 0x2bc3d0, 8) , (const, 0xb4, 4)]
[(ram, 0x2bc3f8, 8) COPY (ram, 0x2bc3f8, 8), (ram, 0x2bc3f8, 8) INDIRECT (ram, 0x2bc3f8, 8) , (const, 0xb4, 4)]
[(ram, 0x2bc400, 8) COPY (ram, 0x2bc400, 8), (ram, 0x2bc400, 8) INDIRECT (ram, 0x2bc400, 8) , (const, 0xb4, 4)]
[(ram, 0x2bc408, 8) COPY (ram, 0x2bc408, 8), (ram, 0x2bc408, 8) INDIRECT (ram, 0x2bc408, 8) , (const, 0xb4, 4)]
[(ram, 0x2bc410, 8) COPY (ram, 0x2bc410, 8), (ram, 0x2bc410, 8) INDIRECT (ram, 0x2bc410, 8) , (const, 0xb4, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb4, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x2bc3d0, 8) COPY (ram, 0x2bc3d0, 8)]
[(ram, 0x2bc3f8, 8) COPY (ram, 0x2bc3f8, 8)]
[(ram, 0x2bc400, 8) COPY (ram, 0x2bc400, 8)]
[(ram, 0x2bc408, 8) COPY (ram, 0x2bc408, 8)]
[(ram, 0x2bc410, 8) COPY (ram, 0x2bc410, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8)]
