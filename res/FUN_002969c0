[(register, 0x0, 8) INT_AND (stack, 0xffffffffffffffa0, 8) , (const, 0xffffffffffff, 8), (stack, 0xffffffffffffffa0, 8) INT_ADD (unique, 0x10000706, 8) , (register, 0x1208, 4), (unique, 0x10000706, 8) INT_LEFT (unique, 0x100006fe, 8) , (const, 0x20, 8), (unique, 0x100006fe, 8) INT_SEXT (unique, 0x100008f6, 4), (unique, 0x100008f6, 4) CAST (register, 0x120c, 4)]
[(register, 0x80, 2) INT_AND (register, 0x80, 2) , (const, 0x7fff, 2), (register, 0x80, 2) SUBPIECE (unique, 0x1000070e, 4) , (const, 0x0, 4), (unique, 0x1000070e, 4) INT_RIGHT (register, 0x120c, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x296b50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100006d7, 4) , (const, 0x0, 4), (unique, 0x100006d7, 4) INT_AND (register, 0x120c, 4) , (const, 0x7fff0000, 4)]
[ ---  CBRANCH (ram, 0x296ca8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x0, 8), (register, 0x18, 8) INT_OR (register, 0x0, 8) , (register, 0x1200, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x4, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x1, 8)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x296a4f, 1)]
[ ---  CBRANCH (ram, 0x296fc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x1200, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (register, 0x1200, 8) , (unique, 0x1b380, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffc, 1)]
[(register, 0x38, 8) INT_ADD (register, 0x38, 8) , (const, 0x40, 8), (register, 0x38, 8) INT_SEXT (unique, 0x100008fa, 4), (unique, 0x100008fa, 4) CAST (register, 0x38, 4), (register, 0x38, 4) INT_XOR (unique, 0x10000275, 4) , (const, 0x3f, 4), (unique, 0x10000275, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[ ---  BRANCH (ram, 0x296b70, 1)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (register, 0x0, 8) , (unique, 0x1b380, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffc, 1)]
[(register, 0x38, 8) INT_SEXT (unique, 0x100008fe, 4), (unique, 0x100008fe, 4) CAST (register, 0x38, 4), (register, 0x38, 4) INT_XOR (unique, 0x100000cd, 4) , (const, 0x3f, 4), (unique, 0x100000cd, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1000049a, 1) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (register, 0x38, 8) , (const, 0xfffffffffffffff1, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x296fb0, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x3100, 8) , (const, 0x3d, 8), (unique, 0x3100, 8) INT_ADD (register, 0x38, 8) , (const, 0xfffffffffffffff1, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x18, 8) INT_LEFT (register, 0x1200, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (unique, 0x1000049a, 1) , (const, 0x3d, 1)]
[ ---  BRANCH (ram, 0x296b9f, 1)]
[(register, 0x18, 8) INT_OR (register, 0x18, 8) , (register, 0x0, 8), (register, 0x18, 8) INT_RIGHT (register, 0x1200, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x3d, 1) , (unique, 0x1000049a, 1), (register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_ADD (unique, 0x1000049a, 1) , (const, 0x3, 1)]
[(register, 0x30, 8) INT_LEFT (register, 0x1200, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_ADD (unique, 0x1000049a, 1) , (const, 0x3, 1)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[(register, 0x80, 8) INT_SUB (const, 0xffffffffffffc011, 8) , (register, 0x38, 8)]
[(register, 0x38, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x296a4f, 1)]
[ ---  CBRANCH (ram, 0x296ae8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 2) , (const, 0x7fff, 2)]
[ ---  CBRANCH (ram, 0x296c50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x0, 8), (register, 0x18, 8) INT_OR (register, 0x0, 8) , (register, 0x1200, 8)]
[(register, 0x80, 8) COPY (const, 0x7fff, 8)]
[(register, 0x0, 8) COPY (const, 0xc, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x3, 8)]
[(register, 0x38, 4) INT_XOR (register, 0x38, 4) , (const, 0x1, 4), (register, 0x38, 4) SUBPIECE (unique, 0x10000726, 8) , (const, 0x0, 4), (unique, 0x10000726, 8) INT_RIGHT (register, 0x0, 8) , (const, 0x2f, 4)]
[(unique, 0x100007a6, 8) COPY (register, 0x0, 8)]
[(unique, 0x100007ee, 8) COPY (register, 0x1200, 8)]
[ ---  BRANCH (ram, 0x296a4f, 1)]
[(register, 0x0, 8) COPY (const, 0x8, 8)]
[(register, 0x80, 8) COPY (const, 0x7fff, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x2, 8)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000079e, 8) COPY (register, 0x18, 8)]
[(unique, 0x100007e6, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x296a4f, 1)]
[(register, 0x80, 8) INT_SUB (register, 0x80, 8) , (const, 0x3fff, 8), (register, 0x80, 8) INT_RIGHT (unique, 0x100005ec, 8) , (const, 0x30, 4), (unique, 0x100005ec, 8) INT_LEFT (unique, 0x100006af, 8) , (const, 0x20, 4), (unique, 0x100006af, 8) INT_AND (unique, 0x10000673, 8) , (const, 0x7fff0000, 8), (unique, 0x10000673, 8) INT_ZEXT (register, 0x120c, 4)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000796, 8) COPY (register, 0x18, 8), (register, 0x18, 8) INT_OR (register, 0x18, 8) , (register, 0x0, 8), (register, 0x18, 8) INT_OR (unique, 0x100006e3, 8) , (const, 0x8000000000000, 8), (unique, 0x100006e3, 8) INT_RIGHT (register, 0x1200, 8) , (const, 0x3d, 4), (register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (const, 0x3, 4)]
[(unique, 0x100007de, 8) COPY (register, 0x30, 8), (register, 0x30, 8) INT_LEFT (register, 0x1200, 8) , (const, 0x3, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100007de, 8) , (unique, 0x100007e6, 8) , (unique, 0x100007ee, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000796, 8) , (unique, 0x1000079e, 8) , (unique, 0x100007a6, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x28, 8) INT_AND (unique, 0x100005d4, 8) , (const, 0xffffffffffff, 8), (unique, 0x100005d4, 8) INT_ADD (unique, 0x1000071a, 8) , (register, 0x1228, 4), (unique, 0x1000071a, 8) INT_LEFT (unique, 0x10000712, 8) , (const, 0x20, 8), (unique, 0x10000712, 8) INT_SEXT (unique, 0x10000902, 4), (unique, 0x10000902, 4) CAST (register, 0x122c, 4)]
[(register, 0x8, 2) INT_AND (register, 0x8, 2) , (const, 0x7fff, 2), (register, 0x8, 2) SUBPIECE (unique, 0x10000722, 4) , (const, 0x0, 4), (unique, 0x10000722, 4) INT_RIGHT (register, 0x122c, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x296bf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100006db, 4) , (const, 0x0, 4), (unique, 0x100006db, 4) INT_AND (register, 0x122c, 4) , (const, 0x7fff0000, 4)]
[ ---  CBRANCH (ram, 0x296c78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (const, 0x0, 8), (register, 0x98, 8) INT_OR (register, 0x28, 8) , (register, 0x1220, 8)]
[(register, 0x0, 8) INT_OR (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x296abd, 1)]
[ ---  CBRANCH (ram, 0x296ff8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x28, 8) , (const, 0x0, 8)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x1220, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (register, 0x1220, 8) , (unique, 0x1b380, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffc, 1)]
[(register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x40, 8), (register, 0xa0, 8) INT_SEXT (unique, 0x10000906, 4), (unique, 0x10000906, 4) CAST (register, 0xa0, 4), (register, 0xa0, 4) INT_XOR (unique, 0x10000295, 4) , (const, 0x3f, 4), (unique, 0x10000295, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[ ---  BRANCH (ram, 0x296c0d, 1)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (register, 0x28, 8) , (unique, 0x1b380, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffc, 1)]
[(register, 0xa0, 8) INT_SEXT (unique, 0x1000090a, 4), (unique, 0x1000090a, 4) CAST (register, 0xa0, 4), (register, 0xa0, 4) INT_XOR (unique, 0x10000109, 4) , (const, 0x3f, 4), (unique, 0x10000109, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1000049e, 1) SUBPIECE (unique, 0x3800, 8) , (const, 0x0, 4), (unique, 0x3800, 8) INT_ADD (register, 0xa0, 8) , (const, 0xfffffffffffffff1, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x296fe0, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x3800, 8) , (const, 0x3d, 8), (unique, 0x3800, 8) INT_ADD (register, 0xa0, 8) , (const, 0xfffffffffffffff1, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x88, 8) INT_LEFT (register, 0x1220, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (unique, 0x1000049e, 1) , (const, 0x3d, 1)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x296c3d, 1)]
[(register, 0x98, 8) INT_OR (register, 0x98, 8) , (register, 0x28, 8), (register, 0x98, 8) INT_RIGHT (register, 0x1220, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x3d, 1) , (unique, 0x1000049e, 1), (register, 0x28, 8) INT_LEFT (register, 0x28, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_ADD (unique, 0x1000049e, 1) , (const, 0x3, 1)]
[(register, 0x88, 8) INT_LEFT (register, 0x1220, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_ADD (unique, 0x1000049e, 1) , (const, 0x3, 1)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x88, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x2, 4)]
[(unique, 0x3e80, 8) INT_ADD (unique, 0x3d00, 8) , (register, 0xa0, 8), (unique, 0x3d00, 8) INT_ADD (register, 0x80, 8) , (const, 0x3fef, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x296abd, 1)]
[ ---  CBRANCH (ram, 0x296bc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 2) , (const, 0x7fff, 2)]
[(register, 0x80, 8) INT_ADD (register, 0x80, 8) , (const, 0xffffffffffff8001, 8)]
[ ---  CBRANCH (ram, 0x296c90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_OR (register, 0x28, 8) , (register, 0x1220, 8)]
[(register, 0x0, 8) INT_OR (register, 0x0, 8) , (const, 0x2, 8)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x296abd, 1)]
[(register, 0x0, 8) INT_OR (register, 0x0, 8) , (const, 0x3, 8)]
[(register, 0xb8, 8) COPY (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x296abd, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1e000, 8) , (const, 0x0, 8), (unique, 0x1e000, 8) INT_RIGHT (register, 0x28, 8) , (const, 0x2f, 4)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x296abd, 1)]
[(register, 0x88, 8) INT_LEFT (register, 0x1220, 8) , (const, 0x3, 4)]
[(register, 0x80, 8) INT_SUB (register, 0x80, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_SUB (register, 0x8, 8) , (const, 0x3fff, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 2)]
[(register, 0x98, 8) INT_OR (register, 0x98, 8) , (register, 0x28, 8), (register, 0x28, 8) INT_OR (unique, 0x100006eb, 8) , (const, 0x8000000000000, 8), (register, 0x98, 8) INT_LEFT (register, 0x28, 8) , (const, 0x3, 4), (unique, 0x100006eb, 8) INT_RIGHT (register, 0x1220, 8) , (const, 0x3d, 4)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (unique, 0x3e80, 8) , (register, 0x80, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_RIGHT (unique, 0x100005f4, 4) , (const, 0x1f, 4), (unique, 0x100005f4, 4) INT_XOR (register, 0x122c, 4) , (register, 0x120c, 4)]
[(unique, 0x1000080e, 8) COPY (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x1220, 8) , (register, 0x1220, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x1000088e, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(unique, 0x1000089e, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x100008ae, 8) COPY (unique, 0x100005d4, 8)]
[ ---  BRANCHIND (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297010, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x98, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x296e74, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x29702d, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x88, 8) , (register, 0x30, 8)]
[(unique, 0x100007d6, 8) COPY (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x296d64, 1)]
[(unique, 0x10000816, 8) COPY (register, 0x30, 8)]
[(unique, 0x10000896, 8) COPY (register, 0x18, 8)]
[(unique, 0x100008a6, 8) COPY (stack, 0xffffffffffffff98, 8)]
[(unique, 0x100008b6, 8) COPY (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x100007c6, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x296ccf, 1)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x1, 4)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x1000088e, 8) , (unique, 0x10000896, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x1000080e, 8) , (unique, 0x10000816, 8)]
[(unique, 0x10000524, 8) INT_RIGHT (unique, 0xbd80, 8) , (const, 0x3f, 4), (unique, 0xbd80, 8) MULTIEQUAL (unique, 0x100008ae, 8) , (unique, 0x100008b6, 8)]
[ ---  CBRANCH (ram, 0x297450, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x2, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x1000089e, 8) , (unique, 0x100008a6, 8)]
[ ---  CBRANCH (ram, 0x297238, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x297038, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x1, 8)]
[(unique, 0x100007b6, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x296ccf, 1)]
[(unique, 0x3200, 8) INT_ADD (register, 0x80, 8) , (const, 0x3fff, 8)]
[(unique, 0x100007be, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x296ccf, 1)]
[(unique, 0x100007ce, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x4, 4)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x296e80, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x98, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x296e2c, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x296e80, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x88, 8) , (register, 0x30, 8)]
[(register, 0xa8, 8) INT_RIGHT (register, 0x18, 8) , (const, 0x1, 4)]
[(register, 0x30, 8) INT_LEFT (register, 0x30, 8) , (const, 0x3f, 4)]
[(register, 0x0, 8) INT_OR (register, 0x0, 8) , (register, 0x18, 8), (register, 0x0, 8) INT_RIGHT (register, 0x30, 8) , (const, 0x1, 4), (register, 0x18, 8) INT_LEFT (register, 0x18, 8) , (const, 0x3f, 4)]
[(register, 0x80, 8) INT_ADD (register, 0x80, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x296e97, 1)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x0, 8) SUBPIECE (unique, 0x2eb80, 16) , (const, 0x0, 4), (unique, 0x2eb80, 16) INT_DIV (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2ea80, 16) INT_ADD (unique, 0x1000073e, 16) , (register, 0x0, 8), (unique, 0x1000073e, 16) INT_LEFT (unique, 0x1000072e, 16) , (const, 0x40, 16), (unique, 0x1000072e, 16) INT_SEXT (unique, 0x1000090e, 8), (unique, 0x1000090e, 8) CAST (register, 0xa8, 8), (unique, 0x2e800, 16) INT_ZEXT (register, 0x28, 8), (register, 0x28, 8) INT_OR (register, 0x28, 8) , (register, 0x98, 8), (register, 0x28, 8) INT_RIGHT (register, 0x88, 8) , (const, 0x34, 4), (register, 0x98, 8) INT_LEFT (register, 0x98, 8) , (const, 0xc, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0xa8, 8)]
[(register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0xb0, 8), (unique, 0x3e080, 16) INT_AND (unique, 0x2eb80, 16) , (const, 0xffffffffffffffff, 16), (unique, 0x2eb80, 16) INT_DIV (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2ea80, 16) INT_ADD (unique, 0x1000073e, 16) , (register, 0x0, 8), (unique, 0x1000073e, 16) INT_LEFT (unique, 0x1000072e, 16) , (const, 0x40, 16), (unique, 0x1000072e, 16) INT_SEXT (unique, 0x1000090e, 8), (unique, 0x1000090e, 8) CAST (register, 0xa8, 8), (unique, 0x2e800, 16) INT_ZEXT (register, 0x28, 8), (register, 0x28, 8) INT_OR (register, 0x28, 8) , (register, 0x98, 8), (register, 0xb0, 8) INT_MULT (register, 0x88, 8) , (const, 0x1000, 8), (register, 0x28, 8) INT_RIGHT (register, 0x88, 8) , (const, 0x34, 4), (register, 0x98, 8) INT_LEFT (register, 0x98, 8) , (const, 0xc, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0xa8, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (register, 0x10, 8), (register, 0x10, 8) SUBPIECE (unique, 0x1000074e, 16) , (const, 0x0, 4), (unique, 0x1000074e, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0xb0, 8), (unique, 0x3e080, 16) INT_AND (unique, 0x2eb80, 16) , (const, 0xffffffffffffffff, 16), (register, 0x10, 8) SUBPIECE (unique, 0x2ed00, 16) , (const, 0x0, 4), (unique, 0x2ed00, 16) INT_REM (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2eb80, 16) INT_DIV (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2ea80, 16) INT_ADD (unique, 0x1000073e, 16) , (register, 0x0, 8), (unique, 0x1000073e, 16) INT_LEFT (unique, 0x1000072e, 16) , (const, 0x40, 16), (unique, 0x1000072e, 16) INT_SEXT (unique, 0x1000090e, 8), (unique, 0x1000090e, 8) CAST (register, 0xa8, 8), (unique, 0x2e800, 16) INT_ZEXT (register, 0x28, 8), (register, 0x28, 8) INT_OR (register, 0x28, 8) , (register, 0x98, 8), (register, 0xb0, 8) INT_MULT (register, 0x88, 8) , (const, 0x1000, 8), (register, 0x28, 8) INT_RIGHT (register, 0x88, 8) , (const, 0x34, 4), (register, 0x98, 8) INT_LEFT (register, 0x98, 8) , (const, 0xc, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x296ed0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 8) , (register, 0x10, 8), (register, 0x10, 8) SUBPIECE (unique, 0x1000074e, 16) , (const, 0x0, 4), (unique, 0x1000074e, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0xb0, 8), (unique, 0x3e080, 16) INT_AND (unique, 0x2eb80, 16) , (const, 0xffffffffffffffff, 16), (register, 0x10, 8) SUBPIECE (unique, 0x2ed00, 16) , (const, 0x0, 4), (unique, 0x2ed00, 16) INT_REM (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2eb80, 16) INT_DIV (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2ea80, 16) INT_ADD (unique, 0x1000073e, 16) , (register, 0x0, 8), (unique, 0x1000073e, 16) INT_LEFT (unique, 0x1000072e, 16) , (const, 0x40, 16), (unique, 0x1000072e, 16) INT_SEXT (unique, 0x1000090e, 8), (unique, 0x1000090e, 8) CAST (register, 0xa8, 8), (unique, 0x2e800, 16) INT_ZEXT (register, 0x28, 8), (register, 0x28, 8) INT_OR (register, 0x28, 8) , (register, 0x98, 8), (register, 0xb0, 8) INT_MULT (register, 0x88, 8) , (const, 0x1000, 8), (register, 0x28, 8) INT_RIGHT (register, 0x88, 8) , (const, 0x34, 4), (register, 0x98, 8) INT_LEFT (register, 0x98, 8) , (const, 0xc, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0xa8, 8)]
[(unique, 0x1000087e, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x296eca, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x296ed0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x30, 8) , (register, 0x0, 8)]
[(unique, 0x3100, 8) INT_SUB (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0xb0, 8) , (register, 0x30, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x28, 8) , (register, 0x90, 8), (register, 0x90, 8) INT_ADD (unique, 0x12280, 8) , (unique, 0x12080, 8), (unique, 0x12280, 8) INT_ADD (register, 0x28, 8) , (register, 0x10, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (register, 0xb0, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x296ef2, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x28, 8) , (register, 0x90, 8), (register, 0x90, 8) INT_ADD (unique, 0x12280, 8) , (unique, 0x12080, 8), (unique, 0x12280, 8) INT_ADD (register, 0x28, 8) , (register, 0x10, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (register, 0xb0, 8) , (register, 0x30, 8)]
[(unique, 0x10000856, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x296f0b, 1) , (register, 0x206, 1)]
[(unique, 0x1000085e, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x296f0b, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0xb0, 8) , (register, 0xb8, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x2971d0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x90, 8) , (register, 0x10, 8)]
[(unique, 0x1000086e, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x296f0b, 1) , (register, 0x206, 1)]
[(unique, 0x10000876, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x296efb, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xb8, 8) , (register, 0x0, 8)]
[(register, 0x30, 8) INT_ADD (register, 0xb0, 8) , (register, 0xb8, 8)]
[(register, 0xa8, 8) INT_ADD (unique, 0x12280, 8) , (unique, 0x12080, 8), (unique, 0x12280, 8) INT_ADD (register, 0x28, 8) , (register, 0x90, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (register, 0xb0, 8) , (register, 0xb8, 8)]
[(unique, 0x10000866, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_SUB (register, 0x0, 8) , (const, 0x2, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10000856, 8) , (unique, 0x1000085e, 8) , (unique, 0x10000866, 8) , (unique, 0x1000086e, 8) , (unique, 0x10000876, 8) , (unique, 0x1000087e, 8) , (unique, 0x1000087e, 8)]
[(register, 0x30, 8) INT_SUB (register, 0x30, 8) , (register, 0x0, 8), (register, 0x30, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0x30, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0x3200, 8) INT_ADD (register, 0x80, 8) , (const, 0x3fff, 8)]
[ ---  CBRANCH (ram, 0x2972a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 8) , (register, 0xa8, 8), (register, 0xa8, 8) INT_SUB (unique, 0x12800, 8) , (unique, 0x12600, 8), (unique, 0x12800, 8) INT_SUB (register, 0xa8, 8) , (register, 0x10, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x30, 8) , (register, 0x0, 8), (register, 0x30, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0x30, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0x30, 8) , (register, 0x30, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0xa8, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x0, 8) SUBPIECE (unique, 0x2eb80, 16) , (const, 0x0, 4), (unique, 0x2eb80, 16) INT_DIV (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2ea80, 16) INT_ADD (unique, 0x1000076e, 16) , (register, 0x30, 8), (unique, 0x1000076e, 16) INT_LEFT (unique, 0x1000075e, 16) , (const, 0x40, 16), (unique, 0x1000075e, 16) INT_SEXT (unique, 0x10000916, 8), (unique, 0x10000916, 8) CAST (register, 0xa8, 8), (unique, 0x2e800, 16) INT_ZEXT (register, 0x28, 8)]
[(register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0xb0, 8), (unique, 0x3e080, 16) INT_AND (unique, 0x2eb80, 16) , (const, 0xffffffffffffffff, 16), (unique, 0x2eb80, 16) INT_DIV (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2ea80, 16) INT_ADD (unique, 0x1000076e, 16) , (register, 0x30, 8), (unique, 0x1000076e, 16) INT_LEFT (unique, 0x1000075e, 16) , (const, 0x40, 16), (unique, 0x1000075e, 16) INT_SEXT (unique, 0x10000916, 8), (unique, 0x10000916, 8) CAST (register, 0xa8, 8), (unique, 0x2e800, 16) INT_ZEXT (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x296f68, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 8) , (register, 0x10, 8), (register, 0x10, 8) SUBPIECE (unique, 0x1000077e, 16) , (const, 0x0, 4), (unique, 0x1000077e, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0xb0, 8), (unique, 0x3e080, 16) INT_AND (unique, 0x2eb80, 16) , (const, 0xffffffffffffffff, 16), (register, 0x10, 8) SUBPIECE (unique, 0x2ed00, 16) , (const, 0x0, 4), (unique, 0x2ed00, 16) INT_REM (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2eb80, 16) INT_DIV (unique, 0x2ea80, 16) , (unique, 0x2e800, 16), (unique, 0x2ea80, 16) INT_ADD (unique, 0x1000076e, 16) , (register, 0x30, 8), (unique, 0x1000076e, 16) INT_LEFT (unique, 0x1000075e, 16) , (const, 0x40, 16), (unique, 0x1000075e, 16) INT_SEXT (unique, 0x10000916, 8), (unique, 0x10000916, 8) CAST (register, 0xa8, 8), (unique, 0x2e800, 16) INT_ZEXT (register, 0x28, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x296f4a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x296f68, 1) , (register, 0x206, 1)]
[(unique, 0x3100, 8) INT_SUB (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x28, 8) , (unique, 0x12280, 8), (unique, 0x12280, 8) INT_ADD (register, 0x28, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2971e8, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x28, 8) , (unique, 0x12280, 8), (unique, 0x12280, 8) INT_ADD (register, 0x28, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2971f3, 1) , (register, 0x206, 1)]
[(register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (unique, 0x12280, 8)]
[ ---  CBRANCH (ram, 0x296f99, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x12280, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2971f3, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x2971f3, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xb0, 8) , (register, 0x0, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0xb0, 8)]
[(unique, 0x100007fe, 8) COPY (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x296f4d, 1)]
[(register, 0x28, 8) INT_ADD (unique, 0x12280, 8) , (unique, 0x12080, 8), (unique, 0x12280, 8) INT_ADD (register, 0x28, 8) , (unique, 0x12280, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (unique, 0x28700, 8) , (const, 0x0, 8), (unique, 0x28700, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100004c9, 8), (unique, 0x100004c9, 8) INT_MULT (register, 0x88, 8) , (const, 0xffffffffffffe000, 8)]
[(unique, 0x100007f6, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_SUB (register, 0x0, 8) , (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x296f4d, 1)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x100007f6, 8) , (unique, 0x100007fe, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10000607, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x296f5a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (register, 0x10, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x28, 8) , (unique, 0x12280, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x10000806, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x297042, 1) , (unique, 0x10000607, 1)]
[(register, 0x88, 8) INT_OR (register, 0x88, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x297042, 1)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (unique, 0x10000524, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000806, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x90, 8) , (const, 0x0, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x297110, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x90, 8) , (const, 0x1, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x297200, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x2974aa, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x74, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_SUB (const, 0x1, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x297338, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_OR (register, 0x88, 8) , (register, 0x98, 8)]
[(unique, 0x1000081e, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x297380, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002dd, 8) , (const, 0x0, 8), (unique, 0x100002dd, 8) INT_AND (register, 0x88, 8) , (const, 0x7, 8)]
[(unique, 0x100008d6, 4) COPY (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x2972f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002a5, 8) , (const, 0x0, 8), (unique, 0x100002a5, 8) INT_AND (register, 0x88, 8) , (const, 0x7, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x2973f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[ ---  CBRANCH (ram, 0x2973d1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4)]
[(unique, 0x100008da, 4) COPY (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x297056, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x29705c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xf, 4), (register, 0x0, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4)]
[(register, 0x206, 1) INT_NOTEQUAL (unique, 0x3200, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297370, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x3200, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x29748e, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x297338, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x8, 8) , (const, 0x75, 8), (register, 0x8, 8) INT_SUB (const, 0x1, 8) , (unique, 0x3200, 8)]
[(register, 0x88, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0x8, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x2975de, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x80, 8) , (const, 0x40, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x90, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x297138, 1)]
[(register, 0x0, 8) INT_RIGHT (register, 0x98, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (unique, 0x100004fe, 1) , (const, 0x40, 1), (unique, 0x100004fe, 1) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2974d2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x40, 8)]
[(register, 0x88, 8) INT_OR (register, 0x88, 8) , (register, 0x98, 8), (register, 0x98, 8) INT_LEFT (register, 0x98, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x80, 1) , (unique, 0x100004fe, 1)]
[(register, 0x30, 8) INT_OR (unique, 0x10000434, 8) , (register, 0x0, 8), (unique, 0x10000434, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x2974f7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000043c, 8) , (const, 0x0, 8), (unique, 0x1000043c, 8) INT_OR (unique, 0x10000434, 8) , (unique, 0x1000063a, 8), (unique, 0x1000063a, 8) INT_AND (register, 0x0, 8) , (const, 0x7, 8), (unique, 0x10000434, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x90, 4) COPY (const, 0x1, 4)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x297176, 1)]
[(register, 0x30, 8) INT_RIGHT (register, 0x0, 8) , (const, 0x3, 4)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0x8, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x2975d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[ ---  CBRANCH (ram, 0x297362, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x29759e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4)]
[ ---  CBRANCH (ram, 0x297362, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x297224, 1)]
[ ---  CBRANCH (ram, 0x297575, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x297224, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x297224, 1)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x10, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  BRANCH (ram, 0x296d85, 1)]
[(register, 0x88, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0x8, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[(unique, 0x100008ee, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x29754d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[ ---  CBRANCH (ram, 0x297123, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297534, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4)]
[ ---  CBRANCH (ram, 0x297123, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[(unique, 0x10000846, 8) COPY (register, 0x98, 8), (register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffff7, 8) , (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x297123, 1)]
[ ---  CBRANCH (ram, 0x297123, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x297123, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xf, 4), (register, 0x0, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4)]
[(unique, 0x10000836, 8) COPY (register, 0x98, 8), (register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffffb, 8) , (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x297123, 1)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x80, 8) COPY (const, 0x1, 8)]
[(register, 0x90, 4) INT_AND (register, 0x90, 4) , (const, 0x1, 4), (register, 0x90, 4) INT_XOR (unique, 0x100002e5, 4) , (const, 0x1, 4), (unique, 0x100002e5, 4) SUBPIECE (unique, 0x1000078e, 8) , (const, 0x0, 4), (unique, 0x1000078e, 8) INT_RIGHT (register, 0x98, 8) , (const, 0x34, 4), (register, 0x98, 8) MULTIEQUAL (unique, 0x1000081e, 8) , (unique, 0x100008ee, 8) , (unique, 0x100008ee, 8) , (unique, 0x10000836, 8) , (unique, 0x100008ee, 8) , (unique, 0x10000846, 8) , (unique, 0x100008ee, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x10, 8) INT_RIGHT (register, 0x10, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x10000562, 1) , (const, 0x3f, 1), (unique, 0x10000562, 1) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x98, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x30, 8) INT_OR (register, 0x30, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_OR (register, 0x30, 8) , (register, 0x18, 8), (register, 0x88, 8) INT_LEFT (register, 0x88, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x18, 8) INT_RIGHT (register, 0x88, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x10000562, 1) , (const, 0x3f, 1), (register, 0x30, 8) INT_LEFT (register, 0x10, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x40, 1) , (unique, 0x10000562, 1), (unique, 0x10000562, 1) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x98, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x2971a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000300, 8) , (const, 0x0, 8), (unique, 0x10000300, 8) INT_OR (unique, 0x10000612, 8) , (register, 0x0, 8), (unique, 0x10000612, 8) INT_AND (register, 0x30, 8) , (const, 0x7, 8), (register, 0x0, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_OR (register, 0x30, 8) , (register, 0x18, 8), (register, 0x88, 8) INT_LEFT (register, 0x88, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x18, 8) INT_RIGHT (register, 0x88, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x10000562, 1) , (const, 0x3f, 1), (register, 0x30, 8) INT_LEFT (register, 0x10, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x40, 1) , (unique, 0x10000562, 1), (unique, 0x10000562, 1) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x98, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x297529, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[ ---  CBRANCH (ram, 0x2971a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297513, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4)]
[ ---  CBRANCH (ram, 0x2971a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x8, 8)]
[(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffff7, 8) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x2971a0, 1)]
[ ---  CBRANCH (ram, 0x297558, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2971a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xf, 4), (register, 0x0, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4)]
[(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x4, 8)]
[(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffffb, 8) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x2971a0, 1)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x297462, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1e080, 8) , (const, 0x0, 8), (unique, 0x1e080, 8) INT_AND (unique, 0x1e000, 8) , (const, 0x1, 8), (unique, 0x1e000, 8) INT_RIGHT (register, 0x10, 8) , (const, 0x33, 4), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x30, 8) INT_OR (register, 0x30, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_LEFT (register, 0x10, 8) , (const, 0x3d, 4), (register, 0x30, 8) INT_RIGHT (register, 0x30, 8) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x2975ec, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2974fe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000474, 4) , (const, 0x0, 4), (unique, 0x10000474, 4) INT_AND (register, 0x38, 4) , (const, 0x20, 4)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2971bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000643, 4) , (const, 0x0, 4), (unique, 0x10000643, 4) INT_AND (register, 0x1084, 4) , (const, 0x800, 4)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2971c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x0, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x10, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x2973ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[(register, 0x88, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0x3200, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x100008ce, 4) COPY (register, 0x38, 4), (register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x29705c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0x8, 8)]
[(register, 0x88, 8) INT_ADD (register, 0x88, 8) , (const, 0x8, 8)]
[(register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffff7, 8) , (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x29705c, 1)]
[ ---  CBRANCH (ram, 0x2973ca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4)]
[(register, 0x88, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0x3200, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x100008c6, 4) COPY (register, 0x38, 4), (register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x29705c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0x8, 8)]
[(register, 0x88, 8) INT_ADD (register, 0x88, 8) , (const, 0x8, 8)]
[(register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffff7, 8) , (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x29705c, 1)]
[(register, 0x88, 8) COPY (const, 0xffffffffffffffff, 8)]
[(unique, 0x100008de, 4) COPY (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x297056, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x88, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0xa0, 8)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x3200, 8) , (register, 0x90, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x88, 8) INT_ADD (register, 0x88, 8) , (const, 0x4, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffffb, 8) , (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(unique, 0x100008c2, 4) COPY (register, 0x38, 4), (register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  BRANCH (ram, 0x29705c, 1)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0x8, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (unique, 0x3200, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x38, 4) COPY (unique, 0x100008e2, 4), (unique, 0x100008e2, 4) MULTIEQUAL (unique, 0x100008da, 4) , (unique, 0x100008c2, 4) , (unique, 0x100008c6, 4) , (unique, 0x100008c6, 4) , (unique, 0x100008ce, 4) , (unique, 0x100008ce, 4) , (unique, 0x100008d6, 4) , (unique, 0x100008da, 4) , (unique, 0x100008de, 4)]
[ ---  CBRANCH (ram, 0x297077, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_NOTEQUAL (unique, 0x1e080, 8) , (const, 0x0, 8), (unique, 0x1e080, 8) INT_AND (unique, 0x1e000, 8) , (const, 0x1, 8), (unique, 0x1e000, 8) INT_RIGHT (register, 0x98, 8) , (const, 0x34, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(unique, 0x3200, 8) INT_ADD (register, 0x80, 8) , (const, 0x4000, 8)]
[(register, 0x98, 8) INT_AND (register, 0x98, 8) , (const, 0xffefffffffffffff, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x2970b0, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x7ffe, 8) , (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x297268, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x2000, 4), (register, 0x30, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[(unique, 0x10000368, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x297100, 1)]
[ ---  CBRANCH (ram, 0x297418, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x4000, 4)]
[(register, 0x30, 8) INT_NEGATE (unique, 0x100003d8, 8), (unique, 0x100003d8, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x297100, 1)]
[(register, 0x30, 8) INT_NEGATE (unique, 0x100002d5, 8), (unique, 0x100002d5, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (unique, 0x10000368, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x28, 4)]
[ ---  BRANCH (ram, 0x296d85, 1)]
[(unique, 0x100007ae, 8) COPY (register, 0x30, 8), (register, 0x30, 8) INT_OR (register, 0x30, 8) , (register, 0x88, 8), (register, 0x30, 8) INT_LEFT (register, 0x98, 8) , (const, 0x3d, 4), (register, 0x88, 8) INT_RIGHT (register, 0x88, 8) , (const, 0x3, 4)]
[ ---  BRANCH (ram, 0x296ccf, 1)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100007ae, 8) , (unique, 0x100007b6, 8) , (unique, 0x100007be, 8) , (unique, 0x100007c6, 8) , (unique, 0x100007ce, 8) , (unique, 0x100007d6, 8) , (register, 0x30, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x296df1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  CALL (ram, 0x299bb0, 8) , (register, 0x1200, 8) , (register, 0x38, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4), (register, 0x1200, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  RETURN (const, 0x0, 8)]
