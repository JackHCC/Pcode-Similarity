[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000e37, 8), (unique, 0x10000e37, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000e67, 8), (unique, 0x10000e67, 8) INT_ADD (unique, 0x10000e5f, 8) , (const, 0x25, 8), (unique, 0x10000e5f, 8) CAST (register, 0x28, 8), (register, 0x28, 8) CAST (unique, 0x10000e47, 8), (unique, 0x10000e47, 8) INT_ADD (register, 0x28, 8) , (unique, 0xbd80, 8), (register, 0x28, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x206e90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000e57, 8), (unique, 0x10000e57, 8) INT_ADD (unique, 0x10000e4f, 8) , (const, 0x25, 8), (unique, 0x10000e4f, 8) CAST (register, 0x18, 8), (register, 0x18, 8) CAST (unique, 0x10000e3f, 8), (unique, 0x10000e3f, 8) INT_ADD (register, 0x18, 8) , (unique, 0xbd80, 8), (register, 0x18, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x206beb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x2072f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x206ea0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000e6f, 8), (unique, 0x10000e6f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2072d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xff, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000e77, 8), (unique, 0x10000e77, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8)]
[(unique, 0x10000dcf, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xf, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000e87, 8), (unique, 0x10000e87, 8) INT_ADD (unique, 0x10000e7f, 8) , (const, 0x9, 8), (unique, 0x10000e7f, 8) CAST (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x206c48, 1)]
[ ---  CBRANCH (ram, 0x20799b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x80fe, 4), (register, 0x10, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xc0ff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e8f, 8), (unique, 0x10000e8f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8)]
[(unique, 0x10000dcb, 4) COPY (stack, 0xffffffffffffff5c, 4), (stack, 0xffffffffffffff5c, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x206c48, 1)]
[ ---  CBRANCH (ram, 0x207742, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(unique, 0x10000dc7, 4) COPY (unique, 0x1000041a, 4), (unique, 0x1000041a, 4) INT_ADD (unique, 0x10000422, 4) , (const, 0x5, 4), (unique, 0x10000422, 4) INT_MULT (unique, 0x10000263, 4) , (const, 0x9, 4), (unique, 0x10000263, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0xc0fe, 4)]
[ ---  BRANCH (ram, 0x206c48, 1)]
[(register, 0x30, 4) COPY (const, 0xe, 4)]
[(unique, 0x10000dbf, 4) COPY (stack, 0xffffffffffffff5c, 4), (stack, 0xffffffffffffff5c, 4) COPY (const, 0xe, 4)]
[ ---  CBRANCH (ram, 0x206c48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e97, 8), (unique, 0x10000e97, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x6, 8) , (const, 0x2, 8)]
[(unique, 0x10000dc3, 4) COPY (stack, 0xffffffffffffff5c, 4)]
[ ---  CBRANCH (ram, 0x206c48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e9f, 8), (unique, 0x10000e9f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x2, 8)]
[(unique, 0x10000dd3, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x206efe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x1000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ea7, 8), (unique, 0x10000ea7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xa, 8) , (const, 0x2, 8)]
[(unique, 0x10000dd7, 4) COPY (register, 0x30, 4)]
[(unique, 0x10000db7, 4) COPY (stack, 0xffffffffffffff5c, 4), (stack, 0xffffffffffffff5c, 4) COPY (const, 0xf, 4)]
[ ---  CBRANCH (ram, 0x206c48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0x10000c63, 8) COPY (ram, 0x4ee078, 8)]
[(unique, 0x10000d77, 8) COPY (ram, 0x4ee078, 8)]
[ ---  CBRANCH (ram, 0x206c41, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (ram, 0x4ee078, 8), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee078, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000eaf, 8), (unique, 0x10000eaf, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x2, 8)]
[(unique, 0x10000d7f, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x100003f1, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x100003f1, 8) MULTIEQUAL (unique, 0x10000d77, 8) , (unique, 0x10000d7f, 8)]
[ ---  CBRANCH (ram, 0x206c30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100003f1, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x0, 8) PTRADD (unique, 0x100003f1, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x100003f1, 8) MULTIEQUAL (unique, 0x10000d77, 8) , (unique, 0x10000d7f, 8)]
[(unique, 0x10000dbb, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c63, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (unique, 0x10000db7, 4) , (unique, 0x10000dbb, 4) , (unique, 0x10000dbf, 4) , (unique, 0x10000dc3, 4) , (unique, 0x10000dc7, 4) , (unique, 0x10000dcb, 4) , (unique, 0x10000dcf, 4) , (unique, 0x10000dd3, 4) , (unique, 0x10000dd7, 4)]
[ ---  CBRANCH (ram, 0x206f10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000eb7, 8), (unique, 0x10000eb7, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x2072c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xff, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000ebf, 8), (unique, 0x10000ebf, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8)]
[(register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xf, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000ecf, 8), (unique, 0x10000ecf, 8) INT_ADD (unique, 0x10000ec7, 8) , (const, 0x9, 8), (unique, 0x10000ec7, 8) CAST (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x206cb0, 1)]
[ ---  CBRANCH (ram, 0x2079a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x80fe, 4), (register, 0x10, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xc0ff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ed7, 8), (unique, 0x10000ed7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffff70, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x206cb0, 1)]
[ ---  CBRANCH (ram, 0x20775a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(register, 0x0, 4) INT_ADD (unique, 0x10000469, 4) , (const, 0x5, 4), (unique, 0x10000469, 4) INT_MULT (unique, 0x1000027e, 4) , (const, 0x9, 4), (unique, 0x1000027e, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0xc0fe, 4)]
[ ---  BRANCH (ram, 0x206cb0, 1)]
[(stack, 0xffffffffffffff70, 4) COPY (const, 0xe, 4)]
[ ---  CBRANCH (ram, 0x206cb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000edf, 8), (unique, 0x10000edf, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x6, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x206cb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ee7, 8), (unique, 0x10000ee7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x2, 8)]
[(register, 0x0, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x206f70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x1000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000eef, 8), (unique, 0x10000eef, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xa, 8) , (const, 0x2, 8)]
[(register, 0x0, 4) COPY (const, 0xe, 4)]
[(stack, 0xffffffffffffff70, 4) COPY (const, 0xf, 4)]
[ ---  CBRANCH (ram, 0x206cb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0x10000c5b, 8) COPY (ram, 0x4ee078, 8)]
[(unique, 0x10000d8f, 8) COPY (ram, 0x4ee078, 8)]
[ ---  CBRANCH (ram, 0x206ca9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (ram, 0x4ee078, 8), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ef7, 8), (unique, 0x10000ef7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x2, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee078, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x10000d87, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x100003f9, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x100003f9, 8) MULTIEQUAL (unique, 0x10000d87, 8) , (unique, 0x10000d8f, 8)]
[ ---  CBRANCH (ram, 0x206c98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100003f9, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x0, 8) PTRADD (unique, 0x100003f9, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x100003f9, 8) MULTIEQUAL (unique, 0x10000d87, 8) , (unique, 0x10000d8f, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c5b, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (unique, 0xbc80, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (register, 0x0, 4) , (stack, 0xffffffffffffff70, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x206f80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x207269, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000eff, 8), (unique, 0x10000eff, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2079b5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xff, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000f07, 8), (unique, 0x10000f07, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0xf, 4), (register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000f17, 8), (unique, 0x10000f17, 8) INT_ADD (unique, 0x10000f0f, 8) , (const, 0x11, 8), (unique, 0x10000f0f, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x206fcc, 1)]
[ ---  CBRANCH (ram, 0x207817, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x80fe, 4), (register, 0x10, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xc0ff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f1f, 8), (unique, 0x10000f1f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x30, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x206fcc, 1)]
[ ---  CBRANCH (ram, 0x2079e1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(unique, 0x3880, 4) INT_ADD (unique, 0x10000339, 4) , (const, 0x5, 4), (unique, 0x10000339, 4) INT_MULT (unique, 0x10000331, 4) , (const, 0x9, 4), (unique, 0x10000331, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0xc0fe, 4)]
[ ---  BRANCH (ram, 0x206fcc, 1)]
[(register, 0x30, 4) COPY (const, 0xe, 4)]
[ ---  CBRANCH (ram, 0x206fcc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000f2f, 8), (unique, 0x10000f2f, 8) INT_ADD (unique, 0x10000f27, 8) , (const, 0x14, 8), (unique, 0x10000f27, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x206fcc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f37, 8), (unique, 0x10000f37, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x30, 4) COPY (const, 0xe, 4)]
[ ---  CBRANCH (ram, 0x2072c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x1000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000f47, 8), (unique, 0x10000f47, 8) INT_ADD (unique, 0x10000f3f, 8) , (const, 0x1c, 8), (unique, 0x10000f3f, 8) CAST (register, 0x18, 8)]
[(register, 0x30, 4) COPY (const, 0x2, 4)]
[(register, 0x30, 4) COPY (const, 0xf, 4)]
[ ---  CBRANCH (ram, 0x206fcc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0x10000c53, 8) COPY (ram, 0x4ee078, 8)]
[(unique, 0x10000d9f, 8) COPY (ram, 0x4ee078, 8)]
[ ---  CBRANCH (ram, 0x206fc9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (ram, 0x4ee078, 8), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee078, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000f57, 8), (unique, 0x10000f57, 8) INT_ADD (unique, 0x10000f4f, 8) , (const, 0xc, 8), (unique, 0x10000f4f, 8) CAST (register, 0x18, 8)]
[(unique, 0x10000d97, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x10000401, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x10000401, 8) MULTIEQUAL (unique, 0x10000d97, 8) , (unique, 0x10000d9f, 8)]
[ ---  CBRANCH (ram, 0x206fb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000401, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x0, 8) PTRADD (unique, 0x10000401, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x10000401, 8) MULTIEQUAL (unique, 0x10000d97, 8) , (unique, 0x10000d9f, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c53, 8) , (register, 0x0, 8)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (unique, 0xbc80, 4) , (register, 0x30, 4) , (register, 0x30, 4) , (unique, 0x3880, 4) , (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x2073aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000f5f, 8), (unique, 0x10000f5f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2079c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xff, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000f67, 8), (unique, 0x10000f67, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xf, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000f77, 8), (unique, 0x10000f77, 8) INT_ADD (unique, 0x10000f6f, 8) , (const, 0x11, 8), (unique, 0x10000f6f, 8) CAST (register, 0x28, 8)]
[ ---  BRANCH (ram, 0x20701c, 1)]
[ ---  CBRANCH (ram, 0x207821, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x80fe, 4), (register, 0x10, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xc0ff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f7f, 8), (unique, 0x10000f7f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x0, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x20701c, 1)]
[ ---  CBRANCH (ram, 0x2079cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(register, 0x0, 4) INT_ADD (unique, 0x10000432, 4) , (const, 0x5, 4), (unique, 0x10000432, 4) INT_MULT (unique, 0x10000311, 4) , (const, 0x9, 4), (unique, 0x10000311, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0xc0fe, 4)]
[ ---  BRANCH (ram, 0x20701c, 1)]
[(register, 0x0, 4) COPY (const, 0xe, 4)]
[ ---  CBRANCH (ram, 0x20701c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000f8f, 8), (unique, 0x10000f8f, 8) INT_ADD (unique, 0x10000f87, 8) , (const, 0x14, 8), (unique, 0x10000f87, 8) CAST (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x20701c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f97, 8), (unique, 0x10000f97, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x0, 4) COPY (const, 0xe, 4)]
[ ---  CBRANCH (ram, 0x2073fd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x1000000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fa7, 8), (unique, 0x10000fa7, 8) INT_ADD (unique, 0x10000f9f, 8) , (const, 0x1c, 8), (unique, 0x10000f9f, 8) CAST (register, 0x28, 8)]
[(register, 0x0, 4) COPY (const, 0x2, 4)]
[(register, 0x0, 4) COPY (const, 0xf, 4)]
[ ---  CBRANCH (ram, 0x20701c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0x10000c43, 8) COPY (ram, 0x4ee078, 8)]
[(unique, 0x10000daf, 8) COPY (ram, 0x4ee078, 8)]
[ ---  CBRANCH (ram, 0x207019, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (ram, 0x4ee078, 8), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee078, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fb7, 8), (unique, 0x10000fb7, 8) INT_ADD (unique, 0x10000faf, 8) , (const, 0xc, 8), (unique, 0x10000faf, 8) CAST (register, 0x28, 8)]
[(unique, 0x10000da7, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x10000409, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x10000409, 8) MULTIEQUAL (unique, 0x10000da7, 8) , (unique, 0x10000daf, 8)]
[ ---  CBRANCH (ram, 0x207008, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000409, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x0, 8) PTRADD (unique, 0x10000409, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x10000409, 8) MULTIEQUAL (unique, 0x10000da7, 8) , (unique, 0x10000daf, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c43, 8) , (register, 0x0, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x20702c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff5c, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x2072f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff70, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x20703c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff5c, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x206e60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff70, 4) , (register, 0x0, 4)]
[(register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fc7, 8), (unique, 0x10000fc7, 8) INT_ADD (unique, 0x10000fbf, 8) , (const, 0x26, 8), (unique, 0x10000fbf, 8) CAST (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x207390, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000411, 1) , (const, 0x0, 1), (unique, 0x10000411, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fd7, 8), (unique, 0x10000fd7, 8) INT_ADD (unique, 0x10000fcf, 8) , (const, 0x26, 8), (unique, 0x10000fcf, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x20705a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x2072f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x0, 1)]
[(register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x2, 1)]
[ ---  CBRANCH (ram, 0x20739d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000452, 1) , (const, 0x0, 1), (unique, 0x10000452, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x2, 1)]
[ ---  CBRANCH (ram, 0x20706e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x2072f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x20782b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0x3800, 8) CAST (unique, 0x10000fdf, 8), (unique, 0x10000fdf, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff9c, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff98, 2) COPY (const, 0xa, 2)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa8, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffaa, 2) COPY (const, 0xffff, 2)]
[(stack, 0xffffffffffffffb0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffac, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000fe7, 8), (unique, 0x10000fe7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x207572, 1)]
[(stack, 0xffffffffffffff7c, 4) COPY (const, 0x7fffffff, 4)]
[ ---  CBRANCH (ram, 0x207567, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2)]
[(register, 0x90, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000fef, 8), (unique, 0x10000fef, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8)]
[(unique, 0x10000d1b, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (unique, 0xbc00, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 8) PTRADD (register, 0x88, 8) , (const, 0x4, 8) , (const, 0x2, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000d1b, 8) , (unique, 0x3800, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (ram, 0x4ee070, 8)]
[(unique, 0x10000cbb, 8) COPY (ram, 0x4ee070, 8)]
[ ---  CBRANCH (ram, 0x2075e4, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ff7, 8), (unique, 0x10000ff7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee070, 8) , (const, 0x10, 8) , (const, 0x1, 8)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000ccb, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000cbb, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x2075d3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 1) , (register, 0x38, 1), (register, 0x90, 1) SUBPIECE (register, 0x90, 4) , (const, 0x0, 4), (register, 0x38, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x8, 4) INT_AND (register, 0x0, 4) , (const, 0x7, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x8, 4)]
[(unique, 0x10000c33, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000c7b, 8) COPY (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x2075b0, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c33, 8) , (register, 0x10, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000100f, 8), (unique, 0x1000100f, 8) CAST (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x10001007, 8), (unique, 0x10001007, 8) INT_ADD (unique, 0x10000fff, 8) , (const, 0x1, 8), (unique, 0x10000fff, 8) CAST (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000c7b, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2075a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (register, 0x8, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x38, 4) INT_ZEXT (register, 0x38, 1), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (register, 0x8, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (register, 0x38, 1) INT_XOR (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x2075d3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x8, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000ccb, 8) , (unique, 0x10000cd3, 8) , (unique, 0x10000ccb, 8)]
[ ---  CBRANCH (ram, 0x207590, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001017, 8), (unique, 0x10001017, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x28, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000ccb, 8) , (unique, 0x10000cd3, 8) , (unique, 0x10000ccb, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000cbb, 8) , (register, 0x80, 8)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (unique, 0x51400, 1), (unique, 0x51400, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x38, 4) INT_XOR (register, 0x38, 4) , (register, 0x90, 4), (register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000cd3, 8) COPY (unique, 0x100004c9, 8), (unique, 0x100004c9, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x2075f9, 1) , (unique, 0x100004c8, 1), (unique, 0x100004c8, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) MULTIEQUAL (unique, 0x59200, 4) , (unique, 0x59200, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000101f, 8), (unique, 0x1000101f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100004c9, 8) , (const, 0x14, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x20709a, 1)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x2078dc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff9c, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff98, 2) COPY (const, 0xa, 2)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000102f, 8), (unique, 0x1000102f, 8) INT_ADD (unique, 0x10001027, 8) , (const, 0xa, 8), (unique, 0x10001027, 8) CAST (register, 0x18, 8)]
[(register, 0x98, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffb0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffaa, 2) COPY (const, 0xffff, 2)]
[(stack, 0xffffffffffffffac, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000103f, 8), (unique, 0x1000103f, 8) INT_ADD (unique, 0x10001037, 8) , (const, 0xc, 8), (unique, 0x10001037, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x2074c7, 1)]
[(stack, 0xffffffffffffff78, 4) COPY (const, 0x7fffffff, 4)]
[ ---  CBRANCH (ram, 0x2074be, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2)]
[(register, 0x98, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001047, 8), (unique, 0x10001047, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (unique, 0xbc00, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(register, 0x90, 8) PTRADD (register, 0x90, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3800, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (ram, 0x4ee070, 8)]
[(unique, 0x10000d0b, 8) COPY (ram, 0x4ee070, 8)]
[(unique, 0x10000d13, 8) COPY (ram, 0x4ee070, 8)]
[ ---  CBRANCH (ram, 0x207547, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000104f, 8), (unique, 0x1000104f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee070, 8) , (const, 0x10, 8) , (const, 0x1, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000d03, 8) , (unique, 0x10000d0b, 8)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207536, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 1) , (register, 0x38, 1), (register, 0x98, 1) SUBPIECE (register, 0x98, 4) , (const, 0x0, 4), (register, 0x38, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x3a00, 8) PTRADD (register, 0x88, 8) , (unique, 0x10000770, 8) , (const, 0x1, 8), (unique, 0x10000770, 8) INT_ADD (unique, 0x100001f1, 8) , (const, 0x1, 8), (unique, 0x100001f1, 8) INT_ZEXT (unique, 0x10000416, 4), (unique, 0x10000416, 4) INT_RIGHT (unique, 0x3100, 4) , (const, 0x3, 4), (unique, 0x3100, 4) INT_SUB (register, 0x8, 4) , (const, 0x8, 4)]
[(unique, 0x10000c0b, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000c2b, 8) COPY (register, 0x90, 8)]
[ ---  BRANCH (ram, 0x207510, 1)]
[(unique, 0x1000045c, 4) MULTIEQUAL (unique, 0x3100, 4) , (register, 0x30, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000c0b, 8) , (register, 0x0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001067, 8), (unique, 0x10001067, 8) CAST (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x1000105f, 8), (unique, 0x1000105f, 8) INT_ADD (unique, 0x10001057, 8) , (const, 0x1, 8), (unique, 0x10001057, 8) CAST (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c2b, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x207508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (unique, 0x3a00, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000c0b, 8) , (register, 0x0, 8)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (unique, 0x51400, 1), (unique, 0x51400, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (unique, 0x1000045c, 4) , (const, 0x0, 4), (register, 0x38, 4) INT_ZEXT (unique, 0x10000460, 1), (unique, 0x10000460, 1) INT_XOR (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000de3, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x207536, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x30, 4) INT_SUB (unique, 0x1000045c, 4) , (const, 0x8, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x88, 8), (register, 0x88, 8) PTRADD (register, 0x88, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (unique, 0x100004d2, 8) , (register, 0x88, 8)]
[(unique, 0x10000d03, 8) COPY (register, 0x88, 8), (register, 0x88, 8) PTRADD (register, 0x88, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (unique, 0x100004d2, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x2074e8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000106f, 8), (unique, 0x1000106f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x28, 8) , (const, 0x1, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (unique, 0x100004d2, 8) , (register, 0x88, 8)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (unique, 0x51400, 1), (unique, 0x51400, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (register, 0x38, 4) INT_XOR (register, 0x38, 4) , (register, 0x98, 4), (register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000deb, 8) COPY (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000d13, 8) , (register, 0x88, 8)]
[(unique, 0x100004d2, 8) MULTIEQUAL (unique, 0x10000de3, 8) , (unique, 0x10000deb, 8)]
[ ---  CBRANCH (ram, 0x20755a, 1) , (unique, 0x100004d1, 1), (unique, 0x100004d1, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) MULTIEQUAL (unique, 0x59200, 4) , (unique, 0x59200, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001077, 8), (unique, 0x10001077, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100004d2, 8) , (const, 0x14, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2070b8, 1)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207883, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0x3800, 8) CAST (unique, 0x1000107f, 8), (unique, 0x1000107f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff98, 2) COPY (const, 0xa, 2)]
[(stack, 0xffffffffffffff9c, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffffa8, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffaa, 2) COPY (const, 0xffff, 2)]
[(stack, 0xffffffffffffffb0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffac, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001087, 8), (unique, 0x10001087, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x2076ac, 1)]
[(register, 0xb0, 4) COPY (const, 0x7fffffff, 4)]
[ ---  CBRANCH (ram, 0x2076a2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2)]
[(register, 0x90, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000108f, 8), (unique, 0x1000108f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8)]
[(unique, 0x10000cfb, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (unique, 0xbc00, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 8) PTRADD (register, 0x88, 8) , (const, 0x4, 8) , (const, 0x2, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000cfb, 8) , (unique, 0x3800, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (ram, 0x4ee070, 8)]
[(unique, 0x10000cab, 8) COPY (ram, 0x4ee070, 8)]
[(unique, 0x10000cb3, 8) COPY (ram, 0x4ee070, 8)]
[ ---  CBRANCH (ram, 0x207724, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001097, 8), (unique, 0x10001097, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee070, 8) , (const, 0x10, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000ca3, 8) , (unique, 0x10000cab, 8)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207713, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 1) , (register, 0x38, 1), (register, 0x90, 1) SUBPIECE (register, 0x90, 4) , (const, 0x0, 4), (register, 0x38, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x8, 4) INT_AND (register, 0x0, 4) , (const, 0x7, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x8, 4)]
[(unique, 0x10000c23, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000c73, 8) COPY (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x2076f0, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c23, 8) , (register, 0x10, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100010af, 8), (unique, 0x100010af, 8) CAST (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x100010a7, 8), (unique, 0x100010a7, 8) INT_ADD (unique, 0x1000109f, 8) , (const, 0x1, 8), (unique, 0x1000109f, 8) CAST (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000c73, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2076e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (register, 0x8, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x38, 4) INT_ZEXT (register, 0x38, 1), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (register, 0x8, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (register, 0x38, 1) INT_XOR (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000df3, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x207713, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x8, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x100004db, 8) , (register, 0x80, 8)]
[(unique, 0x10000ca3, 8) COPY (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x100004db, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x2076d0, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100010b7, 8), (unique, 0x100010b7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x28, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x100004db, 8) , (register, 0x80, 8)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (unique, 0x51400, 1), (unique, 0x51400, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x38, 4) INT_XOR (register, 0x38, 4) , (register, 0x90, 4), (register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000dfb, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000cb3, 8) , (register, 0x80, 8)]
[(unique, 0x100004db, 8) MULTIEQUAL (unique, 0x10000df3, 8) , (unique, 0x10000dfb, 8)]
[ ---  CBRANCH (ram, 0x207739, 1) , (unique, 0x100004da, 1), (unique, 0x100004da, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) MULTIEQUAL (unique, 0x59200, 4) , (unique, 0x59200, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100010bf, 8), (unique, 0x100010bf, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100004db, 8) , (const, 0x14, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2070d6, 1)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x20792d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100010cf, 8), (unique, 0x100010cf, 8) INT_ADD (unique, 0x100010c7, 8) , (const, 0xa, 8), (unique, 0x100010c7, 8) CAST (register, 0x28, 8)]
[(stack, 0xffffffffffffff98, 2) COPY (const, 0xa, 2)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff9c, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffaa, 2) COPY (const, 0xffff, 2)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffb0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffac, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100010df, 8), (unique, 0x100010df, 8) INT_ADD (unique, 0x100010d7, 8) , (const, 0xc, 8), (unique, 0x100010d7, 8) CAST (register, 0x28, 8)]
[ ---  BRANCH (ram, 0x20760f, 1)]
[(register, 0x0, 4) COPY (const, 0x7fffffff, 4)]
[ ---  CBRANCH (ram, 0x207606, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2)]
[(register, 0x90, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100010e7, 8), (unique, 0x100010e7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (unique, 0xbc00, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 8) PTRADD (register, 0x88, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3800, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (ram, 0x4ee070, 8)]
[(unique, 0x10000c93, 8) COPY (ram, 0x4ee070, 8)]
[(unique, 0x10000c9b, 8) COPY (ram, 0x4ee070, 8)]
[ ---  CBRANCH (ram, 0x207684, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100010ef, 8), (unique, 0x100010ef, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee070, 8) , (const, 0x10, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000c8b, 8) , (unique, 0x10000c93, 8)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207673, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 1) , (register, 0x38, 1), (register, 0x90, 1) SUBPIECE (register, 0x90, 4) , (const, 0x0, 4), (register, 0x38, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x8, 4) INT_AND (register, 0x0, 4) , (const, 0x7, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x8, 4)]
[(unique, 0x10000c1b, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000c6b, 8) COPY (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x207650, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c1b, 8) , (register, 0x10, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001107, 8), (unique, 0x10001107, 8) CAST (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x100010ff, 8), (unique, 0x100010ff, 8) INT_ADD (unique, 0x100010f7, 8) , (const, 0x1, 8), (unique, 0x100010f7, 8) CAST (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000c6b, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x207648, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (register, 0x8, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x38, 4) INT_ZEXT (register, 0x38, 1), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (register, 0x8, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (register, 0x38, 1) INT_XOR (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000e03, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x207673, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x8, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x100004e4, 8) , (register, 0x80, 8)]
[(unique, 0x10000c8b, 8) COPY (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x100004e4, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x207630, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000110f, 8), (unique, 0x1000110f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x28, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x100004e4, 8) , (register, 0x80, 8)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (unique, 0x51400, 1), (unique, 0x51400, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x38, 4) INT_XOR (register, 0x38, 4) , (register, 0x90, 4), (register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000e0b, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000c9b, 8) , (register, 0x80, 8)]
[(unique, 0x100004e4, 8) MULTIEQUAL (unique, 0x10000e03, 8) , (unique, 0x10000e0b, 8)]
[ ---  CBRANCH (ram, 0x207699, 1) , (unique, 0x100004e3, 1), (unique, 0x100004e3, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) MULTIEQUAL (unique, 0x59200, 4) , (unique, 0x59200, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001117, 8), (unique, 0x10001117, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100004e4, 8) , (const, 0x14, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2070f3, 1)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207106, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff7c, 4)]
[ ---  CBRANCH (ram, 0x2072f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x206cbb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff7c, 4)]
[ ---  CBRANCH (ram, 0x206e60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (register, 0xb0, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[ ---  CBRANCH (ram, 0x207408, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffff98, 2) COPY (const, 0xa, 2)]
[(stack, 0xffffffffffffff9c, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa8, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffaa, 2) COPY (const, 0xffff, 2)]
[(unique, 0x3800, 8) CAST (unique, 0x10001127, 8), (unique, 0x10001127, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffac, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000111f, 8), (unique, 0x1000111f, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffffb0, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x2071ce, 1)]
[(register, 0xb0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2071c9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2)]
[(register, 0x90, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000112f, 8), (unique, 0x1000112f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (unique, 0xbc00, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x4, 8) , (const, 0x2, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0x3800, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (ram, 0x4ee068, 8)]
[(unique, 0x10000ceb, 8) COPY (ram, 0x4ee068, 8)]
[(unique, 0x10000cf3, 8) COPY (ram, 0x4ee068, 8)]
[ ---  CBRANCH (ram, 0x207244, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001137, 8), (unique, 0x10001137, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee068, 8) , (const, 0x10, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000ce3, 8) , (unique, 0x10000ceb, 8)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207233, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 1) , (register, 0x38, 1), (register, 0x90, 1) SUBPIECE (register, 0x90, 4) , (const, 0x0, 4), (register, 0x38, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x8, 4) INT_AND (register, 0x0, 4) , (const, 0x7, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x8, 4)]
[(unique, 0x10000c4b, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000c83, 8) COPY (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x207210, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c4b, 8) , (register, 0x10, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000114f, 8), (unique, 0x1000114f, 8) CAST (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x10001147, 8), (unique, 0x10001147, 8) INT_ADD (unique, 0x1000113f, 8) , (const, 0x1, 8), (unique, 0x1000113f, 8) CAST (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000c83, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x207208, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (register, 0x8, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x38, 4) INT_ZEXT (register, 0x38, 1), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (register, 0x8, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (register, 0x38, 1) INT_XOR (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000e13, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x207233, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x8, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x100004ed, 8) , (register, 0x80, 8)]
[(unique, 0x10000ce3, 8) COPY (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x100004ed, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x2071f0, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001157, 8), (unique, 0x10001157, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x28, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x100004ed, 8) , (register, 0x80, 8)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (unique, 0x51400, 1), (unique, 0x51400, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x38, 4) INT_XOR (register, 0x38, 4) , (register, 0x90, 4), (register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000e1b, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000cf3, 8) , (register, 0x80, 8)]
[(unique, 0x100004ed, 8) MULTIEQUAL (unique, 0x10000e13, 8) , (unique, 0x10000e1b, 8)]
[ ---  CBRANCH (ram, 0x207260, 1) , (unique, 0x100004ec, 1), (unique, 0x100004ec, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) MULTIEQUAL (unique, 0x59200, 4) , (unique, 0x59200, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000115f, 8), (unique, 0x1000115f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100004ed, 8) , (const, 0x14, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x206cdd, 1)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207460, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(stack, 0xffffffffffffff98, 2) COPY (const, 0xa, 2)]
[(stack, 0xffffffffffffffa8, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffff9c, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[(register, 0x98, 4) COPY (const, 0x0, 4)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffffaa, 2) COPY (const, 0xffff, 2)]
[(stack, 0xffffffffffffffb0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffac, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001167, 8), (unique, 0x10001167, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x2, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x1000116f, 8), (unique, 0x1000116f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[ ---  BRANCH (ram, 0x20712b, 1)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x20711e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2)]
[(register, 0x98, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001177, 8), (unique, 0x10001177, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (unique, 0xbc00, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4)]
[(register, 0x90, 8) PTRADD (register, 0x90, 8) , (const, 0x4, 8) , (const, 0x2, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0x3800, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (ram, 0x4ee068, 8)]
[(unique, 0x10000d2b, 8) COPY (ram, 0x4ee068, 8)]
[(unique, 0x10000d33, 8) COPY (ram, 0x4ee068, 8)]
[ ---  CBRANCH (ram, 0x2071a7, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000117f, 8), (unique, 0x1000117f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4ee068, 8) , (const, 0x10, 8) , (const, 0x1, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000d23, 8) , (unique, 0x10000d2b, 8)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207196, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 1) , (register, 0x38, 1), (register, 0x98, 1) SUBPIECE (register, 0x98, 4) , (const, 0x0, 4), (register, 0x38, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x3a00, 8) CAST (unique, 0x1000118f, 8), (unique, 0x1000118f, 8) INT_ADD (unique, 0x10001187, 8) , (unique, 0x100006d0, 8), (unique, 0x10001187, 8) CAST (register, 0x90, 8), (unique, 0x100006d0, 8) INT_ADD (unique, 0x1000016e, 8) , (const, 0x9, 8), (unique, 0x1000016e, 8) INT_ZEXT (unique, 0x10000412, 4), (unique, 0x10000412, 4) INT_RIGHT (unique, 0x3100, 4) , (const, 0x3, 4), (unique, 0x3100, 4) INT_SUB (register, 0x8, 4) , (const, 0x8, 4)]
[(unique, 0x10000c13, 8) COPY (register, 0x90, 8)]
[(unique, 0x10000c3b, 8) COPY (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x207170, 1)]
[(unique, 0x10000453, 4) MULTIEQUAL (unique, 0x3100, 4) , (register, 0x30, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c3b, 8) , (register, 0x10, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100011a7, 8), (unique, 0x100011a7, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000119f, 8), (unique, 0x1000119f, 8) INT_ADD (unique, 0x10001197, 8) , (const, 0x1, 8), (unique, 0x10001197, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000c13, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x207168, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (unique, 0x3a00, 8), (register, 0x0, 8) CAST (unique, 0x1000119f, 8), (unique, 0x1000119f, 8) INT_ADD (unique, 0x10001197, 8) , (const, 0x1, 8), (unique, 0x10001197, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000c13, 8) , (register, 0x0, 8)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (unique, 0x51400, 1), (unique, 0x51400, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (unique, 0x10000453, 4) , (const, 0x0, 4), (register, 0x38, 4) INT_ZEXT (unique, 0x10000457, 1), (unique, 0x10000457, 1) INT_XOR (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000e23, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x207196, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x30, 4) INT_SUB (unique, 0x10000453, 4) , (const, 0x8, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x88, 8), (register, 0x88, 8) PTRADD (register, 0x88, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (unique, 0x10000801, 8) , (register, 0x88, 8)]
[(unique, 0x10000d23, 8) COPY (register, 0x88, 8), (register, 0x88, 8) PTRADD (register, 0x88, 8) , (const, 0x18, 8) , (const, 0x1, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (unique, 0x10000801, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x207148, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100011af, 8), (unique, 0x100011af, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x28, 8) , (const, 0x1, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (unique, 0x10000801, 8) , (register, 0x88, 8)]
[(unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SRIGHT (const, 0xff00, 4) , (unique, 0x51400, 1), (unique, 0x51400, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (register, 0x38, 4) INT_XOR (register, 0x38, 4) , (register, 0x98, 4), (register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000e2b, 8) COPY (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000d33, 8) , (register, 0x88, 8)]
[(unique, 0x10000801, 8) MULTIEQUAL (unique, 0x10000e23, 8) , (unique, 0x10000e2b, 8)]
[ ---  CBRANCH (ram, 0x2071c0, 1) , (unique, 0x10000800, 1), (unique, 0x10000800, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) MULTIEQUAL (unique, 0x59200, 4) , (unique, 0x59200, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100011b7, 8), (unique, 0x100011b7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000801, 8) , (const, 0x14, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x206cf7, 1)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[ ---  CBRANCH (ram, 0x2072f1, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (register, 0x0, 4) , (register, 0xb0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x206e60, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0xb0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x206d50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x206d50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100011c7, 8), (unique, 0x100011c7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100011bf, 8), (unique, 0x100011bf, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100011e7, 8), (unique, 0x100011e7, 8) INT_ADD (unique, 0x100011df, 8) , (const, 0x2c, 8), (unique, 0x100011df, 8) CAST (register, 0x28, 8)]
[(unique, 0x10000e33, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100011d7, 8), (unique, 0x100011d7, 8) INT_ADD (unique, 0x100011cf, 8) , (const, 0x2c, 8), (unique, 0x100011cf, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x207772, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100011d7, 8), (unique, 0x100011d7, 8) INT_ADD (unique, 0x100011cf, 8) , (const, 0x2c, 8), (unique, 0x100011cf, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x207772, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x207a47, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff90, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x207781, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4)]
[(register, 0xa8, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff90, 4) MULTIEQUAL (unique, 0x10000e33, 4) , (stack, 0xffffffffffffff90, 4)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffff94, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000d3b, 4) COPY (unique, 0xbc80, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x649, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x649, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x649, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x649, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x649, 4), (stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x649, 4), (stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x649, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x649, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x649, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x649, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x649, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x649, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x649, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x649, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x649, 4)]
[ ---  CALL (ram, 0x241f80, 8) , (register, 0xa8, 4) , (unique, 0x3800, 8) , (register, 0xb0, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4), (register, 0xb0, 4) MULTIEQUAL (unique, 0x10000d3b, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207ad1, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100011ef, 8), (unique, 0x100011ef, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2079f6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x206d3a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 4) , (const, 0xffffffff, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 8) INT_MULT (unique, 0x3880, 8) , (const, 0x10, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x10000349, 8) , (const, 0x3, 8), (unique, 0x10000349, 8) INT_MULT (register, 0x0, 8) , (const, 0x3, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x207a25, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[ ---  CBRANCH (ram, 0x207a18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100011f7, 8), (unique, 0x100011f7, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x28, 8), (unique, 0x3400, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x207a42, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100011ff, 8), (unique, 0x100011ff, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x2c, 8)]
[ ---  CBRANCH (ram, 0x207b25, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff94, 4) , (unique, 0xbc80, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x820, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x820, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x820, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff94, 4), (unique, 0x3100, 8) CAST (unique, 0x10001207, 8), (unique, 0x10001207, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x2c, 8)]
[ ---  BRANCH (ram, 0x207a18, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[ ---  CBRANCH (ram, 0x206d3a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[(register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x207a60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 4) , (const, 0xffffffff, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 8) INT_MULT (unique, 0x3880, 8) , (const, 0x10, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x10000371, 8) , (const, 0x3, 8), (unique, 0x10000371, 8) INT_MULT (register, 0x0, 8) , (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x207a85, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[ ---  CBRANCH (ram, 0x207a78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000120f, 8), (unique, 0x1000120f, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x28, 8), (unique, 0x3400, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x207aa2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001217, 8), (unique, 0x10001217, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x2c, 8)]
[ ---  CBRANCH (ram, 0x207b56, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 4) , (unique, 0xbc80, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x794, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x794, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x794, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff90, 4), (unique, 0x3100, 8) CAST (unique, 0x1000121f, 8), (unique, 0x1000121f, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x2c, 8)]
[ ---  BRANCH (ram, 0x207a78, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[ ---  CBRANCH (ram, 0x206d3a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x80, 8) INT_MULT (unique, 0x3880, 8) , (const, 0x10, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x100002a2, 8) , (const, 0x3, 8), (unique, 0x100002a2, 8) INT_MULT (register, 0x0, 8) , (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x2077f6, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[ ---  CBRANCH (ram, 0x2077e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (register, 0xa8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001227, 8), (unique, 0x10001227, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x28, 8), (unique, 0x3400, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x207983, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x207993, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000122f, 8), (unique, 0x1000122f, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x2c, 8)]
[ ---  CBRANCH (ram, 0x207b25, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x72e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x72e, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000538, 8) , (unique, 0x10000510, 8) , (const, 0x623, 4) , (unique, 0x10000570, 8), (unique, 0x10000570, 8) COPY (const, 0x2b9b90, 8), (unique, 0x10000538, 8) COPY (const, 0x2b9a70, 8), (unique, 0x10000510, 8) COPY (const, 0x2b9a08, 8)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x72e, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x72e, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x72e, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x726, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x726, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x726, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff94, 4), (unique, 0x3100, 8) CAST (unique, 0x10001237, 8), (unique, 0x10001237, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x2c, 8)]
[ ---  BRANCH (ram, 0x2077e9, 1)]
[ ---  CBRANCH (ram, 0x207812, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000123f, 8), (unique, 0x1000123f, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x2c, 8)]
[ ---  CBRANCH (ram, 0x207b56, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffff90, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x6fe, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6fe, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000530, 8) , (unique, 0x10000518, 8) , (const, 0x61d, 4) , (unique, 0x10000578, 8), (unique, 0x10000578, 8) COPY (const, 0x2b9b90, 8), (unique, 0x10000530, 8) COPY (const, 0x2b9a28, 8), (unique, 0x10000518, 8) COPY (const, 0x2b9a08, 8)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x6fe, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x6fe, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x6fe, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x6e3, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x6e3, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x6e3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff90, 4), (unique, 0x3100, 8) CAST (unique, 0x10001247, 8), (unique, 0x10001247, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x2c, 8)]
[ ---  BRANCH (ram, 0x2077e9, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[ ---  CBRANCH (ram, 0x206d3a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff94, 4) MULTIEQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x2072e9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff90, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff90, 4) MULTIEQUAL (unique, 0x10000e33, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[ ---  CBRANCH (ram, 0x206d50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff94, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x206e60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff94, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x2072f1, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESSEQUAL (unique, 0x1000124f, 4) , (unique, 0x10001253, 4), (unique, 0x10001253, 4) CAST (stack, 0xffffffffffffff5c, 4), (unique, 0x1000124f, 4) CAST (stack, 0xffffffffffffff70, 4)]
[ ---  CBRANCH (ram, 0x206e60, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (unique, 0x10001257, 4) , (unique, 0x1000125b, 4), (unique, 0x1000125b, 4) CAST (stack, 0xffffffffffffff5c, 4), (unique, 0x10001257, 4) CAST (stack, 0xffffffffffffff70, 4)]
[ ---  CBRANCH (ram, 0x20737b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001267, 8), (unique, 0x10001267, 8) INT_ADD (unique, 0x1000125f, 8) , (const, 0x25, 8), (unique, 0x1000125f, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x20737b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001277, 8), (unique, 0x10001277, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000126f, 8), (unique, 0x1000126f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x28, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2072fb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x207ade, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x2, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000127f, 8), (unique, 0x1000127f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x623, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x623, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x623, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x623, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x623, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x623, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x623, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x623, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x623, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x623, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x623, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000540, 8) , (unique, 0x10000500, 8) , (const, 0x640, 4) , (unique, 0x10000560, 8), (unique, 0x10000560, 8) COPY (const, 0x2b9b90, 8), (unique, 0x10000540, 8) COPY (const, 0x2b9ab8, 8), (unique, 0x10000500, 8) COPY (const, 0x2b9a08, 8)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x623, 4)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x623, 4)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x623, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x207b06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x2, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10001287, 8), (unique, 0x10001287, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x61a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x61a, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000548, 8) , (unique, 0x10000508, 8) , (const, 0x641, 4) , (unique, 0x10000568, 8), (unique, 0x10000568, 8) COPY (const, 0x2b9b90, 8), (unique, 0x10000548, 8) COPY (const, 0x2b9ae0, 8), (unique, 0x10000508, 8) COPY (const, 0x2b9a08, 8)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x61a, 4)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x61a, 4)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x61a, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 4) INT_AND (register, 0x30, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (register, 0x0, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (register, 0x0, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (register, 0x0, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x18, 4), (register, 0x30, 4) INT_LEFT (const, 0xffffffff, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (unique, 0x100001ae, 1) , (const, 0x1f, 1), (register, 0x0, 4) INT_XOR (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100012d7, 8), (unique, 0x100012d7, 8) INT_ADD (unique, 0x100012cf, 8) , (const, 0xc, 8), (unique, 0x100012cf, 8) CAST (register, 0x28, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100012c7, 8), (unique, 0x100012c7, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x4, 8), (unique, 0x100001ae, 1) INT_2COMP (unique, 0xba80, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100012bf, 8), (unique, 0x100012bf, 8) INT_ADD (unique, 0x100012b7, 8) , (const, 0x27, 8), (unique, 0x100012b7, 8) CAST (register, 0x28, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100012a7, 8), (unique, 0x100012a7, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x207aa7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_AND (register, 0x38, 4) , (register, 0x10, 4), (register, 0x38, 4) INT_LEFT (const, 0xffffffff, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x10, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (register, 0x10, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (register, 0x10, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (register, 0x10, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (register, 0x10, 4) , (const, 0x18, 4), (register, 0x8, 1) INT_SUB (const, 0x20, 1) , (unique, 0xba80, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100012e7, 8), (unique, 0x100012e7, 8) INT_ADD (unique, 0x100012df, 8) , (const, 0x27, 8), (unique, 0x100012df, 8) CAST (register, 0x18, 8), (register, 0x10, 4) INT_XOR (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100012af, 8), (unique, 0x100012af, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000129f, 8), (unique, 0x1000129f, 8) INT_ADD (unique, 0x10001297, 8) , (const, 0xc, 8), (unique, 0x10001297, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000128f, 8), (unique, 0x1000128f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x20737b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(register, 0x8, 4) COPY (const, 0x0, 4)]
[(register, 0x8, 4) COPY (const, 0x0, 4)]
[(register, 0x38, 4) COPY (const, 0x80000000, 4)]
[ ---  BRANCH (ram, 0x207367, 1)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x207359, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_AND (register, 0x10, 4) , (register, 0x38, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x207ab1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2072f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[(register, 0x38, 4) INT_RIGHT (register, 0x38, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x207afd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x20, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x207ab1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[(register, 0x30, 4) COPY (const, 0x80000000, 4)]
[ ---  BRANCH (ram, 0x207ac8, 1)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x207aba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_AND (register, 0x30, 4) , (register, 0x0, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(register, 0x30, 4) INT_RIGHT (register, 0x30, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x206e51, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x20, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x20737b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x207b99, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0xa, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100012ef, 8), (unique, 0x100012ef, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x490, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x490, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x490, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x490, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x490, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x490, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x490, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x490, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x490, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x490, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x490, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000550, 8) , (unique, 0x10000528, 8) , (const, 0x65f, 4) , (unique, 0x10000588, 8), (unique, 0x10000588, 8) COPY (const, 0x2b9b90, 8), (unique, 0x10000550, 8) COPY (const, 0x2b9b08, 8), (unique, 0x10000528, 8) COPY (const, 0x2b9a08, 8)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x490, 4)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x490, 4)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x490, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x207b7a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0xa, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100012f7, 8), (unique, 0x100012f7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x487, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x487, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x487, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x487, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x487, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x487, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x487, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x487, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x487, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x487, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x487, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000558, 8) , (unique, 0x10000520, 8) , (const, 0x660, 4) , (unique, 0x10000580, 8), (unique, 0x10000580, 8) COPY (const, 0x2b9b90, 8), (unique, 0x10000558, 8) COPY (const, 0x2b9b30, 8), (unique, 0x10000520, 8) COPY (const, 0x2b9a08, 8)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x487, 4)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x487, 4)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x487, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001317, 8), (unique, 0x10001317, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001327, 8), (unique, 0x10001327, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001307, 8), (unique, 0x10001307, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8)]
[(unique, 0x10000d3f, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000130f, 8), (unique, 0x1000130f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000d5f, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000131f, 8), (unique, 0x1000131f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100012ff, 8), (unique, 0x100012ff, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x206e11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000131f, 8), (unique, 0x1000131f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000130f, 8), (unique, 0x1000130f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100012ff, 8), (unique, 0x100012ff, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8)]
[(unique, 0x10000d57, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x207b4f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001347, 8), (unique, 0x10001347, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xc, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001357, 8), (unique, 0x10001357, 8) INT_ADD (unique, 0x1000134f, 8) , (const, 0x14, 8), (unique, 0x1000134f, 8) CAST (register, 0x28, 8)]
[(unique, 0x10000d43, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000133f, 8), (unique, 0x1000133f, 8) INT_ADD (unique, 0x10001337, 8) , (const, 0x14, 8), (unique, 0x10001337, 8) CAST (register, 0x18, 8)]
[(unique, 0x10000d63, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000132f, 8), (unique, 0x1000132f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xc, 8)]
[ ---  CBRANCH (ram, 0x206e11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000133f, 8), (unique, 0x1000133f, 8) INT_ADD (unique, 0x10001337, 8) , (const, 0x14, 8), (unique, 0x10001337, 8) CAST (register, 0x18, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000132f, 8), (unique, 0x1000132f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xc, 8)]
[(unique, 0x10000d47, 4) COPY (unique, 0xbc80, 4)]
[(unique, 0x10000d67, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x206e11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000136f, 8), (unique, 0x1000136f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x10, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001377, 8), (unique, 0x10001377, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x28, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x10000d4b, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001367, 8), (unique, 0x10001367, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x10000d6b, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000135f, 8), (unique, 0x1000135f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x206e11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001367, 8), (unique, 0x10001367, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000135f, 8), (unique, 0x1000135f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x10, 8)]
[(unique, 0x10000d4f, 4) COPY (unique, 0xbc80, 4)]
[(unique, 0x10000d6f, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x206e11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001397, 8), (unique, 0x10001397, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x14, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100013a7, 8), (unique, 0x100013a7, 8) INT_ADD (unique, 0x1000139f, 8) , (const, 0x1c, 8), (unique, 0x1000139f, 8) CAST (register, 0x28, 8)]
[(unique, 0x10000d5b, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000138f, 8), (unique, 0x1000138f, 8) INT_ADD (unique, 0x10001387, 8) , (const, 0x1c, 8), (unique, 0x10001387, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x207b44, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000138f, 8), (unique, 0x1000138f, 8) INT_ADD (unique, 0x10001387, 8) , (const, 0x1c, 8), (unique, 0x10001387, 8) CAST (register, 0x18, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000137f, 8), (unique, 0x1000137f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x14, 8)]
[(unique, 0x10000d53, 4) COPY (unique, 0xbc80, 4)]
[(unique, 0x10000d73, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x20737b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x30, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x10, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x38, 4) COPY (const, 0x80000000, 4)]
[(register, 0x8, 4) COPY (const, 0x0, 4)]
[(register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (register, 0x0, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (register, 0x0, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (register, 0x0, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x18, 4), (register, 0x0, 4) INT_XOR (register, 0x0, 4) , (register, 0x8, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10000d5f, 4) , (unique, 0x10000d63, 4) , (unique, 0x10000d67, 4) , (unique, 0x10000d6b, 4) , (unique, 0x10000d6f, 4) , (unique, 0x10000d73, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0x10000d3f, 4) , (unique, 0x10000d43, 4) , (unique, 0x10000d47, 4) , (unique, 0x10000d4b, 4) , (unique, 0x10000d4f, 4) , (unique, 0x10000d53, 4) , (unique, 0x10000d57, 4) , (unique, 0x10000d5b, 4)]
[ ---  BRANCH (ram, 0x206e28, 1)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x206e1e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_AND (register, 0x0, 4) , (register, 0x38, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x38, 4) INT_RIGHT (register, 0x38, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x206e2c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x20, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0x1, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[(register, 0x30, 4) COPY (const, 0x80000000, 4)]
[(register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (register, 0x0, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (register, 0x0, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (register, 0x0, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x18, 4), (register, 0x0, 4) INT_XOR (register, 0x10, 4) , (register, 0x30, 4)]
[ ---  BRANCH (ram, 0x206e45, 1)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x206e3b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_AND (register, 0x0, 4) , (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x2072f1, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(register, 0x30, 4) INT_RIGHT (register, 0x30, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x206e51, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x20, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x20737b, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESSEQUAL (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x206e60, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x206e65, 1)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff94, 4) MULTIEQUAL (stack, 0xffffffffffffff94, 4) , (stack, 0xffffffffffffff94, 4)]
[(stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x207b75, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100013af, 8), (unique, 0x100013af, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x41f, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x41f, 4)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x41f, 4)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x41f, 4)]
[ ---  RETURN (const, 0x1, 4)]
