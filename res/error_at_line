[ ---  CBRANCH (ram, 0x21ec10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(unique, 0x100002b4, 4) COPY (register, 0x1200, 4)]
[(unique, 0x100002b8, 4) COPY (register, 0x1220, 4)]
[(unique, 0x100002bc, 4) COPY (register, 0x1240, 4)]
[(unique, 0x100002c0, 4) COPY (register, 0x1260, 4)]
[(unique, 0x100002c4, 4) COPY (register, 0x1280, 4)]
[(unique, 0x100002c8, 4) COPY (register, 0x12a0, 4)]
[(unique, 0x100002cc, 4) COPY (register, 0x12c0, 4)]
[(unique, 0x100002d0, 4) COPY (register, 0x12e0, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (unique, 0x100002d0, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (unique, 0x100002cc, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (unique, 0x100002c8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (unique, 0x100002c4, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (unique, 0x100002c0, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0x100002bc, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x100002b8, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x100002b4, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002d4, 8), (unique, 0x100002d4, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x1000022c, 8) COPY (ram, 0x4ee400, 8)]
[(unique, 0x1000026c, 4) COPY (ram, 0x4ee408, 4)]
[(unique, 0x10000294, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x21ec46, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100002dc, 8), (unique, 0x100002dc, 8) CAST (ram, 0x4eadb8, 8)]
[(unique, 0x10000234, 8) COPY (unique, 0x1000020c, 8), (unique, 0x1000020c, 8) COPY (register, 0x10, 8)]
[(unique, 0x10000270, 4) COPY (unique, 0x1000025c, 4), (unique, 0x1000025c, 4) COPY (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x21ed40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee408, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x21ed1f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee400, 8) , (register, 0x10, 8)]
[(unique, 0x1000023c, 8) COPY (unique, 0x10000214, 8), (unique, 0x10000214, 8) COPY (register, 0x10, 8)]
[(unique, 0x10000274, 4) COPY (unique, 0x10000260, 4), (unique, 0x10000260, 4) COPY (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x21ec39, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(unique, 0x10000244, 8) COPY (unique, 0x1000021c, 8), (unique, 0x1000021c, 8) COPY (register, 0x10, 8)]
[(unique, 0x10000278, 4) COPY (unique, 0x10000264, 4), (unique, 0x10000264, 4) COPY (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x21ec39, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ee400, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a2, 4)]
[(ram, 0x4eadb8, 8) INDIRECT (ram, 0x4eadb8, 8) , (const, 0x1a2, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0x1a2, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0x1a2, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0x1a2, 4)]
[(ram, 0x4ee400, 8) INDIRECT (ram, 0x4ee400, 8) , (const, 0x1a2, 4)]
[(ram, 0x4ee408, 4) INDIRECT (ram, 0x4ee408, 4) , (const, 0x1a2, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0x1a2, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x10000294, 8) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x1a2, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x1a2, 4)]
[(unique, 0x1000024c, 8) COPY (unique, 0x10000224, 8), (unique, 0x10000224, 8) COPY (register, 0x10, 8)]
[(unique, 0x1000027c, 4) COPY (unique, 0x10000268, 4), (unique, 0x10000268, 4) COPY (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x21ed1f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (ram, 0x4ee400, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x10000294, 8) , (unique, 0x10000294, 8) , (unique, 0x10000294, 8) , (unique, 0x10000294, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffff20, 8)]
[(ram, 0x4f0858, 8) MULTIEQUAL (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8)]
[(ram, 0x4eaf90, 8) MULTIEQUAL (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8)]
[(ram, 0x4eaf50, 8) MULTIEQUAL (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8)]
[(ram, 0x4eaf40, 8) MULTIEQUAL (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8)]
[(ram, 0x4eadb8, 8) MULTIEQUAL (ram, 0x4eadb8, 8) , (ram, 0x4eadb8, 8) , (ram, 0x4eadb8, 8) , (ram, 0x4eadb8, 8) , (ram, 0x4eadb8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ee408, 4) COPY (unique, 0x10000280, 4), (unique, 0x10000280, 4) MULTIEQUAL (unique, 0x1000026c, 4) , (unique, 0x10000270, 4) , (unique, 0x10000274, 4) , (unique, 0x10000278, 4) , (unique, 0x1000027c, 4)]
[(ram, 0x4ee400, 8) COPY (unique, 0x10000254, 8), (unique, 0x10000254, 8) MULTIEQUAL (unique, 0x1000022c, 8) , (unique, 0x10000234, 8) , (unique, 0x1000023c, 8) , (unique, 0x10000244, 8) , (unique, 0x1000024c, 8)]
[(stack, 0xffffffffffffff04, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x21ec78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08e8, 4) , (const, 0x0, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa3, 4)]
[(ram, 0x4eadb8, 8) INDIRECT (ram, 0x4eadb8, 8) , (const, 0xa3, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0xa3, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0xa3, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0xa3, 4)]
[(ram, 0x4ee400, 8) INDIRECT (ram, 0x4ee400, 8) , (const, 0xa3, 4)]
[(ram, 0x4ee408, 4) INDIRECT (ram, 0x4ee408, 4) , (const, 0xa3, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0xa3, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xa3, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xa3, 4)]
[ ---  CALLIND (register, 0x0, 8) , (const, 0x1, 8) , (unique, 0x3800, 8), (register, 0x0, 8) CAST (unique, 0x100002ec, 8), (unique, 0x100002ec, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002e4, 8), (unique, 0x100002e4, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f0858, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f0858, 8) , (const, 0x11, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff04, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eadb8, 8) INDIRECT (ram, 0x4eadb8, 8) , (const, 0xa9, 4), (ram, 0x4eadb8, 8) MULTIEQUAL (ram, 0x4eadb8, 8) , (ram, 0x4eadb8, 8)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0xa9, 4), (ram, 0x4eaf40, 8) MULTIEQUAL (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0xa9, 4), (ram, 0x4eaf90, 8) MULTIEQUAL (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8)]
[(ram, 0x4ee400, 8) INDIRECT (ram, 0x4ee400, 8) , (const, 0xa9, 4), (ram, 0x4ee400, 8) MULTIEQUAL (ram, 0x4ee400, 8) , (ram, 0x4ee400, 8)]
[(ram, 0x4ee408, 4) INDIRECT (ram, 0x4ee408, 4) , (const, 0xa9, 4), (ram, 0x4ee408, 4) MULTIEQUAL (ram, 0x4ee408, 4) , (ram, 0x4ee408, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0xa9, 4), (ram, 0x4f0858, 8) MULTIEQUAL (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xa9, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0xa9, 4), (stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xa9, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa9, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xa9, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xa9, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xa9, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xa9, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xa9, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xa9, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xa9, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xa9, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[ ---  CALL (ram, 0x17e7e0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002f4, 8), (unique, 0x100002f4, 8) CAST (ram, 0x4eaf40, 8), (ram, 0x4eaf40, 8) MULTIEQUAL (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8)]
[ ---  CBRANCH (ram, 0x21ed70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002fc, 8), (unique, 0x100002fc, 8) CAST (ram, 0x4eaf50, 8), (ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0xa9, 4), (ram, 0x4eaf50, 8) MULTIEQUAL (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17e, 4)]
[(ram, 0x4eadb8, 8) INDIRECT (ram, 0x4eadb8, 8) , (const, 0x17e, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0x17e, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0x17e, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0x17e, 4)]
[(ram, 0x4ee400, 8) INDIRECT (ram, 0x4ee400, 8) , (const, 0x17e, 4)]
[(ram, 0x4ee408, 4) INDIRECT (ram, 0x4ee408, 4) , (const, 0x17e, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0x17e, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x17e, 4)]
[ ---  CALL (ram, 0x17ddd0, 8) , (const, 0x0, 8) , (unique, 0x100001dd, 8) , (unique, 0xbd80, 8), (unique, 0x100001dd, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b667e, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000304, 8), (unique, 0x10000304, 8) CAST (ram, 0x4eaf90, 8)]
[ ---  BRANCH (ram, 0x21ec9c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb9, 4)]
[(ram, 0x4eadb8, 8) INDIRECT (ram, 0x4eadb8, 8) , (const, 0xb9, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0xb9, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0xb9, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0xb9, 4)]
[(ram, 0x4ee400, 8) INDIRECT (ram, 0x4ee400, 8) , (const, 0xb9, 4)]
[(ram, 0x4ee408, 4) INDIRECT (ram, 0x4ee408, 4) , (const, 0xb9, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0xb9, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xb9, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xb9, 4)]
[ ---  CALLIND (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0858, 8) MULTIEQUAL (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8)]
[(ram, 0x4ee408, 4) MULTIEQUAL (ram, 0x4ee408, 4) , (ram, 0x4ee408, 4)]
[(ram, 0x4ee400, 8) MULTIEQUAL (ram, 0x4ee400, 8) , (ram, 0x4ee400, 8)]
[(ram, 0x4eaf90, 8) MULTIEQUAL (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8)]
[(ram, 0x4eaf50, 8) MULTIEQUAL (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8)]
[(ram, 0x4eaf40, 8) MULTIEQUAL (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8)]
[(ram, 0x4eadb8, 8) MULTIEQUAL (ram, 0x4eadb8, 8) , (ram, 0x4eadb8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) COPY (const, 0x2b5903, 8)]
[ ---  CBRANCH (ram, 0x21ecb6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) COPY (const, 0x2b3ed4, 8)]
[ ---  CALL (ram, 0x17ddd0, 8) , (const, 0x0, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x8, 4), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfb, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe1, 4)]
[(ram, 0x4eadb8, 8) INDIRECT (ram, 0x4eadb8, 8) , (const, 0xfb, 4), (ram, 0x4eadb8, 8) INDIRECT (ram, 0x4eadb8, 8) , (const, 0xe1, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0xfb, 4), (ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0xe1, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0xfb, 4), (ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0xe1, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0xfb, 4), (ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0xe1, 4)]
[(ram, 0x4ee400, 8) INDIRECT (ram, 0x4ee400, 8) , (const, 0xfb, 4), (ram, 0x4ee400, 8) INDIRECT (ram, 0x4ee400, 8) , (const, 0xe1, 4)]
[(ram, 0x4ee408, 4) INDIRECT (ram, 0x4ee408, 4) , (const, 0xfb, 4), (ram, 0x4ee408, 4) INDIRECT (ram, 0x4ee408, 4) , (const, 0xe1, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0xfb, 4), (ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffff08, 4) COPY (const, 0x28, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffff0c, 4) COPY (const, 0x30, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0xfb, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x3800, 8) , (const, 0xfb, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xfb, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xfb, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xe1, 4)]
[ ---  CALL (ram, 0x21e810, 8) , (register, 0x38, 4) , (register, 0x30, 4) , (register, 0x80, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[ ---  CBRANCH (ram, 0x21ed1f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08e8, 4) , (const, 0x0, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xfb, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xe1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x138, 4)]
[(ram, 0x4eadb8, 8) INDIRECT (ram, 0x4eadb8, 8) , (const, 0x138, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0x138, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0x138, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0x138, 4)]
[(ram, 0x4ee400, 8) INDIRECT (ram, 0x4ee400, 8) , (const, 0x138, 4)]
[(ram, 0x4ee408, 4) INDIRECT (ram, 0x4ee408, 4) , (const, 0x138, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0x138, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x138, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x138, 4)]
[ ---  CALLIND (register, 0x0, 8) , (stack, 0xffffffffffffff04, 4) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000314, 8), (unique, 0x10000314, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000030c, 8), (unique, 0x1000030c, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f0858, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f0858, 8) , (const, 0x11, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (unique, 0x10000294, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xffffffffffffff04, 4) MULTIEQUAL (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4) , (stack, 0xffffffffffffff04, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0858, 8) MULTIEQUAL (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8)]
[(ram, 0x4ee408, 4) MULTIEQUAL (ram, 0x4ee408, 4) , (ram, 0x4ee408, 4) , (ram, 0x4ee408, 4) , (ram, 0x4ee408, 4)]
[(ram, 0x4ee400, 8) MULTIEQUAL (ram, 0x4ee400, 8) , (ram, 0x4ee400, 8) , (ram, 0x4ee400, 8) , (ram, 0x4ee400, 8)]
[(ram, 0x4eaf90, 8) MULTIEQUAL (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8)]
[(ram, 0x4eaf50, 8) MULTIEQUAL (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8)]
[(ram, 0x4eaf40, 8) MULTIEQUAL (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8)]
[(ram, 0x4eadb8, 8) MULTIEQUAL (ram, 0x4eadb8, 8) , (ram, 0x4eadb8, 8) , (ram, 0x4eadb8, 8) , (ram, 0x4eadb8, 8)]
[ ---  CBRANCH (ram, 0x21ed8f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff20, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000031c, 8), (unique, 0x1000031c, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffff20, 8)]
[(ram, 0x4eadb8, 8) COPY (ram, 0x4eadb8, 8)]
[(ram, 0x4eaf40, 8) COPY (ram, 0x4eaf40, 8)]
[(ram, 0x4eaf50, 8) COPY (ram, 0x4eaf50, 8)]
[(ram, 0x4eaf90, 8) COPY (ram, 0x4eaf90, 8)]
[(ram, 0x4ee400, 8) COPY (ram, 0x4ee400, 8)]
[(ram, 0x4ee408, 4) COPY (ram, 0x4ee408, 4)]
[(ram, 0x4f0858, 8) COPY (ram, 0x4f0858, 8)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(stack, 0xffffffffffffff04, 4) INDIRECT (stack, 0xffffffffffffff04, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff08, 4) INDIRECT (stack, 0xffffffffffffff08, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x161, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x161, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eadb8, 8) COPY (ram, 0x4eadb8, 8), (ram, 0x4eadb8, 8) INDIRECT (ram, 0x4eadb8, 8) , (const, 0x161, 4)]
[(ram, 0x4eaf40, 8) COPY (ram, 0x4eaf40, 8), (ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0x161, 4)]
[(ram, 0x4eaf50, 8) COPY (ram, 0x4eaf50, 8), (ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0x161, 4)]
[(ram, 0x4eaf90, 8) COPY (ram, 0x4eaf90, 8), (ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0x161, 4)]
[(ram, 0x4ee400, 8) COPY (ram, 0x4ee400, 8), (ram, 0x4ee400, 8) INDIRECT (ram, 0x4ee400, 8) , (const, 0x161, 4)]
[(ram, 0x4ee408, 4) COPY (ram, 0x4ee408, 4), (ram, 0x4ee408, 4) INDIRECT (ram, 0x4ee408, 4) , (const, 0x161, 4)]
[(ram, 0x4f0858, 8) COPY (ram, 0x4f0858, 8), (ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0x161, 4)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x161, 4)]
[ ---  RETURN (const, 0x1, 4)]
