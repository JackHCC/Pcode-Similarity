[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000025e, 8), (unique, 0x1000025e, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffdd60, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x24e740, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x18b, 4)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x18b, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x18b, 4)]
[ ---  CBRANCH (ram, 0x24e7db, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x259cd0, 8) , (register, 0x30, 8) , (unique, 0x100001a0, 8) , (const, 0x0, 8), (unique, 0x100001a0, 8) PTRSUB (const, 0x0, 8) , (const, 0x25c4f0, 8)]
[ ---  CALL (ram, 0x210140, 8) , (const, 0x2, 4) , (unique, 0x100001c8, 8) , (const, 0x4, 8), (unique, 0x100001c8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b7141, 8)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x19f, 4), (stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x19b, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x19f, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x19b, 4)]
[ ---  CALL (ram, 0x143120, 8) , (const, 0x1, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3d, 4)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x3d, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3d, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000266, 8), (unique, 0x10000266, 8) INT_ADD (register, 0x0, 8) , (const, 0xf8, 8), (register, 0x0, 8) CALL (ram, 0x259600, 8)]
[(unique, 0x1000018a, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x24e669, 1) , (unique, 0x10000258, 1), (unique, 0x10000258, 1) INT_EQUAL (unique, 0x10000250, 8) , (const, 0x0, 8), (unique, 0x10000250, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x24e660, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0x1000018a, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000026e, 8), (unique, 0x1000026e, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000250, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x24e660, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (register, 0xa0, 4), (register, 0xa0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000027e, 8), (unique, 0x1000027e, 8) INT_ADD (unique, 0x10000276, 8) , (const, 0xc, 8), (unique, 0x10000276, 8) CAST (unique, 0x10000250, 8)]
[ ---  CALL (ram, 0x1211f0, 8) , (unique, 0x3800, 8) , (const, 0x0, 4) , (const, 0x2260, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffdd68, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe6, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0xe6, 4), (stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xe6, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xd9, 4)]
[ ---  CBRANCH (ram, 0x24e7aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x30, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000250, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffdd68, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16e, 4)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x16e, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x16e, 4)]
[ ---  CALL (ram, 0x259db0, 8) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x24e759, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf5, 4)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0xf5, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xf5, 4)]
[ ---  CBRANCH (ram, 0x24e798, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000286, 8), (unique, 0x10000286, 8) CALLIND (unique, 0xbd80, 8) , (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000250, 8)]
[(register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x25c4f0, 8)]
[ ---  CBRANCH (ram, 0x24e759, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x10000198, 8), (unique, 0x10000198, 8) PTRSUB (const, 0x0, 8) , (const, 0x25c4f0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000250, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000250, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x107, 4)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x107, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x107, 4)]
[ ---  CBRANCH (ram, 0x24e7b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x259cd0, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x0, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x154, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x154, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000296, 8), (unique, 0x10000296, 8) CALL (ram, 0x130d70, 8) , (unique, 0x100001b0, 8) , (unique, 0x100001d0, 8) , (const, 0x5, 8), (unique, 0x100001d0, 8) COPY (const, 0x2b7146, 8), (unique, 0x100001b0, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[(register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000028e, 8), (unique, 0x1000028e, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000250, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x24e700, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x11e, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x30, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000250, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x24e759, 1)]
[(stack, 0xffffffffffffdd60, 8) MULTIEQUAL (stack, 0xffffffffffffdd60, 8) , (stack, 0xffffffffffffdd60, 8) , (stack, 0xffffffffffffdd60, 8) , (stack, 0xffffffffffffdd60, 8)]
[ ---  CBRANCH (ram, 0x24e7fb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000029e, 8), (unique, 0x1000029e, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x148, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x148, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100002a6, 8), (unique, 0x100002a6, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000250, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x54, 4)]
[(register, 0x0, 8) CAST (unique, 0x100002ae, 8), (unique, 0x100002ae, 8) CALL (ram, 0x130d70, 8) , (unique, 0x100001a8, 8) , (unique, 0x100001d8, 8) , (const, 0x5, 8), (unique, 0x100001d8, 8) COPY (const, 0x2b7163, 8), (unique, 0x100001a8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[(register, 0x10, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xffffffff, 8)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x66, 4), (stack, 0xffffffffffffdd60, 8) MULTIEQUAL (stack, 0xffffffffffffdd60, 8) , (stack, 0xffffffffffffdd60, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x66, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CBRANCH (ram, 0x24e780, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1650c0, 8) , (register, 0x38, 8) , (register, 0x0, 8) , (register, 0x10, 8), (register, 0x38, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffdd60, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffdd60, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x24e789, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffdd60, 8) , (const, 0x0, 8)]
[ ---  CALL (ram, 0x17ddd0, 8) , (const, 0x0, 8) , (unique, 0x100001c0, 8), (unique, 0x100001c0, 8) COPY (const, 0x2b6796, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffdd60, 8), (stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x95, 4)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x9b, 4), (stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0x95, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x9b, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x95, 4)]
[ ---  CALL (ram, 0x143120, 8) , (const, 0x1, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffdd60, 8) INDIRECT (stack, 0xffffffffffffdd60, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffdd60, 8) MULTIEQUAL (stack, 0xffffffffffffdd60, 8) , (stack, 0xffffffffffffdd60, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xa5, 4)]
[ ---  CALL (ram, 0x143120, 8) , (const, 0x1, 4)]
[ ---  RETURN (const, 0x1, 4)]
