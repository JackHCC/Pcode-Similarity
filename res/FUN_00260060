[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000033b, 8), (unique, 0x1000033b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x206, 1) INT_EQUAL (ram, 0x4f0aa4, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2604e0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (ram, 0x4f0aa4, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x260500, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3c9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3c9, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x3c9, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3c9, 4)]
[ ---  CBRANCH (ram, 0x260537, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1426e0, 8) , (unique, 0x10000291, 8), (unique, 0x10000291, 8) COPY (const, 0x2b6e1a, 8)]
[(ram, 0x4f0aa4, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x260097, 1)]
[(register, 0x28, 4) COPY (const, 0x0, 4)]
[(unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x54, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x54, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x54, 4), (ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x4a, 4), (ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x54, 4), (ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x4a, 4), (ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x54, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x4a, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x54, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x4a, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x54, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x4a, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x54, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000343, 8), (unique, 0x10000343, 8) CALL (ram, 0x2625e0, 8) , (const, 0xd, 8) , (unique, 0x10000289, 8) , (unique, 0x10000299, 8) , (unique, 0x3800, 8), (unique, 0x10000299, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f0ab0, 8), (unique, 0x10000289, 8) COPY (const, 0x2b56b4, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x2601c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0xffffffffffffffff, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6b, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x6b, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x6b, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x6b, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x6b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x6b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6b, 4)]
[ ---  CBRANCH (ram, 0x2601c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x262700, 8) , (const, 0xe, 8) , (register, 0x38, 8) , (unique, 0x3100, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000034b, 8), (unique, 0x1000034b, 8) INT_ADD (register, 0x0, 8) , (const, 0x28, 8)]
[(unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000353, 8), (unique, 0x10000353, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8)]
[(register, 0x10, 4) COPY (const, 0xfffffffe, 4)]
[ ---  CBRANCH (ram, 0x260260, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffa4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000035b, 8), (unique, 0x1000035b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2603e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffac, 4) , (const, 0x1, 4), (stack, 0xffffffffffffffac, 4) SUBPIECE (unique, 0x100002eb, 16) , (const, 0x0, 4), (unique, 0x100002eb, 16) INT_RIGHT (unique, 0x5300, 16) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x2604cf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffac, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4f0aa0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x2602a4, 1)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (stack, 0xffffffffffffffbc, 4), (stack, 0xffffffffffffffbc, 4) SUBPIECE (unique, 0x1000031b, 8) , (const, 0x0, 4), (unique, 0x1000031b, 8) INT_RIGHT (unique, 0x10000363, 8) , (const, 0x20, 4), (unique, 0x10000363, 8) CAST (unique, 0xbd80, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3be, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3ba, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x3be, 4), (ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x3ba, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x3be, 4), (ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x3ba, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000036b, 8) , (const, 0x0, 4), (unique, 0x1000036b, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3ba, 4)]
[ ---  BRANCH (ram, 0x2602a4, 1)]
[ ---  CBRANCH (ram, 0x260546, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (unique, 0x3400, 8) , (unique, 0x1000038b, 8), (unique, 0x1000038b, 8) CAST (unique, 0x3a00, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x10000383, 8) , (register, 0x80, 8), (unique, 0x10000383, 8) CAST (unique, 0x3100, 8), (register, 0x80, 8) INT_SEXT (register, 0x80, 4), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x88, 8), (unique, 0x3880, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x80, 4) INT_ADD (unique, 0x3400, 4) , (stack, 0xffffffffffffffb8, 4), (unique, 0x3400, 4) INT_ADD (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb4, 4), (register, 0x88, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000037b, 8), (unique, 0x1000037b, 8) INT_ADD (register, 0x0, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffb8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000373, 8), (unique, 0x10000373, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8), (stack, 0xffffffffffffffb4, 4) SUBPIECE (unique, 0x1000030b, 16) , (const, 0x0, 4), (unique, 0x1000030b, 16) INT_RIGHT (unique, 0x5300, 16) , (const, 0x60, 4), (stack, 0xffffffffffffffb0, 4) SUBPIECE (unique, 0x100002fb, 16) , (const, 0x0, 4), (unique, 0x100002fb, 16) INT_RIGHT (unique, 0x5300, 16) , (const, 0x40, 4)]
[(register, 0x8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x2602fa, 1)]
[(register, 0x10, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (stack, 0xffffffffffffffac, 4)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x26023c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (unique, 0x5300, 16) , (stack, 0xffffffffffffffa8, 16)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x260168, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffa4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000393, 8), (unique, 0x10000393, 8) INT_ADD (register, 0x30, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xba, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0xba, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0xba, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003a3, 8) , (unique, 0xbd00, 4), (unique, 0x100003a3, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000039b, 8), (unique, 0x1000039b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2602b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003ab, 8), (unique, 0x100003ab, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf7, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0xf7, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0xf7, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xf7, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xf7, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xf7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf7, 4)]
[ ---  CALL (ram, 0x262050, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x26013c, 1)]
[(unique, 0x10000337, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x260198, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000010d, 4) , (const, 0x0, 4), (unique, 0x1000010d, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x260198, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 4) , (const, 0x5, 4), (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x2602c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0xffffffff, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x134, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x134, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x134, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003bb, 8) , (unique, 0xbd00, 4), (unique, 0x100003bb, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003b3, 8), (unique, 0x100003b3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x260410, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003c3, 8), (unique, 0x100003c3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x126, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x12a, 4), (ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x126, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x12a, 4), (ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x126, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0x10000337, 4) , (const, 0x12a, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x12a, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x12a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12a, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x2600ce, 1)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x33b, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x33b, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x33b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003d3, 8) , (unique, 0xbd00, 4), (unique, 0x100003d3, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003cb, 8), (unique, 0x100003cb, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2602cb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003db, 8), (unique, 0x100003db, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x146, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x146, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x146, 4), (ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x146, 4), (ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x146, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x146, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x146, 4)]
[ ---  CALL (ram, 0x262050, 8) , (register, 0x18, 8)]
[(unique, 0x1000032b, 4) COPY (stack, 0xffffffffffffffa4, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0x10000337, 4) , (const, 0x146, 4)]
[ ---  BRANCH (ram, 0x2601a3, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x1000032b, 4) , (unique, 0x10000337, 4)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x260410, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x10000337, 4) , (stack, 0xffffffffffffffa4, 4)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x26013c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x18, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x15c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x157, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x15c, 4), (ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x157, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x15c, 4), (ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x157, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15c, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xb8, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x165, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x165, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x165, 4), (ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x165, 4), (ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x165, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x165, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x165, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x165, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x260248, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x2628a0, 8) , (register, 0x38, 8) , (unique, 0x3100, 8) , (const, 0xe, 8)]
[(ram, 0x4f0aa0, 4) COPY (const, 0x1, 4)]
[(register, 0x10, 4) COPY (const, 0xffffffff, 4)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x260226, 1)]
[ ---  CBRANCH (ram, 0x2602e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffac, 4) , (const, 0x1, 4), (stack, 0xffffffffffffffac, 4) SUBPIECE (stack, 0xffffffffffffffa8, 16) , (const, 0x4, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x80, 8) INT_SEXT (register, 0x80, 4), (register, 0x80, 4) INT_ADD (unique, 0x3400, 4) , (stack, 0xffffffffffffffb8, 4), (unique, 0x3400, 4) INT_ADD (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb4, 4), (stack, 0xffffffffffffffb8, 4) SUBPIECE (stack, 0xffffffffffffffb8, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb4, 4) SUBPIECE (stack, 0xffffffffffffffa8, 16) , (const, 0xc, 8), (stack, 0xffffffffffffffb0, 4) SUBPIECE (stack, 0xffffffffffffffa8, 16) , (const, 0x8, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x8, 4)]
[(register, 0x98, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(register, 0x90, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3100, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x214, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x214, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x214, 4), (ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x214, 4), (ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x214, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x214, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (unique, 0x5300, 16)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x214, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x214, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[ ---  CBRANCH (ram, 0x2604a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100003e3, 8), (unique, 0x100003e3, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x80, 8) , (const, 0x20, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x10, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x322, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x322, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x322, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x2603c8, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x98, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003f3, 8) , (unique, 0x3100, 8), (unique, 0x100003f3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x4, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x250, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x24d, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x238, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x250, 4), (ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x24d, 4), (ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x238, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x250, 4), (ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x24d, 4), (ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x238, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003fb, 8) , (register, 0x10, 8), (unique, 0x100003fb, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (unique, 0x100003eb, 8), (unique, 0x100003eb, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x260440, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x30f, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x30f, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x30f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000403, 8) , (const, 0x0, 8), (unique, 0x10000403, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x2604b5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x318, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x318, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x318, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x318, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x318, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x318, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x318, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x318, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3100, 8) , (register, 0x30, 8) , (register, 0x80, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x267, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x267, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x267, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000040b, 8) , (register, 0x88, 8), (unique, 0x1000040b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x88, 8) INT_ADD (register, 0x88, 8) , (register, 0x10, 8), (register, 0x88, 8) INT_SEXT (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x26044d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2e0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2e0, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x2e0, 4), (ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x2e0, 4), (ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2e0, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2e0, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2e0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2e0, 4)]
[ ---  CBRANCH (ram, 0x2604c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0x80, 8), (register, 0x0, 8) CALL (ram, 0x261ba0, 8) , (register, 0x8, 4) , (unique, 0x3100, 8) , (register, 0x80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f8, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2f8, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2f8, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2f8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f8, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x0, 8)]
[(register, 0x10, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x302, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2f8, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x302, 4), (ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x2f8, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x302, 4), (ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x2f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x2603c8, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x275, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x275, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x275, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x275, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x275, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x275, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x275, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x275, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3100, 8) , (register, 0x30, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x2604c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2604c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000413, 8), (unique, 0x10000413, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x90, 8), (unique, 0x3880, 8) INT_ADD (register, 0x88, 8) , (const, 0xffffffffffffffff, 8), (register, 0x90, 8) INT_SEXT (register, 0x90, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2c8, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x2c8, 4), (ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x2c8, 4), (ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x0, 8)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x2603c8, 1)]
[(register, 0x10, 4) COPY (const, 0xfffffffe, 4)]
[ ---  CBRANCH (ram, 0x26051d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffa4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000041b, 8), (unique, 0x1000041b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2c0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2c0, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x2c0, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x2c0, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2c0, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2c0, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2c0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c0, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x0, 8)]
[(register, 0x10, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x2603c8, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x260226, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x260420, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffac, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4f0aa0, 4) COPY (const, 0x1, 4)]
[(register, 0x10, 4) COPY (const, 0xffffffff, 4)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x260217, 1)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (stack, 0xffffffffffffffbc, 4), (stack, 0xffffffffffffffbc, 4) SUBPIECE (stack, 0xffffffffffffffb8, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1aa, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1a6, 4)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x1aa, 4), (ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x1a6, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x1aa, 4), (ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x1a6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000423, 8) , (const, 0x0, 4), (unique, 0x10000423, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1a6, 4)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0x0, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b2, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b2, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0x1b2, 4), (ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0x1b2, 4), (ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x1b2, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1b2, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1b2, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b2, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x0, 8) , (register, 0xb8, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x260238, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0xffffffffffffffff, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (unique, 0x5300, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x260127, 1)]
[(ram, 0x4f0aa4, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x2604e2, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4f0aa0, 4) COPY (const, 0x1, 4)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x26013c, 1)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(ram, 0x4f0aa4, 4) MULTIEQUAL (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4) , (ram, 0x4f0aa4, 4)]
[(ram, 0x4f0aa0, 4) MULTIEQUAL (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4) , (ram, 0x4f0aa0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x26054e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000042b, 8), (unique, 0x1000042b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4f0aa0, 4) COPY (ram, 0x4f0aa0, 4)]
[(ram, 0x4f0aa4, 4) COPY (ram, 0x4f0aa4, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf1, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf1, 4)]
[(ram, 0x4f0aa0, 4) COPY (ram, 0x4f0aa0, 4), (ram, 0x4f0aa0, 4) INDIRECT (ram, 0x4f0aa0, 4) , (const, 0xf1, 4)]
[(ram, 0x4f0aa4, 4) COPY (ram, 0x4f0aa4, 4), (ram, 0x4f0aa4, 4) INDIRECT (ram, 0x4f0aa4, 4) , (const, 0xf1, 4)]
[ ---  RETURN (const, 0x1, 4)]
