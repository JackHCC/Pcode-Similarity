[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000008a, 8), (unique, 0x1000008a, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x466876, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7df0, 8) , (const, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x46683c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x33, 4)]
[(ram, 0x4c7df0, 8) INDIRECT (ram, 0x4c7df0, 8) , (const, 0x33, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x33, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x33, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x33, 4)]
[ ---  CBRANCH (ram, 0x466858, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x466380, 8) , (register, 0x38, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7b, 4)]
[(ram, 0x4c7df0, 8) INDIRECT (ram, 0x4c7df0, 8) , (const, 0x7b, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x7b, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x7b, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x7b, 4)]
[ ---  CBRANCH (ram, 0x46682d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x466380, 8) , (register, 0x30, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8)]
[(ram, 0x4c7df0, 8) INDIRECT (ram, 0x4c7df0, 8) , (const, 0x99, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x10, 4), (register, 0x10, 4) INT_SUB (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd8, 4)]
[ ---  BRANCH (ram, 0x46683c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x42, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x42, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(ram, 0x4c7df0, 8) INDIRECT (ram, 0x4c7df0, 8) , (const, 0x44, 4), (ram, 0x4c7df0, 8) INDIRECT (ram, 0x4c7df0, 8) , (const, 0x42, 4), (ram, 0x4c7df0, 8) MULTIEQUAL (ram, 0x4c7df0, 8) , (ram, 0x4c7df0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x401140, 8) , (register, 0x38, 8) , (register, 0x30, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c7df0, 8) MULTIEQUAL (ram, 0x4c7df0, 8) , (ram, 0x4c7df0, 8) , (ram, 0x4c7df0, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46687d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000092, 8), (unique, 0x10000092, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x73, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c7df0, 8) COPY (ram, 0x4c7df0, 8), (ram, 0x4c7df0, 8) INDIRECT (ram, 0x4c7df0, 8) , (const, 0x73, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c7df0, 8) COPY (ram, 0x4c7df0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
