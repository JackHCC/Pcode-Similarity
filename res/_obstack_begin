[ ---  CBRANCH (ram, 0x1887d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0xa0, 8) COPY (const, 0xfffffffffffffff0, 8)]
[(register, 0x28, 8) COPY (const, 0xf, 8)]
[(register, 0x88, 4) COPY (const, 0xf, 4)]
[ ---  BRANCH (ram, 0x18876b, 1)]
[(register, 0xa0, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) INT_2COMP (register, 0x10, 4)]
[(register, 0x28, 8) INT_SEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (register, 0x10, 4) , (const, 0xffffffff, 4)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[(register, 0x0, 8) INT_SEXT (register, 0x30, 4)]
[(unique, 0x100000ab, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0xfe0, 8)]
[ ---  CBRANCH (ram, 0x188779, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(unique, 0x100000b3, 8) COPY (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100000c3, 8) , (unique, 0xba80, 1), (unique, 0x100000c3, 8) CAST (unique, 0x3100, 8), (unique, 0xba80, 1) INT_AND (unique, 0xba80, 1) , (const, 0xfe, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100000bb, 8), (unique, 0x100000bb, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0xa, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100000cb, 8), (unique, 0x100000cb, 8) CAST (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x80, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x8, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100000ab, 8) , (unique, 0x100000b3, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100000d3, 8) , (register, 0x88, 4), (unique, 0x100000d3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x63, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x57, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x54, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x51, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x4f, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x4c, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x40, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100000e3, 8), (unique, 0x100000e3, 8) CAST (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x100000db, 8), (unique, 0x100000db, 8) CALLIND (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1887e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100000db, 8), (unique, 0x100000db, 8) CALLIND (register, 0x8, 8)]
[(ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0xb6, 4)]
[ ---  CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100000eb, 8), (unique, 0x100000eb, 8) CAST (ram, 0x4c2f58, 8)]
[ ---  BRANCH (ram, 0x188797, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_AND (unique, 0x3a00, 8) , (register, 0xa0, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x100000f3, 8) , (unique, 0x1000007b, 8), (unique, 0x100000f3, 8) CAST (register, 0x0, 8), (unique, 0x1000007b, 8) INT_ADD (register, 0x28, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x3, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_AND (unique, 0x3a00, 8) , (register, 0xa0, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x100000f3, 8) , (unique, 0x1000007b, 8), (unique, 0x100000f3, 8) CAST (register, 0x0, 8), (unique, 0x1000007b, 8) INT_ADD (register, 0x28, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ADD (unique, 0x100000fb, 8) , (unique, 0xbd80, 8), (unique, 0x100000fb, 8) CAST (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ADD (unique, 0x100000fb, 8) , (unique, 0xbd80, 8), (unique, 0x100000fb, 8) CAST (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000010b, 8) , (unique, 0xba80, 1), (unique, 0x1000010b, 8) CAST (unique, 0x3100, 8), (unique, 0xba80, 1) INT_AND (unique, 0xba80, 1) , (const, 0xf9, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000103, 8), (unique, 0x10000103, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0xa, 8) , (const, 0x8, 8)]
[(ram, 0x4c2f58, 8) COPY (ram, 0x4c2f58, 8), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x92, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x8c, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x89, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x86, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x77, 4), (ram, 0x4c2f58, 8) INDIRECT (ram, 0x4c2f58, 8) , (const, 0x74, 4), (ram, 0x4c2f58, 8) MULTIEQUAL (ram, 0x4c2f58, 8) , (ram, 0x4c2f58, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x1, 8)]
