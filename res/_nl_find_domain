[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002d0, 8), (unique, 0x100002d0, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x404ac4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f48, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3c, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x3c, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x3c, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3c, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000258, 8), (unique, 0x10000258, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7740, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x74, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x40, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x74, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x40, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x74, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x40, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x74, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x40, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x74, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x40, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x74, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x40, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x74, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x40, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x74, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x40, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x74, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x40, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CALL (ram, 0x406c10, 8) , (unique, 0x10000278, 8) , (register, 0x38, 8) , (unique, 0x3100, 8) , (const, 0x0, 8) , (register, 0x30, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (register, 0x10, 8) , (const, 0x0, 8) , (stack, 0xffffffffffffff80, 8), (unique, 0x10000278, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7778, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x38, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x40, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x404acc, 8)]
[ ---  CBRANCH (ram, 0x404b11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f60, 8) , (const, 0x0, 8), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x74, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x40, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8c, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x8c, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x8c, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x8c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8c, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000260, 8), (unique, 0x10000260, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7740, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x404ba0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x139, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x139, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x139, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x139, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x139, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x139, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x139, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x139, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x139, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x139, 4)]
[ ---  CBRANCH (ram, 0x404be2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x406a20, 8) , (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x150, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14a, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x150, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x14a, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x150, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x14a, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x150, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x14a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x14a, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x150, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x14a, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x150, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x14a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x150, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x14a, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x150, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x14a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x150, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14a, 4)]
[ ---  CBRANCH (ram, 0x404b29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x163, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x163, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x163, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x163, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (unique, 0x3100, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x171, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x171, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x171, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x171, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x171, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x171, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x171, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x171, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x171, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x171, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x404b29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x4072e0, 8) , (register, 0xa0, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404c25, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f30, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x18b, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x18b, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x18b, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x18b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x18b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x18b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x18b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x18b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x18b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x18b, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000268, 8), (unique, 0x10000268, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7740, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1bc, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x18f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x1bc, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x18f, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x1bc, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x18f, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1bc, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x18f, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1bc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x18f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CALL (ram, 0x406c10, 8) , (unique, 0x10000280, 8) , (register, 0x38, 8) , (unique, 0x3100, 8) , (register, 0x0, 4) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffa0, 8) , (register, 0x10, 8) , (const, 0x1, 8) , (stack, 0xffffffffffffff80, 8), (unique, 0x10000280, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7778, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x38, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x18f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x18f, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x18f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x18f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x18f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x18f, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x404c2d, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  CBRANCH (ram, 0x404c7d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f60, 8) , (const, 0x0, 8), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x1bc, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x18f, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d4, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x1d4, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x1d4, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x1d4, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1d4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d4, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000270, 8), (unique, 0x10000270, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7740, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x404ca1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404d00, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002d8, 8), (unique, 0x100002d8, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x272, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x272, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x272, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x272, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x272, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x272, 4)]
[ ---  CALL (ram, 0x404d20, 8) , (register, 0x0, 8) , (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x404c8a, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x404cc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002e0, 8), (unique, 0x100002e0, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x404c91, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002e8, 8), (unique, 0x100002e8, 8) INT_ADD (register, 0x0, 8) , (const, 0x20, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x100002f0, 8), (unique, 0x100002f0, 8) INT_ADD (register, 0x0, 8) , (const, 0x20, 8)]
[ ---  BRANCH (ram, 0x404ce4, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x404cd0, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002f8, 8), (unique, 0x100002f8, 8) INT_ADD (register, 0x38, 8) , (const, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x245, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x245, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x245, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x245, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x245, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x245, 4)]
[ ---  CALL (ram, 0x404d20, 8) , (register, 0x38, 8) , (register, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x404cd0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x404c91, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000300, 8), (unique, 0x10000300, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x404c91, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x404ca1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x20e, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x20e, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x20e, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x20e, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0xa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x404b29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21f, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x21f, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x21f, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21f, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  BRANCH (ram, 0x404b29, 1)]
[ ---  CBRANCH (ram, 0x404b90, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000308, 8), (unique, 0x10000308, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x134, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x134, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x134, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x134, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x134, 4)]
[ ---  CALL (ram, 0x404d20, 8) , (register, 0x0, 8) , (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x404b22, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x404b50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000310, 8), (unique, 0x10000310, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x404b29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000318, 8), (unique, 0x10000318, 8) INT_ADD (register, 0x0, 8) , (const, 0x20, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000320, 8), (unique, 0x10000320, 8) INT_ADD (register, 0x0, 8) , (const, 0x20, 8)]
[ ---  BRANCH (ram, 0x404b74, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x404b60, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000328, 8), (unique, 0x10000328, 8) INT_ADD (register, 0x38, 8) , (const, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x107, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x107, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x107, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x107, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x107, 4)]
[ ---  CALL (ram, 0x404d20, 8) , (register, 0x38, 8) , (register, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x404b60, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x404b29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000330, 8), (unique, 0x10000330, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x404b29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404d10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000338, 8), (unique, 0x10000338, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe0, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c4f30, 8) COPY (ram, 0x4c4f30, 8), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xe0, 4)]
[(ram, 0x4c4f48, 8) COPY (ram, 0x4c4f48, 8), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xe0, 4)]
[(ram, 0x4c4f60, 8) COPY (ram, 0x4c4f60, 8), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xe0, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c4f30, 8) COPY (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) COPY (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) COPY (ram, 0x4c4f60, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0xb0, 8)]
