[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x41, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x41, 4), (register, 0x20a, 1) COPY (const, 0x0, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x41, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x41, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x41, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x41, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x41, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x41, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x41, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x41, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x41, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x41, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x41, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x41, 4), (stack, 0xfffffffffffffede, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x41, 4), (stack, 0xfffffffffffffedf, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x41, 4), (stack, 0xfffffffffffffee0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x41, 4), (stack, 0xfffffffffffffee8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x41, 4), (stack, 0xfffffffffffffef0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x41, 4), (stack, 0xfffffffffffffef8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x41, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000107b, 8), (unique, 0x1000107b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x2045c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x17ee30, 8) , (unique, 0x100008c8, 8) , (unique, 0x100008c0, 8), (unique, 0x100008c8, 8) COPY (const, 0x2b5666, 8), (unique, 0x100008c0, 8) COPY (const, 0x2b3893, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x58, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x50, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x58, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x50, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x58, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x50, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x58, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x50, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x58, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x50, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x58, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x50, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x58, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x50, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x58, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x50, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x58, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x50, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x58, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x50, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x58, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x50, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x58, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x50, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x58, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x50, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x58, 4), (stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x50, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x58, 4), (stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x50, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x50, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x50, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x50, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x58, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x58, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x58, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x58, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x58, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x58, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x58, 4), (stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x58, 4), (stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x58, 4), (stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x58, 4), (stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x58, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x58, 4), (stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x50, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x58, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x50, 4)]
[ ---  CBRANCH (ram, 0x2045b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f7b0, 8) , (const, 0x1, 4) , (register, 0x0, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001083, 8), (unique, 0x10001083, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (register, 0x0, 4) CALL (ram, 0x1877b0, 8) , (register, 0x0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000083e, 1) COPY (const, 0x0, 1)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffeb0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x8b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8b, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x8b, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x8b, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x8b, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x8b, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x8b, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x8b, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x8b, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x8b, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x8b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000908, 8) , (register, 0x0, 4), (unique, 0x10000908, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 4) INT_OR (unique, 0xbc80, 4) , (const, 0x8000, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100008f8, 8), (unique, 0x100008f8, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(unique, 0x1000083b, 1) MULTIEQUAL (unique, 0x1000083e, 1) , (unique, 0x1000083d, 1) , (unique, 0x1000083b, 1)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (unique, 0x100003b5, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff00, 8)]
[ ---  CBRANCH (ram, 0x204690, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000229, 4) , (const, 0x0, 4), (unique, 0x10000229, 4) INT_AND (register, 0x0, 4) , (const, 0x10, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x9f, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x9f, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9f, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x9f, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x9f, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x9f, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x9f, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x9f, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x9f, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x9f, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x9f, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x9f, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x9f, 4), (stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x9f, 4), (stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x9f, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x9f, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x9f, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x9f, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000d7b, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[ ---  CBRANCH (ram, 0x204690, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x17bc50, 8) , (unique, 0x1000108b, 8) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x1000108b, 8) CAST (unique, 0x3800, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb3, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xb3, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xb3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb3, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xb3, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xb3, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xb3, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xb3, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xb3, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xb3, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xb3, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xb3, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xb3, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0xb3, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0xb3, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xb3, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb3, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb3, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb3, 4)]
[(unique, 0x10000f9b, 8) COPY (unique, 0x10000d7b, 8)]
[ ---  CBRANCH (ram, 0x2043c4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0x10001093, 8) , (const, 0x23, 4), (unique, 0x10001093, 8) CAST (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xbf, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbf, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xbf, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xbf, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xbf, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xbf, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xbf, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xbf, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xbf, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xbf, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xbf, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1)]
[(unique, 0x10000fa3, 8) COPY (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000d33, 8) COPY (ram, 0x4eae00, 8), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100010a4, 8), (unique, 0x100010a4, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000109c, 8), (unique, 0x1000109c, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae00, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0x1000109b, 1), (unique, 0x1000109b, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000f9b, 8) , (unique, 0x10000fa3, 8), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x100007a6, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x100007a8, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x2043f3, 1) , (unique, 0x100007a7, 1), (unique, 0x100007a7, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100010ad, 8), (unique, 0x100010ad, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0x100010ac, 1), (unique, 0x100010ac, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) PTRADD (unique, 0x100007a8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000f03, 8) COPY (unique, 0x100007a8, 8)]
[ ---  CBRANCH (ram, 0x20440c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100007a6, 1) , (const, 0x0, 1)]
[(register, 0x8, 2) INT_AND (unique, 0xbc00, 2) , (const, 0x2000, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100010b6, 8), (unique, 0x100010b6, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (register, 0x8, 8) INT_SEXT (unique, 0x100010b5, 1), (unique, 0x100010b5, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x30, 8) COPY (unique, 0x10000f13, 8), (unique, 0x10000f13, 8) MULTIEQUAL (unique, 0x10000f03, 8) , (unique, 0x10000f0b, 8)]
[(unique, 0x10000fbb, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x30, 8) COPY (unique, 0x10000f13, 8), (unique, 0x10000f13, 8) MULTIEQUAL (unique, 0x10000f03, 8) , (unique, 0x10000f0b, 8)]
[ ---  CBRANCH (ram, 0x204400, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x30, 8) COPY (unique, 0x10000f13, 8), (unique, 0x10000f13, 8) MULTIEQUAL (unique, 0x10000f03, 8) , (unique, 0x10000f0b, 8)]
[(unique, 0x10000f0b, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x204650, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 2) , (const, 0x0, 2)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xbe2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbe2, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xbe2, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xbe2, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xbe2, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xbe2, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xbe2, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xbe2, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xbe2, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xbe2, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xbe2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1)]
[(register, 0x8, 2) INT_AND (unique, 0xbc00, 2) , (const, 0x2000, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100010c7, 8), (unique, 0x100010c7, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100010bf, 8), (unique, 0x100010bf, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000d33, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0x100010be, 1), (unique, 0x100010be, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(unique, 0x10000fb3, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x20442e, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000fb3, 8) , (unique, 0x10000fbb, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x98, 8) PTRADD (unique, 0x3100, 8) , (unique, 0x10000630, 8) , (const, 0x1, 8), (unique, 0x10000630, 8) INT_2COMP (unique, 0x100010cf, 8), (unique, 0x100010cf, 8) CAST (unique, 0x100007a8, 8)]
[ ---  CBRANCH (ram, 0x20444b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 2) , (const, 0x0, 2), (register, 0x8, 2) MULTIEQUAL (register, 0x8, 2) , (register, 0x8, 2)]
[ ---  CBRANCH (ram, 0x204438, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100010d8, 8), (unique, 0x100010d8, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0x100010d7, 1), (unique, 0x100010d7, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8), (register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[(unique, 0x10000fdb, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x204463, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) MULTIEQUAL (register, 0x0, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000fcb, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000fdb, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x204458, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000fdb, 8) , (register, 0xb0, 8)]
[(unique, 0x10000fd3, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x20446f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100010e1, 8), (unique, 0x100010e1, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0x100010e0, 1), (unique, 0x100010e0, 1) CAST (unique, 0xbb00, 1)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000fab, 8) COPY (unique, 0x100007a8, 8)]
[(unique, 0x10000fc3, 8) COPY (unique, 0x100007a8, 8)]
[ ---  BRANCH (ram, 0x20446f, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x0, 1) MULTIEQUAL (unique, 0x100007a6, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (register, 0x0, 1)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000fab, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x204680, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (unique, 0x100007a8, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000fc3, 8) , (unique, 0x10000fcb, 8) , (unique, 0x10000fd3, 8) , (unique, 0x10000fdb, 8)]
[ ---  CBRANCH (ram, 0x20448c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x122, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x122, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x122, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x122, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x122, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x122, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x122, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x122, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x122, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x122, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x122, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (const, 0x0, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100010e9, 8), (unique, 0x100010e9, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000d33, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100010f2, 8), (unique, 0x100010f2, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0x100010f1, 1), (unique, 0x100010f1, 1) CAST (register, 0x0, 1), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8), (register, 0x0, 1) MULTIEQUAL (register, 0x0, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000b51, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x10000b59, 1) MULTIEQUAL (register, 0x0, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x2044b2, 1) , (unique, 0x10000b50, 1), (unique, 0x10000b50, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100010fb, 8), (unique, 0x100010fb, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0x100010fa, 1), (unique, 0x100010fa, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (unique, 0x10000b51, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000dc3, 8) COPY (unique, 0x10000b51, 8)]
[ ---  CBRANCH (ram, 0x2044c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000b59, 1) , (const, 0x0, 1)]
[(register, 0x0, 8) INT_SEXT (unique, 0x10001103, 1), (unique, 0x10001103, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000dc3, 8) , (register, 0x8, 8)]
[(unique, 0x10000db3, 8) COPY (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000dc3, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2044c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000dc3, 8) , (register, 0x8, 8)]
[(unique, 0x10000dbb, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2044d3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10001104, 8), (unique, 0x10001104, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8)]
[(register, 0x200, 1) INT_LESS (register, 0x98, 8) , (unique, 0x10000848, 8), (unique, 0x10000848, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x175, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x175, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x175, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x175, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x175, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x175, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x175, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x175, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x175, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x175, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x175, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0x0, 1), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000db3, 8) , (unique, 0x10000dbb, 8) , (unique, 0x10000dc3, 8)]
[ ---  CBRANCH (ram, 0x2047b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (unique, 0x10000850, 8), (unique, 0x10000850, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[(register, 0x8, 8) COPY (const, 0x7, 8)]
[(unique, 0x10000ef3, 8) COPY (unique, 0x100007a8, 8)]
[(unique, 0x10000f5b, 8) COPY (unique, 0x1000110c, 8), (unique, 0x1000110c, 8) CAST (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b567a, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000f5b, 8) , (unique, 0x10000f63, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000ef3, 8) , (unique, 0x10000efb, 8)]
[ ---  CBRANCH (ram, 0x2047c1, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x200, 1) INT_LESS (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000efb, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x100009a8, 8) , (const, 0x1, 8), (unique, 0x100009a8, 8) INT_ADD (unique, 0x10000361, 8) , (const, 0x1, 8), (unique, 0x10000361, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000f63, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100009a0, 8) , (const, 0x1, 8), (unique, 0x100009a0, 8) INT_ADD (unique, 0x10000359, 8) , (const, 0x1, 8), (unique, 0x10000359, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x2047bf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x8, 8) COPY (const, 0x4, 8)]
[(unique, 0x10000eb3, 8) COPY (register, 0xa8, 8)]
[(unique, 0x10000f1b, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b5681, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000f1b, 8) , (unique, 0x10000f23, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000eb3, 8) , (unique, 0x10000ebb, 8)]
[ ---  CBRANCH (ram, 0x2047d8, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x200, 1) INT_LESS (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000ebb, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x100009b8, 8) , (const, 0x1, 8), (unique, 0x100009b8, 8) INT_ADD (unique, 0x1000037a, 8) , (const, 0x1, 8), (unique, 0x1000037a, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000f23, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100009b0, 8) , (const, 0x1, 8), (unique, 0x100009b0, 8) INT_ADD (unique, 0x10000372, 8) , (const, 0x1, 8), (unique, 0x10000372, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x2047d6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x100003b5, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xc900, 1) , (register, 0x200, 1), (unique, 0xc900, 1) BOOL_AND (unique, 0x10000383, 1) , (unique, 0x10000384, 1), (unique, 0x10000384, 1) BOOL_NEGATE (register, 0x206, 1), (unique, 0x10000383, 1) BOOL_NEGATE (register, 0x200, 1), (register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xc900, 1) , (register, 0x200, 1), (unique, 0xc900, 1) BOOL_AND (unique, 0x10000383, 1) , (unique, 0x10000384, 1), (unique, 0x10000384, 1) BOOL_NEGATE (register, 0x206, 1), (unique, 0x10000383, 1) BOOL_NEGATE (register, 0x200, 1), (register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(ram, 0x4ee060, 4) COPY (const, 0x1, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100009c0, 8), (unique, 0x100009c0, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x204380, 1)]
[ ---  CBRANCH (ram, 0x204760, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x10001114, 8) , (const, 0x7, 8), (unique, 0x10001114, 8) CAST (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (unique, 0x10000840, 8), (unique, 0x10000840, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[(register, 0x8, 8) COPY (const, 0x6, 8)]
[(unique, 0x10000ee3, 8) COPY (unique, 0x100007a8, 8)]
[(unique, 0x10000f4b, 8) COPY (unique, 0x1000111c, 8), (unique, 0x1000111c, 8) CAST (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b5674, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000f4b, 8) , (unique, 0x10000f53, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000ee3, 8) , (unique, 0x10000eeb, 8)]
[ ---  CBRANCH (ram, 0x20477b, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000eeb, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000980, 8) , (const, 0x1, 8), (unique, 0x10000980, 8) INT_ADD (unique, 0x10000340, 8) , (const, 0x1, 8), (unique, 0x10000340, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000f53, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000978, 8) , (const, 0x1, 8), (unique, 0x10000978, 8) INT_ADD (unique, 0x10000338, 8) , (const, 0x1, 8), (unique, 0x10000338, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x204779, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffede, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8)]
[ ---  BRANCH (ram, 0x20452a, 1)]
[ ---  CBRANCH (ram, 0x204810, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (unique, 0x10000858, 8), (unique, 0x10000858, 8) PTRSUB (const, 0x0, 8) , (const, 0x7, 8)]
[(register, 0x8, 8) COPY (const, 0x8, 8)]
[(unique, 0x10000ed3, 8) COPY (unique, 0x100007a8, 8)]
[(unique, 0x10000f3b, 8) COPY (unique, 0x10001124, 8), (unique, 0x10001124, 8) CAST (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b5685, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000f3b, 8) , (unique, 0x10000f43, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000ed3, 8) , (unique, 0x10000edb, 8)]
[ ---  CBRANCH (ram, 0x204821, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000edb, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x100009d0, 8) , (const, 0x1, 8), (unique, 0x100009d0, 8) INT_ADD (unique, 0x100003d1, 8) , (const, 0x1, 8), (unique, 0x100003d1, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000f43, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100009c8, 8) , (const, 0x1, 8), (unique, 0x100009c8, 8) INT_ADD (unique, 0x100003c9, 8) , (const, 0x1, 8), (unique, 0x100003c9, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x20481f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000e4b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000112c, 8) , (const, 0x0, 4), (unique, 0x1000112c, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3c5, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x3c5, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3c5, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3c2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3c5, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3c2, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x3c5, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x3c2, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x3c5, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x3c2, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x3c5, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x3c2, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x3c5, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x3c2, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x3c5, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x3c2, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x3c5, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x3c2, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x3c5, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x3c2, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x3c5, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x3c2, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x3c5, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x3c2, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x3c5, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x3c5, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3c5, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3c5, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3c5, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c5, 4)]
[ ---  CBRANCH (ram, 0x204851, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0x10001134, 8) , (const, 0x2f, 4), (unique, 0x10001134, 8) CAST (register, 0xa8, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3d3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3d3, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x3d3, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x3d3, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x3d3, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x3d3, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x3d3, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x3d3, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x3d3, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x3d3, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x3d3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x3100, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3db, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x3db, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3db, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3db, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x3db, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x3db, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x3db, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x3db, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x3db, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x3db, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x3db, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x3db, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x3db, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x3db, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x3db, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3db, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3db, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3db, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x3db, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3db, 4)]
[ ---  CBRANCH (ram, 0x204b3c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2434b0, 8) , (const, 0xa, 4) , (unique, 0x1000113c, 8) , (unique, 0x3800, 8), (unique, 0x1000113c, 8) CAST (register, 0xa8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x545, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x545, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x545, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x545, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x545, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x545, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x545, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x545, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x545, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x545, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x545, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x545, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x545, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x545, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x545, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x545, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x545, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x545, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x545, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x545, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x545, 4)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2434b0, 8) , (const, 0x2, 4) , (unique, 0x10001144, 8) , (unique, 0x3800, 8), (unique, 0x10001144, 8) CAST (register, 0xa8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff24, 8)]
[ ---  CBRANCH (ram, 0x204e2d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(register, 0xb8, 8) COPY (const, 0x20, 8)]
[ ---  BRANCH (ram, 0x204b99, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x561, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x561, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x561, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x561, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x561, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x561, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x561, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x561, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x561, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x561, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x561, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x561, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x561, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x561, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x561, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x561, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x561, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x561, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x561, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x561, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x561, 4)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x145140, 8) , (register, 0xb8, 8) , (unique, 0x3800, 8) , (const, 0xa, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x20, 8) , (register, 0x0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x58f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x58f, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x58f, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x58f, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x58f, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x58f, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x58f, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x58f, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x58f, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x58f, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x58f, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x58f, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x58f, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x58f, 4), (stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x58f, 4), (stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x58f, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x58f, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x58f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x145140, 8) , (unique, 0x1000114c, 8) , (register, 0xa8, 8) , (const, 0xa, 4), (unique, 0x1000114c, 8) CAST (unique, 0x10000b51, 8), (register, 0xa8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x60, 8)]
[(unique, 0x10000e53, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff18, 4) , (const, 0x0, 4)]
[(unique, 0x10000e5b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff1c, 4) , (const, 0x0, 4)]
[(unique, 0x10000e63, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff20, 4) , (const, 0xffff0000, 4)]
[ ---  CBRANCH (ram, 0x204e97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(register, 0xb8, 8) COPY (const, 0x80, 8)]
[ ---  BRANCH (ram, 0x2048db, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x424, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x424, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x424, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x424, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x424, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x424, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x424, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x424, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x424, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x424, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x424, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x424, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x424, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x424, 4)]
[(unique, 0x10000e6b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x145140, 8) , (register, 0xb8, 8) , (unique, 0x3800, 8) , (const, 0xa, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8)]
[(unique, 0x10000e73, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10000e7b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x20, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100008d0, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x100008d0, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffa0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x454, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x454, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x454, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x454, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x454, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x454, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x454, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x454, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x454, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x454, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x454, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x454, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x454, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x454, 4), (stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x454, 4), (stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x454, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x454, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x454, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x454, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x454, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x454, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x454, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x454, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x454, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x454, 4), (stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x454, 4), (stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x454, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x454, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x454, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x454, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x454, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000e83, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x145140, 8) , (unique, 0x10001154, 8) , (register, 0xa8, 8) , (const, 0xa, 4), (unique, 0x10001154, 8) CAST (unique, 0x10000b51, 8), (register, 0xa8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8)]
[(unique, 0x10000e8b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10000b5a, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000b6b, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000b73, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(unique, 0x10000b74, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x10000b7c, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000b84, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(unique, 0x10000b88, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(unique, 0x10000b8c, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(unique, 0x10000b90, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(unique, 0x10000b94, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(unique, 0x10000b98, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(unique, 0x10000b9c, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(unique, 0x10000ba4, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(unique, 0x10000bac, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(unique, 0x10000bb4, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(unique, 0x10000bb5, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(unique, 0x10000bb6, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10000bbe, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x10000bc6, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(unique, 0x10000bce, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x10000bd6, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10000bde, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10000be6, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10000bee, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(unique, 0x10000bf2, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(unique, 0x10000bf6, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(unique, 0x10000bfa, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(unique, 0x10000bfe, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(unique, 0x10000c02, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(unique, 0x10000c06, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(unique, 0x10000c0a, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(unique, 0x10000c0e, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000e93, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (unique, 0x10000b62, 1), (unique, 0x10000b62, 1) INT_LESS (const, 0x7fffffff, 8) , (unique, 0x10000b63, 8), (unique, 0x10000b63, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000b6b, 8) , (const, 0x481, 4)]
[(register, 0x20a, 1) INDIRECT (unique, 0x10000b73, 1) , (const, 0x481, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x10000b74, 8) , (const, 0x481, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x10000b7c, 8) , (const, 0x481, 4)]
[(ram, 0x4ee050, 4) INDIRECT (unique, 0x10000b84, 4) , (const, 0x481, 4)]
[(ram, 0x4ee054, 4) INDIRECT (unique, 0x10000b88, 4) , (const, 0x481, 4)]
[(ram, 0x4ee058, 4) INDIRECT (unique, 0x10000b8c, 4) , (const, 0x481, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (unique, 0x10000b90, 4) , (const, 0x481, 4)]
[(ram, 0x4ee060, 4) INDIRECT (unique, 0x10000b94, 4) , (const, 0x481, 4)]
[(ram, 0x4ee064, 4) INDIRECT (unique, 0x10000b98, 4) , (const, 0x481, 4)]
[(ram, 0x4ee068, 8) INDIRECT (unique, 0x10000b9c, 8) , (const, 0x481, 4)]
[(ram, 0x4ee070, 8) INDIRECT (unique, 0x10000ba4, 8) , (const, 0x481, 4)]
[(ram, 0x4ee078, 8) INDIRECT (unique, 0x10000bac, 8) , (const, 0x481, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (unique, 0x10000bb4, 1) , (const, 0x481, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (unique, 0x10000bb5, 1) , (const, 0x481, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x10000bb6, 8) , (const, 0x481, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10000bbe, 8) , (const, 0x481, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10000bc6, 8) , (const, 0x481, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10000bce, 8) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x10000bd6, 8) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x10000bde, 8) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x10000be6, 8) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (unique, 0x10000bee, 4) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (unique, 0x10000bf2, 4) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (unique, 0x10000bf6, 4) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (unique, 0x10000bfa, 4) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (unique, 0x10000bfe, 4) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (unique, 0x10000c02, 4) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (unique, 0x10000c06, 4) , (const, 0x481, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (unique, 0x10000c0a, 4) , (const, 0x481, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000c0e, 8) , (const, 0x481, 4)]
[ ---  CBRANCH (ram, 0x204eb5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000115c, 8), (unique, 0x1000115c, 8) CALL (ram, 0x1212c0, 8) , (const, 0x18, 8)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x204bfd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000b5a, 8) , (const, 0x60, 8)]
[(register, 0x10, 4) INT_LEFT (const, 0xffffffff, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) INT_SUB (const, 0x80, 1) , (unique, 0x10000652, 1), (unique, 0x10000652, 1) SUBPIECE (unique, 0x10000b5a, 8) , (const, 0x0, 4)]
[(unique, 0xbe00, 8) INT_ADD (stack, 0xfffffffffffffeb0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x18, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 4), (unique, 0x3100, 8) CAST (unique, 0x1000116c, 8), (unique, 0x1000116c, 8) INT_ADD (unique, 0x10001164, 8) , (const, 0x4, 8), (unique, 0x10001164, 8) CAST (register, 0x0, 8), (register, 0x10, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (register, 0x10, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (register, 0x10, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (register, 0x10, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (register, 0x10, 4) , (const, 0x18, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001174, 8) , (register, 0xa0, 4), (unique, 0x10001174, 8) CAST (unique, 0x3100, 8), (register, 0xa0, 4) SUBPIECE (unique, 0x10000b63, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x518, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x515, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x4fd, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x4fa, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x518, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x515, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4fd, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4fa, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x518, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x515, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x4fd, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x4fa, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x518, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x515, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x4fd, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x4fa, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x518, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x515, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x4fd, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x4fa, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x518, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x515, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x4fd, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x4fa, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x518, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x515, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x4fd, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x4fa, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x518, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x515, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x4fd, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x4fa, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x518, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x515, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x4fd, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x4fa, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x518, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x515, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x4fd, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x4fa, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x518, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x515, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x4fd, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x4fa, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000117c, 8) , (register, 0x10, 4), (unique, 0x1000117c, 8) CAST (register, 0x0, 8), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (stack, 0xffffffffffffff24, 4), (register, 0x10, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (register, 0x10, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (register, 0x10, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (register, 0x10, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (register, 0x10, 4) , (const, 0x18, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(unique, 0x1000083c, 1) CAST (unique, 0x10001184, 1), (unique, 0x10001184, 1) INT_OR (unique, 0x1000083b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000b5a, 8) , (const, 0x60, 8)]
[(unique, 0x10000e9b, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x2045b0, 1)]
[(unique, 0x10000deb, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (const, 0xa, 8)]
[(register, 0x8, 8) COPY (const, 0xb, 8)]
[(unique, 0x10000ec3, 8) COPY (unique, 0x100007a8, 8)]
[(unique, 0x10000f2b, 8) COPY (unique, 0x10001185, 8), (unique, 0x10001185, 8) CAST (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b568d, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000f2b, 8) , (unique, 0x10000f33, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000ec3, 8) , (unique, 0x10000ecb, 8)]
[ ---  CBRANCH (ram, 0x20450b, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000ecb, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000920, 8) , (const, 0x1, 8), (unique, 0x10000920, 8) INT_ADD (unique, 0x10000279, 8) , (const, 0x1, 8), (unique, 0x10000279, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000f33, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000918, 8) , (const, 0x1, 8), (unique, 0x10000918, 8) INT_ADD (unique, 0x10000271, 8) , (const, 0x1, 8), (unique, 0x10000271, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x204509, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000df3, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffedf, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000118d, 8) , (const, 0x0, 4), (unique, 0x1000118d, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c5, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1c5, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c5, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c5, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c2, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c5, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c2, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c5, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c2, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c5, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c2, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c5, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c2, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c5, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c2, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c5, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c2, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c5, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c2, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c5, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c2, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c5, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c2, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x1c5, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x1c5, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1c5, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1c5, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1c5, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x1c5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c5, 4)]
[ ---  CBRANCH (ram, 0x204a11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0x10001195, 8) , (const, 0x2f, 4), (unique, 0x10001195, 8) CAST (register, 0xa8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x386, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x386, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x386, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x386, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x386, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x386, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x386, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x386, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x386, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x386, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x386, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x386, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x386, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x386, 4)]
[(unique, 0x10000e43, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2434b0, 8) , (const, 0xa, 4) , (unique, 0x1000119d, 8) , (unique, 0x3800, 8), (unique, 0x1000119d, 8) CAST (register, 0xa8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d9, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1d9, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1d9, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1d4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1d9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1d4, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1d9, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1d4, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1d9, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1d4, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1d9, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1d4, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1d9, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1d4, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1d9, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1d4, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1d9, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1d4, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1d9, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1d4, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1d9, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1d4, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1d9, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1d4, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x1d9, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x1d9, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1d9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1d9, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1d9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d9, 4)]
[(unique, 0x10000dfb, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2434b0, 8) , (const, 0xa, 4) , (unique, 0x100011a5, 8) , (unique, 0x3800, 8), (unique, 0x100011a5, 8) CAST (register, 0xa8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x204a2b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8), (register, 0x38, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000e3b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(register, 0x88, 8) COPY (const, 0x80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f5, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1f5, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1f5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f5, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1f5, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1f5, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1f5, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1f5, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1f5, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1f5, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1f5, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1f5, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1f5, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x1f5, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x1f5, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1f5, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1f5, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1f5, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f5, 4)]
[(unique, 0x10000e03, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x145140, 8) , (register, 0x38, 8) , (unique, 0x3800, 8) , (const, 0xa, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8)]
[(unique, 0x10000e0b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10000e13, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x204a44, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x80, 8) , (register, 0x0, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x88, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x229, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x229, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x229, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x229, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x229, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x229, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x229, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x229, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x229, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x229, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x229, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x229, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x229, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x229, 4), (stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x229, 4), (stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x229, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x229, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x229, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x229, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x229, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x229, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x229, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x229, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x229, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x229, 4), (stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x229, 4), (stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x229, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x229, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x229, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x229, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x229, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000e1b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x145140, 8) , (unique, 0x100011ad, 8) , (register, 0xa8, 8) , (const, 0xa, 4), (unique, 0x100011ad, 8) CAST (unique, 0x10000b51, 8), (register, 0xa8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8)]
[(unique, 0x10000e23, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10000e2b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2045b0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (const, 0x80000000, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x255, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x255, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x255, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x255, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x255, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x255, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x255, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x255, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x255, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x255, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x255, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x255, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x255, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x255, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x255, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x255, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x255, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x255, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x255, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x255, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x255, 4)]
[ ---  CBRANCH (ram, 0x204eb5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100011b5, 8), (unique, 0x100011b5, 8) CALL (ram, 0x1212c0, 8) , (const, 0x20, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2af, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2aa, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2af, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2aa, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2af, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2aa, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x2af, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x2aa, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x2af, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x2aa, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x2af, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x2aa, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x2af, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x2aa, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x2af, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x2aa, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x2af, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x2aa, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x2af, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x2aa, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x2af, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x2aa, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x2af, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x2aa, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x2af, 4), (stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x2aa, 4), (stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x2af, 4), (stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x2aa, 4), (stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2af, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2aa, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2af, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2aa, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2af, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2aa, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2af, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2aa, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2af, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2aa, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2af, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2aa, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x17e250, 8) , (register, 0x0, 8)]
[(unique, 0x10001023, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2af, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2aa, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  BRANCH (ram, 0x2046f5, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xa8, 4), (register, 0xa8, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (stack, 0xffffffffffffff18, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006bc, 8) , (stack, 0xffffffffffffff1c, 4), (unique, 0x100006bc, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006c4, 8) , (stack, 0xffffffffffffff20, 4), (unique, 0x100006c4, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006cc, 8) , (stack, 0xffffffffffffff24, 4), (unique, 0x100006cc, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x274, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c7e, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c7c, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c7a, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c79, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x26d, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x267, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x274, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c7e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c7c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c7a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c79, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x26d, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x267, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x274, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c7e, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c7c, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c7a, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c79, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x26d, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x267, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x274, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c7e, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c7c, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c7a, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c79, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x26d, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x267, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x274, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c7e, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c7c, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c7a, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c79, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x26d, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x267, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x274, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c7e, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c7c, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c7a, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c79, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x26d, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x267, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x274, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c7e, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c7c, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c7a, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c79, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x26d, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x267, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x274, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c7e, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c7c, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c7a, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c79, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x26d, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x267, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x274, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c7e, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c7c, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c7a, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c79, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x26d, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x267, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x274, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c7e, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c7c, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c7a, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c79, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x26d, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x267, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x274, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c7e, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c7c, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c7a, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c79, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x26d, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x267, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011bd, 8) , (unique, 0xbd80, 8), (unique, 0x100011bd, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xfffffffffffffeb8, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x299, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x299, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x299, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x26f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x299, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x281, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x26f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x299, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x281, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x26f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x299, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x281, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x26f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x299, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x299, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x299, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x299, 4), (stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x299, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x299, 4), (stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x299, 4), (stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x299, 4), (stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x299, 4), (stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x299, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x299, 4), (stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x299, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x281, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xfffffffffffffec0, 8) , (unique, 0xba80, 1), (unique, 0xba80, 1) INT_OR (unique, 0xba80, 1) , (register, 0x206, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffec0, 8), (register, 0x206, 1) INT_EQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(unique, 0x10000e33, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x2045b0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000c0e, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (unique, 0x10000c0a, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (unique, 0x10000c06, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (unique, 0x10000c02, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (unique, 0x10000bfe, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (unique, 0x10000bfa, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (unique, 0x10000bf6, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (unique, 0x10000bf2, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (unique, 0x10000bee, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (unique, 0x10000be6, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (unique, 0x10000bde, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (unique, 0x10000bd6, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (unique, 0x10000bce, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (unique, 0x10000bc6, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (unique, 0x10000bbe, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (unique, 0x10000bb6, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (unique, 0x10000bb5, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (unique, 0x10000bb4, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(unique, 0x1000083d, 1) MULTIEQUAL (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083c, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1) , (unique, 0x1000083b, 1)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (unique, 0xbe00, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (unique, 0x10000bac, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (unique, 0x10000ba4, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (unique, 0x10000b9c, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (unique, 0x10000b98, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (unique, 0x100003b5, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (unique, 0x10000b94, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (unique, 0x10000b90, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (unique, 0x10000b8c, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (unique, 0x10000b88, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (unique, 0x10000b84, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (unique, 0x10000b7c, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (unique, 0x10000b74, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (unique, 0x10000b73, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x10000b6b, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000deb, 8) , (unique, 0x10000df3, 8) , (unique, 0x10000dfb, 8) , (unique, 0x10000e03, 8) , (unique, 0x10000e0b, 8) , (unique, 0x10000e13, 8) , (unique, 0x10000e1b, 8) , (unique, 0x10000e23, 8) , (unique, 0x10000e2b, 8) , (unique, 0x10000e33, 8) , (unique, 0x10000e3b, 8) , (unique, 0x10000e43, 8) , (unique, 0x10000e4b, 8) , (unique, 0x10000e53, 8) , (unique, 0x10000e5b, 8) , (unique, 0x10000e63, 8) , (unique, 0x10000e6b, 8) , (unique, 0x10000e73, 8) , (unique, 0x10000e7b, 8) , (unique, 0x10000e83, 8) , (unique, 0x10000e8b, 8) , (unique, 0x10000e93, 8) , (unique, 0x10000e9b, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000950, 8), (unique, 0x10000950, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x204380, 1)]
[ ---  CBRANCH (ram, 0x20438d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002eb, 4) , (const, 0x0, 4), (unique, 0x100002eb, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x10, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000958, 8), (unique, 0x10000958, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6bc, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6b7, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x6bc, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x6b7, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6bc, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6b7, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x6bc, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x6b7, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x6bc, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x6b7, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x6bc, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x6b7, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x6bc, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x6b7, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x6bc, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x6b7, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x6bc, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x6b7, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x6bc, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x6b7, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x6bc, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x6b7, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x6bc, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x6b7, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x6bc, 4), (stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x6b7, 4), (stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x6bc, 4), (stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x6b7, 4), (stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x6b7, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x6b7, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x6b7, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x6bc, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x6b7, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x6bc, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x6b7, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x6bc, 4), (stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x6b7, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x6bc, 4), (stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x6b7, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x6bc, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x6b7, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x6bc, 4), (stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x6b7, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6bc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6b7, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x17e250, 8) , (register, 0x0, 8)]
[(unique, 0x10000d6b, 8) COPY (stack, 0xfffffffffffffee8, 8), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x6b7, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(register, 0xb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b14e0, 8)]
[ ---  CBRANCH (ram, 0x20494f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffee8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x6b7, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x10000607, 4) SUBPIECE (stack, 0xfffffffffffffee8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x204c30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffede, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb42, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xb42, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb42, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xb42, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xb42, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xb42, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xb42, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xb42, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xb42, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xb42, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xb42, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xb42, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0xb42, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0xb42, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb42, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb42, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xb42, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb42, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb42, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xb42, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xb42, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb42, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xb42, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb42, 4)]
[(unique, 0x10001053, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xb42, 4)]
[ ---  CBRANCH (ram, 0x2046f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100011c5, 8), (unique, 0x100011c5, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_MULT (stack, 0xfffffffffffffee8, 8) , (const, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x712, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x712, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x712, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x712, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x712, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x712, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x712, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x712, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x712, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x712, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x712, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x712, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x712, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x712, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x1000100b, 8) , (const, 0x712, 4), (unique, 0x1000100b, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) INT_ADD (stack, 0xfffffffffffffee8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x712, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x712, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x712, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x712, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x712, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x712, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x712, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x712, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x712, 4)]
[(unique, 0x1000102b, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x712, 4)]
[ ---  CBRANCH (ram, 0x204e6e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100011cd, 8), (unique, 0x100011cd, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_MULT (register, 0xb8, 8) , (const, 0x18, 8), (register, 0xb8, 8) INT_ADD (stack, 0xfffffffffffffee8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 16), (unique, 0x3400, 8) CAST (unique, 0x100011d5, 8), (unique, 0x100011d5, 8) PTRADD (register, 0x0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_SEXT (unique, 0x10000607, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x72f, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x72c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x72f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x72c, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x72f, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x72c, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x72f, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x72c, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x72f, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x72c, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x72f, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x72c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x72f, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x72c, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x72f, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x72c, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x72f, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x72c, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x72f, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x72c, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x72f, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x72c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011dd, 8) , (const, 0x100000000, 8), (unique, 0x100011dd, 8) CAST (unique, 0x10000b48, 8), (unique, 0x10000b48, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0x3400, 8) CAST (unique, 0x100011d5, 8), (unique, 0x100011d5, 8) PTRADD (register, 0x0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_SEXT (unique, 0x10000607, 4)]
[ ---  BRANCH (ram, 0x204c5a, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x10000d6b, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x10, 4) INT_SUB (unique, 0x10000607, 4) , (const, 0x1, 4)]
[(unique, 0x10000f83, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x20492c, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10000607, 4)]
[(register, 0x30, 8) CAST (unique, 0x100011f9, 8), (unique, 0x100011f9, 8) INT_ADD (unique, 0x3a00, 8) , (unique, 0x10000546, 8), (unique, 0x10000546, 8) INT_MULT (register, 0x10, 8) , (const, 0xffffffffffffffe8, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x8, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x100011e9, 8) , (unique, 0x100011f1, 8), (unique, 0x100011f1, 8) CAST (register, 0xb0, 8), (unique, 0x100011e9, 8) CAST (unique, 0x100008d8, 8), (unique, 0x100008d8, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffe8, 8), (register, 0x8, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x0, 8) INT_SEXT (unique, 0x100011e5, 4), (unique, 0x100011e5, 4) CAST (register, 0x10, 4)]
[(unique, 0x10000da3, 8) COPY (unique, 0x10001201, 8), (unique, 0x10001201, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100011e5, 4), (unique, 0x100011e5, 4) CAST (register, 0x10, 4)]
[(unique, 0x10000de3, 8) COPY (stack, 0xfffffffffffffee0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x100006fc, 4), (unique, 0x100006fc, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000da3, 8) , (unique, 0x10000dab, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000de3, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000724, 8) , (unique, 0x10000700, 4), (unique, 0x10000724, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0x10000700, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000704, 8), (unique, 0x10000704, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000da3, 8) , (unique, 0x10000dab, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000de3, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000072c, 8) , (unique, 0x1000070c, 4), (unique, 0x1000072c, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0x1000070c, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000710, 8), (unique, 0x10000710, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000da3, 8) , (unique, 0x10000dab, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000de3, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000734, 8) , (unique, 0x10000718, 4), (unique, 0x10000734, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x10000718, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000071c, 8), (unique, 0x1000071c, 8) PTRADD (register, 0x10, 8) , (const, 0x3, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000da3, 8) , (unique, 0x10000dab, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000de3, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001211, 8), (unique, 0x10001211, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x6, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000de3, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x7bd, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c97, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c95, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c93, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1c92, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7bd, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c97, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c95, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c93, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c92, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x7bd, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c97, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c95, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c93, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1c92, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x7bd, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c97, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c95, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c93, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1c92, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x7bd, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c97, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c95, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c93, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1c92, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x7bd, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c97, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c95, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c93, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1c92, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7bd, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c97, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c95, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c93, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1c92, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7bd, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c97, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c95, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c93, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1c92, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x7bd, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c97, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c95, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c93, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1c92, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x7bd, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c97, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c95, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c93, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1c92, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x7bd, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c97, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c95, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c93, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1c92, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001219, 8) , (unique, 0xbd80, 8), (unique, 0x10001219, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001209, 8), (unique, 0x10001209, 8) PTRADD (register, 0x10, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000da3, 8) , (unique, 0x10000dab, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000de3, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000dab, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffa, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000da3, 8) , (unique, 0x10000dab, 8)]
[ ---  CBRANCH (ram, 0x204c90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffa, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000da3, 8) , (unique, 0x10000dab, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x204920, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000f83, 8) , (unique, 0x10000f8b, 8) , (unique, 0x10000f83, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb14, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xb14, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb14, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xb14, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xb14, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xb14, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xb14, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xb14, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xb14, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xb14, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xb14, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xb14, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0xb14, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0xb14, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xb14, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb14, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb14, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xb14, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb14, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb14, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xb14, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xb14, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb14, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xb14, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb14, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x38, 8)]
[(unique, 0x10000f8b, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001221, 8), (unique, 0x10001221, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7dc, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x7dc, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7dc, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x7dc, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x7dc, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x7dc, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x7dc, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7dc, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7dc, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x7dc, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x7dc, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x7dc, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x7dc, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x7dc, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x7dc, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x7dc, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x7dc, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x7dc, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x7dc, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x7dc, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x7dc, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x7dc, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x7dc, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x7dc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7dc, 4)]
[ ---  CALL (ram, 0x1426d0, 8) , (register, 0xb0, 8) , (register, 0xb8, 8) , (const, 0x18, 8) , (unique, 0x10000860, 8), (unique, 0x10000860, 8) PTRSUB (const, 0x0, 8) , (const, 0x203fd0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x10000d73, 8) COPY (stack, 0xfffffffffffffef8, 8), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[ ---  CBRANCH (ram, 0x2049c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffef8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(register, 0xa8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b1460, 8)]
[(unique, 0x100005d6, 4) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x204cb2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffedf, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb01, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xb01, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb01, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xb01, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xb01, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xb01, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xb01, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xb01, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xb01, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xb01, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xb01, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xb01, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0xb01, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0xb01, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xb01, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xb01, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xb01, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xb01, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb01, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb01, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xb01, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xb01, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb01, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xb01, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb01, 4)]
[ ---  CBRANCH (ram, 0x2049f4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001229, 8), (unique, 0x10001229, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_MULT (stack, 0xfffffffffffffef8, 8) , (const, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9f4, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x9f4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9f4, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x9f4, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x9f4, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x9f4, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x9f4, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x9f4, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x9f4, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x9f4, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x9f4, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x9f4, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x9f4, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x9f4, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x9f4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x9f4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x9f4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10001013, 8) , (const, 0x9f4, 4), (unique, 0x10001013, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) INT_ADD (stack, 0xfffffffffffffef8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9f4, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x9f4, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x9f4, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x9f4, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x9f4, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x9f4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9f4, 4)]
[ ---  CBRANCH (ram, 0x204e02, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001231, 8), (unique, 0x10001231, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_MULT (register, 0xa0, 8) , (const, 0x18, 8), (register, 0xa0, 8) INT_ADD (stack, 0xfffffffffffffef8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (const, 0x0, 16), (unique, 0x3b80, 8) CAST (unique, 0x10001239, 8), (unique, 0x10001239, 8) PTRADD (register, 0x0, 8) , (unique, 0x3a80, 8) , (const, 0x1, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x10, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_SEXT (unique, 0x100005d6, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xa21, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xa1e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa21, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa1e, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xa21, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xa1e, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xa21, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xa1e, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xa21, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xa1e, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xa21, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xa1e, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xa21, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xa1e, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xa21, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xa1e, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xa21, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xa1e, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xa21, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xa1e, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xa21, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xa1e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001241, 8) , (const, 0x2800000000, 8), (unique, 0x10001241, 8) CAST (unique, 0x10000b38, 8), (unique, 0x10000b38, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3b80, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0x3b80, 8) CAST (unique, 0x10001239, 8), (unique, 0x10001239, 8) PTRADD (register, 0x0, 8) , (unique, 0x3a80, 8) , (const, 0x1, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x10, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_SEXT (unique, 0x100005d6, 4)]
[ ---  BRANCH (ram, 0x204cce, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0x10000d73, 8)]
[(register, 0x10, 4) INT_SUB (unique, 0x100005d6, 4) , (const, 0x1, 4)]
[(unique, 0x10000f6b, 8) COPY (stack, 0xfffffffffffffef0, 8), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[ ---  CBRANCH (ram, 0x204d2c, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x100005d6, 4)]
[(register, 0x30, 8) CAST (unique, 0x1000125d, 8), (unique, 0x1000125d, 8) INT_ADD (unique, 0x3a00, 8) , (unique, 0x10000576, 8), (unique, 0x10000576, 8) INT_MULT (register, 0x10, 8) , (const, 0xffffffffffffffe8, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x8, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x1000124d, 8) , (unique, 0x10001255, 8), (unique, 0x10001255, 8) CAST (register, 0xa8, 8), (unique, 0x1000124d, 8) CAST (unique, 0x100008e0, 8), (unique, 0x100008e0, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffe8, 8), (register, 0x8, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x0, 8) INT_SEXT (unique, 0x10001249, 4), (unique, 0x10001249, 4) CAST (register, 0x10, 4)]
[(unique, 0x10000d93, 8) COPY (unique, 0x10001265, 8), (unique, 0x10001265, 8) CAST (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10001249, 4), (unique, 0x10001249, 4) CAST (register, 0x10, 4)]
[(unique, 0x10000ddb, 8) COPY (stack, 0xfffffffffffffef0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x1000073c, 4), (unique, 0x1000073c, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d93, 8) , (unique, 0x10000d9b, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000ddb, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000764, 8) , (unique, 0x10000740, 4), (unique, 0x10000764, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0x10000740, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000744, 8), (unique, 0x10000744, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d93, 8) , (unique, 0x10000d9b, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000ddb, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000076c, 8) , (unique, 0x1000074c, 4), (unique, 0x1000076c, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0x1000074c, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000750, 8), (unique, 0x10000750, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d93, 8) , (unique, 0x10000d9b, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000ddb, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000774, 8) , (unique, 0x10000758, 4), (unique, 0x10000774, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x10000758, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000075c, 8), (unique, 0x1000075c, 8) PTRADD (register, 0x10, 8) , (const, 0x3, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d93, 8) , (unique, 0x10000d9b, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000ddb, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001275, 8), (unique, 0x10001275, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x6, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000ddb, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xaaf, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1ca5, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1ca3, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1ca1, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1ca0, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xaaf, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ca5, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ca3, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ca1, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ca0, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xaaf, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1ca5, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1ca3, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1ca1, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x1ca0, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xaaf, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1ca5, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1ca3, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1ca1, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x1ca0, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xaaf, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1ca5, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1ca3, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1ca1, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x1ca0, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xaaf, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1ca5, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1ca3, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1ca1, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x1ca0, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xaaf, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1ca5, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1ca3, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1ca1, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1ca0, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xaaf, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1ca5, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1ca3, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1ca1, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1ca0, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xaaf, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1ca5, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1ca3, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1ca1, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x1ca0, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xaaf, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1ca5, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1ca3, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1ca1, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x1ca0, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xaaf, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1ca5, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1ca3, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1ca1, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x1ca0, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000127d, 8) , (unique, 0xbd80, 8), (unique, 0x1000127d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000126d, 8), (unique, 0x1000126d, 8) PTRADD (register, 0x10, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d93, 8) , (unique, 0x10000d9b, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000ddb, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000d9b, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffa, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d93, 8) , (unique, 0x10000d9b, 8)]
[ ---  CBRANCH (ram, 0x204d00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffa, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d93, 8) , (unique, 0x10000d9b, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x204d20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000f6b, 8) , (unique, 0x10000f73, 8) , (unique, 0x10000f6b, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xad5, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xad5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xad5, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xad5, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xad5, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xad5, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xad5, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xad5, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xad5, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xad5, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xad5, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xad5, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0xad5, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0xad5, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xad5, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xad5, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xad5, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xad5, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xad5, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xad5, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xad5, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xad5, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xad5, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xad5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xad5, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x38, 8)]
[(unique, 0x10000f73, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001285, 8), (unique, 0x10001285, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xace, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xace, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xace, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xace, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xace, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xace, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xace, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xace, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xace, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xace, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xace, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xace, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0xace, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0xace, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xace, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xace, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xace, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xace, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xace, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xace, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xace, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0xace, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xace, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xace, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xace, 4)]
[ ---  CALL (ram, 0x1426d0, 8) , (register, 0xa8, 8) , (register, 0xa0, 8) , (const, 0x18, 8) , (unique, 0x10000868, 8), (unique, 0x10000868, 8) PTRSUB (const, 0x0, 8) , (const, 0x203fd0, 8)]
[ ---  BRANCH (ram, 0x204963, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x204ad0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffeb0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffea8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b15a0, 8)]
[ ---  CBRANCH (ram, 0x204d54, 1) , (unique, 0x1000083b, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x99b, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x99b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x99b, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x99b, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x99b, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x99b, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x99b, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x99b, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x99b, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x99b, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x99b, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x99b, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x99b, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x99b, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x99b, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x99b, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x99b, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x99b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x99b, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x99b, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x99b, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x99b, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x99b, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x99b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x99b, 4)]
[ ---  CBRANCH (ram, 0x204e4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000128d, 8), (unique, 0x1000128d, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_MULT (stack, 0xfffffffffffffeb0, 8) , (const, 0xc, 8)]
[(stack, 0xfffffffffffffeb0, 4) SUBPIECE (stack, 0xfffffffffffffeb0, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x83f, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x83f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x83f, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x83f, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x83f, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x83f, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x83f, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x83f, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x83f, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x83f, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x83f, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x83f, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x83f, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x83f, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x83f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x83f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x83f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x83f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x83f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x83f, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x83f, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x83f, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x83f, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x83f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x83f, 4)]
[ ---  CBRANCH (ram, 0x204e4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001295, 8), (unique, 0x10001295, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_MULT (register, 0x0, 8) , (const, 0xc, 8), (register, 0x0, 8) INT_ADD (stack, 0xfffffffffffffeb0, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x204e58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (unique, 0x100008a8, 8), (unique, 0x100008a8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b14e0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x961, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x961, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x961, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x961, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x961, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x961, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x961, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x961, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x961, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x961, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x961, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x961, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x961, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x961, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x961, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x961, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x961, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x961, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x961, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x961, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x961, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001033, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x2046f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (unique, 0x10000888, 8), (unique, 0x10000888, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b1460, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x96f, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x96f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x96f, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x96f, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x96f, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x96f, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x96f, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x96f, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x96f, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x96f, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x96f, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x96f, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x96f, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x96f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x96f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x96f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x96f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x96f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x96f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x96f, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xa8, 8)]
[(unique, 0x1000103b, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x96f, 4)]
[ ---  BRANCH (ram, 0x2046f5, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000129d, 8) , (const, 0x0, 8), (unique, 0x1000129d, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0xc, 8), (register, 0x10, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xfffffffffffffeb0, 4) , (const, 0xffffffff, 4), (stack, 0xfffffffffffffeb0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x866, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x863, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x866, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x863, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x866, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x863, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x866, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x863, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x866, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x863, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x866, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x863, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x866, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x863, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x866, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x863, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x866, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x863, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x866, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x863, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x866, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x863, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0xe, 4), (unique, 0x3100, 8) CAST (unique, 0x100012ad, 8), (unique, 0x100012ad, 8) INT_ADD (unique, 0x100012a5, 8) , (const, 0x8, 8), (unique, 0x100012a5, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0xc, 8), (register, 0x10, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xfffffffffffffeb0, 4) , (const, 0xffffffff, 4), (stack, 0xfffffffffffffeb0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x204d72, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3100, 4) INT_SUB (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(unique, 0x10000ea3, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x204dd7, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(register, 0x30, 8) CAST (unique, 0x100012c9, 8), (unique, 0x100012c9, 8) INT_ADD (unique, 0x3a00, 8) , (unique, 0x100005ae, 8), (unique, 0x100005ae, 8) INT_MULT (register, 0x10, 8) , (const, 0xfffffffffffffff4, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x8, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x100012b9, 8) , (unique, 0x100012c1, 8), (unique, 0x100012c1, 8) CAST (stack, 0xfffffffffffffea8, 8), (unique, 0x100012b9, 8) CAST (unique, 0x100008e8, 8), (unique, 0x100008e8, 8) PTRSUB (const, 0x0, 8) , (const, 0xfffffffffffffff4, 8), (register, 0x8, 8) INT_MULT (register, 0x0, 8) , (const, 0xc, 8), (register, 0x10, 8) INT_ZEXT (unique, 0x3100, 4), (register, 0x0, 8) INT_SEXT (unique, 0x100012b5, 4), (unique, 0x100012b5, 4) CAST (unique, 0x3100, 4)]
[(unique, 0x10000d83, 8) COPY (unique, 0x100012d1, 8), (unique, 0x100012d1, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffea8, 8) , (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_MULT (register, 0x0, 8) , (const, 0xc, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100012b5, 4), (unique, 0x100012b5, 4) CAST (unique, 0x3100, 4)]
[(unique, 0x10000dd3, 8) COPY (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d83, 8) , (unique, 0x10000d8b, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000dd3, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100012f1, 8), (unique, 0x100012f1, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000dd3, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x8f4, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x8ea, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8f4, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8ea, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x8f4, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x8ea, 4), (ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x8f4, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x8ea, 4), (ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x8f4, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x8ea, 4), (ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x8f4, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x8ea, 4), (ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x8f4, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x8ea, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x8f4, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x8ea, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x8f4, 4), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x8ea, 4), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x8f4, 4), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x8ea, 4), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x8f4, 4), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x8ea, 4), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012f9, 8) , (unique, 0xbc80, 4), (unique, 0x100012f9, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100012e9, 8), (unique, 0x100012e9, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d83, 8) , (unique, 0x10000d8b, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000dd3, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000d8b, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100012e1, 8), (unique, 0x100012e1, 8) INT_ADD (unique, 0x100012d9, 8) , (const, 0xfffffffffffffff4, 8), (unique, 0x100012d9, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d83, 8) , (unique, 0x10000d8b, 8)]
[ ---  CBRANCH (ram, 0x204da8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) CAST (unique, 0x100012e1, 8), (unique, 0x100012e1, 8) INT_ADD (unique, 0x100012d9, 8) , (const, 0xfffffffffffffff4, 8), (unique, 0x100012d9, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000d83, 8) , (unique, 0x10000d8b, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x204dc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000ea3, 8) , (unique, 0x10000eab, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x952, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x952, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x952, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x952, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x952, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x952, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x952, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x952, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x952, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x952, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x952, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x952, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x952, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x952, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x952, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x952, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x952, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x952, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x952, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x952, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x952, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x952, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x952, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x952, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x952, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x18, 8)]
[(unique, 0x10000eab, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001301, 8), (unique, 0x10001301, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x916, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x916, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x916, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x916, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x916, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x916, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x916, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x916, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x916, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x916, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x916, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x916, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x916, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x916, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x916, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x916, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x916, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x916, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x916, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x916, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x916, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x916, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x916, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x916, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x916, 4)]
[ ---  CALL (ram, 0x1426d0, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffeb0, 8) , (const, 0xc, 8) , (unique, 0x10000870, 8), (unique, 0x10000870, 8) PTRSUB (const, 0x0, 8) , (const, 0x203ff0, 8)]
[ ---  BRANCH (ram, 0x204adb, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000d53, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(unique, 0x10001003, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x204af3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee070, 8) , (unique, 0x100008a0, 8), (unique, 0x100008a0, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b14e0, 8), (ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x926, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x926, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x926, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x926, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x926, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x926, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x926, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x926, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x926, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x926, 4)]
[(ram, 0x4ee070, 8) INDIRECT (unique, 0x10001003, 8) , (const, 0x926, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x926, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x926, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x926, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x926, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x926, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x926, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x926, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x926, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x926, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x926, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x926, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x926, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x926, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x926, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000d53, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (unique, 0x10001003, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000d43, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(unique, 0x10000ff3, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x204b0b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee068, 8) , (unique, 0x10000880, 8), (unique, 0x10000880, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b1460, 8), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x935, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x935, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x935, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x935, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x935, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x935, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x935, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x935, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x935, 4)]
[(ram, 0x4ee068, 8) INDIRECT (unique, 0x10000ff3, 8) , (const, 0x935, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x935, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x935, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x935, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x935, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x935, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x935, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x935, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x935, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x935, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x935, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x935, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x935, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x935, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x935, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x935, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000d43, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (unique, 0x10000ff3, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000d63, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee078, 8) COPY (stack, 0xfffffffffffffea8, 8)]
[ ---  CBRANCH (ram, 0x204b27, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee078, 8) , (unique, 0x100008b8, 8), (unique, 0x100008b8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b15a0, 8), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x946, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x946, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x946, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x946, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x946, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x946, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x946, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x946, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x946, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x946, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x946, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x946, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x946, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x946, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x946, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x946, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x946, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x946, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x946, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x946, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x946, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x946, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x946, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x946, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x946, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000d63, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100006d4, 4) COPY (stack, 0xffffffffffffff80, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(unique, 0x100006d8, 4) COPY (stack, 0xffffffffffffff84, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(unique, 0x100006e4, 4) COPY (stack, 0xffffffffffffff88, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(unique, 0x100006f0, 4) COPY (stack, 0xffffffffffffff8c, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[ ---  BRANCH (ram, 0x20461d, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001043, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x2046f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (unique, 0x10000898, 8), (unique, 0x10000898, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b14e0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa0f, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xa0f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa0f, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xa0f, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xa0f, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xa0f, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xa0f, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xa0f, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xa0f, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xa0f, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xa0f, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xa0f, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0xa0f, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0xa0f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xa0f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xa0f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xa0f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xa0f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xa0f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa0f, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xb0, 8)]
[(unique, 0x1000104b, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xa0f, 4)]
[ ---  BRANCH (ram, 0x2046f5, 1)]
[(unique, 0x100007b1, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100007b9, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x100007c1, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x100007c9, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(unique, 0x100007cd, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(unique, 0x100007d1, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(unique, 0x100007d5, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(unique, 0x100007d9, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(unique, 0x100007dd, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(unique, 0x100007e1, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(unique, 0x100007e9, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(unique, 0x100007f1, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(unique, 0x100007f9, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(unique, 0x100007fa, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(unique, 0x10000803, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x1000080b, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x1000081b, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x10000823, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x1000082b, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10000833, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10001073, 8) COPY (unique, 0x10000813, 8), (unique, 0x10000813, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[ ---  CBRANCH (ram, 0x204711, 1) , (unique, 0x100007b0, 1), (unique, 0x100007b0, 1) INT_NOTEQUAL (unique, 0x100007fb, 8) , (const, 0x0, 8), (unique, 0x100007fb, 8) MULTIEQUAL (unique, 0x1000101b, 8) , (unique, 0x10001023, 8) , (unique, 0x1000102b, 8) , (unique, 0x10001033, 8) , (unique, 0x1000103b, 8) , (unique, 0x10001043, 8) , (unique, 0x1000104b, 8) , (unique, 0x10001053, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x100007b1, 8) , (const, 0x2c3, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x100007b9, 8) , (const, 0x2c3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x100007c1, 8) , (const, 0x2c3, 4)]
[(ram, 0x4ee050, 4) INDIRECT (unique, 0x100007c9, 4) , (const, 0x2c3, 4)]
[(ram, 0x4ee054, 4) INDIRECT (unique, 0x100007cd, 4) , (const, 0x2c3, 4)]
[(ram, 0x4ee058, 4) INDIRECT (unique, 0x100007d1, 4) , (const, 0x2c3, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (unique, 0x100007d5, 4) , (const, 0x2c3, 4)]
[(ram, 0x4ee060, 4) INDIRECT (unique, 0x100007d9, 4) , (const, 0x2c3, 4)]
[(ram, 0x4ee064, 4) INDIRECT (unique, 0x100007dd, 4) , (const, 0x2c3, 4)]
[(ram, 0x4ee068, 8) INDIRECT (unique, 0x100007e1, 8) , (const, 0x2c3, 4)]
[(ram, 0x4ee070, 8) INDIRECT (unique, 0x100007e9, 8) , (const, 0x2c3, 4)]
[(ram, 0x4ee078, 8) INDIRECT (unique, 0x100007f1, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (unique, 0x100007f9, 1) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (unique, 0x100007fa, 1) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x10000803, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x1000080b, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10000813, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x1000081b, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x10000823, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x1000082b, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000833, 8) , (const, 0x2c3, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x100007fb, 8)]
[(unique, 0x1000101b, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001309, 8), (unique, 0x10001309, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100007fb, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[(unique, 0x10000ca7, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x100007b1, 8)]
[(unique, 0x10000caf, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (unique, 0x100007b9, 8)]
[(unique, 0x10000cb7, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (unique, 0x100007c1, 8)]
[(unique, 0x10000cbf, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (unique, 0x100007c9, 4)]
[(unique, 0x10000cc3, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (unique, 0x100007cd, 4)]
[(unique, 0x10000cc7, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (unique, 0x100007d1, 4)]
[(unique, 0x10000ccb, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (unique, 0x100007d5, 4)]
[(unique, 0x10000ccf, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (unique, 0x100007d9, 4)]
[(unique, 0x10000cd3, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (unique, 0x100007dd, 4)]
[(unique, 0x10000cd7, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (unique, 0x100007e1, 8)]
[(unique, 0x10000cdf, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (unique, 0x100007e9, 8)]
[(unique, 0x10000ce7, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (unique, 0x100007f1, 8)]
[(unique, 0x10000cef, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (unique, 0x100007f9, 1)]
[(unique, 0x10000cf0, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (unique, 0x100007fa, 1)]
[(unique, 0x10000cf1, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (unique, 0x10000803, 8)]
[(unique, 0x10000cf9, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (unique, 0x1000080b, 8)]
[(unique, 0x10000d09, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (unique, 0x10000813, 8)]
[(unique, 0x10000d11, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (unique, 0x1000081b, 8)]
[(unique, 0x10000d19, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (unique, 0x10000823, 8)]
[(unique, 0x10000d21, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (unique, 0x1000082b, 8)]
[(unique, 0x10000d29, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000833, 8)]
[(unique, 0x1000105b, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x20474f, 1) , (unique, 0x10000ca6, 1), (unique, 0x10000ca6, 1) INT_NOTEQUAL (unique, 0x10000d01, 8) , (const, 0x0, 8), (unique, 0x10000d01, 8) MULTIEQUAL (unique, 0x1000106b, 8) , (unique, 0x10001073, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000ca7, 8) , (const, 0x2e4, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x10000caf, 8) , (const, 0x2e4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x10000cb7, 8) , (const, 0x2e4, 4)]
[(ram, 0x4ee050, 4) INDIRECT (unique, 0x10000cbf, 4) , (const, 0x2e4, 4)]
[(ram, 0x4ee054, 4) INDIRECT (unique, 0x10000cc3, 4) , (const, 0x2e4, 4)]
[(ram, 0x4ee058, 4) INDIRECT (unique, 0x10000cc7, 4) , (const, 0x2e4, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (unique, 0x10000ccb, 4) , (const, 0x2e4, 4)]
[(ram, 0x4ee060, 4) INDIRECT (unique, 0x10000ccf, 4) , (const, 0x2e4, 4)]
[(ram, 0x4ee064, 4) INDIRECT (unique, 0x10000cd3, 4) , (const, 0x2e4, 4)]
[(ram, 0x4ee068, 8) INDIRECT (unique, 0x10000cd7, 8) , (const, 0x2e4, 4)]
[(ram, 0x4ee070, 8) INDIRECT (unique, 0x10000cdf, 8) , (const, 0x2e4, 4)]
[(ram, 0x4ee078, 8) INDIRECT (unique, 0x10000ce7, 8) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (unique, 0x10000cef, 1) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (unique, 0x10000cf0, 1) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x10000cf1, 8) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10000cf9, 8) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10000d09, 8) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10000d11, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x10000d19, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x10000d21, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000d29, 8) , (const, 0x2e4, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000d01, 8)]
[(unique, 0x1000106b, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001311, 8), (unique, 0x10001311, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000d01, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[(unique, 0x10000c1f, 8) MULTIEQUAL (unique, 0x10000ca7, 8) , (register, 0x110, 8)]
[(unique, 0x10000c27, 8) MULTIEQUAL (unique, 0x10000caf, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x10000c2f, 8) MULTIEQUAL (unique, 0x10000cb7, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000c37, 4) MULTIEQUAL (unique, 0x10000cbf, 4) , (ram, 0x4ee050, 4)]
[(unique, 0x10000c3b, 4) MULTIEQUAL (unique, 0x10000cc3, 4) , (ram, 0x4ee054, 4)]
[(unique, 0x10000c3f, 4) MULTIEQUAL (unique, 0x10000cc7, 4) , (ram, 0x4ee058, 4)]
[(unique, 0x10000c43, 4) MULTIEQUAL (unique, 0x10000ccb, 4) , (ram, 0x4ee05c, 4)]
[(unique, 0x10000c47, 4) MULTIEQUAL (unique, 0x10000ccf, 4) , (ram, 0x4ee060, 4)]
[(unique, 0x10000c4b, 4) MULTIEQUAL (unique, 0x10000cd3, 4) , (ram, 0x4ee064, 4)]
[(unique, 0x10000c4f, 8) MULTIEQUAL (unique, 0x10000cd7, 8) , (ram, 0x4ee068, 8)]
[(unique, 0x10000c57, 8) MULTIEQUAL (unique, 0x10000cdf, 8) , (ram, 0x4ee070, 8)]
[(unique, 0x10000c5f, 8) MULTIEQUAL (unique, 0x10000ce7, 8) , (ram, 0x4ee078, 8)]
[(unique, 0x10000c67, 1) MULTIEQUAL (unique, 0x10000cef, 1) , (stack, 0xfffffffffffffede, 1)]
[(unique, 0x10000c68, 1) MULTIEQUAL (unique, 0x10000cf0, 1) , (stack, 0xfffffffffffffedf, 1)]
[(unique, 0x10000c69, 8) MULTIEQUAL (unique, 0x10000cf1, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10000c71, 8) MULTIEQUAL (unique, 0x10000cf9, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x10000c79, 8) MULTIEQUAL (unique, 0x10000d09, 8) , (stack, 0xfffffffffffffef0, 8)]
[(unique, 0x10000c81, 8) MULTIEQUAL (unique, 0x10000d11, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x10000c89, 8) MULTIEQUAL (unique, 0x10000d19, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10000c91, 8) MULTIEQUAL (unique, 0x10000d21, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10000c99, 8) MULTIEQUAL (unique, 0x10000d29, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2045ce, 1) , (unique, 0x10000c16, 1), (unique, 0x10000c16, 1) INT_NOTEQUAL (unique, 0x10000c17, 8) , (const, 0x0, 8), (unique, 0x10000c17, 8) MULTIEQUAL (unique, 0x1000105b, 8) , (unique, 0x10001063, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000c1f, 8) , (const, 0x303, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x10000c27, 8) , (const, 0x303, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x10000c2f, 8) , (const, 0x303, 4)]
[(ram, 0x4ee050, 4) INDIRECT (unique, 0x10000c37, 4) , (const, 0x303, 4)]
[(ram, 0x4ee054, 4) INDIRECT (unique, 0x10000c3b, 4) , (const, 0x303, 4)]
[(ram, 0x4ee058, 4) INDIRECT (unique, 0x10000c3f, 4) , (const, 0x303, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (unique, 0x10000c43, 4) , (const, 0x303, 4)]
[(ram, 0x4ee060, 4) INDIRECT (unique, 0x10000c47, 4) , (const, 0x303, 4)]
[(ram, 0x4ee064, 4) INDIRECT (unique, 0x10000c4b, 4) , (const, 0x303, 4)]
[(ram, 0x4ee068, 8) INDIRECT (unique, 0x10000c4f, 8) , (const, 0x303, 4)]
[(ram, 0x4ee070, 8) INDIRECT (unique, 0x10000c57, 8) , (const, 0x303, 4)]
[(ram, 0x4ee078, 8) INDIRECT (unique, 0x10000c5f, 8) , (const, 0x303, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (unique, 0x10000c67, 1) , (const, 0x303, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (unique, 0x10000c68, 1) , (const, 0x303, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x10000c69, 8) , (const, 0x303, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10000c71, 8) , (const, 0x303, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10000c79, 8) , (const, 0x303, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10000c81, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x10000c89, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x10000c91, 8) , (const, 0x303, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000c99, 8) , (const, 0x303, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000c17, 8)]
[(unique, 0x10001063, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001319, 8), (unique, 0x10001319, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000c17, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc08, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xc08, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc08, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0xc08, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0xc08, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0xc08, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0xc08, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0xc08, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0xc08, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0xc08, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0xc08, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc08, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc08, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc08, 4)]
[ ---  CALL (ram, 0x17e250, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000c99, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (unique, 0x10000c91, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (unique, 0x10000c89, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (unique, 0x10000c81, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (unique, 0x10000c79, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (unique, 0x10000c71, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (unique, 0x10000c69, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (unique, 0x10000c68, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (unique, 0x10000c67, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (unique, 0x10000c5f, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (unique, 0x10000c4f, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (unique, 0x10000c4b, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (unique, 0x10000c47, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (unique, 0x10000c43, 4) , (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (unique, 0x10000c3f, 4) , (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (unique, 0x10000c3b, 4) , (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (unique, 0x10000c37, 4) , (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x10000c2f, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (unique, 0x10000c27, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x10000c1f, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000d4b, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) MULTIEQUAL (unique, 0x10000c57, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[ ---  CBRANCH (ram, 0x2045e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee070, 8) , (unique, 0x10000890, 8), (unique, 0x10000890, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b14e0, 8), (ram, 0x4ee070, 8) MULTIEQUAL (unique, 0x10000c57, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x31f, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x31f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x31f, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x31f, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x31f, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x31f, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x31f, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x31f, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x31f, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x31f, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x31f, 4), (ram, 0x4ee070, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b14e0, 8)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x31f, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x31f, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x31f, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x31f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x31f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x31f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x31f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x31f, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000d4b, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000d3b, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[ ---  CBRANCH (ram, 0x2045fe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee068, 8) , (unique, 0x10000878, 8), (unique, 0x10000878, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b1460, 8), (ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x32e, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x32e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x32e, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x32e, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x32e, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x32e, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x32e, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x32e, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x32e, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x32e, 4), (ram, 0x4ee068, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b1460, 8)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x32e, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x32e, 4)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x32e, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x32e, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x32e, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x32e, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x32e, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x32e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x32e, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000d3b, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000d5b, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[ ---  CBRANCH (ram, 0x20461d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee078, 8) , (unique, 0x100008b0, 8), (unique, 0x100008b0, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b15a0, 8), (ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x33e, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x33e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x33e, 4)]
[(ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x33e, 4)]
[(ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x33e, 4)]
[(ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x33e, 4)]
[(ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x33e, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x33e, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x33e, 4)]
[(ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x33e, 4)]
[(ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x33e, 4)]
[(ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x33e, 4), (ram, 0x4ee078, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b15a0, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x33e, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x33e, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x33e, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x33e, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x33e, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x33e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x33e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x33e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x33e, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000d5b, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffedf, 1) MULTIEQUAL (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1) , (stack, 0xfffffffffffffedf, 1)]
[(stack, 0xfffffffffffffede, 1) MULTIEQUAL (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1) , (stack, 0xfffffffffffffede, 1)]
[(ram, 0x4ee078, 8) MULTIEQUAL (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8) , (ram, 0x4ee078, 8)]
[(ram, 0x4ee070, 8) MULTIEQUAL (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8) , (ram, 0x4ee070, 8)]
[(ram, 0x4ee068, 8) MULTIEQUAL (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8) , (ram, 0x4ee068, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee05c, 4) MULTIEQUAL (ram, 0x4ee05c, 4) , (ram, 0x4ee05c, 4) , (unique, 0x100006f0, 4)]
[(ram, 0x4ee058, 4) MULTIEQUAL (ram, 0x4ee058, 4) , (ram, 0x4ee058, 4) , (unique, 0x100006e4, 4)]
[(ram, 0x4ee054, 4) MULTIEQUAL (ram, 0x4ee054, 4) , (ram, 0x4ee054, 4) , (unique, 0x100006d8, 4)]
[(ram, 0x4ee050, 4) MULTIEQUAL (ram, 0x4ee050, 4) , (ram, 0x4ee050, 4) , (unique, 0x100006d4, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[ ---  CBRANCH (ram, 0x204eda, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001321, 8), (unique, 0x10001321, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffede, 1) INDIRECT (stack, 0xfffffffffffffede, 1) , (const, 0x369, 4)]
[(stack, 0xfffffffffffffedf, 1) INDIRECT (stack, 0xfffffffffffffedf, 1) , (const, 0x369, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x369, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x369, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x369, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x369, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x369, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x369, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x369, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x369, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x369, 4)]
[(ram, 0x4ee050, 4) COPY (ram, 0x4ee050, 4), (ram, 0x4ee050, 4) INDIRECT (ram, 0x4ee050, 4) , (const, 0x369, 4)]
[(ram, 0x4ee054, 4) COPY (ram, 0x4ee054, 4), (ram, 0x4ee054, 4) INDIRECT (ram, 0x4ee054, 4) , (const, 0x369, 4)]
[(ram, 0x4ee058, 4) COPY (ram, 0x4ee058, 4), (ram, 0x4ee058, 4) INDIRECT (ram, 0x4ee058, 4) , (const, 0x369, 4)]
[(ram, 0x4ee05c, 4) COPY (ram, 0x4ee05c, 4), (ram, 0x4ee05c, 4) INDIRECT (ram, 0x4ee05c, 4) , (const, 0x369, 4)]
[(ram, 0x4ee060, 4) COPY (ram, 0x4ee060, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x369, 4)]
[(ram, 0x4ee064, 4) COPY (ram, 0x4ee064, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x369, 4)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8), (ram, 0x4ee068, 8) INDIRECT (ram, 0x4ee068, 8) , (const, 0x369, 4)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8), (ram, 0x4ee070, 8) INDIRECT (ram, 0x4ee070, 8) , (const, 0x369, 4)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8), (ram, 0x4ee078, 8) INDIRECT (ram, 0x4ee078, 8) , (const, 0x369, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4ee050, 4) COPY (ram, 0x4ee050, 4)]
[(ram, 0x4ee054, 4) COPY (ram, 0x4ee054, 4)]
[(ram, 0x4ee058, 4) COPY (ram, 0x4ee058, 4)]
[(ram, 0x4ee05c, 4) COPY (ram, 0x4ee05c, 4)]
[(ram, 0x4ee060, 4) COPY (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) COPY (ram, 0x4ee064, 4)]
[(ram, 0x4ee068, 8) COPY (ram, 0x4ee068, 8)]
[(ram, 0x4ee070, 8) COPY (ram, 0x4ee070, 8)]
[(ram, 0x4ee078, 8) COPY (ram, 0x4ee078, 8)]
[ ---  RETURN (const, 0x0, 8)]
