[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000028e, 8), (unique, 0x1000028e, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x1000025e, 8) COPY (ram, 0x4ecd38, 8)]
[ ---  CBRANCH (ram, 0x140730, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ecd38, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000296, 8), (unique, 0x10000296, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x140706, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ecd30, 4) , (const, 0x0, 4)]
[(ram, 0x4ecd30, 4) COPY (const, 0x1, 4)]
[(unique, 0x10000276, 8) COPY (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ecd30, 4) , (const, 0x0, 4)]
[(ram, 0x4ecd30, 4) COPY (const, 0x1, 4)]
[(unique, 0x10000266, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x140729, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1cb, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1cb, 4)]
[(ram, 0x4ecd30, 4) INDIRECT (ram, 0x4ecd30, 4) , (const, 0x1cb, 4)]
[(ram, 0x4ecd34, 4) INDIRECT (ram, 0x4ecd34, 4) , (const, 0x1cb, 4)]
[(ram, 0x4ecd38, 8) INDIRECT (ram, 0x4ecd38, 8) , (const, 0x1cb, 4)]
[(ram, 0x4ecd40, 4) INDIRECT (ram, 0x4ecd40, 4) , (const, 0x1cb, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1cb, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1cb, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x1cb, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1cb, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x10000168, 8), (unique, 0x10000168, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ecd30, 8)]
[(unique, 0x1000026e, 8) COPY (unique, 0x10000256, 8), (unique, 0x10000256, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0x1cb, 4)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xfffffffffffffff0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd38, 8) MULTIEQUAL (unique, 0x1000025e, 8) , (unique, 0x10000266, 8) , (unique, 0x1000026e, 8) , (unique, 0x10000276, 8)]
[(ram, 0x4ecd30, 4) MULTIEQUAL (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(register, 0x20, 8) CAST (unique, 0x1000029e, 8), (unique, 0x1000029e, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(ram, 0x4ecd34, 4) INT_ADD (ram, 0x4ecd34, 4) , (const, 0x1, 4), (ram, 0x4ecd34, 4) MULTIEQUAL (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4)]
[ ---  CBRANCH (ram, 0x140772, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ecd40, 4) , (const, 0x0, 4), (ram, 0x4ecd40, 4) MULTIEQUAL (ram, 0x4ecd40, 4) , (ram, 0x4ecd40, 4) , (ram, 0x4ecd40, 4) , (ram, 0x4ecd40, 4)]
[(ram, 0x4ecd40, 4) COPY (const, 0x1, 4)]
[(unique, 0x1000020e, 8) COPY (unique, 0x100002a6, 8), (unique, 0x100002a6, 8) CAST (register, 0x20, 8)]
[(register, 0x8, 8) COPY (const, 0x10, 8)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x1000020e, 8) , (unique, 0x10000216, 8)]
[ ---  CBRANCH (ram, 0x14075d, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x7c, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x7c, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x7c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x10000216, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000198, 8) , (const, 0x8, 8), (unique, 0x10000198, 8) INT_ADD (unique, 0x10000190, 8) , (const, 0x1, 8), (unique, 0x10000190, 8) INT_MULT (unique, 0xb880, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xb880, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x14075a, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8f, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x8f, 4)]
[(ram, 0x4ecd30, 4) INDIRECT (ram, 0x4ecd30, 4) , (const, 0x8f, 4)]
[(ram, 0x4ecd34, 4) INDIRECT (ram, 0x4ecd34, 4) , (const, 0x8f, 4)]
[(ram, 0x4ecd38, 8) INDIRECT (ram, 0x4ecd38, 8) , (const, 0x8f, 4)]
[(ram, 0x4ecd40, 4) INDIRECT (ram, 0x4ecd40, 4) , (const, 0x8f, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x8f, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0xbe00, 8) , (const, 0x8f, 4), (unique, 0xbe00, 8) INT_OR (stack, 0xfffffffffffffed8, 8) , (const, 0x20, 8)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x8f, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x8f, 4)]
[ ---  CALL (ram, 0x13f140, 8) , (const, 0x1, 4) , (register, 0x20, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd38, 8) MULTIEQUAL (ram, 0x4ecd38, 8) , (ram, 0x4ecd38, 8)]
[(ram, 0x4ecd34, 4) MULTIEQUAL (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4)]
[(ram, 0x4ecd30, 4) MULTIEQUAL (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1407a3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) MULTIEQUAL (ram, 0x4ecd40, 4) , (ram, 0x4ecd40, 4)]
[(ram, 0x4ecd40, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000021e, 4) COPY (ram, 0x4ecd30, 4)]
[ ---  CBRANCH (ram, 0x1407f7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ecd34, 4) , (const, 0x0, 4), (ram, 0x4ecd34, 4) INT_ADD (ram, 0x4ecd34, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4ecd38, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1407d5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x10000226, 4) COPY (unique, 0x100001d0, 4), (unique, 0x100001d0, 4) INT_ADD (ram, 0x4ecd30, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x1407f7, 1) , (unique, 0x100001d4, 1), (unique, 0x100001d4, 1) INT_NOTEQUAL (unique, 0x100001d0, 4) , (const, 0x0, 4), (unique, 0x100001d0, 4) INT_ADD (ram, 0x4ecd30, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ac, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1ac, 4)]
[(ram, 0x4ecd34, 4) INDIRECT (ram, 0x4ecd34, 4) , (const, 0x1ac, 4)]
[(ram, 0x4ecd38, 8) INDIRECT (ram, 0x4ecd38, 8) , (const, 0x1ac, 4)]
[(ram, 0x4ecd40, 4) INDIRECT (ram, 0x4ecd40, 4) , (const, 0x1ac, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1ac, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1ac, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x1ac, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x10000160, 8), (unique, 0x10000160, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ecd30, 8)]
[(unique, 0x10000222, 4) COPY (ram, 0x4ecd30, 4), (ram, 0x4ecd30, 4) INDIRECT (ram, 0x4ecd30, 4) , (const, 0x1ac, 4), (ram, 0x4ecd30, 4) INT_ADD (ram, 0x4ecd30, 4) , (const, 0xffffffff, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x13a, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4ecd30, 4) INDIRECT (ram, 0x4ecd30, 4) , (const, 0x13a, 4), (ram, 0x4ecd30, 4) COPY (unique, 0x1000022a, 4), (unique, 0x1000022a, 4) MULTIEQUAL (unique, 0x1000021e, 4) , (unique, 0x10000222, 4) , (unique, 0x10000226, 4)]
[(ram, 0x4ecd34, 4) INDIRECT (ram, 0x4ecd34, 4) , (const, 0x13a, 4), (ram, 0x4ecd34, 4) MULTIEQUAL (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4)]
[(ram, 0x4ecd40, 4) INDIRECT (ram, 0x4ecd40, 4) , (const, 0x13a, 4), (ram, 0x4ecd40, 4) MULTIEQUAL (ram, 0x4ecd40, 4) , (ram, 0x4ecd40, 4) , (ram, 0x4ecd40, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x13a, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x13a, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x13a, 4), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[ ---  CALL (ram, 0x13edd0, 8) , (const, 0x6, 4)]
[(unique, 0x10000236, 8) COPY (ram, 0x4ecd38, 8), (ram, 0x4ecd38, 8) INDIRECT (ram, 0x4ecd38, 8) , (const, 0x13a, 4), (ram, 0x4ecd38, 8) MULTIEQUAL (ram, 0x4ecd38, 8) , (ram, 0x4ecd38, 8) , (ram, 0x4ecd38, 8)]
[ ---  CBRANCH (ram, 0x140859, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ecd38, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002ae, 8), (unique, 0x100002ae, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8), (ram, 0x4ecd38, 8) INDIRECT (ram, 0x4ecd38, 8) , (const, 0x13a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4ecd38, 8) MULTIEQUAL (ram, 0x4ecd38, 8) , (ram, 0x4ecd38, 8) , (ram, 0x4ecd38, 8)]
[ ---  CBRANCH (ram, 0x14082f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ecd30, 4) , (const, 0x0, 4)]
[(ram, 0x4ecd30, 4) COPY (const, 0x1, 4)]
[(unique, 0x1000024e, 8) COPY (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ecd30, 4) , (const, 0x0, 4)]
[(ram, 0x4ecd30, 4) COPY (const, 0x1, 4)]
[(unique, 0x1000023e, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x140852, 1)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x186, 4)]
[(ram, 0x4ecd30, 4) INDIRECT (ram, 0x4ecd30, 4) , (const, 0x186, 4)]
[(ram, 0x4ecd34, 4) INDIRECT (ram, 0x4ecd34, 4) , (const, 0x186, 4)]
[(ram, 0x4ecd38, 8) INDIRECT (ram, 0x4ecd38, 8) , (const, 0x186, 4)]
[(ram, 0x4ecd40, 4) INDIRECT (ram, 0x4ecd40, 4) , (const, 0x186, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x186, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x186, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x186, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x10000170, 8), (unique, 0x10000170, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ecd30, 8)]
[(unique, 0x10000246, 8) COPY (unique, 0x1000022e, 8), (unique, 0x1000022e, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0x186, 4)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd38, 8) MULTIEQUAL (unique, 0x10000236, 8) , (unique, 0x1000023e, 8) , (unique, 0x10000246, 8) , (unique, 0x1000024e, 8)]
[(ram, 0x4ecd30, 4) MULTIEQUAL (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4ecd34, 4) INT_ADD (ram, 0x4ecd34, 4) , (const, 0x1, 4), (ram, 0x4ecd34, 4) MULTIEQUAL (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4)]
[ ---  CBRANCH (ram, 0x140860, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x2, 4)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd38, 8) MULTIEQUAL (ram, 0x4ecd38, 8) , (ram, 0x4ecd38, 8)]
[(ram, 0x4ecd34, 4) MULTIEQUAL (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4)]
[(ram, 0x4ecd30, 4) MULTIEQUAL (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4ecd40, 4) COPY (const, 0x3, 4)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8)]
[(unique, 0x100001fe, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100002b6, 8), (unique, 0x100002b6, 8) PTRADD (unique, 0x100001dd, 8) , (const, 0x80, 8) , (const, 0x1, 8), (unique, 0x100001dd, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(register, 0x8, 8) COPY (const, 0x26, 8)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100001fe, 8) , (unique, 0x10000206, 8)]
[ ---  CBRANCH (ram, 0x140882, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xf0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002ce, 8) , (const, 0x0, 4), (unique, 0x100002ce, 8) CAST (unique, 0x100001c0, 8), (unique, 0x100001c0, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x10000206, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x100002c6, 8), (unique, 0x100002c6, 8) INT_ADD (unique, 0x100002be, 8) , (unique, 0x100001b8, 8), (unique, 0x100002be, 8) CAST (register, 0x38, 8), (unique, 0x100001b8, 8) INT_ADD (unique, 0x1000011c, 8) , (const, 0x4, 8), (unique, 0x1000011c, 8) INT_MULT (unique, 0xb580, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0xb580, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x140880, 1)]
[(stack, 0xffffffffffffffe0, 4) COPY (const, 0x0, 4)]
[(unique, 0x100001ee, 8) COPY (unique, 0x3100, 8)]
[(register, 0x8, 8) COPY (const, 0x80, 8)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100001ee, 8) , (unique, 0x100001f6, 8)]
[ ---  CBRANCH (ram, 0x14089e, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x10b, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x10b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0xff, 1)]
[(unique, 0x100001f6, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100001c8, 8) , (const, 0x1, 8), (unique, 0x100001c8, 8) INT_ADD (unique, 0x10000134, 8) , (const, 0x1, 8), (unique, 0x10000134, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x14089c, 1)]
[(ram, 0x4ecd30, 4) INDIRECT (ram, 0x4ecd30, 4) , (const, 0x110, 4)]
[(ram, 0x4ecd34, 4) INDIRECT (ram, 0x4ecd34, 4) , (const, 0x110, 4)]
[(ram, 0x4ecd38, 8) INDIRECT (ram, 0x4ecd38, 8) , (const, 0x110, 4)]
[(ram, 0x4ecd40, 4) INDIRECT (ram, 0x4ecd40, 4) , (const, 0x110, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x110, 4)]
[ ---  CALL (ram, 0x13f110, 8) , (const, 0x6, 4) , (unique, 0x3c80, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x140780, 1)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd38, 8) MULTIEQUAL (ram, 0x4ecd38, 8) , (ram, 0x4ecd38, 8)]
[(ram, 0x4ecd34, 4) MULTIEQUAL (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4)]
[(ram, 0x4ecd30, 4) MULTIEQUAL (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4)]
[ ---  CBRANCH (ram, 0x1408c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (ram, 0x4ecd40, 4)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd38, 8) MULTIEQUAL (ram, 0x4ecd38, 8) , (ram, 0x4ecd38, 8)]
[(ram, 0x4ecd34, 4) MULTIEQUAL (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4)]
[(ram, 0x4ecd30, 4) MULTIEQUAL (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4)]
[ ---  CBRANCH (ram, 0x1408e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (ram, 0x4ecd40, 4)]
[ ---  BRANCH (ram, 0x1408f0, 1)]
[ ---  CBRANCH (ram, 0x1408b3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x1407a0, 1)]
[(ram, 0x4ecd30, 4) INDIRECT (ram, 0x4ecd30, 4) , (const, 0xcb, 4)]
[(ram, 0x4ecd34, 4) INDIRECT (ram, 0x4ecd34, 4) , (const, 0xcb, 4)]
[(ram, 0x4ecd38, 8) INDIRECT (ram, 0x4ecd38, 8) , (const, 0xcb, 4)]
[(ram, 0x4ecd40, 4) INDIRECT (ram, 0x4ecd40, 4) , (const, 0xcb, 4), (ram, 0x4ecd40, 4) COPY (const, 0x6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xcb, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xcb, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0xcb, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xcb, 4)]
[ ---  CALL (ram, 0x1e4dd0, 8) , (const, 0x7f, 4)]
[(ram, 0x4ecd30, 4) INDIRECT (ram, 0x4ecd30, 4) , (const, 0xd0, 4), (ram, 0x4ecd30, 4) MULTIEQUAL (ram, 0x4ecd30, 4) , (ram, 0x4ecd30, 4)]
[(ram, 0x4ecd34, 4) INDIRECT (ram, 0x4ecd34, 4) , (const, 0xd0, 4), (ram, 0x4ecd34, 4) MULTIEQUAL (ram, 0x4ecd34, 4) , (ram, 0x4ecd34, 4)]
[(ram, 0x4ecd38, 8) INDIRECT (ram, 0x4ecd38, 8) , (const, 0xd0, 4), (ram, 0x4ecd38, 8) MULTIEQUAL (ram, 0x4ecd38, 8) , (ram, 0x4ecd38, 8)]
[(ram, 0x4ecd40, 4) INDIRECT (ram, 0x4ecd40, 4) , (const, 0xd0, 4), (ram, 0x4ecd40, 4) COPY (const, 0x4, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xd0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[ ---  CALL (ram, 0x13edd0, 8) , (const, 0x6, 4)]
[ ---  BRANCH (ram, 0x140789, 1)]
