[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(unique, 0x1000048f, 8) COPY (ram, 0x4c4bf8, 8)]
[ ---  CBRANCH (ram, 0x136f0f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (ram, 0x4c4bf8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004bf, 8), (unique, 0x100004bf, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x136ee5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4bf0, 4) , (const, 0x0, 4)]
[(ram, 0x4c4bf0, 4) COPY (const, 0x1, 4)]
[(unique, 0x100004a7, 8) COPY (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4bf0, 4) , (const, 0x0, 4)]
[(ram, 0x4c4bf0, 4) COPY (const, 0x1, 4)]
[(unique, 0x10000497, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x136f08, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x238, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x238, 4)]
[(ram, 0x4c4bf0, 4) INDIRECT (ram, 0x4c4bf0, 4) , (const, 0x238, 4)]
[(ram, 0x4c4bf4, 4) INDIRECT (ram, 0x4c4bf4, 4) , (const, 0x238, 4)]
[(ram, 0x4c4bf8, 8) INDIRECT (ram, 0x4c4bf8, 8) , (const, 0x238, 4)]
[(ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0x238, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x238, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x238, 4)]
[ ---  CALL (ram, 0x2147c0, 8) , (unique, 0x100003a7, 8), (unique, 0x100003a7, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4bf0, 8)]
[(unique, 0x1000049f, 8) COPY (unique, 0x10000487, 8), (unique, 0x10000487, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c4bf8, 8) MULTIEQUAL (unique, 0x1000048f, 8) , (unique, 0x10000497, 8) , (unique, 0x1000049f, 8) , (unique, 0x100004a7, 8)]
[(ram, 0x4c4bf0, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(register, 0x20, 8) CAST (unique, 0x100004c7, 8), (unique, 0x100004c7, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(ram, 0x4c4bf4, 4) INT_ADD (ram, 0x4c4bf4, 4) , (const, 0x1, 4), (ram, 0x4c4bf4, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4)]
[ ---  CBRANCH (ram, 0x136f63, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4c00, 4) , (const, 0x0, 4), (ram, 0x4c4c00, 4) MULTIEQUAL (ram, 0x4c4c00, 4) , (ram, 0x4c4c00, 4) , (ram, 0x4c4c00, 4) , (ram, 0x4c4c00, 4)]
[(unique, 0x1000043f, 8) COPY (unique, 0x100004cf, 8), (unique, 0x100004cf, 8) CAST (register, 0x20, 8)]
[(register, 0x8, 8) COPY (const, 0x10, 8)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x1000043f, 8) , (unique, 0x10000447, 8)]
[ ---  CBRANCH (ram, 0x136f70, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x20b, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x20b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x10000447, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100003d7, 8) , (const, 0x8, 8), (unique, 0x100003d7, 8) INT_ADD (unique, 0x100003cf, 8) , (const, 0x1, 8), (unique, 0x100003cf, 8) INT_MULT (unique, 0xb880, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xb880, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x136f6d, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21e, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x21e, 4)]
[(ram, 0x4c4bf0, 4) INDIRECT (ram, 0x4c4bf0, 4) , (const, 0x21e, 4)]
[(ram, 0x4c4bf4, 4) INDIRECT (ram, 0x4c4bf4, 4) , (const, 0x21e, 4)]
[(ram, 0x4c4bf8, 8) INDIRECT (ram, 0x4c4bf8, 8) , (const, 0x21e, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x21e, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x21e, 4), (stack, 0xfffffffffffffed8, 8) COPY (const, 0x20, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x21e, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x21e, 4)]
[ ---  CALL (ram, 0x135710, 8) , (const, 0x1, 4) , (register, 0x20, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x136f25, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4c00, 4) , (const, 0x1, 4), (ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0x21e, 4), (ram, 0x4c4c00, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x136f9c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4c00, 4) , (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e8, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1e8, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c4bf0, 4) INDIRECT (ram, 0x4c4bf0, 4) , (const, 0x1e8, 4), (ram, 0x4c4bf0, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4)]
[(ram, 0x4c4bf4, 4) INDIRECT (ram, 0x4c4bf4, 4) , (const, 0x1e8, 4), (ram, 0x4c4bf4, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4)]
[(ram, 0x4c4bf8, 8) INDIRECT (ram, 0x4c4bf8, 8) , (const, 0x1e8, 4), (ram, 0x4c4bf8, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x1e8, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1e8, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x1e8, 4), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x1e8, 4), (stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[ ---  CALL (ram, 0x17bf50, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x136f2e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4c00, 4) , (const, 0x2, 4), (ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0x1e8, 4), (ram, 0x4c4c00, 4) COPY (const, 0x2, 4)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c4bf8, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8)]
[(ram, 0x4c4bf4, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4)]
[(ram, 0x4c4bf0, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x136fbc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) MULTIEQUAL (ram, 0x4c4c00, 4) , (ram, 0x4c4c00, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c4bf8, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4c00, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000044f, 4) COPY (ram, 0x4c4bf0, 4), (ram, 0x4c4bf0, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4)]
[ ---  CBRANCH (ram, 0x137010, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4bf4, 4) , (const, 0x0, 4), (ram, 0x4c4bf4, 4) INT_ADD (ram, 0x4c4bf4, 4) , (const, 0xffffffff, 4), (ram, 0x4c4bf4, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4)]
[(ram, 0x4c4bf8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x136fee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x10000457, 4) COPY (unique, 0x100003ff, 4), (unique, 0x100003ff, 4) INT_ADD (ram, 0x4c4bf0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x137010, 1) , (unique, 0x10000403, 1), (unique, 0x10000403, 1) INT_NOTEQUAL (unique, 0x100003ff, 4) , (const, 0x0, 4), (unique, 0x100003ff, 4) INT_ADD (ram, 0x4c4bf0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c8, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1c8, 4)]
[(ram, 0x4c4bf4, 4) INDIRECT (ram, 0x4c4bf4, 4) , (const, 0x1c8, 4)]
[(ram, 0x4c4bf8, 8) INDIRECT (ram, 0x4c4bf8, 8) , (const, 0x1c8, 4)]
[(ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0x1c8, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x1c8, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1c8, 4)]
[ ---  CALL (ram, 0x2147f0, 8) , (unique, 0x1000039f, 8), (unique, 0x1000039f, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4bf0, 8)]
[(unique, 0x10000453, 4) COPY (ram, 0x4c4bf0, 4), (ram, 0x4c4bf0, 4) INDIRECT (ram, 0x4c4bf0, 4) , (const, 0x1c8, 4), (ram, 0x4c4bf0, 4) INT_ADD (ram, 0x4c4bf0, 4) , (const, 0xffffffff, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x156, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c4bf0, 4) INDIRECT (ram, 0x4c4bf0, 4) , (const, 0x156, 4), (ram, 0x4c4bf0, 4) COPY (unique, 0x1000045b, 4), (unique, 0x1000045b, 4) MULTIEQUAL (unique, 0x1000044f, 4) , (unique, 0x10000453, 4) , (unique, 0x10000457, 4)]
[(ram, 0x4c4bf4, 4) INDIRECT (ram, 0x4c4bf4, 4) , (const, 0x156, 4), (ram, 0x4c4bf4, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4)]
[(ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0x156, 4), (ram, 0x4c4c00, 4) MULTIEQUAL (ram, 0x4c4c00, 4) , (ram, 0x4c4c00, 4) , (ram, 0x4c4c00, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x156, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x156, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  CALL (ram, 0x1353e0, 8) , (const, 0x6, 4)]
[(unique, 0x10000467, 8) COPY (ram, 0x4c4bf8, 8), (ram, 0x4c4bf8, 8) INDIRECT (ram, 0x4c4bf8, 8) , (const, 0x156, 4), (ram, 0x4c4bf8, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8)]
[ ---  CBRANCH (ram, 0x137072, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (ram, 0x4c4bf8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004d7, 8), (unique, 0x100004d7, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8), (ram, 0x4c4bf8, 8) INDIRECT (ram, 0x4c4bf8, 8) , (const, 0x156, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x156, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4c4bf8, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8)]
[ ---  CBRANCH (ram, 0x137048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4bf0, 4) , (const, 0x0, 4)]
[(ram, 0x4c4bf0, 4) COPY (const, 0x1, 4)]
[(unique, 0x1000047f, 8) COPY (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4bf0, 4) , (const, 0x0, 4)]
[(ram, 0x4c4bf0, 4) COPY (const, 0x1, 4)]
[(unique, 0x1000046f, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x13706b, 1)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1a2, 4)]
[(ram, 0x4c4bf0, 4) INDIRECT (ram, 0x4c4bf0, 4) , (const, 0x1a2, 4)]
[(ram, 0x4c4bf4, 4) INDIRECT (ram, 0x4c4bf4, 4) , (const, 0x1a2, 4)]
[(ram, 0x4c4bf8, 8) INDIRECT (ram, 0x4c4bf8, 8) , (const, 0x1a2, 4)]
[(ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0x1a2, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x1a2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1a2, 4)]
[ ---  CALL (ram, 0x2147c0, 8) , (unique, 0x100003af, 8), (unique, 0x100003af, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4bf0, 8)]
[(unique, 0x10000477, 8) COPY (unique, 0x1000045f, 8), (unique, 0x1000045f, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0x1a2, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c4bf8, 8) MULTIEQUAL (unique, 0x10000467, 8) , (unique, 0x1000046f, 8) , (unique, 0x10000477, 8) , (unique, 0x1000047f, 8)]
[(ram, 0x4c4bf0, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c4bf4, 4) INT_ADD (ram, 0x4c4bf4, 4) , (const, 0x1, 4), (ram, 0x4c4bf4, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4)]
[(stack, 0xffffffffffffffe0, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c4bf8, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8)]
[(ram, 0x4c4bf4, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4)]
[(ram, 0x4c4bf0, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x137079, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (ram, 0x4c4c00, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c4bf8, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8)]
[(ram, 0x4c4bf4, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4)]
[(ram, 0x4c4bf0, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c4c00, 4) COPY (const, 0x4, 4)]
[(unique, 0x1000042f, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100004df, 8), (unique, 0x100004df, 8) PTRADD (unique, 0x10000412, 8) , (const, 0x80, 8) , (const, 0x1, 8), (unique, 0x10000412, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(register, 0x8, 8) COPY (const, 0x13, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x1000042f, 8) , (unique, 0x10000437, 8)]
[ ---  CBRANCH (ram, 0x13709a, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003f7, 8) , (const, 0x0, 8), (unique, 0x100003f7, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x10000437, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x100004ef, 8), (unique, 0x100004ef, 8) INT_ADD (unique, 0x100004e7, 8) , (unique, 0x100003ef, 8), (unique, 0x100004e7, 8) CAST (register, 0x38, 8), (unique, 0x100003ef, 8) INT_ADD (unique, 0x10000156, 8) , (const, 0x8, 8), (unique, 0x10000156, 8) INT_MULT (unique, 0xb880, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0xb880, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x137097, 1)]
[(ram, 0x4c4bf0, 4) INDIRECT (ram, 0x4c4bf0, 4) , (const, 0x122, 4)]
[(ram, 0x4c4bf4, 4) INDIRECT (ram, 0x4c4bf4, 4) , (const, 0x122, 4)]
[(ram, 0x4c4bf8, 8) INDIRECT (ram, 0x4c4bf8, 8) , (const, 0x122, 4)]
[(ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0x122, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x122, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x122, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x122, 4), (stack, 0xffffffffffffff68, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x122, 4), (stack, 0xffffffffffffff70, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x122, 4), (stack, 0xffffffffffffff78, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x122, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x122, 4), (stack, 0xffffffffffffff88, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x122, 4), (stack, 0xffffffffffffff90, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x122, 4), (stack, 0xffffffffffffff98, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x122, 4), (stack, 0xffffffffffffffa0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x122, 4), (stack, 0xffffffffffffffa8, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x122, 4), (stack, 0xffffffffffffffb0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x122, 4), (stack, 0xffffffffffffffb8, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x122, 4), (stack, 0xffffffffffffffc0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x122, 4), (stack, 0xffffffffffffffc8, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x122, 4), (stack, 0xffffffffffffffd0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x122, 4), (stack, 0xffffffffffffffd8, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (stack, 0xffffffffffffffe0, 4) , (const, 0x122, 4), (stack, 0xffffffffffffffe0, 4) COPY (const, 0x0, 4)]
[ ---  CALL (ram, 0x1356e0, 8) , (const, 0x6, 4) , (unique, 0x3c80, 8) , (const, 0x0, 8)]
[(unique, 0x100002f4, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (ram, 0x4c4bf0, 4)]
[(unique, 0x100002f8, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (ram, 0x4c4bf4, 4)]
[(unique, 0x100002fc, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (ram, 0x4c4bf8, 8)]
[(unique, 0x10000308, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(unique, 0x1000030c, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x10000314, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x1000031c, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x10000324, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x1000032c, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000334, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000033c, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000344, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x1000034c, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x10000354, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x1000035c, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000364, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x1000036c, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x10000374, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000037c, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(unique, 0x10000384, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(unique, 0x1000038c, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(unique, 0x10000394, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (stack, 0xffffffffffffffe0, 4)]
[ ---  CBRANCH (ram, 0x136f40, 1) , (unique, 0x100002f3, 1), (unique, 0x100002f3, 1) INT_EQUAL (unique, 0x10000304, 4) , (const, 0x4, 4), (unique, 0x10000304, 4) MULTIEQUAL (ram, 0x4c4c00, 4) , (register, 0x0, 4)]
[(ram, 0x4c4bf0, 4) INDIRECT (unique, 0x100002f4, 4) , (const, 0xba, 4)]
[(ram, 0x4c4bf4, 4) INDIRECT (unique, 0x100002f8, 4) , (const, 0xba, 4)]
[(ram, 0x4c4bf8, 8) INDIRECT (unique, 0x100002fc, 8) , (const, 0xba, 4)]
[(ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0xba, 4), (ram, 0x4c4c00, 4) COPY (const, 0x5, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (unique, 0x10000308, 4) , (const, 0xba, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x1000030c, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x10000314, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x1000031c, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x10000324, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x1000032c, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000334, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x1000033c, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x10000344, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x1000034c, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x10000354, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x1000035c, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x10000364, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x1000036c, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000374, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (unique, 0x1000037c, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x10000384, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0x1000038c, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (unique, 0x10000394, 4) , (const, 0xba, 4)]
[ ---  CALL (ram, 0x176d20, 8)]
[(unique, 0x10000198, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (unique, 0x100002f4, 4)]
[(unique, 0x1000019c, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (unique, 0x100002f8, 4)]
[(unique, 0x100001a0, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (unique, 0x100002fc, 8)]
[(unique, 0x100001ac, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (unique, 0x10000308, 4)]
[(unique, 0x100001b0, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (unique, 0x1000030c, 8)]
[(unique, 0x100001b8, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (unique, 0x10000314, 8)]
[(unique, 0x100001c0, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x1000031c, 8)]
[(unique, 0x100001c8, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x10000324, 8)]
[(unique, 0x100001d0, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x1000032c, 8)]
[(unique, 0x100001d8, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000334, 8)]
[(unique, 0x100001e0, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x1000033c, 8)]
[(unique, 0x100001e8, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x10000344, 8)]
[(unique, 0x100001f0, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x1000034c, 8)]
[(unique, 0x100001f8, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x10000354, 8)]
[(unique, 0x10000200, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x1000035c, 8)]
[(unique, 0x10000208, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x10000364, 8)]
[(unique, 0x10000210, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (unique, 0x1000036c, 8)]
[(unique, 0x10000218, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000374, 8)]
[(unique, 0x10000220, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (unique, 0x1000037c, 8)]
[(unique, 0x10000228, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0x10000384, 8)]
[(unique, 0x10000230, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (unique, 0x1000038c, 8)]
[(unique, 0x10000238, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (unique, 0x10000394, 4)]
[ ---  CBRANCH (ram, 0x136f49, 1) , (unique, 0x10000197, 1), (unique, 0x10000197, 1) INT_EQUAL (unique, 0x100001a8, 4) , (const, 0x5, 4), (unique, 0x100001a8, 4) MULTIEQUAL (ram, 0x4c4c00, 4) , (unique, 0x10000304, 4)]
[(ram, 0x4c4bf0, 4) INDIRECT (unique, 0x10000198, 4) , (const, 0xa9, 4)]
[(ram, 0x4c4bf4, 4) INDIRECT (unique, 0x1000019c, 4) , (const, 0xa9, 4)]
[(ram, 0x4c4bf8, 8) INDIRECT (unique, 0x100001a0, 8) , (const, 0xa9, 4)]
[(ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0xa9, 4), (ram, 0x4c4c00, 4) COPY (const, 0x6, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (unique, 0x100001ac, 4) , (const, 0xa9, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x100001b0, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x100001b8, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x100001c0, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x100001c8, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x100001d0, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x100001d8, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100001e0, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x100001e8, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x100001f0, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x100001f8, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000200, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x10000208, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x10000210, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000218, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (unique, 0x10000220, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x10000228, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0x10000230, 8) , (const, 0xa9, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (unique, 0x10000238, 4) , (const, 0xa9, 4)]
[ ---  CALL (ram, 0x1353e0, 8) , (const, 0x6, 4)]
[(unique, 0x1000023d, 4) MULTIEQUAL (ram, 0x4c4bf0, 4) , (unique, 0x10000198, 4)]
[(unique, 0x10000241, 4) MULTIEQUAL (ram, 0x4c4bf4, 4) , (unique, 0x1000019c, 4)]
[(unique, 0x10000245, 8) MULTIEQUAL (ram, 0x4c4bf8, 8) , (unique, 0x100001a0, 8)]
[(unique, 0x10000251, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (unique, 0x100001ac, 4)]
[(unique, 0x10000255, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (unique, 0x100001b0, 8)]
[(unique, 0x1000025d, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (unique, 0x100001b8, 8)]
[(unique, 0x10000265, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x100001c0, 8)]
[(unique, 0x1000026d, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x100001c8, 8)]
[(unique, 0x10000275, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x100001d0, 8)]
[(unique, 0x1000027d, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x100001d8, 8)]
[(unique, 0x10000285, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x100001e0, 8)]
[(unique, 0x1000028d, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x100001e8, 8)]
[(unique, 0x10000295, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x100001f0, 8)]
[(unique, 0x1000029d, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x100001f8, 8)]
[(unique, 0x100002a5, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x10000200, 8)]
[(unique, 0x100002ad, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x10000208, 8)]
[(unique, 0x100002b5, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (unique, 0x10000210, 8)]
[(unique, 0x100002bd, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000218, 8)]
[(unique, 0x100002c5, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (unique, 0x10000220, 8)]
[(unique, 0x100002cd, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0x10000228, 8)]
[(unique, 0x100002d5, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (unique, 0x10000230, 8)]
[(unique, 0x100002dd, 4) MULTIEQUAL (stack, 0xffffffffffffffe0, 4) , (unique, 0x10000238, 4)]
[ ---  CBRANCH (ram, 0x136f52, 1) , (unique, 0x1000023c, 1), (unique, 0x1000023c, 1) INT_NOTEQUAL (unique, 0x100002e8, 4) , (const, 0x6, 4), (unique, 0x100002e8, 4) MULTIEQUAL (ram, 0x4c4c00, 4) , (unique, 0x100001a8, 4)]
[ ---  BRANCH (ram, 0x137186, 1)]
[ ---  CBRANCH (ram, 0x137187, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002e8, 4) , (const, 0x7, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x10000255, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x1000025d, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10000265, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000026d, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10000275, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x1000027d, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x10000285, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x1000028d, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000295, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000029d, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100002a5, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x100002ad, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x100002b5, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100002bd, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (unique, 0x100002c5, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x100002cd, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0x100002d5, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffe0, 4) INDIRECT (unique, 0x100002dd, 4) , (const, 0xa1, 4)]
[ ---  CALL (ram, 0x1cbc90, 8) , (const, 0x7f, 4)]
[(ram, 0x4c4bf0, 4) COPY (ram, 0x4c4bf0, 4), (ram, 0x4c4bf0, 4) INDIRECT (unique, 0x1000023d, 4) , (const, 0xa1, 4)]
[(ram, 0x4c4bf4, 4) COPY (ram, 0x4c4bf4, 4), (ram, 0x4c4bf4, 4) INDIRECT (unique, 0x10000241, 4) , (const, 0xa1, 4)]
[(ram, 0x4c4bf8, 8) COPY (ram, 0x4c4bf8, 8), (ram, 0x4c4bf8, 8) INDIRECT (unique, 0x10000245, 8) , (const, 0xa1, 4)]
[(ram, 0x4c4c00, 4) COPY (ram, 0x4c4c00, 4), (ram, 0x4c4c00, 4) INDIRECT (ram, 0x4c4c00, 4) , (const, 0xa1, 4), (ram, 0x4c4c00, 4) COPY (const, 0x8, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) INDIRECT (unique, 0x10000251, 4) , (const, 0xa1, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x136f60, 1)]
