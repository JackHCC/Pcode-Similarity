[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000d0, 8), (unique, 0x100000d0, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x100000a8, 8) COPY (register, 0x38, 8)]
[(unique, 0x100000b8, 8) COPY (register, 0x30, 8)]
[(unique, 0x100000c8, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x48ff07, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f08, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x31, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x31, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x31, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (unique, 0x100000a8, 8) , (const, 0x31, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x100000b8, 8) , (const, 0x31, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0x100000c8, 8) , (const, 0x31, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x31, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x31, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000078, 8), (unique, 0x10000078, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60e0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x36, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x36, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x36, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x36, 4), (stack, 0xffffffffffffffc8, 8) MULTIEQUAL (unique, 0x100000a8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x36, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (unique, 0x100000b8, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x36, 4), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (unique, 0x100000c8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x36, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x36, 4), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffff0, 8)]
[(unique, 0x10000090, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48ff23, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x48bad0, 8) , (unique, 0x10000070, 8) , (register, 0x20, 8), (unique, 0x10000070, 8) PTRSUB (const, 0x0, 8) , (const, 0x48fea0, 8)]
[(unique, 0x10000098, 8) COPY (stack, 0xffffffffffffffe0, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10000090, 8) , (unique, 0x10000098, 8)]
[ ---  CBRANCH (ram, 0x48ff3c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f70, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x54, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x54, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x54, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x54, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000080, 8), (unique, 0x10000080, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60e0, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x48ff56, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffff0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000d8, 8), (unique, 0x100000d8, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x76, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x76, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x76, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x76, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x76, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x76, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8)]
