[(unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x36, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x3f, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x36, 4), (register, 0x20a, 1) COPY (const, 0x0, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x36, 4)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x3f, 4), (ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x36, 4)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x3f, 4), (ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3f, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3f, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x3f, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3f, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x36, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002b9, 8), (unique, 0x100002b9, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x269596, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1df920, 8) , (register, 0x38, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x21f, 4)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x21f, 4)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x21f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0xffffffff, 4)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x269549, 1)]
[ ---  CBRANCH (ram, 0x269578, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0x3100, 8) , (ram, 0x4ee0a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21a, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x21a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x21c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x21a, 4)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x21c, 4), (ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x21a, 4)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x21c, 4), (ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x21a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x100002c1, 8), (unique, 0x100002c1, 8) CALL (ram, 0x121230, 8) , (ram, 0x4ec8d8, 8) , (register, 0x38, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x2693a5, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(ram, 0x4ee0a0, 8) MULTIEQUAL (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8)]
[(ram, 0x4ec8d8, 8) MULTIEQUAL (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x62, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x62, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x62, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x62, 4), (ram, 0x4ec8d8, 8) MULTIEQUAL (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x62, 4), (ram, 0x4ee0a0, 8) MULTIEQUAL (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x62, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x62, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x269530, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1dfbe0, 8) , (register, 0x0, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x208, 4)]
[ ---  CALL (ram, 0x1dfbb0, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x210, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x208, 4)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x210, 4), (ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x208, 4)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x210, 4), (ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x208, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002c9, 8) , (register, 0x10, 4), (unique, 0x100002c9, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x208, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x208, 4)]
[ ---  CBRANCH (ram, 0x2693e2, 1) , (unique, 0x100001be, 1), (unique, 0x100001be, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100001d1, 8), (unique, 0x100001d1, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2693c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x8, 8) COPY (const, 0x6, 8)]
[(unique, 0x10000259, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x13, 8)]
[(unique, 0x10000289, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b57de, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000289, 8) , (unique, 0x10000291, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000259, 8) , (unique, 0x10000261, 8)]
[ ---  CBRANCH (ram, 0x2693f3, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000261, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x100001e9, 8) , (const, 0x1, 8), (unique, 0x100001e9, 8) INT_ADD (unique, 0x100000ef, 8) , (const, 0x1, 8), (unique, 0x100000ef, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000291, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100001e1, 8) , (const, 0x1, 8), (unique, 0x100001e1, 8) INT_ADD (unique, 0x100000e7, 8) , (const, 0x1, 8), (unique, 0x100000e7, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x2693f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2693c0, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x8, 8) COPY (const, 0x7, 8)]
[(unique, 0x10000249, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10000279, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b57e4, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000279, 8) , (unique, 0x10000281, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000249, 8) , (unique, 0x10000251, 8)]
[ ---  CBRANCH (ram, 0x269406, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000251, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x100001f9, 8) , (const, 0x1, 8), (unique, 0x100001f9, 8) INT_ADD (unique, 0x10000108, 8) , (const, 0x1, 8), (unique, 0x10000108, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000281, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100001f1, 8) , (const, 0x1, 8), (unique, 0x100001f1, 8) INT_ADD (unique, 0x10000100, 8) , (const, 0x1, 8), (unique, 0x10000100, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x269404, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2693c0, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x8, 8) COPY (const, 0x7, 8)]
[(unique, 0x10000239, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10000269, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b57eb, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000269, 8) , (unique, 0x10000271, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000239, 8) , (unique, 0x10000241, 8)]
[ ---  CBRANCH (ram, 0x269419, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000241, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000209, 8) , (const, 0x1, 8), (unique, 0x10000209, 8) INT_ADD (unique, 0x10000121, 8) , (const, 0x1, 8), (unique, 0x10000121, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000271, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000201, 8) , (const, 0x1, 8), (unique, 0x10000201, 8) INT_ADD (unique, 0x10000119, 8) , (const, 0x1, 8), (unique, 0x10000119, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x269417, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2693c0, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(unique, 0x10000299, 8) COPY (ram, 0x4ec8d8, 8)]
[ ---  CBRANCH (ram, 0x26949a, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (ram, 0x4ee0a0, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x3100, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_ADD (unique, 0x100002d9, 8) , (unique, 0x10000219, 8), (unique, 0x100002d9, 8) CAST (register, 0x0, 8), (unique, 0x10000219, 8) INT_SUB (register, 0x8, 8) , (unique, 0x100002d1, 8), (unique, 0x100002d1, 8) CAST (unique, 0x3100, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x10, 8)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x11c, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (ram, 0x4ec8d8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x125, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11c, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x125, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x11c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x125, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x11c, 4)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x125, 4), (ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x11c, 4)]
[(ram, 0x4ee0a0, 8) INDIRECT (unique, 0x100001b6, 8) , (const, 0x125, 4), (unique, 0x100001b6, 8) INT_MULT (unique, 0x3400, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x125, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x11c, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x125, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x11c, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x125, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x11c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x125, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x11c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x125, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11c, 4)]
[(unique, 0x100002b1, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002e1, 8), (unique, 0x100002e1, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x100001b6, 8), (unique, 0x100001b6, 8) INT_MULT (unique, 0x3400, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x2695a3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002e1, 8), (unique, 0x100002e1, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x100001b6, 8), (unique, 0x100001b6, 8) INT_MULT (unique, 0x3400, 8) , (const, 0x2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f4, 4)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x1f9, 4), (ram, 0x4ec8d8, 8) INDIRECT (unique, 0x100002b1, 8) , (const, 0x1f4, 4)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x1f9, 4), (ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x1f4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f9, 4)]
[ ---  CALL (ram, 0x1dfbb0, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x269549, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x142, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x142, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x149, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x142, 4)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x149, 4), (ram, 0x4ec8d8, 8) INDIRECT (unique, 0x100002b1, 8) , (const, 0x142, 4)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x149, 4), (ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x142, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x100002e9, 8), (unique, 0x100002e9, 8) CALL (ram, 0x121230, 8) , (register, 0x0, 8) , (register, 0x38, 8) , (register, 0x0, 8)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3400, 8) , (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3400, 8) PTRADD (register, 0x80, 8) , (unique, 0x3100, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000299, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15d, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x153, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x15d, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x153, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x15d, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x153, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x15d, 4), (ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x153, 4), (ram, 0x4ec8d8, 8) MULTIEQUAL (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x15d, 4), (ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x153, 4), (ram, 0x4ee0a0, 8) MULTIEQUAL (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x15d, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x153, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x15d, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x153, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x15d, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x153, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x15d, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x153, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x153, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2693c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f760, 8) , (const, 0x1, 4) , (register, 0x80, 8) , (unique, 0x3800, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000299, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2693c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2693c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff28, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2693c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff40, 4) , (const, 0xf000, 4)]
[ ---  CBRANCH (ram, 0x2693c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff50, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ba, 4)]
[ ---  CALL (ram, 0x1dfbb0, 8) , (register, 0x0, 8)]
[(unique, 0x10000231, 8) COPY (ram, 0x4ec8d8, 8), (ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x1ba, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c3, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ba, 4)]
[(ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x1c3, 4), (ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x1ba, 4)]
[(ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x1c3, 4), (ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x1ba, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002f1, 8) , (register, 0x10, 4), (unique, 0x100002f1, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ba, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ba, 4)]
[ ---  BRANCH (ram, 0x269549, 1)]
[(ram, 0x4ee0a0, 8) MULTIEQUAL (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8) , (ram, 0x4ee0a0, 8)]
[(ram, 0x4ec8d8, 8) MULTIEQUAL (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8) , (ram, 0x4ec8d8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000231, 8) , (register, 0x0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x2695b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002f9, 8), (unique, 0x100002f9, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f0, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f0, 4)]
[(ram, 0x4ec8d8, 8) COPY (ram, 0x4ec8d8, 8), (ram, 0x4ec8d8, 8) INDIRECT (ram, 0x4ec8d8, 8) , (const, 0x1f0, 4)]
[(ram, 0x4ee0a0, 8) COPY (ram, 0x4ee0a0, 8), (ram, 0x4ee0a0, 8) INDIRECT (ram, 0x4ee0a0, 8) , (const, 0x1f0, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4ec8d8, 8) COPY (ram, 0x4ec8d8, 8)]
[(ram, 0x4ee0a0, 8) COPY (ram, 0x4ee0a0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
