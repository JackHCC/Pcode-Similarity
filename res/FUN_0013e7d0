[(stack, 0xffffffffffffffe0, 8) SUBPIECE (stack, 0xffffffffffffffd8, 16) , (const, 0x8, 8), (stack, 0xffffffffffffffd8, 16) INT_ADD (unique, 0x1000016d, 16) , (stack, 0xffffffffffffffd8, 12), (unique, 0x1000016d, 16) INT_LEFT (unique, 0x1000015d, 16) , (const, 0x60, 16), (unique, 0x1000015d, 16) INT_SEXT (register, 0x120c, 4), (stack, 0xffffffffffffffd8, 12) INT_ADD (unique, 0x10000151, 12) , (register, 0x1200, 8), (unique, 0x10000151, 12) INT_LEFT (unique, 0x10000145, 12) , (const, 0x40, 12), (unique, 0x10000145, 12) INT_SEXT (unique, 0x10000195, 4), (unique, 0x10000195, 4) CAST (register, 0x1208, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000199, 8), (unique, 0x10000199, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7fff, 4), (register, 0x0, 4) INT_SRIGHT (register, 0x120c, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x13e888, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7fff, 4), (register, 0x0, 4) INT_SRIGHT (register, 0x120c, 4) , (const, 0x10, 4)]
[(unique, 0x1000018d, 8) COPY (register, 0x1200, 8)]
[ ---  CBRANCH (ram, 0x13e833, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x7fff, 8)]
[ ---  CALL (ram, 0x2956f0, 8)]
[(ram, 0x2bbea0, 8) COPY (ram, 0x2bbea0, 8), (ram, 0x2bbea0, 8) INDIRECT (ram, 0x2bbea0, 8) , (const, 0x1a9, 4)]
[(ram, 0x2bbeb0, 8) COPY (ram, 0x2bbeb0, 8), (ram, 0x2bbeb0, 8) INDIRECT (ram, 0x2bbeb0, 8) , (const, 0x1a9, 4)]
[(ram, 0x2bbec0, 16) COPY (ram, 0x2bbec0, 16), (ram, 0x2bbec0, 16) INDIRECT (ram, 0x2bbec0, 16) , (const, 0x1a9, 4)]
[(ram, 0x2bbed0, 8) COPY (ram, 0x2bbed0, 8), (ram, 0x2bbed0, 8) INDIRECT (ram, 0x2bbed0, 8) , (const, 0x1a9, 4)]
[(ram, 0x2bbee0, 8) COPY (ram, 0x2bbee0, 8), (ram, 0x2bbee0, 8) INDIRECT (ram, 0x2bbee0, 8) , (const, 0x1a9, 4)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x13e87c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_OR (register, 0x10, 8) , (register, 0x1200, 8), (register, 0x10, 8) INT_AND (stack, 0xffffffffffffffe0, 8) , (const, 0x7fffffffffffffff, 8)]
[(ram, 0x2bbea0, 8) COPY (ram, 0x2bbea0, 8)]
[(ram, 0x2bbeb0, 8) COPY (ram, 0x2bbeb0, 8)]
[(ram, 0x2bbec0, 16) COPY (ram, 0x2bbec0, 16)]
[(ram, 0x2bbed0, 8) COPY (ram, 0x2bbed0, 8)]
[(ram, 0x2bbee0, 8) COPY (ram, 0x2bbee0, 8)]
[ ---  RETURN (const, 0x0, 8)]
[(ram, 0x2bbea0, 8) INDIRECT (ram, 0x2bbea0, 8) , (const, 0x59, 4)]
[(ram, 0x2bbeb0, 8) INDIRECT (ram, 0x2bbeb0, 8) , (const, 0x59, 4)]
[(ram, 0x2bbec0, 16) INDIRECT (ram, 0x2bbec0, 16) , (const, 0x59, 4)]
[(ram, 0x2bbed0, 8) INDIRECT (ram, 0x2bbed0, 8) , (const, 0x59, 4)]
[(ram, 0x2bbee0, 8) INDIRECT (ram, 0x2bbee0, 8) , (const, 0x59, 4)]
[ ---  CALL (ram, 0x297600, 8)]
[(register, 0x1200, 8) SUBPIECE (register, 0x1200, 16) , (const, 0x0, 4), (register, 0x1200, 16) INDIRECT (const, 0x0, 16) , (const, 0x59, 4)]
[(register, 0x0, 8) PTRADD (unique, 0x10000139, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000139, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff8e, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7fff, 4), (register, 0x0, 4) SUBPIECE (unique, 0x1000017d, 16) , (const, 0x0, 4), (unique, 0x1000017d, 16) INT_SRIGHT (register, 0x1200, 16) , (const, 0x70, 4), (register, 0x1200, 16) INDIRECT (const, 0x0, 16) , (const, 0x59, 4)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (register, 0x1200, 8) , (unique, 0x1000018d, 8)]
[(ram, 0x2bbee0, 8) MULTIEQUAL (ram, 0x2bbee0, 8) , (ram, 0x2bbee0, 8)]
[(ram, 0x2bbed0, 8) MULTIEQUAL (ram, 0x2bbed0, 8) , (ram, 0x2bbed0, 8)]
[(ram, 0x2bbeb0, 8) MULTIEQUAL (ram, 0x2bbeb0, 8) , (ram, 0x2bbeb0, 8)]
[(ram, 0x2bbea0, 8) MULTIEQUAL (ram, 0x2bbea0, 8) , (ram, 0x2bbea0, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100000ad, 8) SUBPIECE (ram, 0x2bbec0, 16) , (const, 0x0, 4), (ram, 0x2bbec0, 16) MULTIEQUAL (ram, 0x2bbec0, 16) , (ram, 0x2bbec0, 16)]
[ ---  CBRANCH (ram, 0x13e8a0, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (const, 0xffff3caf, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x13e8c8, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0xc350, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x13e8c8, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x7ffe, 8) , (unique, 0x100001a1, 8), (unique, 0x100001a1, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (register, 0x38, 8) , (const, 0x1, 8), (register, 0x38, 8) INT_SEXT (register, 0x38, 4)]
[ ---  CALL (ram, 0x297600, 8) , (register, 0x1200, 8) , (ram, 0x2bbed0, 8), (register, 0x1200, 8) INT_OR (unique, 0x10000095, 8) , (ram, 0x2bbed0, 8), (unique, 0x10000095, 8) INT_AND (stack, 0xffffffffffffffd8, 8) , (unique, 0x100000ad, 8)]
[(ram, 0x2bbea0, 8) COPY (ram, 0x2bbea0, 8), (ram, 0x2bbea0, 8) INDIRECT (ram, 0x2bbea0, 8) , (const, 0x18e, 4)]
[(ram, 0x2bbeb0, 8) COPY (ram, 0x2bbeb0, 8), (ram, 0x2bbeb0, 8) INDIRECT (ram, 0x2bbeb0, 8) , (const, 0x18e, 4)]
[(ram, 0x2bbec0, 16) COPY (ram, 0x2bbec0, 16), (ram, 0x2bbec0, 16) INDIRECT (ram, 0x2bbec0, 16) , (const, 0x18e, 4)]
[(ram, 0x2bbed0, 8) COPY (ram, 0x2bbed0, 8), (ram, 0x2bbed0, 8) INDIRECT (ram, 0x2bbed0, 8) , (const, 0x18e, 4)]
[(ram, 0x2bbee0, 8) COPY (ram, 0x2bbee0, 8), (ram, 0x2bbee0, 8) INDIRECT (ram, 0x2bbee0, 8) , (const, 0x18e, 4)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x13e8f0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x100001a9, 8) , (const, 0x1, 8), (unique, 0x100001a9, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x13e8a0, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (unique, 0x100001b1, 8) , (const, 0xffffffffffffff8f, 8), (unique, 0x100001b1, 8) CAST (register, 0x0, 8)]
[ ---  CALL (ram, 0x297600, 8) , (register, 0x1200, 8) , (ram, 0x2bbeb0, 8), (register, 0x1200, 8) INT_OR (unique, 0x1000006d, 8) , (ram, 0x2bbeb0, 8), (unique, 0x1000006d, 8) INT_AND (stack, 0xffffffffffffffd8, 8) , (unique, 0x100000ad, 8)]
[(ram, 0x2bbea0, 8) COPY (ram, 0x2bbea0, 8), (ram, 0x2bbea0, 8) INDIRECT (ram, 0x2bbea0, 8) , (const, 0x17a, 4)]
[(ram, 0x2bbeb0, 8) COPY (ram, 0x2bbeb0, 8), (ram, 0x2bbeb0, 8) INDIRECT (ram, 0x2bbeb0, 8) , (const, 0x17a, 4)]
[(ram, 0x2bbec0, 16) COPY (ram, 0x2bbec0, 16), (ram, 0x2bbec0, 16) INDIRECT (ram, 0x2bbec0, 16) , (const, 0x17a, 4)]
[(ram, 0x2bbed0, 8) COPY (ram, 0x2bbed0, 8), (ram, 0x2bbed0, 8) INDIRECT (ram, 0x2bbed0, 8) , (const, 0x17a, 4)]
[(ram, 0x2bbee0, 8) COPY (ram, 0x2bbee0, 8), (ram, 0x2bbee0, 8) INDIRECT (ram, 0x2bbee0, 8) , (const, 0x17a, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(ram, 0x2bbea0, 8) INDIRECT (ram, 0x2bbea0, 8) , (const, 0x171, 4)]
[(ram, 0x2bbeb0, 8) INDIRECT (ram, 0x2bbeb0, 8) , (const, 0x171, 4)]
[(ram, 0x2bbec0, 16) INDIRECT (ram, 0x2bbec0, 16) , (const, 0x171, 4)]
[(ram, 0x2bbed0, 8) INDIRECT (ram, 0x2bbed0, 8) , (const, 0x171, 4)]
[(ram, 0x2bbee0, 8) INDIRECT (ram, 0x2bbee0, 8) , (const, 0x171, 4)]
[ ---  CALL (ram, 0x297600, 8) , (stack, 0xffffffffffffffd8, 8) , (ram, 0x2bbee0, 8)]
[ ---  BRANCH (ram, 0x13e87c, 1)]
[(ram, 0x2bbea0, 8) COPY (ram, 0x2bbea0, 8), (ram, 0x2bbea0, 8) MULTIEQUAL (ram, 0x2bbea0, 8) , (ram, 0x2bbea0, 8)]
[(ram, 0x2bbeb0, 8) COPY (ram, 0x2bbeb0, 8), (ram, 0x2bbeb0, 8) MULTIEQUAL (ram, 0x2bbeb0, 8) , (ram, 0x2bbeb0, 8)]
[(ram, 0x2bbec0, 16) COPY (ram, 0x2bbec0, 16), (ram, 0x2bbec0, 16) MULTIEQUAL (ram, 0x2bbec0, 16) , (ram, 0x2bbec0, 16)]
[(ram, 0x2bbed0, 8) COPY (ram, 0x2bbed0, 8), (ram, 0x2bbed0, 8) MULTIEQUAL (ram, 0x2bbed0, 8) , (ram, 0x2bbed0, 8)]
[(ram, 0x2bbee0, 8) COPY (ram, 0x2bbee0, 8), (ram, 0x2bbee0, 8) MULTIEQUAL (ram, 0x2bbee0, 8) , (ram, 0x2bbee0, 8)]
[ ---  RETURN (const, 0x0, 8)]
