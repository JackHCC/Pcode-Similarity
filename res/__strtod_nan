[(unique, 0x1000006b, 8) COPY (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x144cd4, 1)]
[ ---  CBRANCH (ram, 0x144cd0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x10000093, 1) , (const, 0x1a, 1), (unique, 0x10000093, 1) CAST (register, 0x0, 1), (register, 0x0, 1) INT_ADD (unique, 0x10000041, 1) , (const, 0xbf, 1), (unique, 0x10000041, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xdf, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x1000006b, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x144cd0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x10000094, 1) , (const, 0xa, 1), (unique, 0x10000094, 1) CAST (register, 0x0, 1), (register, 0x0, 1) INT_SUB (unique, 0xbb00, 1) , (const, 0x30, 1)]
[ ---  CBRANCH (ram, 0x144cd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5f, 1)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000083, 8) COPY (ram, 0x293e98, 8)]
[ ---  CBRANCH (ram, 0x144d0b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (register, 0x10, 1)]
[(register, 0x0, 8) CALL (ram, 0x13b8d0, 8) , (register, 0x38, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (unique, 0x10000053, 8), (unique, 0x10000053, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c1b60, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffe0, 8)]
[(unique, 0x1000008b, 8) COPY (ram, 0x293e98, 8), (ram, 0x293e98, 8) INDIRECT (ram, 0x293e98, 8) , (const, 0x8f, 4)]
[ ---  CBRANCH (ram, 0x144cf3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (stack, 0xffffffffffffffe0, 8), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x8f, 4)]
[(register, 0x10, 8) INT_OR (register, 0x10, 8) , (register, 0x8, 8), (register, 0x10, 8) INT_OR (register, 0x10, 8) , (const, 0x7ff8000000000000, 8), (register, 0x10, 8) INT_AND (register, 0x0, 8) , (const, 0x7ffff00000000, 8), (register, 0x8, 8) INT_AND (register, 0x0, 8) , (const, 0xffffffff, 8)]
[ ---  CBRANCH (ram, 0x144cfb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4), (register, 0x8, 4) INT_OR (register, 0x8, 4) , (register, 0x0, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0xfffff, 4), (register, 0x8, 4) SUBPIECE (unique, 0x10000063, 8) , (const, 0x0, 4), (unique, 0x10000063, 8) INT_RIGHT (register, 0x10, 8) , (const, 0x20, 4), (register, 0x10, 8) INT_OR (register, 0x10, 8) , (const, 0x7ff8000000000000, 8), (register, 0x10, 8) INT_AND (register, 0x0, 8) , (const, 0x7ffff00000000, 8), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4)]
[(unique, 0x1000007b, 8) COPY (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x144cfb, 1)]
[(ram, 0x293e98, 8) MULTIEQUAL (ram, 0x293e98, 8) , (ram, 0x293e98, 8) , (ram, 0x293e98, 8) , (ram, 0x293e98, 8)]
[(register, 0x1200, 8) MULTIEQUAL (unique, 0x1000008b, 8) , (unique, 0x1000007b, 8) , (unique, 0x10000083, 8) , (unique, 0x1000008b, 8)]
[ ---  CBRANCH (ram, 0x144d04, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(ram, 0x293e98, 8) INDIRECT (ram, 0x293e98, 8) , (const, 0x65, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x18, 8)]
[(ram, 0x293e98, 8) COPY (ram, 0x293e98, 8), (ram, 0x293e98, 8) MULTIEQUAL (ram, 0x293e98, 8) , (ram, 0x293e98, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x1200, 8)]
