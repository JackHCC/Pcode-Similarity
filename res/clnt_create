[(register, 0x8, 8) COPY (const, 0x5, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000351, 8), (unique, 0x10000351, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000359, 8), (unique, 0x10000359, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x206, 1) COPY (const, 0x1, 1)]
[(unique, 0x10000309, 8) COPY (register, 0x8, 8)]
[(unique, 0x10000329, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b720e, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000329, 8) , (unique, 0x10000331, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000309, 8) , (unique, 0x10000311, 8)]
[ ---  CBRANCH (ram, 0x255637, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000311, 8) COPY (unique, 0xa300, 8), (unique, 0xa300, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000331, 8) COPY (unique, 0xaf00, 8), (unique, 0xaf00, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x255635, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000349, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2556d0, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x107, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x107, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x107, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x2556e9, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x3200, 8) , (const, 0x107, 4), (unique, 0x3200, 8) CAST (unique, 0x10000361, 8), (unique, 0x10000361, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x10000349, 8) , (const, 0x107, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x107, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x107, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x107, 4)]
[(stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x107, 4)]
[(stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x107, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x107, 4)]
[ ---  CBRANCH (ram, 0x255810, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x25e5d0, 8) , (register, 0x38, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000361, 8), (unique, 0x10000361, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x2556ac, 1)]
[(register, 0xb0, 8) COPY (const, 0x400, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff20, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb07, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(unique, 0x100002f9, 8) COPY (unique, 0x10000369, 8), (unique, 0x10000369, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffaf8, 8)]
[ ---  BRANCH (ram, 0x255737, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x255748, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000211, 8) , (const, 0x8, 8), (unique, 0x10000211, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100002f9, 8) , (unique, 0x10000301, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x133, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x133, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x133, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x133, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x132, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x133, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x133, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x132, 4), (stack, 0xffffffffffffff48, 2) MULTIEQUAL (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2)]
[(stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x133, 4), (stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff4a, 8) MULTIEQUAL (stack, 0xffffffffffffff4a, 8) , (stack, 0xffffffffffffff4a, 8)]
[(stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x133, 4), (stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x132, 4), (stack, 0xffffffffffffffae, 8) MULTIEQUAL (stack, 0xffffffffffffffae, 8) , (stack, 0xffffffffffffffae, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x133, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x132, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100002e9, 8) COPY (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x133, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x100002e1, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x133, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  CBRANCH (ram, 0x255758, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x238390, 8) , (register, 0x8, 8) , (unique, 0x3200, 8) , (register, 0x10, 8) , (register, 0xb0, 8) , (unique, 0x3200, 8), (register, 0x10, 8) CAST (unique, 0x10000379, 8), (unique, 0x10000379, 8) INT_AND (unique, 0x10000371, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000371, 8) CAST (unique, 0x3800, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (unique, 0x10000111, 8), (unique, 0x3800, 8) MULTIEQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x255780, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff20, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff1c, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x2557c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x6, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff20, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2557eb, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000271, 8) , (const, 0x8, 8), (unique, 0x10000271, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1fd, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1fd, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1fd, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x1fd, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fc, 4)]
[(register, 0x0, 8) CALL (ram, 0x2564d0, 8) , (unique, 0x100002e1, 8) , (unique, 0x100002e9, 8) , (register, 0x10, 8) , (unique, 0x3200, 8) , (const, 0x0, 4) , (const, 0x0, 4), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff1c, 8)]
[ ---  BRANCH (ram, 0x2556ac, 1)]
[ ---  CBRANCH (ram, 0x2557f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x11, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2557f5, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000281, 8) , (const, 0x8, 8), (unique, 0x10000281, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1cd, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1cd, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1cc, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1cd, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1cc, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1cd, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1cc, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1cd, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1cc, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x1cd, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x1cc, 4)]
[(stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x1cd, 4), (stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x1cc, 4)]
[(stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x1cd, 4), (stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x1cc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1cd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1cc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000291, 8) , (const, 0xc, 4), (unique, 0x10000291, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x259750, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1d2, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1cf, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1cd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000381, 8) , (const, 0x60, 4), (unique, 0x10000381, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100002a1, 8) , (const, 0x8, 8), (unique, 0x100002a1, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x259750, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x2556ac, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2557bc, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000259, 8) , (const, 0x8, 8), (unique, 0x10000259, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1c9, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1c9, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1c9, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1c9, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x1c9, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x1c9, 4), (stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x1c9, 4), (stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c8, 4)]
[(register, 0x0, 8) CALL (ram, 0x257800, 8) , (unique, 0x100002e1, 8) , (unique, 0x100002e9, 8) , (register, 0x10, 8) , (unique, 0x1000002c, 16) , (unique, 0x10000389, 8), (unique, 0x10000389, 8) CAST (unique, 0x10000189, 8), (unique, 0x10000189, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8), (unique, 0x1000002c, 16) LOAD (const, 0x1b1, 4) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x2556ac, 1)]
[ ---  CBRANCH (ram, 0x255720, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000391, 8), (unique, 0x10000391, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x100003b1, 8), (unique, 0x100003b1, 8) INT_ADD (unique, 0x100003a9, 8) , (unique, 0x10000209, 8), (unique, 0x100003a9, 8) CAST (register, 0x20, 8), (unique, 0x10000209, 8) INT_ADD (unique, 0x10000119, 8) , (const, 0xf, 8), (unique, 0x10000119, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000111, 8) , (const, 0x10, 8), (unique, 0x10000111, 8) INT_MULT (register, 0xb0, 8) , (const, 0x2, 8)]
[(unique, 0x10000301, 8) COPY (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x100003a1, 8), (unique, 0x100003a1, 8) INT_ADD (unique, 0x10000399, 8) , (unique, 0x10000119, 8), (unique, 0x10000399, 8) CAST (register, 0x20, 8), (unique, 0x10000119, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000111, 8) , (const, 0x10, 8), (unique, 0x10000111, 8) INT_MULT (register, 0xb0, 8) , (const, 0x2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x25576a, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000221, 8) , (const, 0x8, 8), (unique, 0x10000221, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x15e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x15d, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x15e, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x15d, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x15e, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x15d, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x15e, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x15d, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x15e, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x15d, 4)]
[(stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x15e, 4), (stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0x15d, 4)]
[(stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x15e, 4), (stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0x15d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000231, 8) , (const, 0x11, 4), (unique, 0x10000231, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x259750, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x163, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x160, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x15e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003b9, 8) , (const, 0x60, 4), (unique, 0x100003b9, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10000241, 8) , (const, 0x8, 8), (unique, 0x10000241, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x259750, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x2556ac, 1)]
[(unique, 0x3200, 8) CAST (unique, 0x100003c1, 8), (unique, 0x100003c1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff4a, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffae, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000319, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8)]
[(register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_RIGHT (register, 0x8, 4) , (const, 0x3, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0x6c, 4), (register, 0x8, 4) INT_SUB (unique, 0x100000c1, 4) , (unique, 0x100000c9, 4), (unique, 0x100000c1, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x100000c9, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100002b9, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x100002b9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffae, 8) MULTIEQUAL (stack, 0xffffffffffffffae, 8) , (stack, 0xffffffffffffffae, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000319, 8) , (unique, 0x10000321, 8)]
[ ---  CBRANCH (ram, 0x255673, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb8, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x255687, 8)]
[ ---  CALL (ram, 0x121170, 8) , (unique, 0x3100, 8) , (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd7, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd7, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x2556ac, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x10000349, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffff1c, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xd7, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xb8, 4), (stack, 0xffffffffffffff48, 2) COPY (const, 0x1, 2)]
[(stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb8, 4)]
[(register, 0x0, 8) CALL (ram, 0x2537f0, 8) , (unique, 0x3200, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (unique, 0x3200, 8) , (const, 0x0, 4) , (const, 0x0, 4), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff1c, 8)]
[(unique, 0x100002f1, 8) COPY (unique, 0x100003c9, 8), (unique, 0x100003c9, 8) CAST (register, 0x20, 8)]
[(stack, 0xffffffffffffffae, 8) MULTIEQUAL (stack, 0xffffffffffffffae, 8) , (stack, 0xffffffffffffffae, 8) , (stack, 0xffffffffffffffae, 8) , (stack, 0xffffffffffffffae, 8) , (stack, 0xffffffffffffffae, 8) , (stack, 0xffffffffffffffae, 8)]
[(stack, 0xffffffffffffff4a, 8) MULTIEQUAL (stack, 0xffffffffffffff4a, 8) , (stack, 0xffffffffffffff4a, 8) , (stack, 0xffffffffffffff4a, 8) , (stack, 0xffffffffffffff4a, 8) , (stack, 0xffffffffffffff4a, 8) , (stack, 0xffffffffffffff4a, 8)]
[(stack, 0xffffffffffffff48, 2) MULTIEQUAL (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x100002f1, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x255817, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x10000191, 8), (unique, 0x10000191, 8) PTRSUB (const, 0x0, 8) , (const, 0x25581c, 8), (register, 0x20, 8) CAST (unique, 0x100003e1, 8), (unique, 0x100003e1, 8) INT_ADD (unique, 0x100003d9, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100003d9, 8) CAST (register, 0x20, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xfb, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xfb, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xfb, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xfb, 4), (stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xfb, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0xfb, 4), (stack, 0xffffffffffffff4a, 8) INDIRECT (stack, 0xffffffffffffff4a, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0xfb, 4), (stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfa, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfb, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffae, 8) INDIRECT (stack, 0xffffffffffffffae, 8) , (const, 0xaf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xaf, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x10000321, 8) COPY (unique, 0xb800, 8), (unique, 0xb800, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x8, 8) INT_SUB (register, 0x8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x255670, 1)]
