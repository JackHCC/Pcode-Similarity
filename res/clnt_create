[(register, 0x206, 1) INT_EQUAL (unique, 0x10000409, 8) , (const, 0x118, 8), (unique, 0x10000409, 8) CAST (register, 0x20, 8)]
[(stack, 0xfffffffffffffef8, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff00, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffef0, 8) COPY (register, 0x10, 8)]
[(register, 0x8, 8) COPY (const, 0x5, 8)]
[(unique, 0x100003d9, 8) COPY (register, 0x8, 8)]
[(unique, 0x100003f9, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x28f483, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100003f9, 8) , (unique, 0x10000401, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100003d9, 8) , (unique, 0x100003e1, 8)]
[ ---  CBRANCH (ram, 0x233f56, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x100003e1, 8) COPY (unique, 0xa300, 8), (unique, 0xa300, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000401, 8) COPY (unique, 0xaf00, 8), (unique, 0xaf00, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x233f54, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x233fc8, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0xb8, 8) COPY (const, 0x400, 8)]
[(unique, 0x3200, 8) CAST (unique, 0x10000411, 8), (unique, 0x10000411, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffae7, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff14, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(unique, 0x100003c9, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffad8, 8)]
[ ---  BRANCH (ram, 0x23401c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000429, 8) , (const, 0x234030, 8), (unique, 0x10000429, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100003c9, 8) , (unique, 0x100003d1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xd0, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xcf, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xcf, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xcf, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff14, 4) INDIRECT (stack, 0xffffffffffffff14, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffff14, 4) INDIRECT (stack, 0xffffffffffffff14, 4) , (const, 0xcf, 4), (stack, 0xffffffffffffff14, 4) MULTIEQUAL (stack, 0xffffffffffffff14, 4) , (stack, 0xffffffffffffff14, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xcf, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xcf, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[ ---  CBRANCH (ram, 0x234040, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x219b60, 8) , (register, 0x38, 8) , (unique, 0x3200, 8) , (register, 0x10, 8) , (register, 0xb8, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (register, 0x10, 8) CAST (unique, 0x10000421, 8), (unique, 0x10000421, 8) INT_AND (unique, 0x10000419, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000419, 8) CAST (unique, 0x3800, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x1000010f, 8), (unique, 0x3800, 8) MULTIEQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x234068, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff18, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x23413a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x2, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff18, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000431, 8) , (const, 0x23413f, 8), (unique, 0x10000431, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x272, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x272, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x272, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x271, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002d8, 8) , (const, 0xc, 4), (unique, 0x100002d8, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x277, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x274, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x272, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000439, 8) , (const, 0x61, 4), (unique, 0x10000439, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100002e8, 8) , (const, 0x8, 8), (unique, 0x100002e8, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x233fb6, 1)]
[(unique, 0x3200, 8) CAST (unique, 0x10000441, 8), (unique, 0x10000441, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(register, 0xb0, 8) COPY (const, 0x400, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff20, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000449, 8) , (const, 0x2340c1, 8), (unique, 0x10000449, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x186, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x186, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x186, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x185, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x186, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x186, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x186, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x186, 4), (stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x185, 4), (stack, 0xffffffffffffff28, 2) COPY (const, 0x2, 2)]
[(stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x186, 4), (stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x185, 4), (stack, 0xffffffffffffff2a, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x186, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x185, 4), (stack, 0xffffffffffffff30, 8) COPY (const, 0x0, 8)]
[ ---  CALL (ram, 0x193a40, 8) , (unique, 0x3100, 8) , (unique, 0xbd80, 8) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000379, 8) , (const, 0x4, 8) , (const, 0x1, 8), (unique, 0x10000379, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff18, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff18, 8) , (const, 0x14, 8)]
[(unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffbff, 8) , (const, 0x1, 8)]
[(unique, 0x100003b9, 8) COPY (unique, 0x10000451, 8), (unique, 0x10000451, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffbf0, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2340ef, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x234104, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000298, 8) , (const, 0x8, 8), (unique, 0x10000298, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100003b9, 8) , (unique, 0x100003c1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a4, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1a4, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1a4, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1a3, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1a4, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1a3, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x1a4, 4), (stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x1a3, 4), (stack, 0xffffffffffffff28, 2) MULTIEQUAL (stack, 0xffffffffffffff28, 2) , (stack, 0xffffffffffffff28, 2)]
[(stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x1a4, 4), (stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x1a3, 4), (stack, 0xffffffffffffff2a, 2) MULTIEQUAL (stack, 0xffffffffffffff2a, 2) , (stack, 0xffffffffffffff2a, 2)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1a4, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1a3, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(unique, 0x100003a9, 8) COPY (stack, 0xfffffffffffffef8, 8), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1a4, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1a3, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x100003a1, 8) COPY (stack, 0xfffffffffffffef0, 8), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1a4, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1a3, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[ ---  CBRANCH (ram, 0x234114, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x21b710, 8) , (unique, 0x100003b1, 8) , (unique, 0x3200, 8) , (register, 0x10, 8) , (register, 0xb0, 8) , (unique, 0x3200, 8), (register, 0x10, 8) CAST (unique, 0x10000461, 8), (unique, 0x10000461, 8) INT_AND (unique, 0x10000459, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000459, 8) CAST (unique, 0x3800, 8), (unique, 0x100003b1, 8) COPY (stack, 0xffffffffffffff00, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (unique, 0x10000157, 8), (unique, 0x3800, 8) MULTIEQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[ ---  CBRANCH (ram, 0x234153, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff20, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff10, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x234194, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x6, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff20, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2341b7, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000318, 8) , (const, 0x8, 8), (unique, 0x10000318, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x26e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x26d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x26e, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x26d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x26e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x26d, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x26e, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x26d, 4)]
[(stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x26e, 4), (stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x26d, 4)]
[(stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x26e, 4), (stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x26d, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x26e, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x26d, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x26e, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x234dd0, 8) , (unique, 0x3200, 8) , (unique, 0x100003a9, 8) , (unique, 0x100003a1, 8) , (unique, 0x3200, 8) , (const, 0x0, 4) , (const, 0x0, 4), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x2341bc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x11, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2341c1, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000328, 8) , (const, 0x8, 8), (unique, 0x10000328, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x23d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x23d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x23d, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x23e, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x23d, 4)]
[(stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x23e, 4), (stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x23d, 4)]
[(stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x23e, 4), (stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x23d, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x23d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000338, 8) , (const, 0xc, 4), (unique, 0x10000338, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000469, 8) , (const, 0x60, 4), (unique, 0x10000469, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10000348, 8) , (const, 0x8, 8), (unique, 0x10000348, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x243, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x240, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x23e, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x23418f, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000300, 8) , (const, 0x8, 8), (unique, 0x10000300, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x23a, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x239, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x23a, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x239, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x23a, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x239, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x23a, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x239, 4)]
[(stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x23a, 4), (stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x239, 4)]
[(stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x23a, 4), (stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x239, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x23a, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x239, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x23a, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x235f60, 8) , (unique, 0x3200, 8) , (unique, 0x100003a9, 8) , (unique, 0x100003a1, 8) , (unique, 0x1000003e, 16) , (unique, 0x10000471, 8), (unique, 0x10000471, 8) CAST (unique, 0x100001d0, 8), (unique, 0x100001d0, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8), (unique, 0x1000003e, 16) LOAD (const, 0x1b1, 4) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2340d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000479, 8), (unique, 0x10000479, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x234126, 8), (register, 0x20, 8) PTRSUB (unique, 0x100002a8, 8) , (const, 0x8, 8), (unique, 0x100002a8, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1cf, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1ce, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1cf, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1ce, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1cf, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1ce, 4)]
[(stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x1cf, 4), (stack, 0xffffffffffffff28, 2) INDIRECT (stack, 0xffffffffffffff28, 2) , (const, 0x1ce, 4)]
[(stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x1cf, 4), (stack, 0xffffffffffffff2a, 2) INDIRECT (stack, 0xffffffffffffff2a, 2) , (const, 0x1ce, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1cf, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1ce, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002b8, 8) , (const, 0x11, 4), (unique, 0x100002b8, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1d4, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1d1, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1cf, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000481, 8) , (const, 0x60, 4), (unique, 0x10000481, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100002c8, 8) , (const, 0x8, 8), (unique, 0x100002c8, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x233fb6, 1)]
[(unique, 0x3800, 8) CAST (unique, 0x100004a1, 8), (unique, 0x100004a1, 8) INT_ADD (unique, 0x10000499, 8) , (unique, 0x10000290, 8), (unique, 0x10000499, 8) CAST (register, 0x20, 8), (unique, 0x10000290, 8) INT_ADD (unique, 0x1000015f, 8) , (const, 0xf, 8), (unique, 0x1000015f, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000157, 8) , (const, 0x10, 8), (unique, 0x10000157, 8) INT_MULT (register, 0xb0, 8) , (const, 0x2, 8)]
[(unique, 0x100003c1, 8) COPY (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x10000491, 8), (unique, 0x10000491, 8) INT_ADD (unique, 0x10000489, 8) , (unique, 0x1000015f, 8), (unique, 0x10000489, 8) CAST (register, 0x20, 8), (unique, 0x1000015f, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000157, 8) , (const, 0x10, 8), (unique, 0x10000157, 8) INT_MULT (register, 0xb0, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x233ff8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff14, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x234049, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004a9, 8), (unique, 0x100004a9, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004b1, 8) , (const, 0x23404e, 8), (unique, 0x100004b1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xfa, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xf9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xfa, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xfa, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xf9, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000250, 8) , (const, 0xd, 4), (unique, 0x10000250, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xfc, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xfa, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000248, 8) , (const, 0x1, 8), (unique, 0x10000248, 8) INT_ADD (unique, 0x10000117, 8) , (const, 0xf, 8), (unique, 0x10000117, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x1000010f, 8) , (const, 0x10, 8), (unique, 0x1000010f, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x100003d1, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000117, 8) , (const, 0x1, 8), (unique, 0x10000117, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x1000010f, 8) , (const, 0x10, 8), (unique, 0x1000010f, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x100003e9, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100004b9, 8), (unique, 0x100004b9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x8, 8) COPY (const, 0xd, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100003e9, 8) , (unique, 0x100003f1, 8)]
[ ---  CBRANCH (ram, 0x233f6e, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004c9, 8) , (const, 0x0, 8), (unique, 0x100004c9, 8) CAST (register, 0x38, 8)]
[(unique, 0x100003f1, 8) COPY (unique, 0xb800, 8), (unique, 0xb800, 8) CAST (unique, 0x100004c1, 8), (unique, 0x100004c1, 8) PTRADD (unique, 0x100001e8, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x100001e8, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x233f6b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004d1, 8) , (const, 0x0, 2), (unique, 0x100004d1, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000200, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000200, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004d9, 8) , (const, 0x0, 4), (unique, 0x100004d9, 8) CAST (register, 0x38, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x7c, 4), (stack, 0xfffffffffffffee0, 8) COPY (const, 0x233f91, 8)]
[ ---  CALL (ram, 0x18a770, 8) , (unique, 0x3800, 8) , (register, 0x38, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10000361, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000361, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x9b, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7c, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x9b, 4), (stack, 0xfffffffffffffee0, 8) COPY (const, 0x233fb6, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x9b, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x7c, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x9b, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x7c, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x7c, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x9b, 4), (stack, 0xffffffffffffff10, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff58, 2) INDIRECT (stack, 0xffffffffffffff58, 2) , (const, 0x9b, 4), (stack, 0xffffffffffffff58, 2) INDIRECT (stack, 0xffffffffffffff58, 2) , (const, 0x7c, 4), (stack, 0xffffffffffffff58, 2) COPY (const, 0x1, 2)]
[(register, 0x0, 8) CALL (ram, 0x2322f0, 8) , (unique, 0x3200, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (unique, 0x3200, 8) , (const, 0x0, 4) , (const, 0x0, 4), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
