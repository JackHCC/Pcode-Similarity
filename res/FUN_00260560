[(register, 0x28, 4) COPY (const, 0x0, 4)]
[(unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x40, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x4a, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x4a, 4), (stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x40, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x4a, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x40, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002f3, 8), (unique, 0x100002f3, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x0, 8) CAST (unique, 0x100002fb, 8), (unique, 0x100002fb, 8) CALL (ram, 0x2625e0, 8) , (const, 0xc, 8) , (unique, 0x10000233, 8) , (unique, 0x1000026b, 8) , (unique, 0x3800, 8), (unique, 0x1000026b, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f0a80, 8), (unique, 0x10000233, 8) COPY (const, 0x2b7067, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[(unique, 0x100002df, 4) COPY (stack, 0xffffffffffffffb0, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x4a, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (unique, 0x100002df, 4) , (unique, 0x100002ef, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x26069d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x62, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x62, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x62, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x62, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x62, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x62, 4)]
[ ---  CBRANCH (ram, 0x26069d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x262700, 8) , (const, 0xf, 8) , (register, 0x38, 8) , (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000303, 8), (unique, 0x10000303, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8)]
[(register, 0xb0, 8) COPY (const, 0xfffffffe, 8)]
[(register, 0x30, 8) INT_SEXT (unique, 0x10000313, 4), (unique, 0x10000313, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000030b, 8), (unique, 0x1000030b, 8) INT_ADD (register, 0x0, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x260740, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffb0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000317, 8), (unique, 0x10000317, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x260830, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (unique, 0x3400, 8) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000033f, 8), (unique, 0x1000033f, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x38, 8), (unique, 0x3880, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (unique, 0x3400, 8) CAST (unique, 0x10000337, 8), (unique, 0x10000337, 8) INT_ADD (unique, 0x1000032f, 8) , (unique, 0x3300, 8), (unique, 0x1000032f, 8) CAST (unique, 0x3100, 8), (unique, 0x3300, 8) INT_MULT (register, 0x30, 8) , (const, 0x4, 8), (unique, 0x3100, 8) CAST (unique, 0x10000327, 8), (unique, 0x10000327, 8) INT_ADD (register, 0x0, 8) , (const, 0x24, 8), (register, 0x38, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000031f, 8), (unique, 0x1000031f, 8) INT_ADD (register, 0x0, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x260617, 1)]
[(register, 0x8, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x2606d1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb8, 4) , (const, 0x1, 4), (stack, 0xffffffffffffffb8, 4) SUBPIECE (unique, 0x100002ab, 8) , (const, 0x0, 4), (unique, 0x100002ab, 8) INT_RIGHT (unique, 0x10000347, 8) , (const, 0x20, 4), (unique, 0x10000347, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffbc, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb4, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x260650, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffb0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000034f, 8), (unique, 0x1000034f, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4)]
[(unique, 0x100002ef, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x260680, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100000e9, 4) , (const, 0x0, 4), (unique, 0x100000e9, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x260680, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 4) , (const, 0x5, 4), (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x12f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000035f, 8) , (unique, 0xbd00, 4), (unique, 0x1000035f, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000357, 8), (unique, 0x10000357, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2608eb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000367, 8), (unique, 0x10000367, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x33a, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x33a, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (unique, 0x100002ef, 4) , (const, 0x33a, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x33a, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x33a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x33a, 4)]
[ ---  CALL (ram, 0x262050, 8) , (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x26068c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (unique, 0x100002ef, 4) , (stack, 0xffffffffffffffb0, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x2608e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 4) , (const, 0xffffffff, 4)]
[(register, 0xb8, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x14e, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x14e, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x14e, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x260728, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x2628a0, 8) , (register, 0x38, 8) , (unique, 0x3100, 8) , (const, 0xf, 8)]
[(ram, 0x4f0a90, 4) COPY (const, 0x1, 4)]
[(register, 0xb0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x26070b, 1)]
[ ---  CBRANCH (ram, 0x260770, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb8, 4) , (const, 0x1, 4), (stack, 0xffffffffffffffb8, 4) SUBPIECE (stack, 0xffffffffffffffb4, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (unique, 0x3100, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x260923, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x1000036f, 4) , (const, 0x0, 4), (unique, 0x1000036f, 4) CAST (stack, 0xffffffffffffffbc, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x330, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x330, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x330, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x330, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x1000024b, 8) , (unique, 0x10000243, 8) , (const, 0x64, 4) , (unique, 0x10000263, 8), (unique, 0x10000263, 8) COPY (const, 0x2bb760, 8), (unique, 0x1000024b, 8) COPY (const, 0x2b7351, 8), (unique, 0x10000243, 8) COPY (const, 0x2b733f, 8)]
[(ram, 0x4f0a90, 4) COPY (ram, 0x4f0a90, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x330, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x260840, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (unique, 0xbd80, 8) , (register, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x30, 8) INT_SEXT (unique, 0x10000373, 4), (unique, 0x10000373, 4) CAST (register, 0x30, 4), (register, 0x30, 4) INT_ADD (stack, 0xffffffffffffffbc, 4) , (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f7, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x2f7, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x2f7, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x2f7, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x2f7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f7, 4)]
[ ---  CBRANCH (ram, 0x2608bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000377, 8), (unique, 0x10000377, 8) CALL (ram, 0x121020, 8) , (unique, 0xbd80, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_LEFT (register, 0x30, 8) , (const, 0x2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (register, 0x0, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x327, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x31e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (unique, 0x1000037f, 4), (unique, 0x1000037f, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffffbc, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x2607af, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x260892, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b3, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x2b3, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x2b3, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100002cb, 8) COPY (register, 0x80, 8), (register, 0x80, 8) INT_SEXT (unique, 0x10000383, 4), (unique, 0x10000383, 4) CAST (stack, 0xffffffffffffffbc, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x2b3, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[ ---  CBRANCH (ram, 0x2607c9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (unique, 0x3680, 8), (unique, 0x3680, 8) INT_MULT (register, 0x80, 8) , (const, 0x4, 8), (register, 0x80, 8) INT_SEXT (unique, 0x10000383, 4), (unique, 0x10000383, 4) CAST (stack, 0xffffffffffffffbc, 4), (register, 0x0, 8) CALL (ram, 0x261ba0, 8) , (register, 0x8, 4) , (register, 0x38, 8), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x2b3, 4), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x2606ff, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x20c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x20c, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x20c, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x20c, 4), (stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x20c, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x20c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x121160, 8) , (register, 0x38, 8) , (register, 0x88, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_MULT (register, 0x80, 8) , (const, 0x4, 8), (register, 0x80, 8) INT_SEXT (unique, 0x10000387, 4), (unique, 0x10000387, 4) CAST (stack, 0xffffffffffffffbc, 4), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(unique, 0x100002c3, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) INT_ZEXT (stack, 0xffffffffffffffbc, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0xb0, 4) , (const, 0x0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100002c3, 8) , (unique, 0x100002cb, 8)]
[ ---  CBRANCH (ram, 0x2606ff, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0xb0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100002c3, 8) , (unique, 0x100002cb, 8)]
[ ---  CBRANCH (ram, 0x26091c, 1) , (register, 0x206, 1)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x260815, 1)]
[ ---  CBRANCH (ram, 0x2606ff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_SUB (register, 0xb0, 4) , (const, 0x1, 4)]
[(unique, 0x100002b3, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x26080e, 1)]
[(unique, 0x100001d3, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (unique, 0x100002b3, 8) , (unique, 0x100002bb, 8)]
[ ---  CBRANCH (ram, 0x260800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100002b3, 8) , (unique, 0x100002bb, 8)]
[(unique, 0x100002bb, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x2606ff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x2606ff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 4) , (register, 0x38, 4), (register, 0x38, 4) MULTIEQUAL (unique, 0x100001d3, 4) , (register, 0x38, 4)]
[(register, 0x80, 8) INT_LEFT (register, 0x80, 8) , (const, 0x2, 4)]
[(register, 0xb0, 8) INT_ZEXT (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x2606f3, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x8, 4)]
[(register, 0xb0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[ ---  CBRANCH (ram, 0x2608d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(ram, 0x4f0a90, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x2606ff, 1)]
[ ---  CBRANCH (ram, 0x2608f8, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1c9, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x1c9, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x1c9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c9, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000253, 8) , (unique, 0x1000023b, 8) , (const, 0x8f, 4) , (unique, 0x1000025b, 8), (unique, 0x1000025b, 8) COPY (const, 0x2bb760, 8), (unique, 0x10000253, 8) COPY (const, 0x2b7368, 8), (unique, 0x1000023b, 8) COPY (const, 0x2b733f, 8)]
[(ram, 0x4f0a90, 4) COPY (ram, 0x4f0a90, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x1c9, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0xb0, 8) COPY (const, 0x1, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x1a2, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x30, 4), (unique, 0x3400, 8) CAST (unique, 0x10000393, 8), (unique, 0x10000393, 8) INT_ADD (unique, 0x1000038b, 8) , (register, 0x80, 8), (unique, 0x1000038b, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x26070b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0xffffffff, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b1, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x1b1, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1b1, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0x1b1, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x1b1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b1, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x260626, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x260617, 1)]
[ ---  CBRANCH (ram, 0x2605c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 4) , (const, 0xffffffff, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0x119, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003a3, 8) , (unique, 0xbd00, 4), (unique, 0x100003a3, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000039b, 8), (unique, 0x1000039b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2608e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003ab, 8), (unique, 0x100003ab, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (unique, 0x100002ef, 4) , (stack, 0xffffffffffffffb0, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x260626, 1)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0xa5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003bb, 8) , (unique, 0xbd00, 4), (unique, 0x100003bb, 8) CAST (unique, 0x3100, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003b3, 8), (unique, 0x100003b3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x100002e7, 4) COPY (stack, 0xffffffffffffffb0, 4)]
[ ---  CBRANCH (ram, 0x260676, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003c3, 8), (unique, 0x100003c3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe2, 4)]
[(ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0xe2, 4), (ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xe2, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (unique, 0x100002e7, 4) , (unique, 0x100002ef, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xe2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe2, 4)]
[ ---  CALL (ram, 0x262050, 8) , (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x260626, 1)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb4, 8) MULTIEQUAL (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8) , (stack, 0xffffffffffffffb4, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(ram, 0x4f0a90, 4) MULTIEQUAL (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4) , (ram, 0x4f0a90, 4)]
[(register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0xb0, 8) , (const, 0xffffffff, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x260917, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003cb, 8), (unique, 0x100003cb, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xdc, 4)]
[(stack, 0xffffffffffffffb4, 8) INDIRECT (stack, 0xffffffffffffffb4, 8) , (const, 0xdc, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xdc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdc, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4f0a90, 4) COPY (ram, 0x4f0a90, 4), (ram, 0x4f0a90, 4) INDIRECT (ram, 0x4f0a90, 4) , (const, 0xdc, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4f0a90, 4) COPY (ram, 0x4f0a90, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
