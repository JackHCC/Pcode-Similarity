[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x49, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x49, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x49, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x23f266, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000e35, 8) , (const, 0x49, 4), (unique, 0x10000e35, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x49, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x49, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x49, 4), (stack, 0xffffffffffffffa0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x49, 4), (stack, 0xffffffffffffffa8, 16) COPY (const, 0x0, 16)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x49, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000e95, 8), (unique, 0x10000e95, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff98, 8) INT_OR (unique, 0x10000558, 8) , (unique, 0x10000560, 8), (unique, 0x10000560, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x10000558, 8) INT_AND (stack, 0xffffffffffffff98, 8) , (const, 0xffffffff00000000, 8), (register, 0x0, 4) CALL (ram, 0x222ec0, 8) , (const, 0x10, 4) , (const, 0x80003, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x49, 4), (stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x23fa11, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x10000e9d, 4), (unique, 0x10000e9d, 4) CAST (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222ec0, 8) , (const, 0x10, 4) , (const, 0x80003, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x73, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x73, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x23f29f, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x73, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x73, 4), (stack, 0xffffffffffffff8c, 2) COPY (const, 0x10, 2)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x73, 4), (stack, 0xffffffffffffff8e, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x73, 4), (stack, 0xffffffffffffff96, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x73, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x73, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x73, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x73, 4)]
[ ---  CBRANCH (ram, 0x23fa07, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222870, 8) , (register, 0x0, 4) , (unique, 0x3100, 8) , (const, 0xc, 4), (unique, 0x3100, 8) CAST (unique, 0x10000ea1, 8), (unique, 0x10000ea1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff8c, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8a, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x23f2bd, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x8a, 4), (stack, 0xffffffffffffff88, 4) COPY (const, 0xc, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x8a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8a, 4)]
[ ---  CBRANCH (ram, 0x23fa07, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222970, 8) , (stack, 0xffffffffffffff98, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff98, 4) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x23f2dc, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff98, 8) INT_OR (unique, 0x1000056b, 8) , (unique, 0x1000057b, 8), (unique, 0x1000057b, 8) INT_LEFT (unique, 0x100005c8, 8) , (const, 0x20, 4), (unique, 0x1000056b, 8) INT_AND (stack, 0xffffffffffffff98, 8) , (const, 0xffffffff, 8), (unique, 0x100005c8, 8) INT_RIGHT (stack, 0xffffffffffffff8e, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa2, 4)]
[ ---  CBRANCH (ram, 0x23f348, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x23eed0, 8) , (unique, 0x3100, 8) , (const, 0x12, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x119, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x23f359, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x119, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (unique, 0xbd00, 4) , (const, 0x119, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffffa0, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffffa8, 8) SUBPIECE (stack, 0xffffffffffffffa8, 16) , (const, 0x0, 8), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x119, 4)]
[ ---  CBRANCH (ram, 0x23f2e4, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x23eed0, 8) , (unique, 0x3100, 8)]
[(unique, 0x10000e85, 8) COPY (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x23feaa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffa8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff9c, 4) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x4, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[(register, 0x88, 4) COPY (const, 0x0, 4)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000cf5, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x23f480, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000ea9, 8), (unique, 0x10000ea9, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000cf5, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x23f480, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000eb1, 8), (unique, 0x10000eb1, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x23f480, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x23f3f4, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x98, 8) , (unique, 0xbd80, 8), (register, 0x98, 8) CAST (unique, 0x10000eb9, 8), (unique, 0x10000eb9, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x8, 8)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x23f3c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffff9c, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x3, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x23f3c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ec1, 8), (unique, 0x10000ec1, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x23f480, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x3, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000ec9, 8), (unique, 0x10000ec9, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23f3b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x10, 2)]
[(register, 0x88, 4) INT_ADD (register, 0x88, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x14, 2)]
[(unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23f476, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x98, 8) , (unique, 0x100005d0, 8), (unique, 0x100005d0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8), (register, 0x98, 8) PTRADD (register, 0x98, 8) , (const, 0xffffffffffffffe0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x23f476, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc00, 2) , (const, 0x4, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000ed1, 8), (unique, 0x10000ed1, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23f476, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x98, 8) , (register, 0xa8, 8), (register, 0xa8, 8) CAST (unique, 0x10000ed9, 8), (unique, 0x10000ed9, 8) INT_ZEXT (unique, 0xbc00, 2)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000ee9, 8), (unique, 0x10000ee9, 8) INT_ADD (unique, 0x10000ee1, 8) , (const, 0x22, 8), (unique, 0x10000ee1, 8) CAST (register, 0x10, 8)]
[(unique, 0x10000988, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(unique, 0x10000990, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa0, 8)]
[(unique, 0x10000998, 2) MULTIEQUAL (unique, 0xbc00, 2) , (unique, 0xbc00, 2)]
[(unique, 0x1000099b, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23f461, 1) , (unique, 0x1000099a, 1), (unique, 0x1000099a, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x7, 2), (unique, 0xbc00, 2) MULTIEQUAL (unique, 0xbc00, 2) , (unique, 0xbc00, 2)]
[(register, 0xa0, 8) CAST (unique, 0x10000ef9, 8), (unique, 0x10000ef9, 8) INT_ADD (unique, 0x10000ef1, 8) , (register, 0x30, 8), (unique, 0x10000ef1, 8) CAST (unique, 0x10000990, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1fffc, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x3, 4), (register, 0x30, 4) INT_ZEXT (unique, 0x10000998, 2)]
[ ---  CBRANCH (ram, 0x23f440, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x98, 8) , (unique, 0x100005e0, 8), (unique, 0x100005e0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8), (register, 0x98, 8) PTRADD (unique, 0x10000988, 8) , (unique, 0x1000019a, 8) , (const, 0x1, 8), (unique, 0x1000019a, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1fffc, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x3, 4), (register, 0x30, 4) INT_ZEXT (unique, 0x10000998, 2)]
[ ---  CBRANCH (ram, 0x23f476, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc00, 2) , (const, 0x4, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000f01, 8), (unique, 0x10000f01, 8) CAST (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x23f476, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x98, 8) , (register, 0xa8, 8), (register, 0xa8, 8) CAST (unique, 0x10000f09, 8), (unique, 0x10000f09, 8) INT_ZEXT (unique, 0xbc00, 2)]
[(register, 0x90, 4) INT_ADD (register, 0x90, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x23f3c7, 1)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000f19, 8), (unique, 0x10000f19, 8) INT_ADD (unique, 0x10000f11, 8) , (const, 0x2, 8), (unique, 0x10000f11, 8) CAST (register, 0xa0, 8)]
[(register, 0x90, 4) INT_ADD (register, 0x90, 4) , (const, 0x1, 4)]
[(register, 0x80, 8) PTRADD (unique, 0x1000099b, 8) , (unique, 0x10000f21, 8) , (const, 0x1, 8), (unique, 0x10000f21, 8) CAST (unique, 0x10000750, 8), (unique, 0x10000750, 8) PTRADD (register, 0x80, 8) , (const, 0xfffffffffffffffc, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x23f3c7, 1)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x10, 8) CAST (unique, 0x10000f31, 8), (unique, 0x10000f31, 8) INT_ADD (unique, 0x10000f29, 8) , (register, 0x0, 8), (unique, 0x10000f29, 8) CAST (register, 0x10, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffc, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x23f480, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x8, 8) , (unique, 0x100005e8, 8), (unique, 0x100005e8, 8) PTRSUB (const, 0x0, 8) , (const, 0x10, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (unique, 0x10000152, 8) , (const, 0x1, 8), (unique, 0x10000152, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffc, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x23f480, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x10, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x23f480, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x8, 8) , (register, 0x98, 8), (register, 0x98, 8) CAST (unique, 0x10000f39, 8), (unique, 0x10000f39, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x23f380, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000f41, 8), (unique, 0x10000f41, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(stack, 0xffffffffffffff7c, 4) COPY (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x23f4b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4), (register, 0x88, 4) INT_ADD (register, 0x88, 4) , (register, 0x90, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1cf, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1cf, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x23f4d2, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x3400, 8) , (const, 0x1cf, 4), (unique, 0x3400, 8) PTRADD (register, 0x80, 8) , (register, 0xa0, 8) , (const, 0x1, 8), (register, 0xa0, 8) INT_MULT (register, 0x88, 8) , (const, 0xb8, 8), (register, 0x88, 8) INT_ZEXT (register, 0x88, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1cf, 4)]
[(unique, 0x10000c09, 4) COPY (stack, 0xffffffffffffff7c, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff68, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1211e0, 8) , (const, 0x1, 8) , (unique, 0x10000f49, 8), (unique, 0x10000f49, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x80, 8) , (register, 0xa0, 8) , (const, 0x1, 8), (register, 0xa0, 8) INT_MULT (register, 0x88, 8) , (const, 0xb8, 8), (register, 0x88, 8) INT_ZEXT (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x23fa33, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1211e0, 8) , (const, 0x1, 8) , (unique, 0x10000f49, 8), (unique, 0x10000f49, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x80, 8) , (register, 0xa0, 8) , (const, 0x1, 8), (register, 0xa0, 8) INT_MULT (register, 0x88, 8) , (const, 0xb8, 8), (register, 0x88, 8) INT_ZEXT (register, 0x88, 4)]
[(register, 0xb0, 8) COPY (const, 0xffffffff, 8)]
[(unique, 0x10000cc5, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000cdd, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x23f723, 1)]
[(register, 0x20, 8) PTRADD (unique, 0x100006d0, 8) , (unique, 0x100001ba, 8) , (const, 0x1, 8), (unique, 0x100006d0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x100001ba, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1e, 8), (unique, 0x3680, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xffffffffffffff7c, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x100006e8, 8) , (unique, 0x100001ba, 8) , (const, 0x1, 8), (unique, 0x100006e8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x100001ba, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1e, 8), (unique, 0x3680, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xffffffffffffff7c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f71, 8) , (const, 0x23f529, 8), (unique, 0x10000f71, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000870, 8) , (unique, 0x10000868, 8) , (const, 0x1, 8), (unique, 0x10000870, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x10000868, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100001ba, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1e, 8), (unique, 0x3680, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xffffffffffffff7c, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x258, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x257, 4), (stack, 0xffffffffffffff20, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x258, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x257, 4), (stack, 0xffffffffffffff70, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000f69, 8), (unique, 0x10000f69, 8) INT_ADD (unique, 0x10000f61, 8) , (unique, 0x100001ba, 8), (unique, 0x10000f61, 8) CAST (unique, 0x10000858, 8), (unique, 0x10000858, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff20, 8), (unique, 0x100001ba, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1e, 8), (unique, 0x3680, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x258, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x258, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x258, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x258, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x257, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x257, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x258, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x257, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x258, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x257, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x258, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x257, 4)]
[ ---  CALL (ram, 0x1211f0, 8) , (unique, 0x3800, 8) , (const, 0xffffffff, 4) , (unique, 0x3680, 8), (unique, 0x3800, 8) CAST (unique, 0x10000f69, 8), (unique, 0x10000f69, 8) INT_ADD (unique, 0x10000f61, 8) , (unique, 0x100001ba, 8), (unique, 0x10000f61, 8) CAST (unique, 0x10000858, 8), (unique, 0x10000858, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff20, 8), (unique, 0x100001ba, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1e, 8), (unique, 0x3680, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff60, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) CAST (unique, 0x10000f59, 8), (unique, 0x10000f59, 8) INT_ADD (register, 0xa0, 8) , (unique, 0x10000f51, 8), (unique, 0x10000f51, 8) CAST (register, 0x0, 8)]
[(stack, 0xffffffffffffff78, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff30, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff58, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x10000c09, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x23f690, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000f79, 8), (unique, 0x10000f79, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x88, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x23f690, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000f81, 8), (unique, 0x10000f81, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x23f690, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x23f5cd, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8), (register, 0xa0, 8) CAST (unique, 0x10000f89, 8), (unique, 0x10000f89, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000d2d, 8) COPY (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x10000d9d, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23f5a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x4, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4)]
[(unique, 0x10000d35, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000da5, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23f5a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f91, 8), (unique, 0x10000f91, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x23f690, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x3, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000f99, 8), (unique, 0x10000f99, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23f590, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x10, 2)]
[ ---  CBRANCH (ram, 0x23f740, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x14, 2)]
[(register, 0xa0, 8) PTRADD (register, 0xa0, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[(register, 0x38, 4) INT_ADD (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff7c, 4)]
[(unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23f65c, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x10000fa1, 4) , (const, 0x1, 4), (unique, 0x10000fa1, 4) CAST (stack, 0xffffffffffffff7c, 4)]
[(unique, 0x10000e7d, 8) COPY (stack, 0xffffffffffffff68, 8)]
[ ---  CBRANCH (ram, 0x23fffb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000fa5, 8), (unique, 0x10000fa5, 8) CAST (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xcc4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fad, 8) , (unique, 0x3100, 4), (unique, 0x10000fad, 8) CAST (stack, 0xffffffffffffff70, 8)]
[ ---  BRANCH (ram, 0x23fa5b, 1)]
[ ---  CBRANCH (ram, 0x24004d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000c45, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x1, 8)]
[(unique, 0x10000e2d, 8) COPY (stack, 0xffffffffffffff70, 8)]
[ ---  BRANCH (ram, 0x23f7b7, 1)]
[(register, 0x10, 8) CAST (unique, 0x10000fbd, 8), (unique, 0x10000fbd, 8) INT_ADD (unique, 0x10000fb5, 8) , (const, 0x4, 8), (unique, 0x10000fb5, 8) CAST (unique, 0x10000460, 8), (unique, 0x10000460, 8) MULTIEQUAL (unique, 0x10000e2d, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x23f798, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff58, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (unique, 0x10000c55, 8), (unique, 0x10000c55, 8) MULTIEQUAL (unique, 0x10000c45, 8) , (unique, 0x10000c4d, 8)]
[ ---  CBRANCH (ram, 0x23fa3e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000fc5, 8), (unique, 0x10000fc5, 8) CAST (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fcd, 8) , (unique, 0x3100, 4), (unique, 0x10000fcd, 8) CAST (register, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xcb7, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xcaf, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (unique, 0x3400, 8), (unique, 0x3e80, 8) CAST (unique, 0x10000ff5, 8), (unique, 0x10000ff5, 8) INT_ADD (unique, 0x3d00, 8) , (register, 0x0, 8), (unique, 0x3d00, 8) INT_ADD (unique, 0x10000fe5, 8) , (unique, 0x10000fed, 8), (unique, 0x10000fed, 8) CAST (stack, 0xffffffffffffff68, 8), (unique, 0x10000fe5, 8) CAST (unique, 0x10000630, 8), (unique, 0x10000630, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff48, 8), (unique, 0x3400, 8) CAST (unique, 0x10000fdd, 8), (unique, 0x10000fdd, 8) INT_ADD (unique, 0x10000fd5, 8) , (register, 0x0, 8), (unique, 0x10000fd5, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0xb8, 8)]
[(unique, 0x10000c65, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000fdd, 8), (unique, 0x10000fdd, 8) INT_ADD (unique, 0x10000fd5, 8) , (register, 0x0, 8), (unique, 0x10000fd5, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0xb8, 8)]
[(unique, 0x10000c4d, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x23febe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000c5d, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001005, 8), (unique, 0x10001005, 8) INT_ADD (unique, 0x10000ffd, 8) , (register, 0x0, 8), (unique, 0x10000ffd, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0xb8, 8)]
[ ---  BRANCH (ram, 0x23fa5b, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x704, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) CAST (unique, 0x10001039, 8), (unique, 0x10001039, 8) INT_ADD (unique, 0x10001031, 8) , (const, 0x10, 8), (unique, 0x10001031, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001029, 8), (unique, 0x10001029, 8) INT_ADD (unique, 0x10001021, 8) , (register, 0x0, 8), (unique, 0x10001021, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0xb8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001019, 8), (unique, 0x10001019, 8) INT_ADD (unique, 0x10001011, 8) , (const, 0x10, 8), (unique, 0x10001011, 8) CAST (register, 0x10, 8), (register, 0x0, 8) INT_SEXT (unique, 0x1000100d, 4), (unique, 0x1000100d, 4) CAST (register, 0x38, 4), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000c5d, 8) , (unique, 0x10000c65, 8) , (unique, 0x10000e7d, 8) , (unique, 0x10000e7d, 8)]
[ ---  CBRANCH (ram, 0x23fa7c, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10001041, 4), (unique, 0x10001041, 4) CAST (register, 0x38, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x70c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (unique, 0x3400, 8), (unique, 0x3e80, 8) CAST (unique, 0x10001055, 8), (unique, 0x10001055, 8) INT_ADD (unique, 0x3d00, 8) , (register, 0x0, 8), (unique, 0x3d00, 8) INT_ADD (unique, 0x10001045, 8) , (unique, 0x1000104d, 8), (unique, 0x1000104d, 8) CAST (stack, 0xffffffffffffff68, 8), (unique, 0x10001045, 8) CAST (unique, 0x10000620, 8), (unique, 0x10000620, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff48, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff78, 4) COPY (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffff78, 4) , (const, 0x1, 4)]
[(unique, 0x10000cfd, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000d6d, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23fd3b, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 8) , (register, 0xa0, 8)]
[(unique, 0x10000d05, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000d75, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23fd3b, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 2) , (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000105d, 8), (unique, 0x1000105d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[(unique, 0x10000d0d, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000d7d, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23fd3b, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x38, 8) , (register, 0xa0, 8), (register, 0x38, 8) CAST (unique, 0x10001065, 8), (unique, 0x10001065, 8) INT_ZEXT (unique, 0xbc00, 2)]
[(unique, 0x3100, 8) CAST (unique, 0x10001075, 8), (unique, 0x10001075, 8) INT_ADD (unique, 0x1000106d, 8) , (const, 0x38, 8), (unique, 0x1000106d, 8) CAST (unique, 0x3400, 8)]
[(stack, 0xffffffffffffff48, 8) COPY (register, 0xa8, 8)]
[(stack, 0xffffffffffffff54, 4) COPY (register, 0x80, 4)]
[(stack, 0xffffffffffffff40, 8) COPY (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x23fb7c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xb8, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) MULTIEQUAL (unique, 0xbc00, 2) , (unique, 0xbc00, 2)]
[(unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x18, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0xfffffffffffffffc, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x23fc50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001085, 8), (unique, 0x10001085, 8) INT_ADD (unique, 0x1000107d, 8) , (const, 0x2, 8), (unique, 0x1000107d, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x23fca7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10001095, 8), (unique, 0x10001095, 8) INT_ADD (unique, 0x1000108d, 8) , (const, 0x18, 8), (unique, 0x1000108d, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0x100004d8, 4), (unique, 0x3c80, 8) CAST (unique, 0x100010f5, 8), (unique, 0x100010f5, 8) INT_ADD (unique, 0x100010ed, 8) , (const, 0x80, 8), (unique, 0x100010ed, 8) CAST (unique, 0x3400, 8), (unique, 0x100004d8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100010a5, 8), (unique, 0x100010a5, 8) INT_ADD (unique, 0x1000109d, 8) , (const, 0x38, 8), (unique, 0x1000109d, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000500, 8) , (unique, 0x100004dc, 4), (unique, 0x10000500, 8) CAST (unique, 0x10001105, 8), (unique, 0x10001105, 8) INT_ADD (unique, 0x100010fd, 8) , (const, 0x84, 8), (unique, 0x100010fd, 8) CAST (unique, 0x3400, 8), (unique, 0x100004dc, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004e0, 8), (unique, 0x100004e0, 8) CAST (unique, 0x100010b5, 8), (unique, 0x100010b5, 8) INT_ADD (unique, 0x100010ad, 8) , (const, 0x3c, 8), (unique, 0x100010ad, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000508, 8) , (unique, 0x100004e8, 4), (unique, 0x10000508, 8) CAST (unique, 0x10001115, 8), (unique, 0x10001115, 8) INT_ADD (unique, 0x1000110d, 8) , (const, 0x88, 8), (unique, 0x1000110d, 8) CAST (unique, 0x3400, 8), (unique, 0x100004e8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004ec, 8), (unique, 0x100004ec, 8) CAST (unique, 0x100010c5, 8), (unique, 0x100010c5, 8) INT_ADD (unique, 0x100010bd, 8) , (const, 0x40, 8), (unique, 0x100010bd, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000510, 8) , (unique, 0x100004f4, 4), (unique, 0x10000510, 8) CAST (unique, 0x10001125, 8), (unique, 0x10001125, 8) INT_ADD (unique, 0x1000111d, 8) , (const, 0x8c, 8), (unique, 0x1000111d, 8) CAST (unique, 0x3400, 8), (unique, 0x100004f4, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004f8, 8), (unique, 0x100004f8, 8) CAST (unique, 0x100010d5, 8), (unique, 0x100010d5, 8) INT_ADD (unique, 0x100010cd, 8) , (const, 0x44, 8), (unique, 0x100010cd, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0xbc80, 4), (unique, 0x3c80, 8) CAST (unique, 0x10001175, 8), (unique, 0x10001175, 8) INT_ADD (unique, 0x1000116d, 8) , (const, 0xa0, 8), (unique, 0x1000116d, 8) CAST (unique, 0x3400, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100010e5, 8), (unique, 0x100010e5, 8) INT_ADD (unique, 0x100010dd, 8) , (const, 0x58, 8), (unique, 0x100010dd, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0x10000518, 4), (unique, 0x3c80, 8) CAST (unique, 0x1000118d, 8), (unique, 0x1000118d, 8) INT_ADD (unique, 0x10001185, 8) , (const, 0x90, 8), (unique, 0x10001185, 8) CAST (unique, 0x3400, 8), (unique, 0x10000518, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10001135, 8), (unique, 0x10001135, 8) INT_ADD (unique, 0x1000112d, 8) , (const, 0x48, 8), (unique, 0x1000112d, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000540, 8) , (unique, 0x1000051c, 4), (unique, 0x10000540, 8) CAST (unique, 0x1000119d, 8), (unique, 0x1000119d, 8) INT_ADD (unique, 0x10001195, 8) , (const, 0x94, 8), (unique, 0x10001195, 8) CAST (unique, 0x3400, 8), (unique, 0x1000051c, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000520, 8), (unique, 0x10000520, 8) CAST (unique, 0x10001145, 8), (unique, 0x10001145, 8) INT_ADD (unique, 0x1000113d, 8) , (const, 0x4c, 8), (unique, 0x1000113d, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000548, 8) , (unique, 0x10000528, 4), (unique, 0x10000548, 8) CAST (unique, 0x100011ad, 8), (unique, 0x100011ad, 8) INT_ADD (unique, 0x100011a5, 8) , (const, 0x98, 8), (unique, 0x100011a5, 8) CAST (unique, 0x3400, 8), (unique, 0x10000528, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000052c, 8), (unique, 0x1000052c, 8) CAST (unique, 0x10001155, 8), (unique, 0x10001155, 8) INT_ADD (unique, 0x1000114d, 8) , (const, 0x50, 8), (unique, 0x1000114d, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000550, 8) , (unique, 0x10000534, 4), (unique, 0x10000550, 8) CAST (unique, 0x100011bd, 8), (unique, 0x100011bd, 8) INT_ADD (unique, 0x100011b5, 8) , (const, 0x9c, 8), (unique, 0x100011b5, 8) CAST (unique, 0x3400, 8), (unique, 0x10000534, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000538, 8), (unique, 0x10000538, 8) CAST (unique, 0x10001165, 8), (unique, 0x10001165, 8) INT_ADD (unique, 0x1000115d, 8) , (const, 0x54, 8), (unique, 0x1000115d, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3c80, 8), (unique, 0x3800, 8) CAST (unique, 0x100011cd, 8), (unique, 0x100011cd, 8) INT_ADD (unique, 0x100011c5, 8) , (const, 0x28, 8), (unique, 0x100011c5, 8) CAST (unique, 0x3400, 8), (unique, 0x3c80, 8) INT_ADD (unique, 0x1000117d, 8) , (const, 0x80, 8), (unique, 0x1000117d, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 16)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x100011dd, 8), (unique, 0x100011dd, 8) INT_ADD (unique, 0x100011d5, 8) , (const, 0x58, 8), (unique, 0x100011d5, 8) CAST (unique, 0x3400, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbfb, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbf8, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbf5, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbf3, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f46, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f44, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f42, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f41, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbea, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f38, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f36, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f34, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f33, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 16), (unique, 0x3100, 8) CAST (unique, 0x100011ed, 8), (unique, 0x100011ed, 8) INT_ADD (unique, 0x100011e5, 8) , (const, 0x48, 8), (unique, 0x100011e5, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) CAST (unique, 0x100011fd, 8), (unique, 0x100011fd, 8) INT_ADD (unique, 0x100011f5, 8) , (const, 0x18, 8), (unique, 0x100011f5, 8) CAST (unique, 0x3400, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc0e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbfe, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x38, 2), (register, 0x38, 2) INT_ZEXT (unique, 0xbb00, 1), (unique, 0x3800, 8) CAST (unique, 0x10001215, 8), (unique, 0x10001215, 8) INT_ADD (unique, 0x1000120d, 8) , (const, 0x38, 8), (unique, 0x1000120d, 8) CAST (unique, 0x3400, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001205, 8), (unique, 0x10001205, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fe13, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001205, 8), (unique, 0x10001205, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc9d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0xbc80, 4), (unique, 0x3800, 8) CAST (unique, 0x10001225, 8), (unique, 0x10001225, 8) INT_ADD (unique, 0x1000121d, 8) , (const, 0x3c, 8), (unique, 0x1000121d, 8) CAST (unique, 0x3400, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000122d, 8), (unique, 0x1000122d, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23fb4b, 1)]
[ ---  CBRANCH (ram, 0x23fdf7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xa, 1)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x24, 8) , (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001245, 8) , (const, 0x23fe0b, 8), (unique, 0x10001245, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000918, 8) , (unique, 0x10000910, 8) , (const, 0x1, 8), (unique, 0x10000918, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x10000910, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc87, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc87, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc87, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xc87, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xc87, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xc87, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xc87, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xc87, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xc87, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xc87, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xc86, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc87, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc86, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (unique, 0x3100, 8) , (unique, 0x1000124d, 8), (unique, 0x1000124d, 8) CAST (unique, 0x3100, 8), (unique, 0x3800, 8) CAST (unique, 0x1000123d, 8), (unique, 0x1000123d, 8) INT_ADD (unique, 0x10001235, 8) , (const, 0x3a, 8), (unique, 0x10001235, 8) CAST (unique, 0x3400, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10001255, 8), (unique, 0x10001255, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23fb4b, 1)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3100, 8) , (const, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc2b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x5300, 16), (unique, 0x3800, 8) CAST (unique, 0x1000126d, 8), (unique, 0x1000126d, 8) INT_ADD (unique, 0x10001265, 8) , (const, 0x40, 8), (unique, 0x10001265, 8) CAST (unique, 0x3400, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000125d, 8), (unique, 0x1000125d, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fd08, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x80fe, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xc0ff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xff, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001275, 8), (unique, 0x10001275, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x2, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001285, 8), (unique, 0x10001285, 8) INT_ADD (unique, 0x1000127d, 8) , (const, 0x5, 8), (unique, 0x1000127d, 8) CAST (register, 0x18, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc72, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0xbc80, 4), (unique, 0x3800, 8) CAST (unique, 0x10001295, 8), (unique, 0x10001295, 8) INT_ADD (unique, 0x1000128d, 8) , (const, 0x50, 8), (unique, 0x1000128d, 8) CAST (unique, 0x3400, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000129d, 8), (unique, 0x1000129d, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23fb4b, 1)]
[ ---  CBRANCH (ram, 0x23fad8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc00, 2) , (const, 0x3, 2)]
[ ---  CBRANCH (ram, 0x23fc28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x3, 2)]
[ ---  CBRANCH (ram, 0x24009d, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x11, 8) , (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012a5, 8) , (const, 0x2400a2, 8), (unique, 0x100012a5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000960, 8) , (unique, 0x10000958, 8) , (const, 0x1, 8), (unique, 0x10000960, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x10000958, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xbca, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xbca, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xbca, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xbca, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xbca, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xbca, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xbca, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xbca, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xbc9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbca, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbc9, 4)]
[ ---  CALL (ram, 0x1406c0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbca, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3c80, 8), (unique, 0x3800, 8) CAST (unique, 0x100012c5, 8), (unique, 0x100012c5, 8) INT_ADD (unique, 0x100012bd, 8) , (const, 0x8, 8), (unique, 0x100012bd, 8) CAST (unique, 0x3400, 8), (unique, 0x3c80, 8) CAST (unique, 0x100012b5, 8), (unique, 0x100012b5, 8) INT_ADD (unique, 0x100012ad, 8) , (const, 0xa4, 8), (unique, 0x100012ad, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012cd, 8) , (const, 0x23fc48, 8), (unique, 0x100012cd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000900, 8) , (unique, 0x100008f8, 8) , (const, 0x1, 8), (unique, 0x10000900, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x100008f8, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbc4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xbc4, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xbc4, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xbc4, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xbc4, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xbc4, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xbc4, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xbc4, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xbc4, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xbc3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbc4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbc3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbc6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbc4, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbc1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x100012dd, 8), (unique, 0x100012dd, 8) CALL (ram, 0x121230, 8) , (unique, 0x3c80, 8) , (unique, 0x3100, 8) , (unique, 0x100012d5, 8), (unique, 0x100012d5, 8) CAST (unique, 0x3100, 8), (unique, 0x3c80, 8) CAST (unique, 0x100012b5, 8), (unique, 0x100012b5, 8) INT_ADD (unique, 0x100012ad, 8) , (const, 0xa4, 8), (unique, 0x100012ad, 8) CAST (unique, 0x3400, 8)]
[ ---  BRANCH (ram, 0x23fb48, 1)]
[ ---  CBRANCH (ram, 0x23fb4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x4, 2)]
[(unique, 0x3c80, 8) INT_ADD (unique, 0x100012f5, 8) , (const, 0x80, 8), (unique, 0x100012f5, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x23fb12, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100012ed, 8), (unique, 0x100012ed, 8) INT_ADD (unique, 0x100012e5, 8) , (const, 0x28, 8), (unique, 0x100012e5, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (const, 0x0, 16), (unique, 0x3c80, 8) CAST (unique, 0x10001305, 8), (unique, 0x10001305, 8) INT_ADD (unique, 0x100012fd, 8) , (const, 0x80, 8), (unique, 0x100012fd, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x10001315, 8), (unique, 0x10001315, 8) INT_ADD (unique, 0x1000130d, 8) , (const, 0xa0, 8), (unique, 0x1000130d, 8) CAST (unique, 0x3400, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb00, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xafd, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xafa, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 16), (unique, 0x3100, 8) CAST (unique, 0x10001325, 8), (unique, 0x10001325, 8) INT_ADD (unique, 0x1000131d, 8) , (const, 0x90, 8), (unique, 0x1000131d, 8) CAST (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3c80, 8), (unique, 0x3800, 8) CAST (unique, 0x10001335, 8), (unique, 0x10001335, 8) INT_ADD (unique, 0x1000132d, 8) , (const, 0x28, 8), (unique, 0x1000132d, 8) CAST (unique, 0x3400, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb13, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb03, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (register, 0x38, 2), (register, 0x38, 2) INT_ZEXT (unique, 0xbb00, 1), (unique, 0x3c80, 8) CAST (unique, 0x1000134d, 8), (unique, 0x1000134d, 8) INT_ADD (unique, 0x10001345, 8) , (const, 0x80, 8), (unique, 0x10001345, 8) CAST (unique, 0x3400, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000133d, 8), (unique, 0x1000133d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fe80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000133d, 8), (unique, 0x1000133d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xba3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0xbc80, 4), (unique, 0x3c80, 8) CAST (unique, 0x1000135d, 8), (unique, 0x1000135d, 8) INT_ADD (unique, 0x10001355, 8) , (const, 0x84, 8), (unique, 0x10001355, 8) CAST (unique, 0x3400, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10001365, 8), (unique, 0x10001365, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23fb4b, 1)]
[ ---  CBRANCH (ram, 0x23fe61, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xa, 1)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x24, 8) , (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000137d, 8) , (const, 0x23fe78, 8), (unique, 0x1000137d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000948, 8) , (unique, 0x10000940, 8) , (const, 0x1, 8), (unique, 0x10000948, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x10000940, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb8d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb8d, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xb8d, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xb8d, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xb8d, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb8d, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xb8d, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xb8d, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xb8d, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xb8d, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xb8c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb8d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb8c, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3c80, 8) , (unique, 0x3100, 8) , (unique, 0x10001385, 8), (unique, 0x10001385, 8) CAST (unique, 0x3100, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001375, 8), (unique, 0x10001375, 8) INT_ADD (unique, 0x1000136d, 8) , (const, 0x82, 8), (unique, 0x1000136d, 8) CAST (unique, 0x3400, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000138d, 8), (unique, 0x1000138d, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23fb4b, 1)]
[ ---  CBRANCH (ram, 0x23fed5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 8) , (const, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb31, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0x5300, 16), (unique, 0x3c80, 8) CAST (unique, 0x100013a5, 8), (unique, 0x100013a5, 8) INT_ADD (unique, 0x1000139d, 8) , (const, 0x88, 8), (unique, 0x1000139d, 8) CAST (unique, 0x3400, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001395, 8), (unique, 0x10001395, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23ff0b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x80fe, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xc0ff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0xff, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100013ad, 8), (unique, 0x100013ad, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x2, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100013bd, 8), (unique, 0x100013bd, 8) INT_ADD (unique, 0x100013b5, 8) , (const, 0x5, 8), (unique, 0x100013b5, 8) CAST (register, 0x18, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb78, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0xbc80, 4), (unique, 0x3c80, 8) CAST (unique, 0x100013cd, 8), (unique, 0x100013cd, 8) INT_ADD (unique, 0x100013c5, 8) , (const, 0x98, 8), (unique, 0x100013c5, 8) CAST (unique, 0x3400, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100013d5, 8), (unique, 0x100013d5, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23fb4b, 1)]
[ ---  CBRANCH (ram, 0x23fb4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x1, 2)]
[ ---  CBRANCH (ram, 0x23fe9d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100013e5, 8), (unique, 0x100013e5, 8) INT_ADD (unique, 0x100013dd, 8) , (const, 0x18, 8), (unique, 0x100013dd, 8) CAST (unique, 0x3400, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xad0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) CAST (unique, 0x100013f5, 8), (unique, 0x100013f5, 8) INT_ADD (unique, 0x100013ed, 8) , (const, 0x18, 8), (unique, 0x100013ed, 8) CAST (unique, 0x3400, 8)]
[(unique, 0x10000d65, 8) COPY (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x23fbba, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x788, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3c80, 8), (unique, 0x3800, 8) CAST (unique, 0x10001415, 8), (unique, 0x10001415, 8) INT_ADD (unique, 0x1000140d, 8) , (const, 0x28, 8), (unique, 0x1000140d, 8) CAST (unique, 0x3400, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001405, 8), (unique, 0x10001405, 8) INT_ADD (unique, 0x100013fd, 8) , (const, 0x80, 8), (unique, 0x100013fd, 8) CAST (unique, 0x3400, 8)]
[(unique, 0x10000d5d, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001405, 8), (unique, 0x10001405, 8) INT_ADD (unique, 0x100013fd, 8) , (const, 0x80, 8), (unique, 0x100013fd, 8) CAST (unique, 0x3400, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x797, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001425, 8) , (register, 0x98, 2), (unique, 0x10001425, 8) CAST (unique, 0x100007a0, 8), (unique, 0x100007a0, 8) PTRSUB (register, 0x90, 8) , (const, 0x0, 8), (register, 0x98, 2) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000141d, 8), (unique, 0x1000141d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x10000d5d, 8) , (unique, 0x10000d65, 8)]
[ ---  CBRANCH (ram, 0x23fe2d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000141d, 8), (unique, 0x1000141d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fb4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3100, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xac8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000142d, 8) , (unique, 0xbc80, 4), (unique, 0x1000142d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100007f0, 8) , (const, 0x4, 8) , (const, 0x1, 8), (unique, 0x100007f0, 8) PTRSUB (register, 0x90, 8) , (const, 0x0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10001435, 8), (unique, 0x10001435, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23fb4b, 1)]
[ ---  CBRANCH (ram, 0x23fe46, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xa, 1)]
[ ---  CBRANCH (ram, 0x23fb4b, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x25, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000143d, 8) , (const, 0x23fe59, 8), (unique, 0x1000143d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000930, 8) , (unique, 0x10000928, 8) , (const, 0x1, 8), (unique, 0x10000930, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x10000928, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xab2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xab2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xab2, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xab2, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xab2, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xab2, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xab2, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xab2, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xab2, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xab2, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xab1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xab2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xab1, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x10001445, 8), (unique, 0x10001445, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000800, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000800, 8) PTRSUB (register, 0x90, 8) , (const, 0x0, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000144d, 8), (unique, 0x1000144d, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23fb4b, 1)]
[ ---  CBRANCH (ram, 0x23fb4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3100, 8) , (const, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7b4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x5300, 16), (unique, 0x3100, 8) CAST (unique, 0x1000145d, 8), (unique, 0x1000145d, 8) PTRADD (unique, 0x100007a8, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x100007a8, 8) PTRSUB (register, 0x90, 8) , (const, 0x0, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001455, 8), (unique, 0x10001455, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fc13, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x80fe, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xc0ff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0xff, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001465, 8), (unique, 0x10001465, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23fb48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x2, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001475, 8), (unique, 0x10001475, 8) INT_ADD (unique, 0x1000146d, 8) , (const, 0x5, 8), (unique, 0x1000146d, 8) CAST (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000147d, 8), (unique, 0x1000147d, 8) CAST (register, 0x18, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7fb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001485, 8) , (unique, 0xbc80, 4), (unique, 0x10001485, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100007c8, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x100007c8, 8) PTRSUB (unique, 0x100007c0, 8) , (const, 0x0, 8), (unique, 0x100007c0, 8) PTRADD (register, 0x90, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000148d, 8), (unique, 0x1000148d, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23fb4b, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) CAST (unique, 0x1000149d, 8), (unique, 0x1000149d, 8) INT_ADD (unique, 0x10001495, 8) , (register, 0x0, 8), (unique, 0x10001495, 8) CAST (register, 0x18, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1fffc, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x10000d15, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x10000d85, 8) COPY (stack, 0xffffffffffffff48, 8), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(unique, 0x10000e3d, 4) COPY (stack, 0xffffffffffffff54, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[ ---  CBRANCH (ram, 0x23fd20, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 8) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (unique, 0x10000328, 8) , (const, 0x1, 8), (unique, 0x10000328, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1fffc, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23fd20, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 2) , (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100014a5, 8), (unique, 0x100014a5, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x23fd20, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x38, 8) , (register, 0xb8, 8), (register, 0x38, 8) CAST (unique, 0x100014ad, 8), (unique, 0x100014ad, 8) INT_ZEXT (unique, 0xbc00, 2)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000d6d, 8) , (unique, 0x10000d75, 8) , (unique, 0x10000d7d, 8) , (unique, 0x10000d85, 8) , (unique, 0x10000d85, 8) , (unique, 0x10000d85, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000cfd, 8) , (unique, 0x10000d05, 8) , (unique, 0x10000d0d, 8) , (unique, 0x10000d15, 8) , (unique, 0x10000d15, 8) , (unique, 0x10000d15, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (unique, 0x10000e3d, 4) , (unique, 0x10000e3d, 4) , (unique, 0x10000e3d, 4)]
[ ---  CBRANCH (ram, 0x23ff1f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100014bd, 8), (unique, 0x100014bd, 8) INT_ADD (unique, 0x100014b5, 8) , (const, 0x8, 8), (unique, 0x100014b5, 8) CAST (unique, 0x3400, 8)]
[(unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[(unique, 0x10000e75, 8) COPY (stack, 0xffffffffffffff68, 8)]
[ ---  CBRANCH (ram, 0x24007a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100014c5, 8), (unique, 0x100014c5, 8) CAST (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa9a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100014cd, 8) , (unique, 0x3100, 4), (unique, 0x100014cd, 8) CAST (stack, 0xffffffffffffff70, 8)]
[ ---  BRANCH (ram, 0x240030, 1)]
[ ---  CBRANCH (ram, 0x240071, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000c2d, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x1, 8)]
[(unique, 0x10000e4d, 8) COPY (stack, 0xffffffffffffff70, 8)]
[ ---  BRANCH (ram, 0x23ff7e, 1)]
[(register, 0x10, 8) CAST (unique, 0x100014dd, 8), (unique, 0x100014dd, 8) INT_ADD (unique, 0x100014d5, 8) , (const, 0x4, 8), (unique, 0x100014d5, 8) CAST (unique, 0x100005be, 8), (unique, 0x100005be, 8) MULTIEQUAL (unique, 0x10000e4d, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x23ff60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff58, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (unique, 0x10000c3d, 8), (unique, 0x10000c3d, 8) MULTIEQUAL (unique, 0x10000c2d, 8) , (unique, 0x10000c35, 8)]
[ ---  CBRANCH (ram, 0x240014, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100014e5, 8), (unique, 0x100014e5, 8) CAST (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100014ed, 8) , (unique, 0x3100, 4), (unique, 0x100014ed, 8) CAST (register, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa91, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa7d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (unique, 0x3400, 8), (unique, 0x3e80, 8) CAST (unique, 0x10001515, 8), (unique, 0x10001515, 8) INT_ADD (unique, 0x3d00, 8) , (register, 0x10, 8), (unique, 0x3d00, 8) INT_ADD (unique, 0x10001505, 8) , (unique, 0x1000150d, 8), (unique, 0x1000150d, 8) CAST (stack, 0xffffffffffffff68, 8), (unique, 0x10001505, 8) CAST (unique, 0x10000628, 8), (unique, 0x10000628, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff48, 8), (unique, 0x3400, 8) CAST (unique, 0x100014fd, 8), (unique, 0x100014fd, 8) INT_ADD (unique, 0x100014f5, 8) , (register, 0x10, 8), (unique, 0x100014f5, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x10, 8) INT_MULT (register, 0x0, 8) , (const, 0xb8, 8)]
[(unique, 0x10000c15, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100014fd, 8), (unique, 0x100014fd, 8) INT_ADD (unique, 0x100014f5, 8) , (register, 0x10, 8), (unique, 0x100014f5, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x10, 8) INT_MULT (register, 0x0, 8) , (const, 0xb8, 8)]
[(unique, 0x10000c35, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x24003d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000c0d, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001525, 8), (unique, 0x10001525, 8) INT_ADD (register, 0x0, 8) , (unique, 0x1000151d, 8), (unique, 0x1000151d, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0xb8, 8)]
[ ---  BRANCH (ram, 0x240030, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa7a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) CAST (unique, 0x10001545, 8), (unique, 0x10001545, 8) INT_ADD (unique, 0x1000153d, 8) , (const, 0x8, 8), (unique, 0x1000153d, 8) CAST (unique, 0x3400, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001535, 8), (unique, 0x10001535, 8) INT_ADD (unique, 0x1000152d, 8) , (const, 0x8, 8), (unique, 0x1000152d, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000c0d, 8) , (unique, 0x10000c15, 8) , (unique, 0x10000e75, 8) , (unique, 0x10000e75, 8)]
[ ---  BRANCH (ram, 0x23fd46, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x23fdf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001555, 8), (unique, 0x10001555, 8) INT_ADD (unique, 0x1000154d, 8) , (const, 0x18, 8), (unique, 0x1000154d, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x23fdf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x0, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x23fdf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x11, 2)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x898, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000156d, 8), (unique, 0x1000156d, 8) INT_ADD (unique, 0x10001565, 8) , (const, 0x20, 8), (unique, 0x10001565, 8) CAST (unique, 0x3400, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x1000155d, 8) , (const, 0x5c, 8), (unique, 0x1000155d, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x23ff88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2)]
[(unique, 0x3100, 8) CAST (unique, 0x1000157d, 8), (unique, 0x1000157d, 8) INT_ADD (unique, 0x10001575, 8) , (const, 0x60, 8), (unique, 0x10001575, 8) CAST (unique, 0x3400, 8)]
[(register, 0x8, 4) COPY (const, 0x20, 4)]
[ ---  BRANCH (ram, 0x23fd96, 1)]
[ ---  CBRANCH (ram, 0x23fd8d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0xa, 2)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8a6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc00, 2), (unique, 0x3100, 8) CAST (unique, 0x1000158d, 8), (unique, 0x1000158d, 8) INT_ADD (unique, 0x10001585, 8) , (const, 0x5c, 8), (unique, 0x10001585, 8) CAST (unique, 0x3400, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23f5a0, 1)]
[(unique, 0x3100, 8) CAST (unique, 0x1000159d, 8), (unique, 0x1000159d, 8) INT_ADD (unique, 0x10001595, 8) , (const, 0x64, 8), (unique, 0x10001595, 8) CAST (unique, 0x3400, 8)]
[(register, 0x8, 4) COPY (const, 0x80, 4)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8b0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc00, 2), (unique, 0x3100, 8) CAST (unique, 0x100015ad, 8), (unique, 0x100015ad, 8) INT_ADD (unique, 0x100015a5, 8) , (const, 0x5c, 8), (unique, 0x100015a5, 8) CAST (unique, 0x3400, 8)]
[(unique, 0x10000e25, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100015bd, 8), (unique, 0x100015bd, 8) INT_ADD (unique, 0x100015b5, 8) , (const, 0x11, 8), (unique, 0x100015b5, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x23fda4, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x8, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100015bd, 8), (unique, 0x100015bd, 8) INT_ADD (unique, 0x100015b5, 8) , (const, 0x11, 8), (unique, 0x100015b5, 8) CAST (register, 0x18, 8), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x10000e29, 4) COPY (register, 0x8, 4)]
[(register, 0x8, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10000e25, 4) , (unique, 0x10000e29, 4)]
[ ---  CBRANCH (ram, 0x23fdd9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10000e25, 4) , (unique, 0x10000e29, 4)]
[ ---  CBRANCH (ram, 0x23ff96, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 4) , (const, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x8, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (const, 0xffffffffffffffff, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x99f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x99a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x3a00, 8) CAST (unique, 0x100015cd, 8), (unique, 0x100015cd, 8) INT_ADD (unique, 0x100015c5, 8) , (unique, 0x10000828, 8), (unique, 0x100015c5, 8) CAST (register, 0x10, 8), (unique, 0x10000828, 8) INT_SUB (register, 0x30, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_AND (register, 0x8, 8) , (const, 0xffffffff, 8)]
[ ---  CBRANCH (ram, 0x23fdd6, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0x7, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0xfffffff8, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (register, 0x8, 4), (register, 0x30, 4) INT_SUB (unique, 0x10000430, 4) , (unique, 0x10000438, 4), (unique, 0x10000430, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (unique, 0x10000438, 4) SUBPIECE (register, 0x90, 8) , (const, 0x0, 4), (register, 0x90, 8) INT_AND (unique, 0x100015d5, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100015d5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9fd, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x3400, 8) CAST (unique, 0x100015dd, 8), (unique, 0x100015dd, 8) INT_ADD (register, 0x90, 8) , (register, 0x98, 8), (register, 0x98, 8) INT_ZEXT (register, 0x38, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x23ffc9, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x38, 4) , (register, 0x30, 4), (register, 0x38, 4) INT_ADD (register, 0x38, 4) , (const, 0x8, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x24005c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100003a6, 8) , (const, 0x0, 8), (unique, 0x100003a6, 8) INT_AND (register, 0x8, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100015e5, 8) , (const, 0xffffffff, 4), (unique, 0x100015e5, 8) CAST (register, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x993, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x98e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0xffffffff, 4), (unique, 0x3a00, 8) CAST (unique, 0x100015f5, 8), (unique, 0x100015f5, 8) INT_ADD (unique, 0x100015ed, 8) , (unique, 0x10000830, 8), (unique, 0x100015ed, 8) CAST (register, 0x10, 8), (unique, 0x10000830, 8) INT_SUB (register, 0x30, 8) , (const, 0x4, 8), (register, 0x30, 8) INT_AND (register, 0x8, 8) , (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x23fdd6, 1)]
[ ---  CBRANCH (ram, 0x23fdd6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x933, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100015fd, 8) , (const, 0xff, 1), (unique, 0x100015fd, 8) CAST (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x24008c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100003ae, 8) , (const, 0x0, 8), (unique, 0x100003ae, 8) INT_AND (register, 0x8, 8) , (const, 0x2, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x989, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0xffff, 2), (unique, 0x3a00, 8) CAST (unique, 0x1000160d, 8), (unique, 0x1000160d, 8) INT_ADD (unique, 0x10001605, 8) , (unique, 0x10000838, 8), (unique, 0x10001605, 8) CAST (register, 0x10, 8), (unique, 0x10000838, 8) INT_SUB (register, 0x30, 8) , (const, 0x2, 8), (register, 0x30, 8) INT_AND (register, 0x8, 8) , (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x23fdd6, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x10, 8) CAST (unique, 0x1000161d, 8), (unique, 0x1000161d, 8) INT_ADD (unique, 0x10001615, 8) , (register, 0x8, 8), (unique, 0x10001615, 8) CAST (register, 0x10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x23fdf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x97d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001625, 8) , (register, 0x0, 1), (unique, 0x10001625, 8) CAST (register, 0x10, 8), (register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_LEFT (const, 0xff, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x8, 1) INT_SUB (const, 0x8, 1) , (unique, 0x1000046a, 1), (unique, 0x1000046a, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23f5a0, 1)]
[(register, 0xa0, 8) PTRADD (register, 0xa0, 8) , (const, 0xffffffffffffffe0, 8) , (const, 0x1, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[(unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x23f65c, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x1000162d, 4) , (const, 0x1, 4), (unique, 0x1000162d, 4) CAST (stack, 0xffffffffffffff7c, 4)]
[(unique, 0x10000e8d, 8) COPY (stack, 0xffffffffffffff68, 8)]
[ ---  CBRANCH (ram, 0x23ffe0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001631, 8), (unique, 0x10001631, 8) CAST (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x644, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001639, 8) , (unique, 0x3100, 4), (unique, 0x10001639, 8) CAST (stack, 0xffffffffffffff70, 8)]
[ ---  BRANCH (ram, 0x23f7f5, 1)]
[ ---  CBRANCH (ram, 0x23ffef, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000c7d, 8) COPY (register, 0x10, 8), (register, 0x10, 8) COPY (const, 0x1, 8)]
[(unique, 0x10000e1d, 8) COPY (stack, 0xffffffffffffff70, 8)]
[ ---  BRANCH (ram, 0x23f657, 1)]
[(register, 0x8, 8) CAST (unique, 0x10001649, 8), (unique, 0x10001649, 8) INT_ADD (unique, 0x10001641, 8) , (const, 0x4, 8), (unique, 0x10001641, 8) CAST (unique, 0x10000228, 8), (unique, 0x10000228, 8) MULTIEQUAL (unique, 0x10000e1d, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x23f638, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (stack, 0xffffffffffffff58, 8), (register, 0x10, 8) COPY (unique, 0x10000c8d, 8), (unique, 0x10000c8d, 8) MULTIEQUAL (unique, 0x10000c7d, 8) , (unique, 0x10000c85, 8)]
[(unique, 0x10000bf1, 8) COPY (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(register, 0xb0, 8) COPY (const, 0xfffffff5, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001651, 8) , (const, 0x23f675, 8), (unique, 0x10001651, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000888, 8) , (unique, 0x10000880, 8) , (const, 0x1, 8), (unique, 0x10000888, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x10000880, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x424, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x423, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x424, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x423, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x424, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x423, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x424, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x423, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x424, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x423, 4), (stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x424, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x423, 4), (stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x424, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x423, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x424, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x423, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x424, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x423, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x424, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x423, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000c01, 8), (unique, 0x10000c01, 8) COPY (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001659, 8), (unique, 0x10001659, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x424, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x424, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000de5, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x424, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  BRANCH (ram, 0x23f300, 1)]
[ ---  CBRANCH (ram, 0x23f7d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001661, 8), (unique, 0x10001661, 8) CAST (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001669, 8) , (unique, 0x3100, 4), (unique, 0x10001669, 8) CAST (register, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x63e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x633, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (unique, 0x3400, 8), (unique, 0x3e80, 8) CAST (unique, 0x10001691, 8), (unique, 0x10001691, 8) INT_ADD (unique, 0x3d00, 8) , (register, 0x10, 8), (unique, 0x3d00, 8) INT_ADD (unique, 0x10001681, 8) , (unique, 0x10001689, 8), (unique, 0x10001689, 8) CAST (stack, 0xffffffffffffff68, 8), (unique, 0x10001681, 8) CAST (unique, 0x10000618, 8), (unique, 0x10000618, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff48, 8), (unique, 0x3400, 8) CAST (unique, 0x10001679, 8), (unique, 0x10001679, 8) INT_ADD (unique, 0x10001671, 8) , (register, 0x10, 8), (unique, 0x10001671, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0xb8, 8)]
[(unique, 0x10000e05, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001679, 8), (unique, 0x10001679, 8) INT_ADD (unique, 0x10001671, 8) , (register, 0x10, 8), (unique, 0x10001671, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0xb8, 8)]
[(unique, 0x10000c85, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x23fa1c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000dfd, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100016a1, 8), (unique, 0x100016a1, 8) INT_ADD (unique, 0x10001699, 8) , (register, 0x10, 8), (unique, 0x10001699, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (const, 0xb8, 8)]
[ ---  BRANCH (ram, 0x23f7f5, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x46e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) CAST (unique, 0x100016b1, 8), (unique, 0x100016b1, 8) INT_ADD (unique, 0x100016a9, 8) , (const, 0x10, 8), (unique, 0x100016a9, 8) CAST (register, 0xb0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x6, 8) , (const, 0x4, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000dfd, 8) , (unique, 0x10000e05, 8) , (unique, 0x10000e8d, 8) , (unique, 0x10000e8d, 8)]
[(unique, 0x10000d3d, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000dad, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23f5a0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 8) , (register, 0xa0, 8)]
[(unique, 0x10000d45, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000db5, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23f5a0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 2) , (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100016b9, 8), (unique, 0x100016b9, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff38, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100016d1, 8), (unique, 0x100016d1, 8) INT_ADD (unique, 0x100016c9, 8) , (const, 0x8c, 8), (unique, 0x100016c9, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10000d4d, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000dbd, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23f5a0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x38, 8) , (register, 0xa0, 8), (register, 0x38, 8) CAST (unique, 0x100016c1, 8), (unique, 0x100016c1, 8) INT_ZEXT (unique, 0xbc00, 2)]
[(stack, 0xffffffffffffff48, 8) COPY (register, 0xa8, 8)]
[(stack, 0xffffffffffffff54, 4) COPY (register, 0x80, 4)]
[(stack, 0xffffffffffffff40, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000cbd, 8) COPY (stack, 0xffffffffffffff60, 8)]
[ ---  BRANCH (ram, 0x23f8c3, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa8, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000cbd, 8) , (register, 0x18, 8)]
[(unique, 0x10000bf9, 8) COPY (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) MULTIEQUAL (unique, 0xbc00, 2) , (unique, 0xbc00, 2)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0xfffffffffffffffc, 8) , (const, 0x1, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x23f940, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x2, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100016e1, 8), (unique, 0x100016e1, 8) INT_ADD (unique, 0x100016d9, 8) , (const, 0x2, 8), (unique, 0x100016d9, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x23f890, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x25, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (const, 0x11, 2), (unique, 0x3c80, 8) CAST (unique, 0x100016f1, 8), (unique, 0x100016f1, 8) INT_ADD (unique, 0x100016e9, 8) , (const, 0x80, 8), (unique, 0x100016e9, 8) CAST (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100016f9, 8) , (const, 0x23f96f, 8), (unique, 0x100016f9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100008d0, 8) , (unique, 0x100008c8, 8) , (const, 0x1, 8), (unique, 0x100008d0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x100008c8, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x60b, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x60b, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x60b, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x60b, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x60b, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x60b, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x60b, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x60b, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x60b, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x60a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x60a, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x10000bf9, 8) , (unique, 0x3100, 8) , (unique, 0x10001701, 8), (unique, 0x10001701, 8) CAST (unique, 0x3100, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10001709, 8), (unique, 0x10001709, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0xbc80, 4), (unique, 0x3c80, 8) CAST (unique, 0x10001719, 8), (unique, 0x10001719, 8) INT_ADD (unique, 0x10001711, 8) , (const, 0x84, 8), (unique, 0x10001711, 8) CAST (register, 0xb0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (register, 0x80, 1), (register, 0x80, 1) SUBPIECE (stack, 0xffffffffffffff60, 8) , (const, 0x0, 4), (unique, 0x3c80, 8) CAST (unique, 0x10001739, 8), (unique, 0x10001739, 8) INT_ADD (unique, 0x10001731, 8) , (const, 0x8b, 8), (unique, 0x10001731, 8) CAST (register, 0xb0, 8), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x60b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x60a, 4), (stack, 0xffffffffffffff60, 8) COPY (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0xbc00, 2), (unique, 0x3c80, 8) CAST (unique, 0x10001749, 8), (unique, 0x10001749, 8) INT_ADD (unique, 0x10001741, 8) , (const, 0x88, 8), (unique, 0x10001741, 8) CAST (register, 0xb0, 8), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001729, 8), (unique, 0x10001729, 8) INT_ADD (unique, 0x10001721, 8) , (const, 0x12, 8), (unique, 0x10001721, 8) CAST (register, 0x18, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x627, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x622, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x61f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x618, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x60b, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x605, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3c80, 8), (unique, 0x3800, 8) CAST (unique, 0x10001761, 8), (unique, 0x10001761, 8) INT_ADD (unique, 0x10001759, 8) , (const, 0x28, 8), (unique, 0x10001759, 8) CAST (register, 0xb0, 8), (unique, 0x3c80, 8) INT_ADD (unique, 0x10001751, 8) , (const, 0x80, 8), (unique, 0x10001751, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x23f890, 1)]
[ ---  CBRANCH (ram, 0x23f858, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc00, 2) , (const, 0x3, 2)]
[ ---  CBRANCH (ram, 0x23f9b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x3, 2)]
[ ---  CBRANCH (ram, 0x23f890, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x38, 8) , (const, 0x12, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3c80, 8), (unique, 0x3800, 8) CAST (unique, 0x10001781, 8), (unique, 0x10001781, 8) INT_ADD (unique, 0x10001779, 8) , (const, 0x8, 8), (unique, 0x10001779, 8) CAST (register, 0xb0, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001771, 8), (unique, 0x10001771, 8) INT_ADD (unique, 0x10001769, 8) , (const, 0xa4, 8), (unique, 0x10001769, 8) CAST (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001789, 8) , (const, 0x23f9d3, 8), (unique, 0x10001789, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100008e8, 8) , (unique, 0x100008e0, 8) , (const, 0x1, 8), (unique, 0x100008e8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x100008e0, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5eb, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x5eb, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x5eb, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x5eb, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x5eb, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x5eb, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x5eb, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x5eb, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x5eb, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x5ea, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5eb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5ea, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5ed, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5eb, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5e8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x10001799, 8), (unique, 0x10001799, 8) CALL (ram, 0x121230, 8) , (unique, 0x3c80, 8) , (unique, 0x3100, 8) , (unique, 0x10001791, 8), (unique, 0x10001791, 8) CAST (unique, 0x3100, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001771, 8), (unique, 0x10001771, 8) INT_ADD (unique, 0x10001769, 8) , (const, 0xa4, 8), (unique, 0x10001769, 8) CAST (register, 0xb0, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100017a1, 8), (unique, 0x100017a1, 8) CAST (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x23f890, 1)]
[(unique, 0x10000cad, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x23f890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x7, 2)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x18, 8), (unique, 0x3800, 8) CAST (unique, 0x100017b9, 8), (unique, 0x100017b9, 8) INT_ADD (unique, 0x100017b1, 8) , (const, 0x30, 8), (unique, 0x100017b1, 8) CAST (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100017c1, 8) , (const, 0x23f883, 8), (unique, 0x100017c1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100008a0, 8) , (unique, 0x10000898, 8) , (const, 0x1, 8), (unique, 0x100008a0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x10000898, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5c7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5c7, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5bf, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x5c7, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x5c7, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x5c7, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x5c7, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x5c7, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x5c7, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x5c7, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x5c7, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x5c6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5c6, 4)]
[ ---  CALL (ram, 0x121160, 8) , (register, 0x18, 8) , (unique, 0x3100, 8) , (unique, 0x100017c9, 8), (unique, 0x100017c9, 8) CAST (unique, 0x3100, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100017d1, 8), (unique, 0x100017d1, 8) CAST (register, 0xb8, 8)]
[(unique, 0x10000cb5, 8) COPY (stack, 0xffffffffffffff60, 8), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5c7, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5c6, 4), (stack, 0xffffffffffffff60, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x18, 8) , (unique, 0x100017a9, 8) , (const, 0x1, 8), (unique, 0x100017a9, 8) CAST (unique, 0x3100, 8)]
[(unique, 0x10000c95, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x23f890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x1, 2)]
[(unique, 0x10000c9d, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x23f890, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x25, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (const, 0x11, 2), (unique, 0x3800, 8) CAST (unique, 0x100017f1, 8), (unique, 0x100017f1, 8) INT_ADD (unique, 0x100017e9, 8) , (const, 0x38, 8), (unique, 0x100017e9, 8) CAST (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100017f9, 8) , (const, 0x23f904, 8), (unique, 0x100017f9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100008b8, 8) , (unique, 0x100008b0, 8) , (const, 0x1, 8), (unique, 0x100008b8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x100008b0, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4db, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x4db, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x4db, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x4db, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x4db, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x4db, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x4db, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x4db, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x4db, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x4da, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4da, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (unique, 0x3100, 8) , (unique, 0x10001801, 8), (unique, 0x10001801, 8) CAST (unique, 0x3100, 8), (unique, 0x3800, 8) CAST (unique, 0x100017e1, 8), (unique, 0x100017e1, 8) INT_ADD (unique, 0x100017d9, 8) , (const, 0x44, 8), (unique, 0x100017d9, 8) CAST (register, 0xb0, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10001809, 8), (unique, 0x10001809, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0xbc80, 4), (unique, 0x3800, 8) CAST (unique, 0x10001819, 8), (unique, 0x10001819, 8) INT_ADD (unique, 0x10001811, 8) , (const, 0x3c, 8), (unique, 0x10001811, 8) CAST (register, 0xb0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x80, 1), (register, 0x80, 1) SUBPIECE (stack, 0xffffffffffffff60, 8) , (const, 0x0, 4), (unique, 0x3800, 8) CAST (unique, 0x10001839, 8), (unique, 0x10001839, 8) INT_ADD (unique, 0x10001831, 8) , (const, 0x43, 8), (unique, 0x10001831, 8) CAST (register, 0xb0, 8), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4db, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4da, 4), (stack, 0xffffffffffffff60, 8) COPY (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0xbc00, 2), (unique, 0x3800, 8) CAST (unique, 0x10001849, 8), (unique, 0x10001849, 8) INT_ADD (unique, 0x10001841, 8) , (const, 0x40, 8), (unique, 0x10001841, 8) CAST (register, 0xb0, 8), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001829, 8), (unique, 0x10001829, 8) INT_ADD (unique, 0x10001821, 8) , (const, 0x12, 8), (unique, 0x10001821, 8) CAST (register, 0x18, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4f7, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4f2, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4ef, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4e8, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4db, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4d5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10001861, 8), (unique, 0x10001861, 8) INT_ADD (unique, 0x10001859, 8) , (const, 0x18, 8), (unique, 0x10001859, 8) CAST (register, 0xb0, 8), (unique, 0x3800, 8) INT_ADD (unique, 0x10001851, 8) , (const, 0x38, 8), (unique, 0x10001851, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10000ca5, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x23f890, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000c95, 8) , (unique, 0x10000c9d, 8) , (unique, 0x10000ca5, 8) , (unique, 0x10000cad, 8) , (unique, 0x10000cb5, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0xb8, 8) CAST (unique, 0x10001871, 8), (unique, 0x10001871, 8) INT_ADD (unique, 0x10001869, 8) , (register, 0x10, 8), (unique, 0x10001869, 8) CAST (register, 0xb8, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x1fffc, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x3, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x23f9e0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (unique, 0x100005d8, 8) , (register, 0xa8, 8), (unique, 0x100005d8, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8), (register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (unique, 0x100002b0, 8) , (const, 0x1, 8), (unique, 0x100002b0, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x1fffc, 4), (register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x3, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x23f9e0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 2) , (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10001879, 8), (unique, 0x10001879, 8) CAST (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x23f9e0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x38, 8) , (register, 0xa8, 8), (register, 0x38, 8) CAST (unique, 0x10001881, 8), (unique, 0x10001881, 8) INT_ZEXT (unique, 0xbc00, 2)]
[(stack, 0xffffffffffffff60, 8) COPY (register, 0x18, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(unique, 0x10000d55, 8) COPY (stack, 0xffffffffffffff40, 8)]
[(unique, 0x10000dc5, 8) COPY (stack, 0xffffffffffffff48, 8)]
[(unique, 0x10000e49, 4) COPY (stack, 0xffffffffffffff54, 4)]
[ ---  BRANCH (ram, 0x23f5a0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000d2d, 8) , (unique, 0x10000d35, 8) , (unique, 0x10000d3d, 8) , (unique, 0x10000d45, 8) , (unique, 0x10000d4d, 8) , (unique, 0x10000d55, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (unique, 0x10000e49, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[(register, 0x18, 8) CAST (unique, 0x10001891, 8), (unique, 0x10001891, 8) INT_ADD (unique, 0x10001889, 8) , (register, 0x0, 8), (unique, 0x10001889, 8) CAST (register, 0x18, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffc, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23f690, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xa8, 8) , (unique, 0x100005f0, 8), (unique, 0x100005f0, 8) PTRSUB (const, 0x0, 8) , (const, 0x10, 8), (register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (unique, 0x100001e0, 8) , (const, 0x1, 8), (unique, 0x100001e0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffc, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (register, 0x0, 4), (register, 0xa8, 8) MULTIEQUAL (unique, 0x10000d9d, 8) , (unique, 0x10000da5, 8) , (unique, 0x10000dad, 8) , (unique, 0x10000db5, 8) , (unique, 0x10000dbd, 8) , (unique, 0x10000dc5, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23f690, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x10, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x23f690, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xa8, 8) , (register, 0xa0, 8), (register, 0xa0, 8) CAST (unique, 0x10001899, 8), (unique, 0x10001899, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x23f558, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x100018a1, 8), (unique, 0x100018a1, 8) LOAD (const, 0x1b1, 4) , (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x2400a2, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x0, 8) , (stack, 0xffffffffffffff60, 8), (register, 0x0, 8) PTRADD (stack, 0xffffffffffffff28, 8) , (unique, 0x100018a9, 8) , (const, 0x1, 8), (unique, 0x100018a9, 8) CAST (stack, 0xffffffffffffff68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100018b1, 8) , (const, 0x2400c1, 8), (unique, 0x100018b1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000978, 8) , (unique, 0x10000970, 8) , (const, 0x1, 8), (unique, 0x10000978, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x10000970, 8) INT_ADD (unique, 0x100001ba, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x388, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x388, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x388, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x388, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x388, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x388, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x387, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x388, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x387, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x388, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x387, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x388, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x387, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x388, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x387, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000608, 8) , (unique, 0x10000600, 8) , (const, 0x319, 4) , (unique, 0x10000610, 8), (unique, 0x10000610, 8) COPY (const, 0x2bb5e0, 8), (unique, 0x10000608, 8) COPY (const, 0x2ba628, 8), (unique, 0x10000600, 8) COPY (const, 0x2ba600, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x388, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x23f712, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff78, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23f712, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff7c, 4) , (const, 0x0, 4)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_SUB (stack, 0xffffffffffffff7c, 4) , (const, 0x1, 4)]
[(register, 0x0, 8) CAST (unique, 0x100018c1, 8), (unique, 0x100018c1, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100018b9, 8), (unique, 0x100018b9, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x0, 8) INT_MULT (stack, 0xffffffffffffff20, 8) , (const, 0xb8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x23f709, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100018d1, 8), (unique, 0x100018d1, 8) INT_ADD (unique, 0x100018c9, 8) , (unique, 0x10000ab9, 8), (unique, 0x100018c9, 8) CAST (stack, 0xffffffffffffff70, 8), (unique, 0x10000ab9, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x354, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 8), (unique, 0x3400, 8) CAST (unique, 0x100018e1, 8), (unique, 0x100018e1, 8) INT_ADD (unique, 0x100018d9, 8) , (register, 0x30, 8), (unique, 0x100018d9, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0x30, 8) INT_MULT (register, 0x30, 8) , (const, 0xb8, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_SUB (unique, 0x10000252, 4) , (const, 0x1, 4), (unique, 0x10000252, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x23f6ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (register, 0x8, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x37a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x10000ccd, 8) COPY (stack, 0xffffffffffffff30, 8)]
[(unique, 0x10000cd5, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000cd5, 8) , (unique, 0x10000cdd, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000ccd, 8) , (unique, 0x10000cc5, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100018e9, 8), (unique, 0x100018e9, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000ddd, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  BRANCH (ram, 0x23f300, 1)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100018f1, 8), (unique, 0x100018f1, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x23f300, 1)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100018f9, 8), (unique, 0x100018f9, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x23f310, 1)]
[(stack, 0xffffffffffffffa8, 8) SUBPIECE (stack, 0xffffffffffffffa8, 16) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(register, 0xb0, 8) COPY (const, 0xffffffff, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001901, 8), (unique, 0x10001901, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000e55, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000e65, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000e6d, 8) COPY (register, 0x20, 8)]
[(unique, 0x100009a4, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x100009ac, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0xb8, 4)]
[(unique, 0x100009b8, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100009c8, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x100009d0, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x100009d8, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(unique, 0x100009e0, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(unique, 0x100009e8, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(unique, 0x100009f0, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(unique, 0x100009f8, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x10000a00, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(unique, 0x10000a08, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(unique, 0x10000a0c, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x10000a14, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x10000a1c, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x10000a24, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x10000a2c, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(unique, 0x10000a30, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(unique, 0x10000a34, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000a3c, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(unique, 0x10000a40, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(unique, 0x10000a42, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(unique, 0x10000a4a, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(unique, 0x10000a4c, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x10000a54, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(unique, 0x10000a58, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(unique, 0x10000a68, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000ce5, 8) COPY (unique, 0x10000a70, 8), (unique, 0x10000a70, 8) MULTIEQUAL (unique, 0x10000e6d, 8) , (register, 0x20, 8)]
[(unique, 0x10000dcd, 8) COPY (unique, 0x100009c0, 8), (unique, 0x100009c0, 8) MULTIEQUAL (unique, 0x10000e65, 8) , (register, 0xa8, 8)]
[(unique, 0x10000ded, 8) COPY (unique, 0x100009c0, 8), (unique, 0x100009c0, 8) MULTIEQUAL (unique, 0x10000e65, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x23f310, 1) , (unique, 0x100009a3, 1), (unique, 0x100009a3, 1) INT_NOTEQUAL (unique, 0x100009b0, 8) , (const, 0x0, 8), (unique, 0x100009b0, 8) MULTIEQUAL (unique, 0x10000e55, 8) , (unique, 0x10000e5d, 8)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x100009ac, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x100009a4, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000dcd, 8) , (unique, 0x10000e85, 8) , (unique, 0x10000ddd, 8) , (unique, 0x10000de5, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001911, 8) , (const, 0x23f308, 8), (unique, 0x10001911, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000a70, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc6, 4), (register, 0x110, 8) MULTIEQUAL (unique, 0x100009b8, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc6, 4), (ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100009c8, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (unique, 0x100009d0, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (unique, 0x100009d8, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (unique, 0x100009e0, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (unique, 0x100009e8, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (unique, 0x100009f0, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0x100009f8, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (unique, 0x10000a00, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc6, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (unique, 0x10000a08, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x10000a0c, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x10000a14, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10000a1c, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x10000a24, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xc6, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (unique, 0x10000a2c, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xc6, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (unique, 0x10000a30, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000a34, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xc6, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (unique, 0x10000a3c, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xc6, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0xc5, 4), (stack, 0xffffffffffffff8c, 2) MULTIEQUAL (unique, 0x10000a40, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff8e, 8) MULTIEQUAL (unique, 0x10000a42, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xc6, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0xc5, 4), (stack, 0xffffffffffffff96, 2) MULTIEQUAL (unique, 0x10000a4a, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x10000a4c, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xc6, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xc5, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (unique, 0x10000a54, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xc6, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xc5, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (unique, 0x10000a58, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000a68, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100009b0, 8) , (stack, 0xffffffffffffffa8, 8) , (register, 0x18, 8) , (unique, 0x10000bf1, 8)]
[(unique, 0x10000e5d, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001909, 8), (unique, 0x10001909, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100009b0, 8) , (stack, 0xffffffffffffffa8, 8) , (register, 0x18, 8) , (unique, 0x10000bf1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000a68, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (unique, 0x10000a58, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (unique, 0x10000a54, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x10000a4c, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (unique, 0x10000a4a, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (unique, 0x10000a42, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (unique, 0x10000a40, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (unique, 0x10000a3c, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000a34, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (unique, 0x10000a30, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (unique, 0x10000a2c, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x10000a24, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10000a1c, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x10000a14, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x10000a0c, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (unique, 0x10000a08, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (unique, 0x10000a00, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0x100009f8, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (unique, 0x100009f0, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (unique, 0x100009e8, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (unique, 0x100009e0, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (unique, 0x100009d8, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (unique, 0x100009d0, 8) , (stack, 0xffffffffffffff10, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x100009a4, 8) , (register, 0xb0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd5, 4), (ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100009c8, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001919, 8) , (register, 0xb8, 4), (unique, 0x10001919, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0xa8, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x10000ded, 8) , (unique, 0x10000e85, 8), (register, 0xb8, 4) MULTIEQUAL (unique, 0x100009ac, 4) , (unique, 0xbc80, 4), (register, 0x110, 8) MULTIEQUAL (unique, 0x100009b8, 8) , (register, 0x110, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(unique, 0x10000ced, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000ce5, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x23f31f, 1)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff96, 2) MULTIEQUAL (stack, 0xffffffffffffff96, 2) , (stack, 0xffffffffffffff96, 2)]
[(stack, 0xffffffffffffff8e, 8) MULTIEQUAL (stack, 0xffffffffffffff8e, 8) , (stack, 0xffffffffffffff8e, 8)]
[(stack, 0xffffffffffffff8c, 2) MULTIEQUAL (stack, 0xffffffffffffff8c, 2) , (stack, 0xffffffffffffff8c, 2)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000ced, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x2400c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001921, 8), (unique, 0x10001921, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001929, 8) , (unique, 0x100005f8, 8), (unique, 0x10001929, 8) CAST (register, 0x20, 8), (unique, 0x100005f8, 8) PTRSUB (const, 0x0, 8) , (const, 0x2400c6, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x101, 4), (stack, 0xffffffffffffff8c, 2) INDIRECT (stack, 0xffffffffffffff8c, 2) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff8e, 8) INDIRECT (stack, 0xffffffffffffff8e, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x101, 4), (stack, 0xffffffffffffff96, 2) INDIRECT (stack, 0xffffffffffffff96, 2) , (const, 0x100, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x100, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x101, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x100, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x101, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x100, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x101, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x100, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x101, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
