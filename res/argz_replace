[(register, 0x18, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1965b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1965b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x66, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffffb8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x66, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffffc0, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffff58, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0x1000022b, 1) COPY (const, 0x1, 1)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x10000225, 1) MULTIEQUAL (unique, 0x1000022b, 1) , (unique, 0x1000022a, 1) , (unique, 0x10000225, 1)]
[ ---  CBRANCH (ram, 0x1967a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff58, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x1965c8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xf7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf7, 4)]
[(unique, 0x1000027d, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000295, 8), (unique, 0x10000295, 8) INT_ADD (unique, 0x1000028d, 8) , (const, 0x1, 8), (unique, 0x1000028d, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x195b20, 8) , (stack, 0xffffffffffffff58, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1965a3, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000295, 8), (unique, 0x10000295, 8) INT_ADD (unique, 0x1000028d, 8) , (const, 0x1, 8), (unique, 0x1000028d, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x195b20, 8) , (stack, 0xffffffffffffff58, 8) , (const, 0x0, 4)]
[(unique, 0x10000285, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1965a3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  CBRANCH (ram, 0x1965a3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff58, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x1000027d, 8) , (unique, 0x10000285, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  CBRANCH (ram, 0x196873, 1) , (unique, 0x10000225, 1)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x126, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x126, 4)]
[ ---  CBRANCH (ram, 0x196780, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18d630, 8) , (stack, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x19658b, 1) , (unique, 0x10000225, 1)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x30a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x30a, 4)]
[(register, 0x0, 4) CALL (ram, 0x195fb0, 8) , (unique, 0x3c80, 8) , (unique, 0x3c80, 8) , (stack, 0xffffffffffffff58, 8)]
[ ---  BRANCH (ram, 0x19674b, 1)]
[(register, 0x8, 8) CAST (unique, 0x1000029d, 8), (unique, 0x1000029d, 8) INT_ADD (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14c, 4)]
[(register, 0x0, 8) CALL (ram, 0x18aa90, 8) , (stack, 0xffffffffffffff58, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_SUB (register, 0x0, 8) , (unique, 0x100002a5, 8), (unique, 0x100002a5, 8) CAST (stack, 0xffffffffffffff58, 8)]
[(unique, 0x10000255, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_SUB (register, 0x0, 8) , (unique, 0x100002a5, 8), (unique, 0x100002a5, 8) CAST (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x1000026d, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000255, 8) , (unique, 0x1000025d, 8) , (unique, 0x10000265, 8) , (unique, 0x3b80, 8)]
[(unique, 0x10000275, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0x3400, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x1966dd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 8) , (const, 0x0, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x0, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x1000026d, 8) , (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x1966dd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000275, 8) , (unique, 0x3400, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x16d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16d, 4)]
[ ---  CBRANCH (ram, 0x196730, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x11f7f0, 8) , (register, 0x28, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) INT_ADD (unique, 0x3b80, 8) , (const, 0x1, 8), (unique, 0x3b80, 8) INT_ADD (register, 0x0, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2e7, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (register, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x100002b5, 8), (unique, 0x100002b5, 8) CALL (ram, 0x18e980, 8) , (unique, 0x3400, 8) , (register, 0x8, 8) , (register, 0x0, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x100002ad, 8) , (register, 0x18, 8), (unique, 0x100002ad, 8) CAST (register, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x18b, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x18b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x182, 4)]
[ ---  CBRANCH (ram, 0x1967f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18d630, 8) , (register, 0xb8, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2ad, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2a1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ad, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a1, 4)]
[ ---  CBRANCH (ram, 0x196860, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002bd, 8), (unique, 0x100002bd, 8) CALL (ram, 0x11f7f0, 8) , (register, 0x0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x1, 8), (unique, 0x3400, 8) INT_ADD (register, 0x0, 8) , (unique, 0x3b80, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (register, 0xb8, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2de, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x196627, 1)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2cc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x100002c5, 8), (unique, 0x100002c5, 8) CALL (ram, 0x18e980, 8) , (unique, 0x3400, 8) , (register, 0xb8, 8) , (register, 0x0, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x3b80, 8) , (const, 0x1, 8)]
[(unique, 0x10000265, 8) COPY (unique, 0x3400, 8)]
[ ---  BRANCH (ram, 0x196627, 1)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1ae, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ae, 4)]
[ ---  CBRANCH (ram, 0x1967c3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002d5, 8), (unique, 0x100002d5, 8) CALL (ram, 0x11f7f0, 8) , (register, 0x0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x1, 8), (unique, 0x3400, 8) INT_ADD (register, 0x10, 8) , (unique, 0x3b80, 8), (register, 0x10, 8) INT_SUB (register, 0x0, 8) , (unique, 0x100002cd, 8), (unique, 0x100002cd, 8) CAST (register, 0xb8, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x293, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x293, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (register, 0x0, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100002dd, 8), (unique, 0x100002dd, 8) INT_ADD (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x1000025d, 8) COPY (unique, 0x3b80, 8)]
[ ---  BRANCH (ram, 0x196627, 1)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1c6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x100002e5, 8), (unique, 0x100002e5, 8) CALL (ram, 0x18e980, 8) , (unique, 0x3400, 8) , (register, 0xb8, 8) , (register, 0x10, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x3b80, 8) , (const, 0x1, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x100002ed, 8), (unique, 0x100002ed, 8) INT_ADD (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x196630, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  CBRANCH (ram, 0x1968a2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x28, 8) , (const, 0x0, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x0, 8)]
[(unique, 0x1000023e, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x10000246, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000024e, 4) COPY (const, 0xc, 4)]
[ ---  CBRANCH (ram, 0x196758, 1) , (unique, 0x1000023d, 1), (unique, 0x1000023d, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x196703, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xffffffffffffff58, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x196831, 1) , (unique, 0x10000228, 1), (unique, 0x10000228, 1) BOOL_NEGATE (unique, 0x10000225, 1)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x270, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x270, 4)]
[ ---  CBRANCH (ram, 0x196717, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x195f40, 8) , (unique, 0x3c80, 8) , (unique, 0x3c80, 8) , (unique, 0xbd80, 8) , (register, 0x8, 8), (register, 0x8, 8) PTRADD (stack, 0xffffffffffffff58, 8) , (unique, 0x100001f1, 8) , (const, 0x1, 8), (unique, 0x100001f1, 8) INT_2COMP (unique, 0x100002f5, 8), (unique, 0x100002f5, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x214, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x214, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALL (ram, 0x195fb0, 8) , (unique, 0x3c80, 8) , (unique, 0x3c80, 8) , (register, 0x28, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (register, 0x28, 8)]
[(unique, 0x10000229, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x196747, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000246, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (unique, 0x1000023e, 8)]
[(unique, 0x10000227, 1) MULTIEQUAL (unique, 0x10000229, 1) , (unique, 0x10000225, 1)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0x1000024e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x1000022a, 1) MULTIEQUAL (unique, 0x10000227, 1) , (unique, 0x10000225, 1) , (unique, 0x10000229, 1)]
[ ---  CBRANCH (ram, 0x19658b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 4) , (const, 0x0, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (unique, 0x1000023e, 8) , (stack, 0xffffffffffffffb8, 8)]
[(register, 0x18, 4) MULTIEQUAL (unique, 0x1000024e, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x1965b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000246, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x249, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x249, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  BRANCH (ram, 0x1965b1, 1)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
