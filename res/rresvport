[(register, 0x20, 8) CAST (unique, 0x100000d7, 8), (unique, 0x100000d7, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2a, 4)]
[ ---  CBRANCH (ram, 0x21e023, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207ce0, 8) , (const, 0x2, 4) , (const, 0x1, 4) , (const, 0x0, 4)]
[(register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x21dfba, 1)]
[(stack, 0xffffffffffffffb0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa8, 8) COPY (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x21dfd0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x200, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x11a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x200, 4)]
[(unique, 0x100000d3, 4) COPY (register, 0x28, 4), (register, 0x28, 4) COPY (const, 0x200, 4)]
[ ---  BRANCH (ram, 0x21df66, 1)]
[(unique, 0x100000cb, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x21df66, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x3ff, 4) , (unique, 0xbc80, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x61, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x3ff, 4)]
[(unique, 0x100000cf, 4) COPY (register, 0x28, 4), (register, 0x28, 4) COPY (const, 0x3ff, 4)]
[(register, 0x28, 4) MULTIEQUAL (unique, 0x100000c7, 4) , (unique, 0x100000cb, 4) , (unique, 0x100000cf, 4) , (unique, 0x100000d3, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x86, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x86, 4), (stack, 0xffffffffffffffa8, 8) INT_OR (unique, 0x1000009e, 8) , (unique, 0x100000a6, 8), (unique, 0x100000a6, 8) INT_ZEXT (stack, 0xffffffffffffffa8, 4), (unique, 0x1000009e, 8) INT_AND (stack, 0xffffffffffffffa8, 8) , (const, 0xffffffff00000000, 8), (stack, 0xffffffffffffffa8, 4) INT_ADD (unique, 0x100000bb, 4) , (stack, 0xffffffffffffffa8, 2), (unique, 0x100000bb, 4) INT_LEFT (unique, 0x100000b7, 4) , (const, 0x10, 4), (unique, 0x100000b7, 4) INT_SEXT (unique, 0x100000df, 2), (unique, 0x100000df, 2) CAST (register, 0x10, 2), (stack, 0xffffffffffffffa8, 2) SUBPIECE (stack, 0xffffffffffffffa8, 8) , (const, 0x0, 8), (register, 0x10, 2) INT_OR (unique, 0x4e880, 2) , (unique, 0x4e980, 2), (unique, 0x4e980, 2) INT_LEFT (register, 0x10, 2) , (const, 0x8, 4), (unique, 0x4e880, 2) INT_RIGHT (register, 0x10, 2) , (const, 0x8, 4), (register, 0x10, 2) SUBPIECE (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0xbc80, 4) , (register, 0x28, 4) , (register, 0x28, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x86, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x86, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x86, 4), (stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(unique, 0x100000bf, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x86, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x21df78, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207830, 8) , (register, 0x0, 4) , (register, 0x20, 8) , (const, 0x10, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x21dfe0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x62, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000e1, 8), (unique, 0x100000e1, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xff, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xff, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xff, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0xff, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xff, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x3100, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x21df95, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x200, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x10, 4) COPY (const, 0x3ff, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xd8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x3100, 4) , (register, 0x10, 4)]
[(unique, 0x100000c7, 4) COPY (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x21e000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (register, 0x28, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x3100, 4) , (register, 0x10, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0xde, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100000e9, 8) , (const, 0xb, 4), (unique, 0x100000e9, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x100000bf, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xde, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xe1, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xde, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
