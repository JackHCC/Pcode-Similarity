[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffe0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffff0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffd8, 8) COPY (const, 0x10000, 8)]
[(unique, 0x10000080, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1f6ff8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x1, 4)]
[(register, 0x30, 4) COPY (const, 0x7, 4)]
[(stack, 0xffffffffffffffd8, 8) COPY (const, 0x10001, 8)]
[ ---  BRANCH (ram, 0x1f6fae, 1)]
[ ---  CBRANCH (ram, 0x1f6fc0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x30, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1f6fd8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffd8, 8) COPY (const, 0x10002, 8)]
[(register, 0x30, 4) COPY (const, 0x6, 4)]
[ ---  BRANCH (ram, 0x1f6fae, 1)]
[ ---  CBRANCH (ram, 0x1f6fa0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1f6fd8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000088, 8) , (const, 0x16, 4), (unique, 0x10000088, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xa7, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4c, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4c, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x4c, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x4c, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (unique, 0x10000080, 8) , (const, 0x4c, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x4c, 4)]
[ ---  CBRANCH (ram, 0x1f7025, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f6df0, 8) , (register, 0x38, 4) , (const, 0x5, 4) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1f6f93, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffd8, 2) , (const, 0x2, 2), (stack, 0xffffffffffffffd8, 2) SUBPIECE (stack, 0xffffffffffffffd8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6a, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x6a, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x6a, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x6a, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x6a, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x6a, 4)]
[ ---  CBRANCH (ram, 0x1f7010, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffff0, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1cc770, 8), (stack, 0xfffffffffffffff0, 4) SUBPIECE (stack, 0xfffffffffffffff0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000090, 8) , (const, 0xd, 4), (unique, 0x10000090, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x91, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(register, 0x30, 4) COPY (const, 0x6, 4)]
[(stack, 0xffffffffffffffd8, 8) COPY (const, 0x10001, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xc7, 4), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (unique, 0x10000080, 8) , (const, 0xc7, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xc7, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xc7, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f6df0, 8) , (register, 0x38, 4) , (register, 0x30, 4) , (register, 0x20, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
