[ ---  CBRANCH (ram, 0x28a3e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000085, 8), (unique, 0x10000085, 8) PTRSUB (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x10, 4) INT_AND (unique, 0x10000047, 4) , (const, 0xf, 4), (unique, 0x10000047, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x28a3c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000057, 8) , (const, 0x0, 8), (unique, 0x10000057, 8) INT_AND (unique, 0x100000c5, 8) , (const, 0xf, 8), (unique, 0x100000c5, 8) CAST (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x28a34d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x10, 4), (register, 0x8, 4) CALLOTHER (const, 0xe4, 4) , (unique, 0x5300, 16) , (unique, 0x5300, 16) , (const, 0x3a, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x28a34d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100000ad, 8), (unique, 0x100000ad, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x28a3f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (register, 0x8, 4), (register, 0x0, 4) INT_SUB (const, 0x10, 4) , (register, 0x10, 4), (register, 0x8, 4) CALLOTHER (const, 0xe4, 4) , (register, 0x1200, 16) , (register, 0x1200, 16) , (const, 0x3a, 8), (register, 0x1200, 16) CALLOTHER (const, 0x92, 4) , (unique, 0x5300, 16) , (unique, 0x5300, 16), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100000e1, 8), (unique, 0x100000e1, 8) PTRADD (unique, 0x1000006d, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x1000006d, 8) PTRSUB (const, 0x0, 8) , (const, 0x2af900, 8), (register, 0x80, 8) CAST (unique, 0x100000d9, 8), (unique, 0x100000d9, 8) INT_AND (unique, 0x100000d1, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100000d1, 8) CAST (register, 0x30, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100000cd, 4), (unique, 0x100000cd, 4) CAST (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x28a3dd, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x10, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x8, 4), (register, 0x8, 4) CALLOTHER (const, 0xe4, 4) , (unique, 0x5300, 16) , (unique, 0x5300, 16) , (const, 0x3a, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1bb390, 8)]
[ ---  CBRANCH (ram, 0x28a34d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[(unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x28a34d, 1)]
[(register, 0x1260, 16) MULTIEQUAL (register, 0x1200, 16) , (register, 0x1200, 16) , (unique, 0x5300, 16) , (unique, 0x5300, 16) , (unique, 0x5300, 16)]
[(register, 0x200, 1) COPY (const, 0x0, 1)]
[(register, 0x30, 4) INT_AND (unique, 0x1000004f, 4) , (const, 0xf, 4), (unique, 0x1000004f, 4) SUBPIECE (register, 0x38, 8) , (const, 0x0, 4)]
[(unique, 0x100000bd, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x28a395, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000005f, 8) , (const, 0x0, 8), (unique, 0x1000005f, 8) INT_AND (unique, 0x100000e9, 8) , (const, 0xf, 8), (unique, 0x100000e9, 8) CAST (register, 0x38, 8)]
[(register, 0x0, 8) INT_SEXT (register, 0x8, 4), (register, 0x8, 4) CALLOTHER (const, 0xe4, 4) , (register, 0x1260, 16) , (register, 0x1220, 16) , (const, 0x12, 8), (register, 0x1220, 16) CALLOTHER (const, 0x92, 4) , (unique, 0x5300, 16) , (unique, 0x5300, 16), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000105, 8), (unique, 0x10000105, 8) PTRADD (unique, 0x10000075, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000075, 8) PTRSUB (const, 0x0, 8) , (const, 0x2af900, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10000101, 4), (unique, 0x10000101, 4) CAST (register, 0x30, 4), (register, 0x38, 8) CAST (unique, 0x100000f9, 8), (unique, 0x100000f9, 8) INT_AND (unique, 0x100000f1, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100000f1, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x28a3ea, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESSEQUAL (unique, 0x1000010d, 4) , (register, 0x8, 4), (unique, 0x1000010d, 4) CAST (register, 0x10, 4), (register, 0x10, 4) INT_SUB (const, 0x10, 4) , (register, 0x30, 4), (register, 0x8, 4) CALLOTHER (const, 0xe4, 4) , (register, 0x1260, 16) , (register, 0x1220, 16) , (const, 0x12, 8), (register, 0x1220, 16) CALLOTHER (const, 0x92, 4) , (unique, 0x5300, 16) , (unique, 0x5300, 16), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000105, 8), (unique, 0x10000105, 8) PTRADD (unique, 0x10000075, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000075, 8) PTRSUB (const, 0x0, 8) , (const, 0x2af900, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10000101, 4), (unique, 0x10000101, 4) CAST (register, 0x30, 4), (register, 0x38, 8) CAST (unique, 0x100000f9, 8), (unique, 0x100000f9, 8) INT_AND (unique, 0x100000f1, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100000f1, 8) CAST (register, 0x38, 8)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(register, 0x200, 1) INT_LESS (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) CALLOTHER (const, 0xe4, 4) , (register, 0x1220, 16) , (register, 0x1220, 16) , (const, 0x3a, 8)]
[ ---  CBRANCH (ram, 0x28a3ea, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESSEQUAL (unique, 0x10000111, 4) , (unique, 0x10000115, 4), (unique, 0x10000115, 4) CAST (register, 0x8, 4), (unique, 0x10000111, 4) CAST (register, 0x10, 4), (register, 0x8, 4) CALLOTHER (const, 0xe4, 4) , (register, 0x1220, 16) , (register, 0x1220, 16) , (const, 0x3a, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x8, 4) CALLOTHER (const, 0xe4, 4) , (register, 0x1260, 16) , (unique, 0x5300, 16) , (const, 0x12, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100000bd, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x28a3ac, 1) , (unique, 0x10000069, 1), (unique, 0x10000069, 1) BOOL_NEGATE (register, 0x200, 1), (register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1)]
[(register, 0x8, 4) CALLOTHER (const, 0xe4, 4) , (register, 0x1260, 16) , (unique, 0x5300, 16) , (const, 0x12, 8), (unique, 0x5300, 16) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x10, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x28a3a0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x38, 8) , (unique, 0x1000007d, 8), (unique, 0x1000007d, 8) CAST (unique, 0x10000119, 8), (unique, 0x10000119, 8) PTRSUB (const, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000129, 8) , (unique, 0x1000009d, 8), (unique, 0x10000129, 8) CAST (register, 0x38, 8), (unique, 0x1000009d, 8) INT_SUB (register, 0x0, 8) , (unique, 0x10000121, 8), (unique, 0x10000121, 8) CAST (register, 0x38, 8), (register, 0x0, 8) INT_SEXT (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
