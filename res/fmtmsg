[ ---  CBRANCH (ram, 0x147750, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x552, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x552, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x552, 4)]
[(ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x552, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x552, 4)]
[(ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x552, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x552, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x552, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x552, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x552, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x100002ae, 8) , (unique, 0x10000266, 8), (unique, 0x100002ae, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c56c8, 8), (unique, 0x10000266, 8) PTRSUB (const, 0x0, 8) , (const, 0x147080, 8), (register, 0x0, 8) CAST (unique, 0x100003fa, 8), (unique, 0x100003fa, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003f2, 8), (unique, 0x100003f2, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8718, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8718, 8) , (const, 0x11, 4)]
[ ---  BRANCH (ram, 0x14740b, 1)]
[ ---  CBRANCH (ram, 0x1477f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c56c8, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x523, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x523, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x523, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x523, 4)]
[(ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x523, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x523, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x523, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x523, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x523, 4)]
[ ---  CALL (ram, 0x147080, 8)]
[(ram, 0x4c56c8, 4) INT_OR (ram, 0x4c56c8, 4) , (const, 0x2, 4), (ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x523, 4)]
[ ---  BRANCH (ram, 0x14740b, 1)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8700, 8) MULTIEQUAL (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8)]
[(ram, 0x4c56d0, 4) MULTIEQUAL (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4)]
[(ram, 0x4c56cc, 4) MULTIEQUAL (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4)]
[(ram, 0x4c56c8, 4) MULTIEQUAL (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4)]
[(ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x147449, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x49, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x49, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x49, 4)]
[(ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x49, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x49, 4)]
[(ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x49, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x49, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x49, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x49, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x49, 4)]
[ ---  CBRANCH (ram, 0x147869, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x189080, 8) , (register, 0x30, 8) , (const, 0x3a, 8)]
[ ---  CBRANCH (ram, 0x147869, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0xa, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SUB (register, 0x0, 8) , (unique, 0x10000402, 8), (unique, 0x10000402, 8) CAST (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6f, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x6f, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x6f, 4)]
[(ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x6f, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x6f, 4)]
[(ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x6f, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x6f, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x6f, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x6f, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x6f, 4)]
[ ---  CBRANCH (ram, 0x147869, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0xe, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000040a, 8), (unique, 0x1000040a, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8), (ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(ram, 0x4c3650, 8) COPY (ram, 0x4c3650, 8), (ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[(ram, 0x4c56c8, 4) COPY (ram, 0x4c56c8, 4), (ram, 0x4c56c8, 4) MULTIEQUAL (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4)]
[(ram, 0x4c56cc, 4) COPY (ram, 0x4c56cc, 4), (ram, 0x4c56cc, 4) MULTIEQUAL (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4)]
[(ram, 0x4c56d0, 4) COPY (ram, 0x4c56d0, 4), (ram, 0x4c56d0, 4) MULTIEQUAL (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4)]
[(ram, 0x4c8700, 8) COPY (ram, 0x4c8700, 8), (ram, 0x4c8700, 8) MULTIEQUAL (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8700, 8) MULTIEQUAL (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8)]
[(ram, 0x4c56d0, 4) MULTIEQUAL (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4)]
[(ram, 0x4c56cc, 4) MULTIEQUAL (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4)]
[(ram, 0x4c56c8, 4) MULTIEQUAL (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4)]
[(ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffc4, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x147780, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x51d, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x51d, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x51d, 4)]
[(ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x51d, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x51d, 4)]
[(ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x51d, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x51d, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x51d, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x51d, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x51d, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x51d, 4)]
[ ---  CALLIND (register, 0x0, 8) , (const, 0x1, 8) , (unique, 0x3800, 8), (register, 0x0, 8) CAST (unique, 0x1000041a, 8), (unique, 0x1000041a, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000412, 8), (unique, 0x10000412, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8700, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8700, 8) , (const, 0x11, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc4, 8)]
[ ---  BRANCH (ram, 0x14745f, 1)]
[(stack, 0xffffffffffffffc4, 4) MULTIEQUAL (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8700, 8) MULTIEQUAL (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8)]
[(ram, 0x4c56d0, 4) MULTIEQUAL (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4)]
[(ram, 0x4c56cc, 4) MULTIEQUAL (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4)]
[(ram, 0x4c56c8, 4) MULTIEQUAL (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4)]
[(ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x14747b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c56d0, 4) , (const, 0x0, 4)]
[(ram, 0x4c56d0, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c56d0, 4) , (const, 0x0, 4)]
[(ram, 0x4c56d0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x14749e, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4de, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x4de, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x4de, 4)]
[(ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x4de, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x4de, 4)]
[(ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x4de, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x4de, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x4de, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4de, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x4de, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x4de, 4)]
[ ---  CALL (ram, 0x2147c0, 8)]
[(stack, 0xffffffffffffffc4, 4) MULTIEQUAL (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8700, 8) MULTIEQUAL (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8)]
[(ram, 0x4c56d0, 4) MULTIEQUAL (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4)]
[(ram, 0x4c56cc, 4) MULTIEQUAL (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4)]
[(ram, 0x4c56c8, 4) MULTIEQUAL (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x1000036e, 8) COPY (unique, 0x10000422, 8), (unique, 0x10000422, 8) CAST (ram, 0x4c3650, 8), (ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[ ---  CBRANCH (ram, 0x1474c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c3650, 8) , (const, 0x0, 8), (ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[ ---  CBRANCH (ram, 0x1474b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (register, 0x10, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x1000036e, 8) , (unique, 0xbd80, 8)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x147606, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100000ea, 8) , (const, 0x0, 8), (unique, 0x100000ea, 8) INT_AND (register, 0x38, 8) , (const, 0x100, 8)]
[(unique, 0x10000224, 1) INT_AND (register, 0x206, 1) , (unique, 0x10000218, 1), (unique, 0x10000218, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_RIGHT (ram, 0x4c56cc, 4) , (const, 0x1, 4)]
[(register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (register, 0x80, 4), (register, 0x80, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8), (register, 0x0, 4) INT_RIGHT (ram, 0x4c56cc, 4) , (const, 0x3, 4)]
[(register, 0x10, 1) SUBPIECE (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (register, 0x0, 4), (register, 0x10, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x0, 4) INT_RIGHT (ram, 0x4c56cc, 4) , (const, 0x2, 4)]
[(register, 0x30, 1) SUBPIECE (register, 0x30, 4) , (const, 0x0, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (ram, 0x4c56cc, 4), (register, 0x30, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1477a5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4), (register, 0x38, 4) INT_AND (ram, 0x4c56cc, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x1477a5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(register, 0x8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x147828, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 1) , (const, 0x0, 1)]
[(register, 0x8, 4) INT_ZEXT (unique, 0x1000042a, 1), (unique, 0x1000042a, 1) CAST (register, 0x38, 1), (register, 0x38, 1) INT_OR (register, 0x38, 1) , (unique, 0x10000224, 1), (register, 0x38, 1) INT_OR (register, 0x10, 1) , (register, 0x0, 1)]
[ ---  BRANCH (ram, 0x1477ac, 1)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(stack, 0xffffffffffffffac, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x28c365, 8)]
[ ---  CBRANCH (ram, 0x1478b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(stack, 0xffffffffffffffb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c365, 8)]
[ ---  BRANCH (ram, 0x14754b, 1)]
[(stack, 0xffffffffffffffac, 4) COPY (const, 0x1, 4)]
[(unique, 0x100003d2, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x1477c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(stack, 0xffffffffffffffb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c5c4, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x100003d2, 8) , (stack, 0xffffffffffffff98, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x8, 4)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x28c5bb, 8)]
[(unique, 0x100003ea, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x100003d2, 8) , (stack, 0xffffffffffffff98, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x8, 4)]
[(stack, 0xffffffffffffffb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c365, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x28c365, 8)]
[(unique, 0x100003e2, 8) COPY (register, 0x90, 8), (register, 0x90, 8) COPY (const, 0x28c365, 8)]
[(unique, 0x100002de, 8) MULTIEQUAL (unique, 0x100003e2, 8) , (unique, 0x100003ea, 8)]
[(unique, 0x100002ef, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x100002f3, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x100002fb, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x1000030b, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x10000313, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(unique, 0x10000303, 8) COPY (const, 0x28c365, 8)]
[(unique, 0x100002e6, 8) COPY (const, 0x28c365, 8)]
[ ---  CBRANCH (ram, 0x147581, 1) , (unique, 0x100002ee, 1), (unique, 0x100002ee, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x0, 1)]
[(register, 0x38, 8) COPY (const, 0x28c365, 8)]
[(unique, 0x100003c2, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x147581, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 4) , (const, 0x0, 4), (register, 0x80, 4) INT_OR (register, 0x0, 4) , (unique, 0x10000313, 4)]
[(register, 0x38, 8) COPY (const, 0x28bea9, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x10000303, 8) , (unique, 0x100003c2, 8) , (unique, 0x100003c2, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100002e6, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x88, 8) COPY (const, 0x28c365, 8)]
[(register, 0x80, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c365, 8)]
[ ---  CBRANCH (ram, 0x1475ac, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000224, 1) , (const, 0x0, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000042b, 8), (unique, 0x1000042b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x98, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1475ac, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) INT_OR (unique, 0x10000313, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x10, 4)]
[(register, 0x88, 8) COPY (const, 0x28c5c1, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x10, 8) COPY (const, 0x28c365, 8)]
[(register, 0x8, 8) COPY (const, 0x28c5c1, 8)]
[ ---  CBRANCH (ram, 0x1475db, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100002ef, 4) , (const, 0x0, 4)]
[(register, 0x8, 8) COPY (const, 0x28c365, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000433, 8), (unique, 0x10000433, 8) CAST (ram, 0x4c2db8, 8)]
[(unique, 0x10000336, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1475f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 1) , (const, 0x0, 1)]
[(unique, 0x1000033e, 8) COPY (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f5, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x2f5, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x2f5, 4)]
[(ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x2f5, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x2f5, 4)]
[(ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x2f5, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x2f5, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x2f5, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2f5, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2f5, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x2f5, 4)]
[(register, 0x0, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x1f, 4), (register, 0x0, 4) CALL (ram, 0x16cfd0, 8) , (unique, 0xbd80, 8) , (unique, 0x1000029e, 8) , (register, 0x10, 8) , (register, 0x8, 8) , (register, 0x80, 8) , (register, 0x88, 8) , (stack, 0xffffffffffffff88, 8) , (register, 0x38, 8) , (unique, 0x100002fb, 8) , (unique, 0x100002de, 8) , (unique, 0x100002f3, 8) , (unique, 0x1000030b, 8), (unique, 0x1000029e, 8) COPY (const, 0x28c5c7, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000336, 8) , (unique, 0x1000033e, 8)]
[(stack, 0xffffffffffffffc4, 4) MULTIEQUAL (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8700, 8) MULTIEQUAL (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8)]
[(ram, 0x4c56d0, 4) MULTIEQUAL (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4)]
[(ram, 0x4c56cc, 4) MULTIEQUAL (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4)]
[(ram, 0x4c56c8, 4) MULTIEQUAL (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4)]
[(ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1476d2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000014b, 8) , (const, 0x0, 8), (unique, 0x1000014b, 8) INT_AND (register, 0x38, 8) , (const, 0x200, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x14789f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(unique, 0x10000237, 1) COPY (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x14763f, 1)]
[(unique, 0x10000238, 1) BOOL_OR (register, 0x206, 1) , (unique, 0x10000239, 1), (unique, 0x10000239, 1) BOOL_OR (register, 0x206, 1) , (unique, 0x100001f0, 1), (unique, 0x100001f0, 1) BOOL_OR (register, 0x206, 1) , (register, 0x206, 1)]
[(unique, 0x10000236, 1) MULTIEQUAL (unique, 0x10000238, 1) , (unique, 0x10000237, 1)]
[ ---  CBRANCH (ram, 0x147873, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(unique, 0x1000034e, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) COPY (const, 0x28c365, 8)]
[ ---  CBRANCH (ram, 0x1478a6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(register, 0xa0, 8) COPY (const, 0x28c365, 8)]
[(register, 0x38, 8) COPY (const, 0x28c365, 8)]
[(register, 0xb8, 8) COPY (const, 0x28c365, 8)]
[ ---  BRANCH (ram, 0x14765f, 1)]
[(unique, 0x10000346, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x28c5c4, 8)]
[ ---  CBRANCH (ram, 0x147810, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(unique, 0x1000037e, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) COPY (const, 0x28c365, 8)]
[(unique, 0x100003ae, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) COPY (const, 0x28c365, 8)]
[ ---  BRANCH (ram, 0x14765f, 1)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0xb0, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000346, 8) , (unique, 0x1000034e, 8)]
[(unique, 0x10000376, 8) COPY (register, 0x80, 8)]
[(unique, 0x100003a6, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) COPY (const, 0x28c5bb, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x100003a6, 8) , (unique, 0x100003ae, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x88, 8) , (register, 0xb0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10000376, 8) , (unique, 0x1000037e, 8) , (register, 0xa0, 8)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xa0, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x147887, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1478c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0xa8, 8) COPY (const, 0x28c365, 8)]
[(unique, 0x1000035e, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x28c365, 8)]
[(unique, 0x1000038e, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x28c365, 8)]
[ ---  CBRANCH (ram, 0x147859, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_OR (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0xa8, 8) COPY (const, 0x28c365, 8)]
[ ---  BRANCH (ram, 0x147688, 1)]
[ ---  CBRANCH (ram, 0x147840, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x147840, 1) , (register, 0x206, 1)]
[(register, 0x88, 8) COPY (const, 0x28c365, 8)]
[(register, 0x30, 8) COPY (const, 0x28bea9, 8)]
[(register, 0x80, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c365, 8)]
[ ---  CBRANCH (ram, 0x14768e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0x30, 8) COPY (const, 0x28c365, 8)]
[ ---  CBRANCH (ram, 0x147859, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0x80, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c365, 8)]
[(unique, 0x10000366, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x28c365, 8)]
[(unique, 0x10000396, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0xa8, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0x10000356, 8) COPY (register, 0x88, 8), (register, 0x88, 8) COPY (const, 0x28c5c1, 8)]
[(unique, 0x10000386, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0xa8, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000356, 8) , (unique, 0x1000035e, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000043b, 8), (unique, 0x1000043b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x98, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(unique, 0x1000039e, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x10000386, 8) , (unique, 0x1000038e, 8)]
[ ---  BRANCH (ram, 0x14768e, 1)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000396, 8) , (unique, 0x1000039e, 8) , (register, 0x8, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000366, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0xbd80, 8) , (register, 0x80, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x10, 8) COPY (const, 0x28c365, 8)]
[(register, 0x8, 8) COPY (const, 0x28c5c1, 8)]
[ ---  CBRANCH (ram, 0x1476a8, 1) , (unique, 0x1000024f, 1), (unique, 0x1000024f, 1) BOOL_NEGATE (unique, 0x10000236, 1)]
[(register, 0x8, 8) COPY (const, 0x28c365, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10000326, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1476b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(unique, 0x1000032e, 8) COPY (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x40d, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x40d, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x40d, 4)]
[(ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x40d, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x40d, 4)]
[(ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x40d, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x40d, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x40d, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x40d, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x40d, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x40d, 4)]
[ ---  CALL (ram, 0x1ff710, 8) , (const, 0x3, 4) , (unique, 0x100002a6, 8) , (register, 0x10, 8) , (register, 0x8, 8) , (register, 0x80, 8) , (register, 0x88, 8) , (register, 0xa8, 8) , (register, 0x30, 8) , (register, 0xb8, 8) , (register, 0xa0, 8) , (register, 0x38, 8) , (register, 0xb0, 8), (unique, 0x100002a6, 8) COPY (const, 0x28c5c7, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000326, 8) , (unique, 0x1000032e, 8)]
[ ---  CBRANCH (ram, 0x147748, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000443, 8), (unique, 0x10000443, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x98, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[(register, 0x90, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x1476d2, 1)]
[(stack, 0xffffffffffffffc4, 4) MULTIEQUAL (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8700, 8) MULTIEQUAL (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8)]
[(ram, 0x4c56d0, 4) MULTIEQUAL (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4)]
[(ram, 0x4c56cc, 4) MULTIEQUAL (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4)]
[(ram, 0x4c56c8, 4) MULTIEQUAL (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4)]
[(ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x1476e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100003ba, 4) COPY (unique, 0x10000317, 4), (unique, 0x10000317, 4) INT_ADD (ram, 0x4c56d0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x147708, 1) , (unique, 0x1000031b, 1), (unique, 0x1000031b, 1) INT_NOTEQUAL (unique, 0x10000317, 4) , (const, 0x0, 4), (unique, 0x10000317, 4) INT_ADD (ram, 0x4c56d0, 4) , (const, 0xffffffff, 4)]
[(register, 0x90, 4) INDIRECT (register, 0x90, 4) , (const, 0x13d, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13d, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x13d, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x13d, 4)]
[(ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x13d, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x13d, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x13d, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x13d, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x13d, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x13d, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x13d, 4)]
[ ---  CALL (ram, 0x2147f0, 8) , (unique, 0x100002b6, 8), (unique, 0x100002b6, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c56d0, 8)]
[(unique, 0x100003b6, 4) COPY (ram, 0x4c56d0, 4), (ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x13d, 4), (ram, 0x4c56d0, 4) INT_ADD (ram, 0x4c56d0, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc4, 4) MULTIEQUAL (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8700, 8) MULTIEQUAL (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8)]
[(ram, 0x4c56cc, 4) MULTIEQUAL (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4)]
[(ram, 0x4c56c8, 4) MULTIEQUAL (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4)]
[(ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c56d0, 4) COPY (unique, 0x100003be, 4), (unique, 0x100003be, 4) MULTIEQUAL (unique, 0x100003b6, 4) , (unique, 0x100003ba, 4)]
[ ---  CBRANCH (ram, 0x147731, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x116, 4)]
[(ram, 0x4c3650, 8) INDIRECT (ram, 0x4c3650, 8) , (const, 0x116, 4)]
[(ram, 0x4c56c8, 4) INDIRECT (ram, 0x4c56c8, 4) , (const, 0x116, 4)]
[(ram, 0x4c56cc, 4) INDIRECT (ram, 0x4c56cc, 4) , (const, 0x116, 4)]
[(ram, 0x4c56d0, 4) INDIRECT (ram, 0x4c56d0, 4) , (const, 0x116, 4)]
[(ram, 0x4c8700, 8) INDIRECT (ram, 0x4c8700, 8) , (const, 0x116, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x116, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x116, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x116, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x116, 4)]
[ ---  CALLIND (register, 0x0, 8) , (stack, 0xffffffffffffffc4, 4) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000453, 8), (unique, 0x10000453, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000044b, 8), (unique, 0x1000044b, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8700, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8700, 8) , (const, 0x11, 4)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8), (ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(ram, 0x4c3650, 8) COPY (ram, 0x4c3650, 8), (ram, 0x4c3650, 8) MULTIEQUAL (ram, 0x4c3650, 8) , (ram, 0x4c3650, 8)]
[(ram, 0x4c56c8, 4) COPY (ram, 0x4c56c8, 4), (ram, 0x4c56c8, 4) MULTIEQUAL (ram, 0x4c56c8, 4) , (ram, 0x4c56c8, 4)]
[(ram, 0x4c56cc, 4) COPY (ram, 0x4c56cc, 4), (ram, 0x4c56cc, 4) MULTIEQUAL (ram, 0x4c56cc, 4) , (ram, 0x4c56cc, 4)]
[(ram, 0x4c56d0, 4) COPY (ram, 0x4c56d0, 4), (ram, 0x4c56d0, 4) MULTIEQUAL (ram, 0x4c56d0, 4) , (ram, 0x4c56d0, 4)]
[(ram, 0x4c8700, 8) COPY (ram, 0x4c8700, 8), (ram, 0x4c8700, 8) MULTIEQUAL (ram, 0x4c8700, 8) , (ram, 0x4c8700, 8)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) CAST (unique, 0x1000045b, 4), (unique, 0x1000045b, 4) COPY (register, 0x90, 4)]
