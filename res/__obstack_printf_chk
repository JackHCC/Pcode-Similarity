[ ---  CBRANCH (ram, 0x234916, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(unique, 0x10000297, 4) COPY (register, 0x1200, 4)]
[(unique, 0x1000029b, 4) COPY (register, 0x1220, 4)]
[(unique, 0x1000029f, 4) COPY (register, 0x1240, 4)]
[(unique, 0x100002a3, 4) COPY (register, 0x1260, 4)]
[(unique, 0x100002a7, 4) COPY (register, 0x1280, 4)]
[(unique, 0x100002ab, 4) COPY (register, 0x12a0, 4)]
[(unique, 0x100002af, 4) COPY (register, 0x12c0, 4)]
[(unique, 0x100002b3, 4) COPY (register, 0x12e0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x88, 4)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x88, 4), (stack, 0xfffffffffffffe10, 4) COPY (const, 0x18, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x88, 4), (stack, 0xfffffffffffffe14, 4) COPY (const, 0x30, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x88, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x88, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x88, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x88, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x88, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x88, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x88, 4), (stack, 0xfffffffffffffeb0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x88, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002b7, 8), (unique, 0x100002b7, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x1000027f, 8) , (const, 0x88, 4), (unique, 0x1000027f, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x10000287, 8) , (const, 0x88, 4), (unique, 0x10000287, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x1000028f, 8) , (const, 0x88, 4), (unique, 0x1000028f, 8) COPY (register, 0x88, 8)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x88, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (unique, 0x10000297, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x88, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x1000029b, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x88, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x1000029f, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x88, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0x100002a3, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x88, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (unique, 0x100002a7, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x88, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (unique, 0x100002ab, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x88, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (unique, 0x100002af, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x88, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (unique, 0x100002b3, 4)]
[ ---  CALL (ram, 0x18eb50, 8) , (unique, 0x3800, 8) , (const, 0x8000, 8) , (const, 0xffffffff, 8) , (const, 0x0, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe28, 8)]
[(stack, 0xffffffffffffff00, 8) PTRSUB (const, 0x0, 8) , (const, 0x4e8060, 8)]
[(register, 0x10, 8) INT_AND (register, 0x28, 8) , (const, 0xffffffff, 8), (register, 0x28, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002c7, 8), (unique, 0x100002c7, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002bf, 8), (unique, 0x100002bf, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x234a80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x28, 4), (register, 0x28, 4) SUBPIECE (register, 0x28, 8) , (const, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x100000b8, 4) , (unique, 0x100000c0, 4), (unique, 0x100000b8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0x100000c0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (register, 0x28, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002cf, 8), (unique, 0x100002cf, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002c7, 8), (unique, 0x100002c7, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002bf, 8), (unique, 0x100002bf, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x234a60, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x100002d7, 8) , (const, 0x40, 8), (unique, 0x100002d7, 8) CAST (register, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1bc, 4)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x1bc, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x1bc, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1bc, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1bc, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x1bc, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1bc, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x1bc, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x1bc, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1bc, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x1bc, 4)]
[ ---  CALL (ram, 0x19ccf0, 8) , (register, 0x38, 8) , (const, 0x40, 8)]
[(register, 0x10, 8) INT_ZEXT (unique, 0x100002ef, 4), (unique, 0x100002ef, 4) CAST (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0xbc80, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002e7, 8), (unique, 0x100002e7, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002df, 8), (unique, 0x100002df, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  BRANCH (ram, 0x2349b3, 1)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)]
[(stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[(stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe14, 4) MULTIEQUAL (stack, 0xfffffffffffffe14, 4) , (stack, 0xfffffffffffffe14, 4)]
[(stack, 0xfffffffffffffe10, 4) MULTIEQUAL (stack, 0xfffffffffffffe10, 4) , (stack, 0xfffffffffffffe10, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x234aca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1b5, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x1b5, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100001fc, 8) , (unique, 0x10000214, 8) , (const, 0x49, 4) , (unique, 0x1000023c, 8), (unique, 0x1000023c, 8) COPY (const, 0x2bb5a0, 8), (unique, 0x10000214, 8) COPY (const, 0x2b692e, 8), (unique, 0x100001fc, 8) COPY (const, 0x2b4c7a, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002f3, 8), (unique, 0x100002f3, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8)]
[(unique, 0x1000026f, 8) COPY (register, 0x10, 8)]
[(register, 0x28, 8) MULTIEQUAL (unique, 0x1000026f, 8) , (register, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd7, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0xd7, 4), (stack, 0xfffffffffffffe10, 4) MULTIEQUAL (stack, 0xfffffffffffffe10, 4) , (stack, 0xfffffffffffffe10, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0xd7, 4), (stack, 0xfffffffffffffe14, 4) MULTIEQUAL (stack, 0xfffffffffffffe14, 4) , (stack, 0xfffffffffffffe14, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0xd7, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd7, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xd7, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[ ---  CALL (ram, 0x190330, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x100002fb, 8), (unique, 0x100002fb, 8) INT_SEXT (register, 0x10, 4), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x234aab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (stack, 0xfffffffffffffe58, 8) , (unique, 0x100000d8, 8) , (const, 0x1, 8), (unique, 0x100000d8, 8) INT_2COMP (unique, 0x10000303, 8), (unique, 0x10000303, 8) CAST (stack, 0xfffffffffffffe48, 8), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xd7, 4), (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0xd7, 4), (register, 0xb8, 8) CAST (unique, 0x100002fb, 8), (unique, 0x100002fb, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4), (stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x1ac, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x1ac, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1ac, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1ac, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1ac, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x1ac, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x1000021c, 8) , (unique, 0x1000020c, 8) , (const, 0x51, 4) , (unique, 0x10000234, 8), (unique, 0x10000234, 8) COPY (const, 0x2bb5a0, 8), (unique, 0x1000021c, 8) COPY (const, 0x2b82f0, 8), (unique, 0x1000020c, 8) COPY (const, 0x2b692e, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x234a8c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe50, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (stack, 0xfffffffffffffe48, 8) , (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_ZEXT (unique, 0x1000031b, 4), (unique, 0x1000031b, 4) CAST (register, 0x8, 4), (register, 0x8, 4) INT_SUB (unique, 0x10000130, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000313, 8), (unique, 0x10000313, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (unique, 0x10000130, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000030b, 8), (unique, 0x1000030b, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) CAST (unique, 0x1000031f, 8), (unique, 0x1000031f, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x28, 8), (register, 0x28, 8) INT_SEXT (register, 0x28, 4), (register, 0x28, 4) SUBPIECE (register, 0x28, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x234a1b, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x30, 4)]
[(unique, 0xbd00, 4) INT_OR (stack, 0xfffffffffffffe9c, 4) , (const, 0x4, 4)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x14e, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x14e, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x14e, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x14e, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x14e, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (unique, 0xbd00, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x10000277, 8) , (const, 0x14e, 4), (unique, 0x10000277, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x14e, 4)]
[ ---  CALL (ram, 0x15b390, 8) , (unique, 0x3800, 8) , (register, 0x10, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) PTRADD (stack, 0xfffffffffffffe50, 8) , (unique, 0x10000337, 8) , (const, 0x1, 8), (unique, 0x10000337, 8) CAST (unique, 0x10000264, 8), (unique, 0x10000264, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100000fc, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000032f, 8), (unique, 0x1000032f, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8), (unique, 0x100000fc, 8) INT_2COMP (unique, 0x10000327, 8), (unique, 0x10000327, 8) CAST (stack, 0xfffffffffffffe58, 8), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x14e, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x14e, 4)]
[ ---  CBRANCH (ram, 0x234a87, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000033f, 8), (unique, 0x1000033f, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x14e, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14e, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x19a, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x19a, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x19a, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x19a, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x19a, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x19a, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x19a, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x1a3, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x1a3, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1a3, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1a3, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1a3, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x1a3, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000224, 8) , (unique, 0x10000204, 8) , (const, 0x54, 4) , (unique, 0x1000022c, 8), (unique, 0x1000022c, 8) COPY (const, 0x2bb5a0, 8), (unique, 0x10000224, 8) COPY (const, 0x2b8348, 8), (unique, 0x10000204, 8) COPY (const, 0x2b692e, 8)]
[ ---  RETURN (const, 0x1, 4)]
