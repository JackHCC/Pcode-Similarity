[ ---  CBRANCH (ram, 0x218526, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(unique, 0x10000284, 4) COPY (register, 0x1200, 4)]
[(unique, 0x10000288, 4) COPY (register, 0x1220, 4)]
[(unique, 0x1000028c, 4) COPY (register, 0x1240, 4)]
[(unique, 0x10000290, 4) COPY (register, 0x1260, 4)]
[(unique, 0x10000294, 4) COPY (register, 0x1280, 4)]
[(unique, 0x10000298, 4) COPY (register, 0x12a0, 4)]
[(unique, 0x1000029c, 4) COPY (register, 0x12c0, 4)]
[(unique, 0x100002a0, 4) COPY (register, 0x12e0, 4)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x78, 4), (stack, 0xfffffffffffffe10, 4) COPY (const, 0x18, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x78, 4), (stack, 0xfffffffffffffe14, 4) COPY (const, 0x30, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x78, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x78, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x78, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x78, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x78, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x78, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x78, 4), (stack, 0xfffffffffffffeb0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x1000026c, 8) , (const, 0x78, 4), (unique, 0x1000026c, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x10000274, 8) , (const, 0x78, 4), (unique, 0x10000274, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x1000027c, 8) , (const, 0x78, 4), (unique, 0x1000027c, 8) COPY (register, 0x88, 8)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x78, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (unique, 0x10000284, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x78, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x10000288, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x78, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x1000028c, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x78, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0x10000290, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x78, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (unique, 0x10000294, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x78, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (unique, 0x10000298, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x78, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (unique, 0x1000029c, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x78, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (unique, 0x100002a0, 4)]
[ ---  CALL (ram, 0x17ba60, 8) , (unique, 0x3800, 8) , (const, 0x8000, 8) , (const, 0xffffffff, 8) , (const, 0x0, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe28, 8)]
[(stack, 0xffffffffffffff00, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c1140, 8)]
[(register, 0x10, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (register, 0x18, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002ac, 8), (unique, 0x100002ac, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002a4, 8), (unique, 0x100002a4, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x218648, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x18, 4), (register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x100000af, 4) , (unique, 0x100000b7, 4), (unique, 0x100000af, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0x100000b7, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (register, 0x18, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002b4, 8), (unique, 0x100002b4, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002ac, 8), (unique, 0x100002ac, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002a4, 8), (unique, 0x100002a4, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x218650, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x100002bc, 8) , (const, 0x40, 8), (unique, 0x100002bc, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x197, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x197, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x197, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x197, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0x197, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x197, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x197, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x197, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x197, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x197, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x197, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x197, 4)]
[ ---  CALL (ram, 0x1888c0, 8) , (register, 0x38, 8) , (const, 0x40, 8)]
[(register, 0x10, 8) INT_ZEXT (unique, 0x100002d4, 4), (unique, 0x100002d4, 4) CAST (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0xbc80, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002cc, 8), (unique, 0x100002cc, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002c4, 8), (unique, 0x100002c4, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  BRANCH (ram, 0x2185b0, 1)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)]
[(stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[(stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe14, 4) MULTIEQUAL (stack, 0xfffffffffffffe14, 4) , (stack, 0xfffffffffffffe14, 4)]
[(stack, 0xfffffffffffffe10, 4) MULTIEQUAL (stack, 0xfffffffffffffe10, 4) , (stack, 0xfffffffffffffe10, 4)]
[ ---  CBRANCH (ram, 0x2186a9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x190, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x190, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x190, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x190, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x190, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x190, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x190, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x190, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x100001ea, 8) , (unique, 0x10000202, 8) , (const, 0x49, 4) , (unique, 0x1000022a, 8), (unique, 0x1000022a, 8) COPY (const, 0x293330, 8), (unique, 0x10000202, 8) COPY (const, 0x28ec29, 8), (unique, 0x100001ea, 8) COPY (const, 0x28d36a, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002d8, 8), (unique, 0x100002d8, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8)]
[(unique, 0x1000025c, 8) COPY (register, 0x10, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x1000025c, 8) , (register, 0x18, 8)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0xc7, 4), (stack, 0xfffffffffffffe10, 4) MULTIEQUAL (stack, 0xfffffffffffffe10, 4) , (stack, 0xfffffffffffffe10, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0xc7, 4), (stack, 0xfffffffffffffe14, 4) MULTIEQUAL (stack, 0xfffffffffffffe14, 4) , (stack, 0xfffffffffffffe14, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0xc7, 4), (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0xc7, 4), (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xc7, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0xc7, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (stack, 0xfffffffffffffe9c, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xc7, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc7, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xc7, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xc7, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xc7, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0xc7, 4), (stack, 0xffffffffffffff48, 4) MULTIEQUAL (stack, 0xffffffffffffff48, 4) , (stack, 0xffffffffffffff48, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xc7, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xc7, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xc7, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xc7, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xc7, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xc7, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xc7, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[ ---  CALL (ram, 0x17cf00, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x100002e0, 8), (unique, 0x100002e0, 8) INT_SEXT (register, 0x10, 4), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x21868a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (stack, 0xfffffffffffffe58, 8) , (unique, 0x100000cf, 8) , (const, 0x1, 8), (unique, 0x100000cf, 8) INT_2COMP (unique, 0x100002e8, 8), (unique, 0x100002e8, 8) CAST (stack, 0xfffffffffffffe48, 8), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0xc7, 4), (stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0xc7, 4), (register, 0xb8, 8) CAST (unique, 0x100002e0, 8), (unique, 0x100002e0, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4), (stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8), (stack, 0xfffffffffffffe58, 8) MULTIEQUAL (stack, 0xfffffffffffffe58, 8) , (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x187, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x187, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x187, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x187, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x187, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x187, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x187, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x1000020a, 8) , (unique, 0x100001fa, 8) , (const, 0x51, 4) , (unique, 0x10000222, 8), (unique, 0x10000222, 8) COPY (const, 0x293330, 8), (unique, 0x1000020a, 8) COPY (const, 0x290560, 8), (unique, 0x100001fa, 8) COPY (const, 0x28ec29, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x21866b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe50, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (stack, 0xfffffffffffffe48, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10000300, 4), (unique, 0x10000300, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x1000011f, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002f8, 8), (unique, 0x100002f8, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (unique, 0x1000011f, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002f0, 8), (unique, 0x100002f0, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x18, 8), (unique, 0x3100, 8) CAST (unique, 0x10000304, 8), (unique, 0x10000304, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (unique, 0xbd80, 8), (register, 0x18, 8) INT_SEXT (register, 0x18, 4), (register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x218614, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x30, 4)]
[(unique, 0xbd00, 4) INT_OR (stack, 0xfffffffffffffe9c, 4) , (const, 0x4, 4)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x13e, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x13e, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x13e, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x13e, 4)]
[(stack, 0xfffffffffffffe9c, 4) INDIRECT (stack, 0xfffffffffffffe9c, 4) , (const, 0x13e, 4), (stack, 0xfffffffffffffe9c, 4) MULTIEQUAL (stack, 0xfffffffffffffe9c, 4) , (unique, 0xbd00, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x10000264, 8) , (const, 0x13e, 4), (unique, 0x10000264, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x13e, 4)]
[ ---  CALL (ram, 0x14d130, 8) , (unique, 0x3800, 8) , (register, 0x10, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) PTRADD (stack, 0xfffffffffffffe50, 8) , (unique, 0x1000031c, 8) , (const, 0x1, 8), (unique, 0x1000031c, 8) CAST (unique, 0x10000252, 8), (unique, 0x10000252, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100000f3, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000314, 8), (unique, 0x10000314, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8), (unique, 0x100000f3, 8) INT_2COMP (unique, 0x1000030c, 8), (unique, 0x1000030c, 8) CAST (stack, 0xfffffffffffffe58, 8), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x13e, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x13e, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(stack, 0xfffffffffffffe10, 4) INDIRECT (stack, 0xfffffffffffffe10, 4) , (const, 0x17e, 4)]
[(stack, 0xfffffffffffffe14, 4) INDIRECT (stack, 0xfffffffffffffe14, 4) , (const, 0x17e, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x17e, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x17e, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff48, 4) INDIRECT (stack, 0xffffffffffffff48, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x17e, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x10000212, 8) , (unique, 0x100001f2, 8) , (const, 0x54, 4) , (unique, 0x1000021a, 8), (unique, 0x1000021a, 8) COPY (const, 0x293330, 8), (unique, 0x10000212, 8) COPY (const, 0x2905b8, 8), (unique, 0x100001f2, 8) COPY (const, 0x28ec29, 8)]
[ ---  RETURN (const, 0x1, 4)]
