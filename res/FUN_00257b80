[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x24, 4)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x24, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x24, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (unique, 0x100007a6, 4) , (const, 0x24, 4), (unique, 0x100007a6, 4) COPY (register, 0x38, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x24, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x24, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x24, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x24, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100007aa, 8), (unique, 0x100007aa, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff54, 4) COPY (const, 0x6e, 4)]
[ ---  CBRANCH (ram, 0x257d28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100007b2, 8), (unique, 0x100007b2, 8) INT_ADD (register, 0x0, 8) , (const, 0xc8, 8), (register, 0x0, 8) CALL (ram, 0x259600, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e7, 4)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x1e7, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x1e7, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1e7, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1e7, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1e7, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1e7, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1e7, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x1e7, 4)]
[ ---  CBRANCH (ram, 0x257d1d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100007ba, 8), (unique, 0x100007ba, 8) CALL (ram, 0x1212c0, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (register, 0x0, 8), (unique, 0x3200, 8) CAST (unique, 0x100007c2, 8), (unique, 0x100007c2, 8) INT_ADD (register, 0x0, 8) , (const, 0xc8, 8)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x1f7, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x1f5, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x1f7, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x1f5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000766, 8) , (const, 0x0, 8), (unique, 0x10000766, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x257bf1, 1)]
[ ---  CBRANCH (ram, 0x257bf1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) CAST (unique, 0x100007ca, 8), (unique, 0x100007ca, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000066e, 8), (unique, 0x1000066e, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x48, 4)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x48, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x48, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x48, 4)]
[ ---  CBRANCH (ram, 0x257d50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1e58e0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007d2, 8), (unique, 0x100007d2, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x257bf1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x100007da, 8), (unique, 0x100007da, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000076e, 8), (unique, 0x1000076e, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (const, 0x6, 4) , (unique, 0x100007e2, 8), (unique, 0x100007e2, 8) CAST (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x28, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15d, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x152, 4)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x15d, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x152, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x15d, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x152, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x15d, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x152, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x15d, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x152, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x15d, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x152, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x15d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x152, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x15d, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x152, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x15d, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x152, 4)]
[ ---  CBRANCH (ram, 0x257bd3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x222940, 8) , (stack, 0xffffffffffffff50, 4) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff54, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x152, 4)]
[ ---  CBRANCH (ram, 0x257bf1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) CAST (unique, 0x100007ea, 8), (unique, 0x100007ea, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000776, 8), (unique, 0x10000776, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17b, 4)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x17b, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x17b, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x17b, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x17b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x17b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x17b, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x17b, 4)]
[ ---  CBRANCH (ram, 0x257cd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1e5910, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007fa, 8), (unique, 0x100007fa, 8) INT_ADD (unique, 0x100007f2, 8) , (const, 0x4, 8), (unique, 0x100007f2, 8) CAST (unique, 0x10000786, 8), (unique, 0x10000786, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x1000080a, 8), (unique, 0x1000080a, 8) INT_ADD (unique, 0x10000802, 8) , (const, 0x4, 8), (unique, 0x10000802, 8) CAST (unique, 0x1000070e, 8), (unique, 0x1000070e, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8), (register, 0x0, 4) CALL (ram, 0x1e5910, 8)]
[ ---  CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000082a, 8), (unique, 0x1000082a, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000822, 8), (unique, 0x10000822, 8) INT_ADD (unique, 0x1000081a, 8) , (const, 0x38, 8), (unique, 0x1000081a, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000726, 8), (unique, 0x10000726, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000812, 8), (unique, 0x10000812, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000071e, 8), (unique, 0x1000071e, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d0, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a8, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1d0, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x1a8, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1d0, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1a8, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1a8, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1a8, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x199, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x1a8, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x199, 4)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x1d4, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x1d0, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x1a8, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x19c, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x199, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x1d4, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x1d0, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x1a8, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x19c, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x199, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000756, 8) , (register, 0x0, 8), (unique, 0x10000756, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x255200, 8) , (unique, 0x1000020e, 8) , (unique, 0xbc80, 4) , (const, 0x0, 4) , (const, 0x0, 4) , (const, 0x0, 8), (unique, 0x1000020e, 8) COPY (const, 0x2b3c79, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000842, 8), (unique, 0x10000842, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000746, 8), (unique, 0x10000746, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000083a, 8), (unique, 0x1000083a, 8) INT_ADD (unique, 0x10000832, 8) , (const, 0x4, 8), (unique, 0x10000832, 8) CAST (unique, 0x10000736, 8), (unique, 0x10000736, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x257da6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000035e, 8), (unique, 0x1000035e, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000084a, 8), (unique, 0x1000084a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000074e, 8), (unique, 0x1000074e, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000852, 8), (unique, 0x10000852, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000796, 8), (unique, 0x10000796, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x193, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x193, 4), (ram, 0x2bc380, 8) MULTIEQUAL (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x193, 4), (ram, 0x2bc388, 8) MULTIEQUAL (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x193, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x193, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x193, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x38, 8) , (const, 0xd, 4) , (unique, 0x1000085a, 8), (unique, 0x1000085a, 8) CAST (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x28, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff44, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000862, 8), (unique, 0x10000862, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000079e, 8), (unique, 0x1000079e, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x257c8d, 1)]
[ ---  CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000882, 8), (unique, 0x10000882, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000087a, 8), (unique, 0x1000087a, 8) INT_ADD (unique, 0x10000872, 8) , (const, 0x38, 8), (unique, 0x10000872, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000686, 8), (unique, 0x10000686, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000086a, 8), (unique, 0x1000086a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000067e, 8), (unique, 0x1000067e, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x68, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x68, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x5e, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x68, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x5e, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x68, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x5e, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x68, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x68, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x68, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000088a, 8), (unique, 0x1000088a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000068e, 8), (unique, 0x1000068e, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x6a, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x68, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x5e, 4), (ram, 0x2bc380, 8) MULTIEQUAL (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x6a, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x68, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x5e, 4), (ram, 0x2bc388, 8) MULTIEQUAL (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000696, 8) , (const, 0x0, 8), (unique, 0x10000696, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x73, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x73, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x73, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x73, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x73, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x73, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x73, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x7e, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x73, 4), (ram, 0x2bc380, 8) MULTIEQUAL (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x7e, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x73, 4), (ram, 0x2bc388, 8) MULTIEQUAL (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000069e, 8) , (unique, 0x10000892, 8), (unique, 0x10000892, 8) CAST (register, 0x0, 8), (unique, 0x1000069e, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x2555f0, 8) , (unique, 0x1000021e, 8) , (const, 0x186bd, 8) , (register, 0x10, 8) , (unique, 0x10000216, 8), (unique, 0x1000021e, 8) COPY (const, 0x2b728d, 8), (unique, 0x10000216, 8) COPY (const, 0x2b720e, 8), (register, 0x10, 8) INT_SEXT (stack, 0xffffffffffffff44, 4), (register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x0, 8), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[ ---  CBRANCH (ram, 0x257d1d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x2555f0, 8) , (unique, 0x1000021e, 8) , (const, 0x186bd, 8) , (register, 0x10, 8) , (unique, 0x10000216, 8), (unique, 0x1000021e, 8) COPY (const, 0x2b728d, 8), (unique, 0x10000216, 8) COPY (const, 0x2b720e, 8), (register, 0x10, 8) INT_SEXT (stack, 0xffffffffffffff44, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x100008a2, 8), (unique, 0x100008a2, 8) INT_ADD (unique, 0x1000089a, 8) , (const, 0x4, 8), (unique, 0x1000089a, 8) CAST (unique, 0x100006ae, 8), (unique, 0x100006ae, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8), (register, 0x0, 4) CALL (ram, 0x1e5910, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008ba, 8) , (register, 0x0, 4), (unique, 0x100008ba, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8), (register, 0x0, 4) CALL (ram, 0x1e58e0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb3, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x88, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x88, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x88, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x88, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x88, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x88, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x82, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x88, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x82, 4)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0xb7, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0xb3, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0xae, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x88, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x85, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x82, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0xb7, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0xb3, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0xae, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x88, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x85, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x82, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006ee, 8) , (register, 0x0, 8), (unique, 0x100006ee, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x255200, 8) , (unique, 0x10000206, 8) , (unique, 0xbc80, 4) , (const, 0x0, 4) , (const, 0x0, 4) , (const, 0x0, 8), (unique, 0x10000206, 8) COPY (const, 0x2b3c79, 8), (unique, 0xbd80, 8) CAST (unique, 0x100008c2, 8), (unique, 0x100008c2, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006de, 8), (unique, 0x100006de, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100008b2, 8), (unique, 0x100008b2, 8) INT_ADD (unique, 0x100008aa, 8) , (const, 0x4, 8), (unique, 0x100008aa, 8) CAST (unique, 0x100006c6, 8), (unique, 0x100006c6, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x257d0f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002be, 8), (unique, 0x100002be, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x100008ca, 8), (unique, 0x100008ca, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006e6, 8), (unique, 0x100006e6, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x12e, 4), (stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x12e, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x130, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x12e, 4), (ram, 0x2bc380, 8) MULTIEQUAL (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x130, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x12e, 4), (ram, 0x2bc388, 8) MULTIEQUAL (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000075e, 8) , (const, 0x0, 8), (unique, 0x1000075e, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(ram, 0x2bc388, 8) MULTIEQUAL (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8)]
[(ram, 0x2bc380, 8) MULTIEQUAL (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x257c8d, 1)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (const, 0x4, 4) , (unique, 0x100008d2, 8), (unique, 0x100008d2, 8) CAST (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x28, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe0, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd3, 4)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0xe0, 4), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0xd3, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0xe0, 4), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xe0, 4), (stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xe0, 4), (stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xe0, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xd3, 4), (stack, 0xffffffffffffff58, 8) COPY (ram, 0x2bc380, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xe0, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd3, 4), (stack, 0xffffffffffffff60, 8) COPY (ram, 0x2bc388, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xe0, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xd3, 4)]
[ ---  CBRANCH (ram, 0x257cb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (const, 0x6, 4) , (unique, 0x100008e2, 8), (unique, 0x100008e2, 8) CAST (unique, 0x3800, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x28, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100008da, 8), (unique, 0x100008da, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006f6, 8), (unique, 0x100006f6, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x125, 4)]
[(ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x125, 4)]
[(ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x125, 4)]
[ ---  CALL (ram, 0x2105a0, 8) , (stack, 0xffffffffffffff50, 4) , (const, 0x2, 4) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x257c8a, 1)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(ram, 0x2bc388, 8) MULTIEQUAL (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8)]
[(ram, 0x2bc380, 8) MULTIEQUAL (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100008ea, 8), (unique, 0x100008ea, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006fe, 8), (unique, 0x100006fe, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff44, 4) MULTIEQUAL (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4) , (stack, 0xffffffffffffff44, 4)]
[(ram, 0x2bc388, 8) MULTIEQUAL (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8) , (ram, 0x2bc388, 8)]
[(ram, 0x2bc380, 8) MULTIEQUAL (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8) , (ram, 0x2bc380, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x257dbf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100008f2, 8), (unique, 0x100008f2, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffff44, 4) INDIRECT (stack, 0xffffffffffffff44, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x110, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x2bc380, 8) COPY (ram, 0x2bc380, 8), (ram, 0x2bc380, 8) INDIRECT (ram, 0x2bc380, 8) , (const, 0x110, 4)]
[(ram, 0x2bc388, 8) COPY (ram, 0x2bc388, 8), (ram, 0x2bc388, 8) INDIRECT (ram, 0x2bc388, 8) , (const, 0x110, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x2bc380, 8) COPY (ram, 0x2bc380, 8)]
[(ram, 0x2bc388, 8) COPY (ram, 0x2bc388, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
