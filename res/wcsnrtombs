[ ---  CBRANCH (ram, 0x1acd3f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(register, 0x80, 8) CAST (unique, 0x10000266, 8), (unique, 0x10000266, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c5a08, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(stack, 0xfffffffffffffeac, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffeb0, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffea8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1ace70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1ace58, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x48, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (unique, 0x1000025e, 8) , (const, 0x48, 4), (unique, 0x1000025e, 8) COPY (register, 0x80, 8)]
[(unique, 0x3a00, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100001d4, 8) , (const, 0x4, 8), (unique, 0x100001d4, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1acfe0, 8) , (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_SUB (register, 0x10, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1acf50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000027e, 8), (unique, 0x1000027e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000276, 8), (unique, 0x10000276, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000026e, 8), (unique, 0x1000026e, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2dd8, 8) , (register, 0x110, 8) , (const, 0x1, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x48, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x48, 4)]
[(register, 0x0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c1200, 8)]
[ ---  CBRANCH (ram, 0x1acd9d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x100001c4, 8), (unique, 0x100001c4, 8) PTRSUB (const, 0x0, 8) , (const, 0x4bf9a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x24d, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x24d, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x24d, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x24d, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x24d, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x24d, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x24d, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x24d, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x24d, 4)]
[ ---  CALL (ram, 0x1b95f0, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000286, 8), (unique, 0x10000286, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1acd9d, 1)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000296, 8), (unique, 0x10000296, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000028e, 8), (unique, 0x1000028e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1acdba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000028e, 8), (unique, 0x1000028e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) CAST (unique, 0x100002b6, 8), (unique, 0x100002b6, 8) INT_XOR (register, 0x18, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002ae, 8), (unique, 0x100002ae, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x18, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x100002a6, 8) , (const, 0x2f, 4), (unique, 0x100002a6, 8) CAST (unique, 0xbd80, 8), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x1000029e, 8) , (const, 0x11, 4), (unique, 0x1000029e, 8) CAST (unique, 0xbd80, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1ace78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe90, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(register, 0x28, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffeb8, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8)]
[ ---  CALL (ram, 0x242d60, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f1, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d5, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x1f1, 4), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x1d5, 4), (ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1f1, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1d5, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1f1, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1d5, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1f1, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1d5, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1f1, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1d5, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (unique, 0x3c80, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1f1, 4), (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1d5, 4), (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1f1, 4), (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1d5, 4), (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1f1, 4), (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1d5, 4), (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1f1, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1d5, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(register, 0x28, 8) PTRADD (register, 0x28, 8) , (unique, 0x100002c6, 8) , (const, 0x1, 8), (unique, 0x100002c6, 8) CAST (register, 0x8, 8), (register, 0x8, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (unique, 0x1000011a, 8) , (const, 0x1, 8), (unique, 0x1000011a, 8) INT_2COMP (unique, 0x100002be, 8), (unique, 0x100002be, 8) CAST (unique, 0x3800, 8), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1f1, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (unique, 0x1000024e, 8) , (const, 0x1d5, 4), (unique, 0x1000024e, 8) COPY (unique, 0x3800, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1acec8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x5, 4), (register, 0x0, 4) CALLIND (register, 0x18, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3a00, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1ace18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58a00, 4) , (const, 0x0, 4), (unique, 0x58a00, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffb, 4)]
[(register, 0x28, 8) PTRADD (register, 0x28, 8) , (unique, 0x1000012e, 8) , (const, 0x1, 8), (unique, 0x1000012e, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1ace18, 1)]
[ ---  CALL (ram, 0x242d60, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc8, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xae, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0xc8, 4), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0xae, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xc8, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xae, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xc8, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xae, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xc8, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xae, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xc8, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (register, 0x28, 8) , (const, 0xae, 4), (register, 0x28, 8) PTRADD (register, 0x38, 8) , (register, 0x8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0xc8, 4), (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0xae, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0xc8, 4), (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0xae, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0xc8, 4), (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0xae, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xc8, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xae, 4)]
[(register, 0x28, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (unique, 0x100000c5, 8) , (const, 0x1, 8), (unique, 0x100000c5, 8) INT_2COMP (unique, 0x100002ce, 8), (unique, 0x100002ce, 8) CAST (register, 0x38, 8), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xc8, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (unique, 0x10000256, 8) , (const, 0xae, 4), (unique, 0x10000256, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1ace18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100000cd, 4) , (const, 0x0, 4), (unique, 0x100000cd, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffb, 4), (register, 0x0, 4) CALLIND (register, 0x18, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (unique, 0x3a00, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x1, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8)]
[ ---  CBRANCH (ram, 0x1acf20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1acfb6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x19e, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x19e, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x19e, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x19e, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x19e, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x19e, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x100001a4, 8) , (unique, 0x10000194, 8) , (const, 0x7d, 4) , (unique, 0x100001bc, 8), (unique, 0x100001bc, 8) COPY (const, 0x291570, 8), (unique, 0x100001a4, 8) COPY (const, 0x291528, 8), (unique, 0x10000194, 8) COPY (const, 0x28d886, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x19e, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x19e, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1acf97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000022c, 8), (unique, 0x1000022c, 8) PTRSUB (stack, 0xfffffffffffffeb8, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x195, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x1000017c, 8) , (unique, 0x1000018c, 8) , (const, 0x7e, 4) , (unique, 0x100001b4, 8), (unique, 0x100001b4, 8) COPY (const, 0x291570, 8), (unique, 0x1000018c, 8) COPY (const, 0x28d886, 8), (unique, 0x1000017c, 8) COPY (const, 0x28d824, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x195, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x195, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x184, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x184, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x28, 8) PTRADD (register, 0x28, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1ace18, 1)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x28, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0xc800, 1) INT_LESS (const, 0x1, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1ace33, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1acf78, 1) , (register, 0x206, 1)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x165, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x165, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x165, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x165, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x165, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x165, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x165, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x165, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x1000019c, 8) , (unique, 0x10000184, 8) , (const, 0x89, 4) , (unique, 0x100001ac, 8), (unique, 0x100001ac, 8) COPY (const, 0x291570, 8), (unique, 0x1000019c, 8) COPY (const, 0x291468, 8), (unique, 0x10000184, 8) COPY (const, 0x28d886, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x165, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x165, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1acf48, 1) , (unique, 0xc800, 1)]
[ ---  CBRANCH (ram, 0x1acf48, 1) , (register, 0x206, 1)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x143, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x143, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002d6, 8) , (const, 0x54, 4), (unique, 0x100002d6, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (unique, 0x100002de, 8), (unique, 0x100002de, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x28, 8) , (register, 0x28, 8)]
