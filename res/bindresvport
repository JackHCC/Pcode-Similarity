[(unique, 0x100003a9, 4) COPY (ram, 0x4eff58, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003e7, 8), (unique, 0x100003e7, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x24bed6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eff58, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x37b, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x37b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x37b, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x37b, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x37b, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x37b, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x37b, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x37b, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x37b, 4), (ram, 0x4eff58, 4) COPY (const, 0x1, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x37b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x37b, 4), (stack, 0xffffffffffffff90, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x37b, 4), (stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x37b, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x37b, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x37b, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x37b, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x37b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x37b, 4)]
[ ---  CBRANCH (ram, 0x24bce3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x17ee30, 8) , (unique, 0x1000030f, 8) , (unique, 0x10000307, 8), (unique, 0x1000030f, 8) COPY (const, 0x2b708d, 8), (unique, 0x10000307, 8) COPY (const, 0x2b56da, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0xa8, 4) COPY (const, 0x0, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (register, 0x0, 8) , (unique, 0x10000389, 8) , (unique, 0x10000389, 8) , (unique, 0x10000389, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0xa0, 4) MULTIEQUAL (unique, 0x100003a9, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x24c051, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100003ef, 8), (unique, 0x100003ef, 8) CAST (unique, 0x1000035f, 8), (unique, 0x1000035f, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b3, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3b3, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3b3, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x3b3, 4), (ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x3b3, 4), (ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x3b3, 4), (ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x3b3, 4), (ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x3b3, 4), (ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x3b3, 4), (ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3b3, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x3b3, 4), (stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x3b3, 4), (stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x3b3, 4), (stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100003ad, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3b3, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x24c051, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x17bc50, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3c7, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3c7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3c7, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x3c7, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x3c7, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x3c7, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x3c7, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x3c7, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x3c7, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3c7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3c7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3c7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3c7, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x3c7, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x3c7, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x3c7, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x3c7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c7, 4)]
[ ---  CBRANCH (ram, 0x24bf74, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (stack, 0xffffffffffffff90, 8) , (const, 0x23, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3d6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3d6, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x3d6, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x3d6, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x3d6, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x3d6, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x3d6, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x3d6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3d6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100003ff, 8), (unique, 0x100003ff, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100003f7, 8), (unique, 0x100003f7, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae00, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100003ad, 8), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x1000027a, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x1000027c, 8) MULTIEQUAL (unique, 0x100003ad, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x24bfa2, 1) , (unique, 0x1000027b, 1), (unique, 0x1000027b, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000407, 8), (unique, 0x10000407, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (unique, 0x1000027c, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x24bf31, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000027a, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x414, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x414, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x414, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x414, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x414, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x414, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x414, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x414, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x414, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (register, 0x0, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x414, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x414, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x414, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x414, 4)]
[ ---  CBRANCH (ram, 0x24bfbb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xa, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000027c, 8) , (unique, 0x10000367, 8) , (const, 0x1, 8), (unique, 0x10000367, 8) INT_SUB (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000027c, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x428, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x428, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x428, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x428, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x428, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x428, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x428, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x428, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x428, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x439, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x439, 4), (ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x439, 4), (ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x439, 4), (ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x439, 4), (ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x439, 4), (ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x439, 4), (ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x439, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x439, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x439, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x439, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x439, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x439, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x439, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x439, 4)]
[(register, 0x0, 8) CALL (ram, 0x145140, 8) , (unique, 0x1000027c, 8) , (unique, 0x3800, 8) , (const, 0x0, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000417, 8), (unique, 0x10000417, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffffa0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000040f, 8), (unique, 0x1000040f, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae00, 8) , (register, 0x110, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x439, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x439, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x439, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x10000387, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000389, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x24c007, 1) , (unique, 0x10000388, 1), (unique, 0x10000388, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000041f, 8), (unique, 0x1000041f, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x10000389, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x24bf31, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000387, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x24bf31, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x24bf31, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1ff, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) INT_SUB (register, 0x0, 8) , (const, 0x200, 8)]
[ ---  CBRANCH (ram, 0x24c0f1, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESSEQUAL (register, 0xa0, 4) , (register, 0xa8, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x51a, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x51a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x51a, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x51a, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x51a, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x51a, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x51a, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x51a, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x51a, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x51a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x51a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x51a, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x10000389, 8) , (const, 0x51a, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x51a, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x51a, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x51a, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x51a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x51a, 4)]
[ ---  CBRANCH (ram, 0x24c03c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000427, 8), (unique, 0x10000427, 8) CALL (ram, 0x121020, 8) , (ram, 0x4eff50, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_LEFT (register, 0x30, 8) , (const, 0x2, 4), (register, 0x30, 8) INT_SEXT (register, 0xa0, 4), (register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (const, 0xa, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x52f, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x52f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x52f, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x52f, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x52f, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x52f, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x52f, 4)]
[(ram, 0x4eff50, 8) INDIRECT (register, 0x0, 8) , (const, 0x52f, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x52f, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x52f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x52f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x52f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x52f, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x52f, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x52f, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x52f, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x52f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x52f, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  BRANCH (ram, 0x24bce3, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x10000389, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (const, 0x1, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x4b8, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4b8, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x4b8, 4), (ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x4b8, 4), (ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x4b8, 4), (ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x4b8, 4), (ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x4b8, 4), (ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (register, 0x0, 8)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x4b8, 4), (ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4b8, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (unique, 0x3400, 8) PTRADD (ram, 0x4eff50, 8) , (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_SEXT (register, 0xa8, 4), (ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x24bf3b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000042f, 8), (unique, 0x1000042f, 8) CAST (unique, 0x10000377, 8), (unique, 0x10000377, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4c7, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x4c7, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4c7, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x4c7, 4), (ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x4c7, 4), (ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x4c7, 4), (ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x4c7, 4), (ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x4c7, 4), (ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x4c7, 4), (ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4c7, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x4c7, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x4c7, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x4c7, 4), (stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x4c7, 4), (stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x4c7, 4), (stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x4c7, 4), (stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4c7, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x17e250, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x24c068, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4c7, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4d7, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x4d7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4d7, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x4d7, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x4d7, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x4d7, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x4d7, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x4d7, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x4d7, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4d7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4d7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x4d7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x4d7, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x4d7, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x4d7, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x4d7, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x4d7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4d7, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100003d9, 4) COPY (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x24bcec, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100003d5, 4) COPY (ram, 0x4eff48, 4), (ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(unique, 0x100003dd, 4) COPY (ram, 0x4eff48, 4), (ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[ ---  CBRANCH (ram, 0x24c078, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff48, 4) MULTIEQUAL (unique, 0x100003d5, 4) , (unique, 0x100003d9, 4)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x24c130, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x2, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000031f, 8), (unique, 0x1000031f, 8) PTRSUB (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x30, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x349, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x349, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x349, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x349, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x349, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x349, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x349, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x349, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000437, 8) , (const, 0x61, 4), (unique, 0x10000437, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x100003cd, 4) COPY (ram, 0x4eff44, 4), (ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x349, 4)]
[ ---  BRANCH (ram, 0x24beb1, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff48, 4) MULTIEQUAL (unique, 0x100003dd, 4) , (unique, 0x100003d9, 4)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x1000043f, 8), (unique, 0x1000043f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffaa, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb2, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffb6, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffa8, 2) COPY (const, 0x2, 2)]
[(unique, 0x10000285, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x30, 8)]
[(unique, 0x1000028d, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000295, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(unique, 0x1000029d, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(unique, 0x100002a1, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(unique, 0x100002a3, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(unique, 0x100002a5, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x100002ad, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x100002b5, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(unique, 0x100002b9, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(unique, 0x100002bd, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(unique, 0x100002c1, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(unique, 0x100002c9, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(unique, 0x100002cd, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(unique, 0x100002d9, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x100002e1, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x100002e9, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x100002f1, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x24bd05, 1) , (unique, 0x10000284, 1), (unique, 0x10000284, 1) INT_EQUAL (unique, 0x100002b7, 2) , (const, 0x0, 2), (unique, 0x100002b7, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(register, 0x110, 8) INDIRECT (unique, 0x1000028d, 8) , (const, 0x2c3, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x100002a5, 8) , (const, 0x2c3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x100002ad, 8) , (const, 0x2c3, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (unique, 0x100002b5, 2) , (const, 0x2c3, 4)]
[(ram, 0x4eff40, 2) INDIRECT (unique, 0x100002b7, 2) , (const, 0x2c3, 4)]
[(ram, 0x4eff44, 4) INDIRECT (unique, 0x100002b9, 4) , (const, 0x2c3, 4)]
[(ram, 0x4eff48, 4) INDIRECT (unique, 0x100002bd, 4) , (const, 0x2c3, 4)]
[(ram, 0x4eff50, 8) INDIRECT (unique, 0x100002c1, 8) , (const, 0x2c3, 4)]
[(ram, 0x4eff58, 4) INDIRECT (unique, 0x100002c9, 4) , (const, 0x2c3, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (unique, 0x100002cd, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x100002d9, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x100002e1, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x100002e9, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (unique, 0x100002a3, 2) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (unique, 0x10000295, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (unique, 0x1000029d, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (unique, 0x100002a1, 2) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100002f1, 8) , (const, 0x2c3, 4)]
[(register, 0x0, 2) INT_ADD (register, 0x0, 2) , (const, 0x258, 2), (register, 0x0, 2) INT_ADD (unique, 0x10000243, 2) , (unique, 0x10000245, 2), (unique, 0x10000243, 2) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (unique, 0x10000245, 2) INT_MULT (unique, 0x10000257, 2) , (const, 0xfe58, 2), (unique, 0x10000257, 2) SUBPIECE (unique, 0x1000024b, 4) , (const, 0x0, 4), (unique, 0x1000024b, 4) INT_SDIV (register, 0x0, 4) , (const, 0x1a8, 4), (register, 0x0, 4) CALL (ram, 0x1e58e0, 8)]
[ ---  BRANCH (ram, 0x24bd05, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x100002f1, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (unique, 0x100002a1, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (unique, 0x1000029d, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (unique, 0x10000295, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (unique, 0x100002a3, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x100002e9, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x100002e1, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x100002d9, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x100003a1, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100002ad, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x63, 4), (ram, 0x4eae00, 8) MULTIEQUAL (unique, 0x100002a5, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x63, 4), (ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100002ad, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x63, 4), (ram, 0x4eb42c, 2) MULTIEQUAL (unique, 0x100002b5, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x63, 4), (ram, 0x4eff40, 2) MULTIEQUAL (unique, 0x100002b7, 2) , (register, 0x0, 2)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x63, 4), (ram, 0x4eff44, 4) MULTIEQUAL (unique, 0x100002b9, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x63, 4), (ram, 0x4eff48, 4) MULTIEQUAL (unique, 0x100002bd, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x63, 4), (ram, 0x4eff50, 8) MULTIEQUAL (unique, 0x100002c1, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x63, 4), (ram, 0x4eff58, 4) MULTIEQUAL (unique, 0x100002c9, 4) , (ram, 0x4eff58, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000449, 8) , (const, 0x62, 4), (unique, 0x10000449, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (unique, 0x1000028d, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100002ad, 8) , (ram, 0x4eae68, 8)]
[(register, 0x28, 4) INT_SUB (const, 0x400, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SEXT (unique, 0x10000447, 2), (unique, 0x10000447, 2) CAST (ram, 0x4eb42c, 2), (ram, 0x4eb42c, 2) MULTIEQUAL (unique, 0x100002b5, 2) , (ram, 0x4eb42c, 2)]
[ ---  CBRANCH (ram, 0x24bd3f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x63, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (unique, 0x100002cd, 4) , (ram, 0x4f08f8, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eff44, 4) , (const, 0x0, 4)]
[(ram, 0x4eff44, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eff44, 4) , (const, 0x0, 4)]
[(ram, 0x4eff44, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x24bd62, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a7, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2a7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2a7, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x2a7, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x2a7, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x2a7, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x2a7, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x2a7, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x2a7, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x2a7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a7, 4)]
[ ---  CALL (ram, 0x230690, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x24c0e4, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x28, 4) , (const, 0x1, 4)]
[(register, 0xb0, 4) COPY (const, 0x0, 4)]
[(register, 0x30, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x24be1f, 1)]
[(register, 0xa0, 2) COPY (const, 0x3ff, 2)]
[(register, 0x30, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (register, 0x0, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 2) MULTIEQUAL (register, 0xa0, 2) , (register, 0xa0, 2)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0xb0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (register, 0xb0, 4)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0xcc, 4), (stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0xcc, 4), (stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0xcc, 4), (stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcc, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 2), (unique, 0x3100, 8) PTRSUB (unique, 0x10000285, 8) , (const, 0x2, 8), (register, 0x0, 2) INT_OR (unique, 0x4e880, 2) , (unique, 0x4e980, 2), (unique, 0x4e980, 2) INT_LEFT (ram, 0x4eff40, 2) , (const, 0x8, 4), (unique, 0x4e880, 2) INT_RIGHT (ram, 0x4eff40, 2) , (const, 0x8, 4), (ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (register, 0x0, 2)]
[ ---  CBRANCH (ram, 0x24bdce, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (ram, 0x4eff48, 4) , (const, 0x1, 4), (ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[ ---  CBRANCH (ram, 0x24bdf2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (ram, 0x4eff50, 8), (register, 0x8, 4) INT_SEXT (unique, 0x10000451, 2), (unique, 0x10000451, 2) CAST (ram, 0x4eff40, 2)]
[(unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (register, 0x38, 8) , (const, 0x4, 8), (register, 0x38, 8) INT_ZEXT (register, 0x38, 4), (register, 0x38, 4) INT_SUB (ram, 0x4eff48, 4) , (const, 0x1, 4), (register, 0x0, 8) PTRADD (ram, 0x4eff50, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x100003b5, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (ram, 0x4eff50, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x24bdc9, 1)]
[ ---  CBRANCH (ram, 0x24bdc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100003b5, 8) , (unique, 0x100003bd, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x111, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x111, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x111, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x111, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x111, 4)]
[(ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x111, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x111, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x111, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x111, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x111, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x111, 4)]
[ ---  CBRANCH (ram, 0x24be1f, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222870, 8) , (register, 0x38, 4) , (unique, 0x10000453, 8) , (const, 0x10, 4), (unique, 0x10000453, 8) CAST (unique, 0x10000285, 8)]
[ ---  CBRANCH (ram, 0x24be1f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x62, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000045b, 8), (unique, 0x1000045b, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x100003a1, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x100003bd, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x24bdf2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x24be12, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0xa0, 2) , (unique, 0x10000463, 2), (unique, 0x10000463, 2) CAST (register, 0x0, 2), (register, 0x0, 2) INT_ADD (register, 0x10, 2) , (const, 0x1, 2), (register, 0x10, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(unique, 0x100003e5, 2) COPY (ram, 0x4eb42c, 2)]
[(register, 0x0, 2) MULTIEQUAL (register, 0x0, 2) , (unique, 0x100003e5, 2)]
[ ---  CBRANCH (ram, 0x24bd88, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (register, 0xb0, 4) , (register, 0x28, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff44, 4) MULTIEQUAL (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4) , (ram, 0x4eff44, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2) , (register, 0x0, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x24be7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 4) , (register, 0xb0, 4), (register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4) , (register, 0x28, 4), (register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (register, 0xb0, 4) , (register, 0xb0, 4) , (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x24be7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eb42c, 2) , (const, 0x200, 2)]
[ ---  CBRANCH (ram, 0x24be8f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100003c9, 4) COPY (unique, 0x10000391, 4), (unique, 0x10000391, 4) INT_ADD (ram, 0x4eff44, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x24beb1, 1) , (unique, 0x10000395, 1), (unique, 0x10000395, 1) INT_NOTEQUAL (unique, 0x10000391, 4) , (const, 0x0, 4), (unique, 0x10000391, 4) INT_ADD (ram, 0x4eff44, 4) , (const, 0xffffffff, 4)]
[(register, 0x30, 4) INDIRECT (register, 0x30, 4) , (const, 0x265, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x265, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x265, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x265, 4)]
[(ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x265, 4)]
[(ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x265, 4)]
[(ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x265, 4)]
[(ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x265, 4)]
[(ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x265, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x265, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x265, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x265, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x265, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x265, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x265, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x265, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x265, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x265, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x10000317, 8), (unique, 0x10000317, 8) PTRSUB (const, 0x0, 8) , (const, 0x4eff44, 8)]
[(unique, 0x100003c5, 4) COPY (ram, 0x4eff44, 4), (ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x265, 4), (ram, 0x4eff44, 4) INT_ADD (ram, 0x4eff44, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffb6, 2) MULTIEQUAL (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2) , (stack, 0xffffffffffffffb6, 2)]
[(stack, 0xffffffffffffffb2, 4) MULTIEQUAL (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4) , (stack, 0xffffffffffffffb2, 4)]
[(stack, 0xffffffffffffffaa, 8) MULTIEQUAL (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8) , (stack, 0xffffffffffffffaa, 8)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eff58, 4) MULTIEQUAL (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4) , (ram, 0x4eff58, 4)]
[(ram, 0x4eff50, 8) MULTIEQUAL (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8) , (ram, 0x4eff50, 8)]
[(ram, 0x4eff48, 4) MULTIEQUAL (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4) , (ram, 0x4eff48, 4)]
[(ram, 0x4eff40, 2) MULTIEQUAL (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2) , (ram, 0x4eff40, 2)]
[(ram, 0x4eb42c, 2) MULTIEQUAL (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2) , (ram, 0x4eb42c, 2)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eff44, 4) COPY (unique, 0x100003d1, 4), (unique, 0x100003d1, 4) MULTIEQUAL (unique, 0x100003c5, 4) , (unique, 0x100003c9, 4) , (unique, 0x100003cd, 4)]
[(register, 0x0, 4) COPY (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x24c148, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000465, 8), (unique, 0x10000465, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4eb42c, 2) COPY (ram, 0x4eb42c, 2)]
[(ram, 0x4eff40, 2) COPY (ram, 0x4eff40, 2)]
[(ram, 0x4eff44, 4) COPY (ram, 0x4eff44, 4)]
[(ram, 0x4eff48, 4) COPY (ram, 0x4eff48, 4)]
[(ram, 0x4eff50, 8) COPY (ram, 0x4eff50, 8)]
[(ram, 0x4eff58, 4) COPY (ram, 0x4eff58, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x256, 4)]
[(stack, 0xffffffffffffffaa, 8) INDIRECT (stack, 0xffffffffffffffaa, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffffffb2, 4) INDIRECT (stack, 0xffffffffffffffb2, 4) , (const, 0x256, 4)]
[(stack, 0xffffffffffffffb6, 2) INDIRECT (stack, 0xffffffffffffffb6, 2) , (const, 0x256, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x256, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x256, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x256, 4)]
[(ram, 0x4eb42c, 2) COPY (ram, 0x4eb42c, 2), (ram, 0x4eb42c, 2) INDIRECT (ram, 0x4eb42c, 2) , (const, 0x256, 4)]
[(ram, 0x4eff40, 2) COPY (ram, 0x4eff40, 2), (ram, 0x4eff40, 2) INDIRECT (ram, 0x4eff40, 2) , (const, 0x256, 4)]
[(ram, 0x4eff44, 4) COPY (ram, 0x4eff44, 4), (ram, 0x4eff44, 4) INDIRECT (ram, 0x4eff44, 4) , (const, 0x256, 4)]
[(ram, 0x4eff48, 4) COPY (ram, 0x4eff48, 4), (ram, 0x4eff48, 4) INDIRECT (ram, 0x4eff48, 4) , (const, 0x256, 4)]
[(ram, 0x4eff50, 8) COPY (ram, 0x4eff50, 8), (ram, 0x4eff50, 8) INDIRECT (ram, 0x4eff50, 8) , (const, 0x256, 4)]
[(ram, 0x4eff58, 4) COPY (ram, 0x4eff58, 4), (ram, 0x4eff58, 4) INDIRECT (ram, 0x4eff58, 4) , (const, 0x256, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x256, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x28, 4) COPY (const, 0x58, 4)]
[(ram, 0x4eb42c, 2) COPY (const, 0x200, 2)]
[(register, 0xa0, 2) COPY (const, 0x257, 2)]
[(register, 0x0, 2) INT_ADD (register, 0x0, 2) , (const, 0x200, 2), (register, 0x0, 2) INT_SREM (unique, 0x1000046d, 2) , (const, 0x58, 2), (unique, 0x1000046d, 2) CAST (ram, 0x4eff40, 2)]
[ ---  BRANCH (ram, 0x24bd80, 1)]
