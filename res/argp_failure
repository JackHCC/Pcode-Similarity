[ ---  CBRANCH (ram, 0x21071f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(unique, 0x10000277, 4) COPY (register, 0x1200, 4)]
[(unique, 0x1000027b, 4) COPY (register, 0x1220, 4)]
[(unique, 0x1000027f, 4) COPY (register, 0x1240, 4)]
[(unique, 0x10000283, 4) COPY (register, 0x1260, 4)]
[(unique, 0x10000287, 4) COPY (register, 0x1280, 4)]
[(unique, 0x1000028b, 4) COPY (register, 0x12a0, 4)]
[(unique, 0x1000028f, 4) COPY (register, 0x12c0, 4)]
[(unique, 0x10000293, 4) COPY (register, 0x12e0, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (unique, 0x10000293, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (unique, 0x1000028f, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (unique, 0x1000028b, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (unique, 0x10000287, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (unique, 0x10000283, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0x1000027f, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x1000027b, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x10000277, 4)]
[(unique, 0x10000297, 8) COPY (register, 0x80, 8)]
[(unique, 0x1000029f, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x210870, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x210801, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002a7, 8), (unique, 0x100002a7, 8) CAST (ram, 0x4c2db8, 8)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8)]
[(ram, 0x4c2f38, 8) COPY (ram, 0x4c2f38, 8)]
[ ---  RETURN (const, 0x0, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (unique, 0x10000297, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x1000029f, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x17c, 4)]
[ ---  CALL (ram, 0x16b370, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002af, 8), (unique, 0x100002af, 8) CAST (ram, 0x4c2f38, 8), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x17c, 4)]
[ ---  BRANCH (ram, 0x21074b, 1)]
[ ---  CBRANCH (ram, 0x210801, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x2, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002b7, 8), (unique, 0x100002b7, 8) INT_ADD (register, 0x38, 8) , (const, 0x1c, 8)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8)]
[(ram, 0x4c2f38, 8) COPY (ram, 0x4c2f38, 8)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x210801, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002bf, 8), (unique, 0x100002bf, 8) INT_ADD (register, 0x38, 8) , (const, 0x48, 8)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8)]
[(ram, 0x4c2f38, 8) COPY (ram, 0x4c2f38, 8)]
[ ---  RETURN (const, 0x0, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x6d, 4)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x6d, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x6d, 4)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x6d, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x6d, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x6d, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (unique, 0x10000297, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x1000029f, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x6d, 4)]
[ ---  CALL (ram, 0x16b370, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002c7, 8), (unique, 0x100002c7, 8) INT_ADD (register, 0x38, 8) , (const, 0x40, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x7f, 4), (ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x7f, 4), (ram, 0x4c2f38, 8) MULTIEQUAL (ram, 0x4c2f38, 8) , (ram, 0x4c2f38, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x7f, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x7f, 4), (stack, 0xfffffffffffffe58, 4) MULTIEQUAL (stack, 0xfffffffffffffe58, 4) , (stack, 0xfffffffffffffe58, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x7f, 4), (stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x7f, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x7f, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x7f, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x7f, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x7f, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[ ---  CALL (ram, 0x16cfd0, 8) , (register, 0x18, 8) , (unique, 0x10000207, 8) , (register, 0x10, 8), (unique, 0x10000207, 8) COPY (const, 0x28eaa9, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x2107c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xa1, 4)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0xa1, 4), (stack, 0xfffffffffffffe58, 4) COPY (const, 0x20, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0xa1, 4), (stack, 0xfffffffffffffe5c, 4) COPY (const, 0x30, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0xa1, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0xa1, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xa1, 4)]
[ ---  CBRANCH (ram, 0x2108a0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x176610, 8) , (unique, 0x3800, 8) , (register, 0x8, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe50, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe50, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x2107aa, 1)]
[ ---  CALL (ram, 0x16cfd0, 8) , (register, 0x18, 8) , (unique, 0x100001e7, 8) , (stack, 0xfffffffffffffe50, 8), (unique, 0x100001e7, 8) COPY (const, 0x28eaa7, 8), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xc3, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xbd, 4)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0xc3, 4), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0xbd, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xc3, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0xc3, 4), (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0xbd, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0xc3, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0xbd, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xc3, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xbd, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xc3, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xc3, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xc3, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xc3, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xc3, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xc3, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xc3, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xc3, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xbd, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xc3, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xbd, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xfffffffffffffe50, 8), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(stack, 0xfffffffffffffe58, 4) MULTIEQUAL (stack, 0xfffffffffffffe58, 4) , (stack, 0xfffffffffffffe58, 4)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(ram, 0x4c2f38, 8) MULTIEQUAL (ram, 0x4c2f38, 8) , (ram, 0x4c2f38, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[ ---  CBRANCH (ram, 0x210840, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x15c, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x14c, 4)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x15c, 4), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x14c, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x15c, 4), (stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x14c, 4)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x15c, 4), (stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x14c, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x15c, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x14c, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x15c, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x14c, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x15c, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x15c, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x15c, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x15c, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x15c, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x15c, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x15c, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x15c, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x15c, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x15c, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x15c, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x14c, 4)]
[ ---  CALL (ram, 0x16cfd0, 8) , (register, 0x18, 8) , (unique, 0x100001f7, 8) , (register, 0x0, 8), (unique, 0x100001f7, 8) COPY (const, 0x28eaa7, 8), (register, 0x0, 8) CALL (ram, 0x18ab70, 8) , (register, 0x10, 4) , (unique, 0x100002cf, 8) , (const, 0xc8, 8), (unique, 0x100002cf, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe58, 8)]
[ ---  BRANCH (ram, 0x2107ca, 1)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(stack, 0xfffffffffffffe58, 4) MULTIEQUAL (stack, 0xfffffffffffffe58, 4) , (stack, 0xfffffffffffffe58, 4)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(ram, 0x4c2f38, 8) MULTIEQUAL (ram, 0x4c2f38, 8) , (ram, 0x4c2f38, 8)]
[(ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[ ---  CBRANCH (ram, 0x210818, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (unique, 0x100002d7, 8) , (const, 0xc0, 8), (unique, 0x100002d7, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x210830, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100002e7, 8) , (const, 0x30, 8), (unique, 0x100002e7, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100002df, 8) , (const, 0x28, 8), (unique, 0x100002df, 8) CAST (register, 0x18, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x143, 4)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x143, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x143, 4)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x143, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x143, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x143, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x143, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x143, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x143, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x143, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x143, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x143, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x143, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x143, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x143, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x143, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x143, 4)]
[ ---  CALL (ram, 0x17b150, 8) , (unique, 0x100002ef, 8) , (const, 0xa, 4), (unique, 0x100002ef, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x2107e1, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100002f7, 8) , (const, 0x28, 8), (unique, 0x100002f7, 8) CAST (register, 0x18, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x13d, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x13b, 4)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x13d, 4), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x13b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0xa, 1)]
[ ---  BRANCH (ram, 0x2107e1, 1)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xe3, 4)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0xe3, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xe3, 4)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0xe3, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0xe3, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xe3, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xe3, 4)]
[ ---  CALL (ram, 0x170ff0, 8) , (const, 0xa, 4) , (unique, 0x100002ff, 8), (unique, 0x100002ff, 8) CAST (register, 0x18, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xe7, 4), (ram, 0x4c2db8, 8) MULTIEQUAL (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8) , (ram, 0x4c2db8, 8)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0xe7, 4), (ram, 0x4c2f38, 8) MULTIEQUAL (ram, 0x4c2f38, 8) , (ram, 0x4c2f38, 8) , (ram, 0x4c2f38, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xe7, 4), (stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0xe7, 4), (stack, 0xfffffffffffffe58, 4) MULTIEQUAL (stack, 0xfffffffffffffe58, 4) , (stack, 0xfffffffffffffe58, 4) , (stack, 0xfffffffffffffe58, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0xe7, 4), (stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xe7, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xe7, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xe7, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xe7, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xe7, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xe7, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xe7, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xe7, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xe7, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xe7, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[ ---  CALL (ram, 0x16b430, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x210801, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2108b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2108b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000307, 8), (unique, 0x10000307, 8) INT_ADD (register, 0x38, 8) , (const, 0x1c, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe58, 4) INDIRECT (stack, 0xfffffffffffffe58, 4) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x122, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x122, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x122, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x122, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x122, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x122, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x122, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x122, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x122, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x122, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x122, 4)]
[ ---  CALL (ram, 0x13a020, 8) , (register, 0x30, 4)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x122, 4)]
[(ram, 0x4c2f38, 8) COPY (ram, 0x4c2f38, 8), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x122, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8)]
[(ram, 0x4c2f38, 8) COPY (ram, 0x4c2f38, 8)]
[ ---  RETURN (const, 0x0, 8)]
