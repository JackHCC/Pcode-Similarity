[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3e, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x3e, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3e, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x0, 8)]
[ ---  CALL (ram, 0x17ba60, 8) , (unique, 0x3800, 8) , (const, 0x8000, 8) , (const, 0xffffffff, 8) , (const, 0x0, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(stack, 0xffffffffffffffb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c1140, 8)]
[ ---  CBRANCH (ram, 0x218428, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x18, 4), (register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x100000a7, 4) , (unique, 0x100000af, 4), (unique, 0x100000a7, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0x100000af, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (register, 0x18, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001a3, 8), (unique, 0x100001a3, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000019b, 8), (unique, 0x1000019b, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000193, 8), (unique, 0x10000193, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[(unique, 0x10000183, 4) COPY (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x218438, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x18, 8) , (const, 0x40, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x15f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x15f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x15f, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x15f, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x15f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x15f, 4)]
[ ---  CALL (ram, 0x1888c0, 8) , (register, 0x38, 8) , (const, 0x40, 8)]
[(register, 0x10, 4) INT_SUB (unique, 0xbc80, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001b3, 8), (unique, 0x100001b3, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001ab, 8), (unique, 0x100001ab, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  BRANCH (ram, 0x21838d, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[ ---  CBRANCH (ram, 0x218491, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10000183, 4) , (register, 0x10, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x158, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x158, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x10000129, 8) , (unique, 0x10000141, 8) , (const, 0x49, 4) , (unique, 0x10000169, 8), (unique, 0x10000169, 8) COPY (const, 0x293330, 8), (unique, 0x10000141, 8) COPY (const, 0x28ec29, 8), (unique, 0x10000129, 8) COPY (const, 0x28d36a, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001bb, 8), (unique, 0x100001bb, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8)]
[(unique, 0x10000187, 4) COPY (register, 0x10, 4)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (unique, 0x10000187, 4) , (register, 0x18, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x8e, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x8e, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x8e, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x8e, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CALL (ram, 0x17cf00, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (register, 0x18, 8), (register, 0x18, 8) CAST (unique, 0x100001c3, 8), (unique, 0x100001c3, 8) INT_SEXT (register, 0x10, 4), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x218472, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (stack, 0xffffffffffffff08, 8) , (unique, 0x100000c7, 8) , (const, 0x1, 8), (unique, 0x100000c7, 8) INT_2COMP (unique, 0x100001cb, 8), (unique, 0x100001cb, 8) CAST (stack, 0xfffffffffffffef8, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8e, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x8e, 4), (register, 0x18, 8) CAST (unique, 0x100001c3, 8), (unique, 0x100001c3, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x14f, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x10000149, 8) , (unique, 0x10000139, 8) , (const, 0x51, 4) , (unique, 0x10000161, 8), (unique, 0x10000161, 8) COPY (const, 0x293330, 8), (unique, 0x10000149, 8) COPY (const, 0x290560, 8), (unique, 0x10000139, 8) COPY (const, 0x28ec29, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x218453, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff00, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x100001e3, 4), (unique, 0x100001e3, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x10000117, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001db, 8), (unique, 0x100001db, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (unique, 0x10000117, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001d3, 8), (unique, 0x100001d3, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x18, 8), (unique, 0x3100, 8) CAST (unique, 0x100001e7, 8), (unique, 0x100001e7, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (unique, 0xbd80, 8), (register, 0x18, 8) INT_SEXT (stack, 0xfffffffffffffed4, 4)]
[ ---  CBRANCH (ram, 0x2183f5, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x30, 4)]
[(unique, 0xbd00, 4) INT_OR (stack, 0xffffffffffffff4c, 4) , (const, 0x4, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x106, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (unique, 0xbd00, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x106, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x106, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x1000018b, 8) , (const, 0x106, 4), (unique, 0x1000018b, 8) COPY (register, 0x38, 8)]
[ ---  CALL (ram, 0x14d130, 8) , (unique, 0x3800, 8) , (register, 0x10, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) PTRADD (stack, 0xffffffffffffff00, 8) , (unique, 0x100001ff, 8) , (const, 0x1, 8), (unique, 0x100001ff, 8) CAST (unique, 0x10000179, 8), (unique, 0x10000179, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100000eb, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001f7, 8), (unique, 0x100001f7, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8), (unique, 0x100000eb, 8) INT_2COMP (unique, 0x100001ef, 8), (unique, 0x100001ef, 8) CAST (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x106, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x106, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x146, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x146, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x10000151, 8) , (unique, 0x10000131, 8) , (const, 0x54, 4) , (unique, 0x10000159, 8), (unique, 0x10000159, 8) COPY (const, 0x293330, 8), (unique, 0x10000151, 8) COPY (const, 0x2905b8, 8), (unique, 0x10000131, 8) COPY (const, 0x28ec29, 8)]
[ ---  RETURN (const, 0x1, 4)]
