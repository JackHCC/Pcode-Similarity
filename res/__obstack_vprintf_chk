[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x50, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x50, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x50, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x50, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000019e, 8), (unique, 0x1000019e, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CALL (ram, 0x18eb50, 8) , (unique, 0x3800, 8) , (const, 0x8000, 8) , (const, 0xffffffff, 8) , (const, 0x0, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[(stack, 0xffffffffffffffb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4e8060, 8)]
[ ---  CBRANCH (ram, 0x234830, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (register, 0x28, 4), (register, 0x28, 4) SUBPIECE (register, 0x28, 8) , (const, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x100000b0, 4) , (unique, 0x100000b8, 4), (unique, 0x100000b0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0x100000b8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (register, 0x28, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001b6, 8), (unique, 0x100001b6, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001ae, 8), (unique, 0x100001ae, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001a6, 8), (unique, 0x100001a6, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[(register, 0x10, 8) INT_AND (register, 0x28, 8) , (const, 0xffffffff, 8)]
[ ---  CBRANCH (ram, 0x234810, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x100001be, 8) , (const, 0x40, 8), (unique, 0x100001be, 8) CAST (register, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x185, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x185, 4)]
[ ---  CALL (ram, 0x19ccf0, 8) , (register, 0x38, 8) , (const, 0x40, 8)]
[(register, 0x10, 8) INT_ZEXT (unique, 0x100001d6, 4), (unique, 0x100001d6, 4) CAST (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0xbc80, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001ce, 8), (unique, 0x100001ce, 8) INT_ADD (register, 0x38, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001c6, 8), (unique, 0x100001c6, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  BRANCH (ram, 0x234762, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x23487a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x17e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17e, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000133, 8) , (unique, 0x1000014b, 8) , (const, 0x49, 4) , (unique, 0x10000173, 8), (unique, 0x10000173, 8) COPY (const, 0x2bb5a0, 8), (unique, 0x1000014b, 8) COPY (const, 0x2b692e, 8), (unique, 0x10000133, 8) COPY (const, 0x2b4c7a, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001da, 8), (unique, 0x100001da, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8)]
[(unique, 0x1000018e, 8) COPY (register, 0x10, 8)]
[(register, 0x28, 8) MULTIEQUAL (unique, 0x1000018e, 8) , (register, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (stack, 0xffffffffffffff4c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x190330, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (register, 0xa8, 8), (register, 0xa8, 8) CAST (unique, 0x100001e2, 8), (unique, 0x100001e2, 8) INT_SEXT (register, 0x10, 4), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23485b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (register, 0x8, 8), (register, 0x8, 8) PTRADD (stack, 0xffffffffffffff08, 8) , (unique, 0x100000d0, 8) , (const, 0x1, 8), (unique, 0x100000d0, 8) INT_2COMP (unique, 0x100001ea, 8), (unique, 0x100001ea, 8) CAST (stack, 0xfffffffffffffef8, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x9f, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x9f, 4), (register, 0xa8, 8) CAST (unique, 0x100001e2, 8), (unique, 0x100001e2, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x175, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000153, 8) , (unique, 0x10000143, 8) , (const, 0x51, 4) , (unique, 0x1000016b, 8), (unique, 0x1000016b, 8) COPY (const, 0x2bb5a0, 8), (unique, 0x10000153, 8) COPY (const, 0x2b82f0, 8), (unique, 0x10000143, 8) COPY (const, 0x2b692e, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x23483c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff00, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (stack, 0xfffffffffffffef8, 8) , (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_ZEXT (unique, 0x10000202, 4), (unique, 0x10000202, 4) CAST (register, 0x8, 4), (register, 0x8, 4) INT_SUB (unique, 0x10000128, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001fa, 8), (unique, 0x100001fa, 8) INT_ADD (register, 0x38, 8) , (const, 0x10, 8), (unique, 0x10000128, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001f2, 8), (unique, 0x100001f2, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000206, 8), (unique, 0x10000206, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x28, 8), (register, 0x28, 8) INT_SEXT (register, 0x28, 4), (register, 0x28, 4) SUBPIECE (register, 0x28, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2347ca, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x30, 4)]
[(unique, 0xbd00, 4) INT_OR (stack, 0xffffffffffffff4c, 4) , (const, 0x4, 4)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x117, 4), (stack, 0xffffffffffffff4c, 4) MULTIEQUAL (stack, 0xffffffffffffff4c, 4) , (unique, 0xbd00, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x117, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x117, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x10000196, 8) , (const, 0x117, 4), (unique, 0x10000196, 8) COPY (register, 0x38, 8)]
[ ---  CALL (ram, 0x15b390, 8) , (unique, 0x3800, 8) , (register, 0x10, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) PTRADD (stack, 0xffffffffffffff00, 8) , (unique, 0x1000021e, 8) , (const, 0x1, 8), (unique, 0x1000021e, 8) CAST (unique, 0x10000183, 8), (unique, 0x10000183, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100000f4, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000216, 8), (unique, 0x10000216, 8) INT_ADD (register, 0x38, 8) , (const, 0x18, 8), (unique, 0x100000f4, 8) INT_2COMP (unique, 0x1000020e, 8), (unique, 0x1000020e, 8) CAST (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x117, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x117, 4)]
[ ---  CBRANCH (ram, 0x234837, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000226, 8), (unique, 0x10000226, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x117, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x117, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(stack, 0xffffffffffffff4c, 4) INDIRECT (stack, 0xffffffffffffff4c, 4) , (const, 0x163, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x163, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x16c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x16c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16c, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x1000015b, 8) , (unique, 0x1000013b, 8) , (const, 0x54, 4) , (unique, 0x10000163, 8), (unique, 0x10000163, 8) COPY (const, 0x2bb5a0, 8), (unique, 0x1000015b, 8) COPY (const, 0x2b8348, 8), (unique, 0x1000013b, 8) COPY (const, 0x2b692e, 8)]
[ ---  RETURN (const, 0x1, 4)]
